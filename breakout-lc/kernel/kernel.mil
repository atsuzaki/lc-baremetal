bitdata Bool /1
  = False [ B0 ]
    -- predFalse(x :: Bit 1) = x == 0b0
  | True [ B1 ]
    -- predTrue(x :: Bit 1) = x == 0b1

-- bit pattern:
--  _

struct Context / 72
  [ regs :: Registers  {- offset=0 -}
  | segregs :: SegRegs  {- offset=32 -}
  | iframe :: IFrame  {- offset=48 -} ]
  aligned 4

struct Coord / 2
  [ row :: Stored (Ix 25)  {- offset=0 -}
  | col :: Stored (Ix 80)  {- offset=1 -} ]
  aligned 1

bitdata IA32Flags /32
  = IA32Flags [ B00_0000_0000 | id :: Bit 1 | vip :: Bit 1 | vif :: Bit 1 | ac :: Bit 1 | vm :: Bit 1 | rf :: Bit 1 | B0 | nt :: Bit 1 | iopl :: Ix 4 | ovf :: Bit 1 | df :: Bit 1 | ifl :: Bit 1 | tf :: Bit 1 | sf :: Bit 1 | zf :: Bit 1 | B0 | af :: Bit 1 | B0 | pf :: Bit 1 | B1 | cf :: Bit 1 ]
    -- predIA32Flags(x :: Bit 32) = true

-- bit pattern:
--  0000000000______0_________0_0_1_

struct IFrame / 24
  [ err :: Stored (Bit 32)  {- offset=0 -}
  | eip :: Stored (Bit 32)  {- offset=4 -}
  | cs :: Stored SegSelector  {- offset=8 -}
  | eflags :: Stored IA32Flags  {- offset=12 -}
  | esp :: Stored (Bit 32)  {- offset=16 -}
  | ss :: Stored SegSelector  {- offset=20 -} ]
  aligned 4

struct Registers / 32
  [ edi :: Stored (Bit 32)  {- offset=0 -}
  | esi :: Stored (Bit 32)  {- offset=4 -}
  | ebp :: Stored (Bit 32)  {- offset=8 -}
  | esp :: Stored (Bit 32)  {- offset=12 -}
  | ebx :: Stored (Bit 32)  {- offset=16 -}
  | edx :: Stored (Bit 32)  {- offset=20 -}
  | ecx :: Stored (Bit 32)  {- offset=24 -}
  | eax :: Stored (Bit 32)  {- offset=28 -} ]
  aligned 4

struct SegRegs / 16
  [ ds :: Stored SegSelector  {- offset=0 -}
  | es :: Stored SegSelector  {- offset=4 -}
  | fs :: Stored SegSelector  {- offset=8 -}
  | gs :: Stored SegSelector  {- offset=12 -} ]
  aligned 4

bitdata SegSelector /32
  = SegSelector [ X0000 | index :: Ix 8192 | table :: Bit 1 | rpl :: Ix 4 ]
    -- predSegSelector(x :: Bit 32) = true

-- bit pattern:
--  0000000000000000________________

data Unit
  = Unit

struct Window / 7
  [ topleft :: Coord  {- offset=0 -}
  | bottomright :: Coord  {- offset=2 -}
  | current :: Coord  {- offset=4 -}
  | attr :: Stored (Bit 8)  {- offset=6 -} ]
  aligned 8

-----------------------------------------
-- not recursive
current :: Bit 32
current <- area (Stored (Ix 2)) aligned 1

-----------------------------------------
-- not recursive
users :: Bit 32
users <- area (Array 2 Context) aligned 4

-----------------------------------------
-- not recursive
b1011 :: [] >>= [Unit]
b1011[] =
  t0 <- load1((current))
  t1 <- flagToWord((t0))
  t2 <- mul((t1, 72))
  t3 <- add((users, t2))
  returnTo((t3))

-----------------------------------------
-- not recursive
entrypoint yield :: [] >>= [Unit]
yield[] =
  b1011[]

-----------------------------------------
-- not recursive
b2569 :: [Bit 32] >>= [Unit]
b2569[t0] =
  outb((1016, t0))

-----------------------------------------
-- recursive
b258 :: [Bit 32] >>= [Unit]
b258[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  b1206[t2, 0, t0]
b1206 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1206[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b258[t2]
    else b2569[t2]

-----------------------------------------
-- not recursive
console :: Bit 32
console <- area Window aligned 8

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
b295 :: [] >>= [Unit]
b295[] =
  return Unit

-----------------------------------------
-- recursive
b1212 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1212[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b1212[t11, t1, t2, t3]
    else b295[]

-----------------------------------------
-- recursive
b1214 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1214[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- mul((t2, 160))
  t9 <- add((t8, t5))
  t10 <- add((t9, 753664))
  t11 <- load16((t7))
  t12 <- store16((t10, t11))
  t13 <- add((t0, 1))
  t14 <- primUle((t13, t1))
  if t14
    then b1214[t13, t1, t2, t3]
    else b295[]

-----------------------------------------
-- recursive
b3896 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3896[t0, t1, t2, t3, t4, t5] =
  t6 <- b1214[t4, t3, t1, t0]
  t7 <- add((t0, 1))
  t8 <- primUle((t7, t2))
  if t8
    then b3896[t7, t0, t2, t3, t4, t5]
    else b1212[t4, t3, t5, t2]

-----------------------------------------
-- not recursive
b1431 :: [] >>= [Unit]
b1431[] =
  t0 <- load8((console))
  t1 <- add((console, 1))
  t2 <- load8((t1))
  t3 <- add((console, 2))
  t4 <- load8((t3))
  t5 <- add((console, 3))
  t6 <- load8((t5))
  t7 <- add((console, 6))
  t8 <- load8((t7))
  t9 <- add((t0, 1))
  t10 <- primUle((t9, t4))
  if t10
    then b3896[t9, t0, t4, t6, t2, t8]
    else b1212[t2, t6, t8, t4]

-----------------------------------------
-- not recursive
b3905 :: [Bit 32] >>= [Unit]
b3905[t0] =
  t1 <- add((console, 4))
  store8((t1, t0))

-----------------------------------------
-- not recursive
b1429 :: [Bit 32] >>= [Unit]
b1429[t0] =
  t1 <- add((console, 1))
  t2 <- add((console, 5))
  t3 <- load8((t1))
  t4 <- store8((t2, t3))
  t5 <- add((console, 2))
  t6 <- load8((t5))
  t7 <- add((t0, 1))
  t8 <- primUle((t7, t6))
  if t8
    then b3905[t7]
    else b1431[]

-----------------------------------------
-- not recursive
b3909 :: [Bit 32] >>= [Unit]
b3909[t0] =
  t1 <- add((console, 5))
  store8((t1, t0))

-----------------------------------------
-- not recursive
b1434 :: [Bit 32, Bit 32] >>= [Unit]
b1434[t0, t1] =
  t2 <- add((console, 5))
  t3 <- load8((t2))
  t4 <- add((console, 6))
  t5 <- load8((t4))
  t6 <- mul((t1, 160))
  t7 <- mul((t3, 2))
  t8 <- add((t6, t7))
  t9 <- add((t8, 753664))
  t10 <- and((t0, 255))
  t11 <- shl((t5, 8))
  t12 <- or((t10, t11))
  t13 <- store16((t9, t12))
  t14 <- add((console, 3))
  t15 <- load8((t14))
  t16 <- add((t3, 1))
  t17 <- primUle((t16, t15))
  if t17
    then b3909[t16]
    else b1429[t1]

-----------------------------------------
-- not recursive
b1432 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1432[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1429[t2]
    else b1434[t0, t2]

-----------------------------------------
-- not recursive
b1427 :: [Bit 32] >>= [Unit]
b1427[t0] =
  t1 <- add((console, 4))
  t2 <- load8((t1))
  t3 <- primEq((t0, 13))
  if t3
    then b1429[t2]
    else b1432[t0, 10, t2]

-----------------------------------------
-- not recursive
b1730 :: [Bit 32, Bit 32] >>= [Unit]
b1730[t0, t1] =
  t2 <- b1427[t0]
  returnTo((t1))

-----------------------------------------
-- not recursive
b1729 :: [Bit 32, Bit 32] >>= [Unit]
b1729[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, 13]
  t5 <- b1427[t0]
  returnTo((t1))

-----------------------------------------
-- not recursive
entrypoint kputc :: [] >>= [Unit]
kputc[] =
  t0 <- load1((current))
  t1 <- flagToWord((t0))
  t2 <- mul((t1, 72))
  t3 <- add((users, t2))
  t4 <- add((t3, 28))
  t5 <- load32((t4))
  t6 <- inb((1021))
  t7 <- and((t6, 96))
  t8 <- b1206[t7, 0, t5]
  t9 <- primEq((t5, 10))
  if t9
    then b1729[t5, t3]
    else b1730[t5, t3]

-----------------------------------------
-- not recursive
external keyb_layout :: Bit 32

-----------------------------------------
-- not recursive
keyDown :: Bit 32
keyDown <- area (Stored (Bit 8)) aligned 1

-----------------------------------------
-- not recursive
b888 :: [Bit 32] >>= [Unit]
b888[t0] =
  t1 <- and((t0, 127))
  t2 <- add((keyb_layout, t1))
  t3 <- load8((t2))
  t4 <- load16((753702))
  t5 <- and((t4, 65280))
  t6 <- or((t5, t3))
  t7 <- store16((753702, t6))
  t8 <- store8((keyDown, t3))
  t9 <- load1((current))
  t10 <- flagToWord((t9))
  t11 <- mul((t10, 72))
  t12 <- add((users, t11))
  returnTo((t12))

-----------------------------------------
-- not recursive
entrypoint keyboardInterrupt :: [] >>= [Unit]
keyboardInterrupt[] =
  t0 <- inb((33))
  t1 <- or((t0, 2))
  t2 <- outb((33, t1))
  t3 <- outb((32, 97))
  t4 <- inb((33))
  t5 <- and((t4, -3))
  t6 <- outb((33, t5))
  t7 <- inb((96))
  t8 <- lshr((t7, 7))
  t9 <- primEq((t8, 0))
  if t9
    then b888[t7]
    else b1011[]

-----------------------------------------
-- not recursive
ticks :: Bit 32
ticks <- area (Stored (Bit 32)) aligned 4

-----------------------------------------
-- not recursive
b918 :: [Bit 32] >>= [Bit 32]
b918[t0] =
  t1 <- add((t0, 87))
  and((t1, 255))

-----------------------------------------
-- not recursive
b917 :: [Bit 32] >>= [Bit 32]
b917[t0] =
  t1 <- add((t0, 48))
  and((t1, 255))

-----------------------------------------
-- not recursive
b1242 :: [Bit 32, Bit 32] >>= [Bit 32]
b1242[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b917[t0]
    else b918[t0]

-----------------------------------------
-- not recursive
spinner :: Bit 32
spinner <- area (Array 4 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- not recursive
spinpos :: Bit 32
spinpos <- area (Stored (Ix 4)) aligned 1

-----------------------------------------
-- not recursive
b1604 :: [] >>= [Unit]
b1604[] =
  t0 <- load8((spinpos))
  t1 <- add((spinner, t0))
  t2 <- load8((t1))
  t3 <- add((t0, 1))
  t4 <- and((t3, 3))
  t5 <- store8((spinpos, t4))
  t6 <- load16((753822))
  t7 <- and((t6, 65280))
  t8 <- or((t7, t2))
  t9 <- store16((753822, t8))
  t10 <- load1((current))
  t11 <- flagToWord((t10))
  t12 <- mul((t11, 72))
  t13 <- add((users, t12))
  returnTo((t13))

-----------------------------------------
-- not recursive
b2290 :: [] >>= [Unit]
b2290[] =
  t0 <- store1((current, flag0))
  b1604[]

-----------------------------------------
-- not recursive
b3939 :: [Bit 32] >>= [Unit]
b3939[t0] =
  t1 <- wordToFlag((t0))
  t2 <- store1((current, t1))
  b1604[]

-----------------------------------------
-- not recursive
b880 :: [] >>= [Unit]
b880[] =
  t0 <- load1((current))
  t1 <- flagToWord((t0))
  t2 <- add((t1, 1))
  t3 <- primUle((t2, 1))
  if t3
    then b3939[t2]
    else b2290[]

-----------------------------------------
-- not recursive
b882 :: [Bit 32] >>= [Unit]
b882[t0] =
  t1 <- and((t0, 15))
  t2 <- primEq((t1, 0))
  if t2
    then b880[]
    else b1011[]

-----------------------------------------
-- not recursive
pos :: Bit 32
pos <- area (Stored (Ix 80)) aligned 1

-----------------------------------------
-- not recursive
b829 :: [Bit 32, Bit 32] >>= [Unit]
b829[t0, t1] =
  t2 <- mul((t0, 2))
  t3 <- add((t2, 753664))
  t4 <- load16((t3))
  t5 <- and((t1, 255))
  t6 <- and((t4, 65280))
  t7 <- or((t6, t5))
  store16((t3, t7))

-----------------------------------------
-- not recursive
dir :: Bit 32
dir <- area (Stored Bool) aligned 1

-----------------------------------------
-- not recursive
b1272 :: [Bit 32, Bit 32] >>= [Unit]
b1272[t0, t1] =
  t2 <- b829[t0, 124]
  t3 <- store1((dir, flag1))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b880[]
    else b1011[]

-----------------------------------------
-- not recursive
b3944 :: [Bit 32, Bit 32] >>= [Unit]
b3944[t0, t1] =
  t2 <- b829[t0, 60]
  t3 <- store8((pos, t0))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b880[]
    else b1011[]

-----------------------------------------
-- not recursive
b3946 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3946[t0, t1, t2, t3] =
  t4 <- sub((t2, t0))
  t5 <- primSle((t1, t4))
  if t5
    then b3944[t4, t3]
    else b1272[t2, t3]

-----------------------------------------
-- not recursive
b1269 :: [Bit 32, Bit 32] >>= [Unit]
b1269[t0, t1] =
  t2 <- b829[t0, 124]
  t3 <- store1((dir, flag0))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b880[]
    else b1011[]

-----------------------------------------
-- not recursive
b3949 :: [Bit 32, Bit 32] >>= [Unit]
b3949[t0, t1] =
  t2 <- b829[t0, 62]
  t3 <- store8((pos, t0))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b880[]
    else b1011[]

-----------------------------------------
-- not recursive
b3951 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3951[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b3949[t4, t3]
    else b1269[t1, t3]

-----------------------------------------
-- not recursive
b1266 :: [Bit 32] >>= [Unit]
b1266[t0] =
  t1 <- load8((pos))
  t2 <- b829[t1, 32]
  t3 <- load1((dir))
  if t3
    then b3951[1, t1, 68, t0]
    else b3946[1, 46, t1, t0]

-----------------------------------------
-- not recursive
b1608 :: [Bit 32] >>= [Unit]
b1608[t0] =
  t1 <- and((t0, 3))
  t2 <- primEq((t1, 0))
  if t2
    then b1266[t0]
    else b882[t0]

-----------------------------------------
-- recursive
b3954 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3954[t0, t1, t2] =
  t3 <- lshr((t1, 4))
  t4 <- mul((t0, 2))
  t5 <- add((t4, 753664))
  t6 <- load16((t5))
  t7 <- and((t3, 15))
  t8 <- b1242[t7, 9]
  t9 <- and((t6, 65280))
  t10 <- or((t9, t8))
  t11 <- store16((t5, t10))
  t12 <- add((t0, -1))
  t13 <- primSle((70, t12))
  if t13
    then b3954[t12, t3, t2]
    else b1608[t2]

-----------------------------------------
-- not recursive
entrypoint timerInterrupt :: [] >>= [Unit]
timerInterrupt[] =
  t0 <- inb((33))
  t1 <- or((t0, 1))
  t2 <- outb((33, t1))
  t3 <- outb((32, 96))
  t4 <- inb((33))
  t5 <- and((t4, -2))
  t6 <- outb((33, t5))
  t7 <- load32((ticks))
  t8 <- add((t7, 1))
  t9 <- store32((ticks, t8))
  t10 <- load16((753818))
  t11 <- and((t7, 15))
  t12 <- b1242[t11, 9]
  t13 <- and((t10, 65280))
  t14 <- or((t13, t12))
  t15 <- store16((753818, t14))
  t16 <- lshr((t7, 4))
  t17 <- load16((753816))
  t18 <- and((t16, 15))
  t19 <- b1242[t18, 9]
  t20 <- and((t17, 65280))
  t21 <- or((t20, t19))
  t22 <- store16((753816, t21))
  b3954[75, t16, t7]

-----------------------------------------
-- not recursive
str54 :: Bit 32
str54 <- "Exception 0x"

-----------------------------------------
-- not recursive
itoaBuf :: Bit 32
itoaBuf <- area (Array 32 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- not recursive
b1424 :: [Bit 32] >>= [Unit]
b1424[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  t3 <- b1206[t2, 0, 13]
  t4 <- add((console, 4))
  t5 <- load8((t4))
  t6 <- primEq((t0, 13))
  if t6
    then b1429[t5]
    else b1432[t0, 10, t5]

-----------------------------------------
-- not recursive
b1436 :: [Bit 32] >>= [Unit]
b1436[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  t3 <- b1206[t2, 0, t0]
  t4 <- primEq((t0, 10))
  if t4
    then b1424[t0]
    else b1427[t0]

-----------------------------------------
-- not recursive
b2061 :: [] >>= [Unit]
b2061[] =
  t0 <- load8((itoaBuf))
  t1 <- b1436[t0]
  return Unit

-----------------------------------------
-- recursive
b3920 :: [Bit 32, Bit 32] >>= [Unit]
b3920[t0, t1] =
  t2 <- b1436[t1]
  b3918[1, t0, 0, t1]
b3918 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3918[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b3920[t4, t3]
    else b295[]

-----------------------------------------
-- not recursive
b3927 :: [Bit 32, Bit 32] >>= [Unit]
b3927[t0, t1] =
  t2 <- b1436[t1]
  t3 <- b3918[1, t0, 0, t1]
  t4 <- load8((itoaBuf))
  t5 <- b1436[t4]
  return Unit

-----------------------------------------
-- not recursive
b3925 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3925[t0, t1, t2] =
  t3 <- add((t1, t0))
  t4 <- primUle((t3, t1))
  if t4
    then b3927[t3, t2]
    else b2061[]

-----------------------------------------
-- recursive
b2001 :: [Bit 32] >>= [Unit]
b2001[t0] =
  t1 <- add((itoaBuf, t0))
  t2 <- load8((t1))
  t3 <- b1436[t2]
  t4 <- add((t0, -1))
  t5 <- primSle((0, t4))
  if t5
    then b2001[t4]
    else b295[]

-----------------------------------------
-- not recursive
b2004 :: [Bit 32, Bit 32] >>= [Unit]
b2004[t0, t1] =
  t2 <- b3918[1, t1, 0, t0]
  b2001[t1]

-----------------------------------------
-- recursive
b3931 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3931[t0, t1, t2, t3] =
  t4 <- lshr((t1, 4))
  t5 <- primEq((t4, 0))
  if t5
    then b2004[t3, t2]
    else b2003[t4, t0, t3]
b2003 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2003[t0, t1, t2] =
  t3 <- add((itoaBuf, t1))
  t4 <- and((t0, 15))
  t5 <- b1242[t4, 9]
  t6 <- store8((t3, t5))
  t7 <- add((t1, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b3931[t7, t0, t1, t2]
    else b2004[t2, t1]

-----------------------------------------
-- not recursive
b3936 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3936[t0, t1, t2] =
  t3 <- lshr((t1, 4))
  t4 <- primEq((t3, 0))
  if t4
    then b3925[1, 0, t2]
    else b2003[t3, t0, t2]

-----------------------------------------
-- not recursive
b3934 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3934[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b3936[t5, t3, t4]
    else b3925[1, 0, t4]

-----------------------------------------
-- not recursive
str55 :: Bit 32
str55 <- ", frame=0x"

-----------------------------------------
-- not recursive
str56 :: Bit 32
str56 <- "\n"

-----------------------------------------
-- recursive
b3781 :: [Bit 32, Bit 32] >>= [Unit]
b3781[t0, t1] =
  t2 <- b1427[t0]
  b2906[t1]
b3780 :: [Bit 32, Bit 32] >>= [Unit]
b3780[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, 13]
  t5 <- b1427[t0]
  b2906[t1]
b2906 :: [Bit 32] >>= [Unit]
b2906[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b295[]
    else b2908[t1, t0]
b2908 :: [Bit 32, Bit 32] >>= [Unit]
b2908[t0, t1] =
  t2 <- add((t1, 1))
  b2915[t0, t2]
b2915 :: [Bit 32, Bit 32] >>= [Unit]
b2915[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b3780[t0, t1]
    else b3781[t0, t1]

-----------------------------------------
-- not recursive
b2918 :: [Bit 32] >>= [Unit]
b2918[t0] =
  t1 <- add((str56, 1))
  b2915[t0, t1]

-----------------------------------------
-- not recursive
b1346 :: [Bit 32] >>= [Unit]
b1346[t0] =
  t1 <- and((t0, 15))
  t2 <- b1242[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b3934[1, 0, 31, t0, 32]
  t5 <- load8((str56))
  t6 <- primEq((t5, 0))
  if t6
    then b295[]
    else b2918[t5]

-----------------------------------------
-- recursive
b2928 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2928[t0, t1, t2] =
  t3 <- b1427[t0]
  b2919[t1, t2]
b2926 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2926[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b2919[t1, t2]
b2919 :: [Bit 32, Bit 32] >>= [Unit]
b2919[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1346[t1]
    else b2921[t2, t0, t1]
b2921 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2921[t0, t1, t2] =
  t3 <- add((t1, 1))
  b2923[t0, t3, t2]
b2923 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2923[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b2926[t0, t1, t2]
    else b2928[t0, t1, t2]

-----------------------------------------
-- not recursive
b2931 :: [Bit 32, Bit 32] >>= [Unit]
b2931[t0, t1] =
  t2 <- add((str55, 1))
  b2923[t0, t2, t1]

-----------------------------------------
-- not recursive
b1350 :: [Bit 32, Bit 32] >>= [Unit]
b1350[t0, t1] =
  t2 <- and((t0, 15))
  t3 <- b1242[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b3934[1, 0, 31, t0, 32]
  t6 <- load8((str55))
  t7 <- primEq((t6, 0))
  if t7
    then b1346[t1]
    else b2931[t6, t1]

-----------------------------------------
-- recursive
b2941 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2941[t0, t1, t2, t3] =
  t4 <- b1427[t0]
  b2932[t1, t2, t3]
b2939 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2939[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, 13]
  t7 <- b1427[t0]
  b2932[t1, t2, t3]
b2932 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2932[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b1350[t2, t1]
    else b2934[t3, t0, t1, t2]
b2934 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2934[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b2936[t0, t4, t3, t2]
b2936 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2936[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b2939[t0, t1, t3, t2]
    else b2941[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b2944 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2944[t0, t1, t2] =
  t3 <- add((str54, 1))
  b2936[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
entrypoint unhandled :: [Bit 32, Bit 32] >>= [Unit]
unhandled[t0, t1] =
  t2 <- load8((str54))
  t3 <- primEq((t2, 0))
  if t3
    then b1350[t0, t1]
    else b2944[t2, t1, t0]

-----------------------------------------
-- not recursive
s208 :: Unit
s208 <-
  Unit()

-----------------------------------------
-- not recursive
b2224 :: [] >>= [Unit]
b2224[] =
  return s208

-----------------------------------------
-- recursive
b2554 :: [Bit 32, Bit 32] >>= [Unit]
b2554[t0, t1] =
  t2 <- store8((t0, 0))
  t3 <- add((t1, 1))
  t4 <- add((t0, 1))
  b2553[t4, t3]
b2553 :: [Bit 32, Bit 32] >>= [Unit]
b2553[t0, t1] =
  t2 <- primUlt((t1, 32))
  if t2
    then b2554[t0, t1]
    else b2224[]

-----------------------------------------
-- recursive
b1280 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1280[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b1280[t11, t1, t2, t3]
    else b295[]

-----------------------------------------
-- recursive
b1282 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1282[t0, t1, t2, t3, t4] =
  t5 <- b1280[t4, t3, t2, t0]
  b3972[1, t0, t1, t4, t3, t2]
b3972 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3972[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- primUle((t6, t2))
  if t7
    then b1282[t6, t2, t5, t4, t3]
    else b295[]

-----------------------------------------
-- not recursive
str44 :: Bit 32
str44 <- " Last key pressed:"

-----------------------------------------
-- not recursive
str10 :: Bit 32
str10 <- "Headers:\n"

-----------------------------------------
-- not recursive
str0 :: Bit 32
str0 <- " "

-----------------------------------------
-- not recursive
str11 :: Bit 32
str11 <- "header"

-----------------------------------------
-- not recursive
str1 :: Bit 32
str1 <- "["

-----------------------------------------
-- recursive
b3975 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3975[t0, t1, t2, t3] =
  t4 <- nzdiv((t1, 10))
  t5 <- primEq((t4, 0))
  if t5
    then b2004[t3, t2]
    else b2010[t4, t0, t3]
b2010 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2010[t0, t1, t2] =
  t3 <- add((itoaBuf, t1))
  t4 <- nzrem((t0, 10))
  t5 <- b1242[t4, 9]
  t6 <- store8((t3, t5))
  t7 <- add((t1, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b3975[t7, t0, t1, t2]
    else b2004[t2, t1]

-----------------------------------------
-- not recursive
b3983 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3983[t0, t1, t2] =
  t3 <- nzdiv((t1, 10))
  t4 <- primEq((t3, 0))
  if t4
    then b3925[1, 0, t2]
    else b2010[t3, t0, t2]

-----------------------------------------
-- not recursive
b3981 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3981[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b3983[t5, t3, t4]
    else b3925[1, 0, t4]

-----------------------------------------
-- not recursive
str2 :: Bit 32
str2 <- "]: "

-----------------------------------------
-- not recursive
str4 :: Bit 32
str4 <- "[0x"

-----------------------------------------
-- not recursive
str5 :: Bit 32
str5 <- "-0x"

-----------------------------------------
-- not recursive
str6 :: Bit 32
str6 <- "], entry 0x"

-----------------------------------------
-- not recursive
b1357 :: [Bit 32] >>= [Unit]
b1357[t0] =
  t1 <- add((t0, 8))
  t2 <- load32((t1))
  t3 <- and((t2, 15))
  t4 <- b1242[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- lshr((t2, 4))
  t7 <- primEq((t6, 0))
  if t7
    then b3925[1, 0, 32]
    else b2003[t6, 1, 32]

-----------------------------------------
-- recursive
b2957 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2957[t0, t1, t2] =
  t3 <- b1427[t0]
  b2948[t1, t2]
b2955 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2955[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b2948[t1, t2]
b2948 :: [Bit 32, Bit 32] >>= [Unit]
b2948[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1357[t1]
    else b2950[t2, t0, t1]
b2950 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2950[t0, t1, t2] =
  t3 <- add((t1, 1))
  b2952[t0, t3, t2]
b2952 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2952[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b2955[t0, t1, t2]
    else b2957[t0, t1, t2]

-----------------------------------------
-- not recursive
b2960 :: [Bit 32, Bit 32] >>= [Unit]
b2960[t0, t1] =
  t2 <- add((str6, 1))
  b2952[t0, t2, t1]

-----------------------------------------
-- not recursive
b1359 :: [Bit 32] >>= [Unit]
b1359[t0] =
  t1 <- add((t0, 4))
  t2 <- load32((t1))
  t3 <- and((t2, 15))
  t4 <- b1242[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- b3934[1, 0, 31, t2, 32]
  t7 <- load8((str6))
  t8 <- primEq((t7, 0))
  if t8
    then b1357[t0]
    else b2960[t7, t0]

-----------------------------------------
-- recursive
b2970 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2970[t0, t1, t2] =
  t3 <- b1427[t0]
  b2961[t1, t2]
b2968 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2968[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b2961[t1, t2]
b2961 :: [Bit 32, Bit 32] >>= [Unit]
b2961[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1359[t1]
    else b2963[t2, t0, t1]
b2963 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2963[t0, t1, t2] =
  t3 <- add((t1, 1))
  b2965[t0, t3, t2]
b2965 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2965[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b2968[t0, t1, t2]
    else b2970[t0, t1, t2]

-----------------------------------------
-- not recursive
b2973 :: [Bit 32, Bit 32] >>= [Unit]
b2973[t0, t1] =
  t2 <- add((str5, 1))
  b2965[t0, t2, t1]

-----------------------------------------
-- not recursive
b1361 :: [Bit 32] >>= [Unit]
b1361[t0] =
  t1 <- load32((t0))
  t2 <- and((t1, 15))
  t3 <- b1242[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b3934[1, 0, 31, t1, 32]
  t6 <- load8((str5))
  t7 <- primEq((t6, 0))
  if t7
    then b1359[t0]
    else b2973[t6, t0]

-----------------------------------------
-- recursive
b2983 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2983[t0, t1, t2] =
  t3 <- b1427[t0]
  b2974[t1, t2]
b2981 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2981[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b2974[t1, t2]
b2974 :: [Bit 32, Bit 32] >>= [Unit]
b2974[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1361[t1]
    else b2976[t2, t0, t1]
b2976 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2976[t0, t1, t2] =
  t3 <- add((t1, 1))
  b2978[t0, t3, t2]
b2978 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2978[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b2981[t0, t1, t2]
    else b2983[t0, t1, t2]

-----------------------------------------
-- not recursive
b2996 :: [Bit 32, Bit 32] >>= [Unit]
b2996[t0, t1] =
  t2 <- add((str4, 1))
  b2978[t0, t2, t1]

-----------------------------------------
-- not recursive
b2994 :: [Bit 32] >>= [Unit]
b2994[t0] =
  t1 <- load8((str4))
  t2 <- primEq((t1, 0))
  if t2
    then b1361[t0]
    else b2996[t1, t0]

-----------------------------------------
-- not recursive
str3 :: Bit 32
str3 <- "\n"

-----------------------------------------
-- not recursive
b1363 :: [Bit 32] >>= [Bit 32]
b1363[t0] =
  add((t0, 1))

-----------------------------------------
-- recursive
b2993 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b2993[t0, t1, t2] =
  t3 <- b1427[t0]
  b2984[t1, t2]
b2991 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b2991[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b2984[t1, t2]
b2984 :: [Bit 32, Bit 32] >>= [Bit 32]
b2984[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1363[t1]
    else b2986[t2, t0, t1]
b2986 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b2986[t0, t1, t2] =
  t3 <- add((t1, 1))
  b2988[t0, t3, t2]
b2988 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b2988[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b2991[t0, t1, t2]
    else b2993[t0, t1, t2]

-----------------------------------------
-- not recursive
b2999 :: [Bit 32, Bit 32] >>= [Bit 32]
b2999[t0, t1] =
  t2 <- add((str3, 1))
  b2988[t0, t2, t1]

-----------------------------------------
-- not recursive
b1833 :: [Bit 32, Bit 32] >>= [Bit 32]
b1833[t0, t1] =
  t2 <- b2994[t0]
  t3 <- load8((str3))
  t4 <- primEq((t3, 0))
  if t4
    then b1363[t1]
    else b2999[t3, t1]

-----------------------------------------
-- recursive
b3009 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3009[t0, t1, t2, t3] =
  t4 <- b1427[t0]
  b3000[t1, t2, t3]
b3007 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3007[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, 13]
  t7 <- b1427[t0]
  b3000[t1, t2, t3]
b3000 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3000[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b1833[t2, t1]
    else b3002[t3, t0, t1, t2]
b3002 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3002[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3004[t0, t4, t3, t2]
b3004 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3004[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3007[t0, t1, t3, t2]
    else b3009[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b3012 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3012[t0, t1, t2] =
  t3 <- add((str2, 1))
  b3004[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b1832 :: [Bit 32, Bit 32] >>= [Bit 32]
b1832[t0, t1] =
  t2 <- nzrem((t0, 10))
  t3 <- b1242[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b3981[1, 0, 31, t0, 32]
  t6 <- load8((str2))
  t7 <- primEq((t6, 0))
  if t7
    then b1833[t1, t0]
    else b3012[t6, t0, t1]

-----------------------------------------
-- recursive
b3022 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3022[t0, t1, t2, t3] =
  t4 <- b1427[t0]
  b3013[t1, t2, t3]
b3020 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3020[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, 13]
  t7 <- b1427[t0]
  b3013[t1, t2, t3]
b3013 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3013[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b1832[t2, t1]
    else b3015[t3, t0, t1, t2]
b3015 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3015[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3017[t0, t4, t3, t2]
b3017 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3017[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3020[t0, t1, t3, t2]
    else b3022[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b3025 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3025[t0, t1, t2] =
  t3 <- add((str1, 1))
  b3017[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b3023 :: [Bit 32, Bit 32] >>= [Bit 32]
b3023[t0, t1] =
  t2 <- load8((str1))
  t3 <- primEq((t2, 0))
  if t3
    then b1832[t1, t0]
    else b3025[t2, t0, t1]

-----------------------------------------
-- recursive
b3028 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3028[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3030[t0, t4, t3, t2]
b3030 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3030[t0, t1, t2, t3] =
  t4 <- b1436[t0]
  t5 <- load8((t1))
  t6 <- primEq((t5, 0))
  if t6
    then b3023[t2, t3]
    else b3028[t5, t1, t3, t2]

-----------------------------------------
-- not recursive
b3033 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3033[t0, t1, t2] =
  t3 <- add((str11, 1))
  b3030[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b3031 :: [Bit 32, Bit 32] >>= [Bit 32]
b3031[t0, t1] =
  t2 <- load8((str11))
  t3 <- primEq((t2, 0))
  if t3
    then b3023[t1, t0]
    else b3033[t2, t0, t1]

-----------------------------------------
-- recursive
b3788 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3788[t0, t1, t2, t3] =
  t4 <- b1427[t0]
  b3034[t1, t2, t3]
b3787 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3787[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, 13]
  t7 <- b1427[t0]
  b3034[t1, t2, t3]
b3034 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3034[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b3031[t1, t2]
    else b3036[t3, t0, t1, t2]
b3036 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3036[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3043[t0, t4, t2, t3]
b3043 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3043[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3787[t0, t1, t2, t3]
    else b3788[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b423 :: [Bit 32] >>= [Bit 32]
b423[t0] =
  return t0

-----------------------------------------
-- recursive
b3792 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3792[t0, t1, t2, t3, t4] =
  t5 <- add((str0, 1))
  t6 <- b3043[t0, t5, t4, t1]
  b3049[t2, t3, 12, t6]
b3051 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3051[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- load8((str0))
  t7 <- primEq((t6, 0))
  if t7
    then b3791[t1, t3, t5, t4]
    else b3792[t6, t1, t5, t4, t3]
b3791 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3791[t0, t1, t2, t3] =
  t4 <- b3031[t1, t0]
  b3049[t2, t3, 12, t4]
b3049 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3049[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b423[t3]
    else b3051[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
str12 :: Bit 32
str12 <- "Memory map:\n"

-----------------------------------------
-- not recursive
str13 :: Bit 32
str13 <- "mmap"

-----------------------------------------
-- not recursive
str7 :: Bit 32
str7 <- "[0x"

-----------------------------------------
-- not recursive
str8 :: Bit 32
str8 <- "-0x"

-----------------------------------------
-- not recursive
str9 :: Bit 32
str9 <- "]"

-----------------------------------------
-- not recursive
b3084 :: [Bit 32] >>= [Unit]
b3084[t0] =
  t1 <- add((str9, 1))
  b2915[t0, t1]

-----------------------------------------
-- not recursive
b1371 :: [Bit 32] >>= [Unit]
b1371[t0] =
  t1 <- add((t0, 4))
  t2 <- load32((t1))
  t3 <- and((t2, 15))
  t4 <- b1242[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- b3934[1, 0, 31, t2, 32]
  t7 <- load8((str9))
  t8 <- primEq((t7, 0))
  if t8
    then b295[]
    else b3084[t7]

-----------------------------------------
-- recursive
b3094 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3094[t0, t1, t2] =
  t3 <- b1427[t0]
  b3085[t1, t2]
b3092 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3092[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b3085[t1, t2]
b3085 :: [Bit 32, Bit 32] >>= [Unit]
b3085[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1371[t1]
    else b3087[t2, t0, t1]
b3087 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3087[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3089[t0, t3, t2]
b3089 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3089[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3092[t0, t1, t2]
    else b3094[t0, t1, t2]

-----------------------------------------
-- not recursive
b3112 :: [Bit 32, Bit 32] >>= [Unit]
b3112[t0, t1] =
  t2 <- add((str8, 1))
  b3089[t0, t2, t1]

-----------------------------------------
-- not recursive
b1373 :: [Bit 32] >>= [Unit]
b1373[t0] =
  t1 <- load32((t0))
  t2 <- and((t1, 15))
  t3 <- b1242[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b3934[1, 0, 31, t1, 32]
  t6 <- load8((str8))
  t7 <- primEq((t6, 0))
  if t7
    then b1371[t0]
    else b3112[t6, t0]

-----------------------------------------
-- recursive
b3122 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3122[t0, t1, t2] =
  t3 <- b1427[t0]
  b3113[t1, t2]
b3115 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3115[t0, t1, t2] =
  t3 <- add((t1, 1))
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3120[t0, t3, t2]
    else b3122[t0, t3, t2]
b3120 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3120[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b3113[t1, t2]
b3113 :: [Bit 32, Bit 32] >>= [Unit]
b3113[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1373[t1]
    else b3115[t2, t0, t1]

-----------------------------------------
-- recursive
b3070 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3070[t0, t1, t2] =
  t3 <- b1427[t0]
  b3061[t1, t2]
b3068 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3068[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b3061[t1, t2]
b3061 :: [Bit 32, Bit 32] >>= [Bit 32]
b3061[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1363[t1]
    else b3063[t2, t0, t1]
b3063 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3063[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3065[t0, t3, t2]
b3065 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3065[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3068[t0, t1, t2]
    else b3070[t0, t1, t2]

-----------------------------------------
-- not recursive
b3125 :: [Bit 32, Bit 32] >>= [Bit 32]
b3125[t0, t1] =
  t2 <- add((str3, 1))
  b3065[t0, t2, t1]

-----------------------------------------
-- not recursive
b3137 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3137[t0, t1, t2, t3] =
  t4 <- b1427[t0]
  t5 <- b3113[t1, t2]
  t6 <- load8((str3))
  t7 <- primEq((t6, 0))
  if t7
    then b1363[t3]
    else b3125[t6, t3]

-----------------------------------------
-- not recursive
b3135 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3135[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, 13]
  t7 <- b1427[t0]
  t8 <- b3113[t1, t2]
  t9 <- load8((str3))
  t10 <- primEq((t9, 0))
  if t10
    then b1363[t3]
    else b3125[t9, t3]

-----------------------------------------
-- not recursive
b3131 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3131[t0, t1, t2] =
  t3 <- add((str7, 1))
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3135[t0, t3, t2, t1]
    else b3137[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b3109 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3109[t0, t1, t2, t3] =
  t4 <- b1427[t0]
  t5 <- b3085[t1, t2]
  t6 <- load8((str3))
  t7 <- primEq((t6, 0))
  if t7
    then b1363[t3]
    else b3125[t6, t3]

-----------------------------------------
-- not recursive
b3107 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3107[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, 13]
  t7 <- b1427[t0]
  t8 <- b3085[t1, t2]
  t9 <- load8((str3))
  t10 <- primEq((t9, 0))
  if t10
    then b1363[t3]
    else b3125[t9, t3]

-----------------------------------------
-- not recursive
b3103 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3103[t0, t1, t2] =
  t3 <- add((str8, 1))
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3107[t0, t3, t2, t1]
    else b3109[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b3079 :: [Bit 32, Bit 32] >>= [Bit 32]
b3079[t0, t1] =
  t2 <- add((str9, 1))
  t3 <- b2915[t0, t2]
  t4 <- load8((str3))
  t5 <- primEq((t4, 0))
  if t5
    then b1363[t1]
    else b3125[t4, t1]

-----------------------------------------
-- not recursive
b3071 :: [Bit 32] >>= [Bit 32]
b3071[t0] =
  t1 <- load8((str3))
  t2 <- primEq((t1, 0))
  if t2
    then b1363[t0]
    else b3125[t1, t0]

-----------------------------------------
-- not recursive
b2115 :: [Bit 32, Bit 32] >>= [Bit 32]
b2115[t0, t1] =
  t2 <- add((t0, 4))
  t3 <- load32((t2))
  t4 <- and((t3, 15))
  t5 <- b1242[t4, 9]
  t6 <- store8((itoaBuf, t5))
  t7 <- b3934[1, 0, 31, t3, 32]
  t8 <- load8((str9))
  t9 <- primEq((t8, 0))
  if t9
    then b3071[t1]
    else b3079[t8, t1]

-----------------------------------------
-- not recursive
b2114 :: [Bit 32, Bit 32] >>= [Bit 32]
b2114[t0, t1] =
  t2 <- load32((t0))
  t3 <- and((t2, 15))
  t4 <- b1242[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- b3934[1, 0, 31, t2, 32]
  t7 <- load8((str8))
  t8 <- primEq((t7, 0))
  if t8
    then b2115[t0, t1]
    else b3103[t7, t1, t0]

-----------------------------------------
-- not recursive
b3129 :: [Bit 32, Bit 32] >>= [Bit 32]
b3129[t0, t1] =
  t2 <- load8((str7))
  t3 <- primEq((t2, 0))
  if t3
    then b2114[t1, t0]
    else b3131[t2, t0, t1]

-----------------------------------------
-- recursive
b3147 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3147[t0, t1, t2, t3] =
  t4 <- b1427[t0]
  b3138[t1, t2, t3]
b3145 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3145[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, 13]
  t7 <- b1427[t0]
  b3138[t1, t2, t3]
b3138 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3138[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b3129[t1, t2]
    else b3140[t3, t0, t1, t2]
b3140 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3140[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3142[t0, t4, t3, t2]
b3142 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3142[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3145[t0, t1, t3, t2]
    else b3147[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b3150 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3150[t0, t1, t2] =
  t3 <- add((str2, 1))
  b3142[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b1896 :: [Bit 32, Bit 32] >>= [Bit 32]
b1896[t0, t1] =
  t2 <- nzrem((t0, 10))
  t3 <- b1242[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b3981[1, 0, 31, t0, 32]
  t6 <- load8((str2))
  t7 <- primEq((t6, 0))
  if t7
    then b3129[t0, t1]
    else b3150[t6, t0, t1]

-----------------------------------------
-- recursive
b3160 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3160[t0, t1, t2, t3] =
  t4 <- b1427[t0]
  b3151[t1, t2, t3]
b3158 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3158[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, 13]
  t7 <- b1427[t0]
  b3151[t1, t2, t3]
b3151 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3151[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b1896[t2, t1]
    else b3153[t3, t0, t1, t2]
b3153 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3153[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3155[t0, t4, t3, t2]
b3155 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3155[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3158[t0, t1, t3, t2]
    else b3160[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b3163 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3163[t0, t1, t2] =
  t3 <- add((str1, 1))
  b3155[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b3161 :: [Bit 32, Bit 32] >>= [Bit 32]
b3161[t0, t1] =
  t2 <- load8((str1))
  t3 <- primEq((t2, 0))
  if t3
    then b1896[t1, t0]
    else b3163[t2, t0, t1]

-----------------------------------------
-- recursive
b3166 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3166[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3168[t0, t4, t3, t2]
b3168 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3168[t0, t1, t2, t3] =
  t4 <- b1436[t0]
  t5 <- load8((t1))
  t6 <- primEq((t5, 0))
  if t6
    then b3161[t2, t3]
    else b3166[t5, t1, t3, t2]

-----------------------------------------
-- not recursive
b3171 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3171[t0, t1, t2] =
  t3 <- add((str13, 1))
  b3168[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b3169 :: [Bit 32, Bit 32] >>= [Bit 32]
b3169[t0, t1] =
  t2 <- load8((str13))
  t3 <- primEq((t2, 0))
  if t3
    then b3161[t1, t0]
    else b3171[t2, t0, t1]

-----------------------------------------
-- recursive
b3794 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3794[t0, t1, t2, t3] =
  t4 <- b1427[t0]
  b3172[t1, t2, t3]
b3793 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3793[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, 13]
  t7 <- b1427[t0]
  b3172[t1, t2, t3]
b3172 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3172[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b3169[t1, t2]
    else b3174[t3, t0, t1, t2]
b3174 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3174[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3181[t0, t4, t2, t3]
b3181 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3181[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1206[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3793[t0, t1, t2, t3]
    else b3794[t0, t1, t2, t3]

-----------------------------------------
-- recursive
b3798 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3798[t0, t1, t2, t3, t4] =
  t5 <- add((str0, 1))
  t6 <- b3181[t0, t5, t4, t1]
  b3187[t2, t3, 8, t6]
b3189 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3189[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- load8((str0))
  t7 <- primEq((t6, 0))
  if t7
    then b3797[t1, t3, t5, t4]
    else b3798[t6, t1, t5, t4, t3]
b3797 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3797[t0, t1, t2, t3] =
  t4 <- b3169[t1, t0]
  b3187[t2, t3, 8, t4]
b3187 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3187[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b423[t3]
    else b3189[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
str14 :: Bit 32
str14 <- "Strings:\n"

-----------------------------------------
-- not recursive
str17 :: Bit 32
str17 <- " "

-----------------------------------------
-- not recursive
str15 :: Bit 32
str15 <- "cmdline"

-----------------------------------------
-- not recursive
str18 :: Bit 32
str18 <- ": "

-----------------------------------------
-- not recursive
str19 :: Bit 32
str19 <- " ["

-----------------------------------------
-- not recursive
str20 :: Bit 32
str20 <- "]\n"

-----------------------------------------
-- not recursive
b3435 :: [Bit 32] >>= [Unit]
b3435[t0] =
  t1 <- add((str20, 1))
  b2915[t0, t1]

-----------------------------------------
-- not recursive
b1379 :: [Bit 32] >>= [Unit]
b1379[t0] =
  t1 <- and((t0, 15))
  t2 <- b1242[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b3934[1, 0, 31, t0, 32]
  t5 <- load8((str20))
  t6 <- primEq((t5, 0))
  if t6
    then b295[]
    else b3435[t5]

-----------------------------------------
-- recursive
b3445 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3445[t0, t1, t2] =
  t3 <- b1427[t0]
  b3436[t1, t2]
b3443 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3443[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b3436[t1, t2]
b3436 :: [Bit 32, Bit 32] >>= [Unit]
b3436[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1379[t1]
    else b3438[t2, t0, t1]
b3438 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3438[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3440[t0, t3, t2]
b3440 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3440[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3443[t0, t1, t2]
    else b3445[t0, t1, t2]

-----------------------------------------
-- not recursive
b3466 :: [Bit 32, Bit 32] >>= [Unit]
b3466[t0, t1] =
  t2 <- add((str19, 1))
  b3440[t0, t2, t1]

-----------------------------------------
-- not recursive
b3464 :: [Bit 32] >>= [Unit]
b3464[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b1379[t0]
    else b3466[t1, t0]

-----------------------------------------
-- recursive
b3469 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3469[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3471[t0, t3, t2]
b3471 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3471[t0, t1, t2] =
  t3 <- b1436[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b3464[t2]
    else b3469[t4, t1, t2]

-----------------------------------------
-- not recursive
b3799 :: [Bit 32, Bit 32] >>= [Unit]
b3799[t0, t1] =
  t2 <- add((t1, 1))
  b3471[t0, t2, t1]

-----------------------------------------
-- not recursive
b3475 :: [Bit 32] >>= [Unit]
b3475[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b3464[t0]
    else b3799[t1, t0]

-----------------------------------------
-- recursive
b3485 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3485[t0, t1, t2] =
  t3 <- b1427[t0]
  b3476[t1, t2]
b3483 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3483[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b3476[t1, t2]
b3476 :: [Bit 32, Bit 32] >>= [Unit]
b3476[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b3475[t1]
    else b3478[t2, t0, t1]
b3478 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3478[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3480[t0, t3, t2]
b3480 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3480[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3483[t0, t1, t2]
    else b3485[t0, t1, t2]

-----------------------------------------
-- not recursive
b3508 :: [Bit 32, Bit 32] >>= [Unit]
b3508[t0, t1] =
  t2 <- add((str18, 1))
  b3480[t0, t2, t1]

-----------------------------------------
-- not recursive
b3590 :: [Bit 32, Bit 32] >>= [Unit]
b3590[t0, t1] =
  t2 <- add((str15, 1))
  t3 <- b2915[t0, t2]
  t4 <- load8((str18))
  t5 <- primEq((t4, 0))
  if t5
    then b3475[t1]
    else b3508[t4, t1]

-----------------------------------------
-- not recursive
b3503 :: [Bit 32] >>= [Unit]
b3503[t0] =
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b3475[t0]
    else b3508[t1, t0]

-----------------------------------------
-- not recursive
b3588 :: [Bit 32] >>= [Unit]
b3588[t0] =
  t1 <- load8((str15))
  t2 <- primEq((t1, 0))
  if t2
    then b3503[t0]
    else b3590[t1, t0]

-----------------------------------------
-- recursive
b3801 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3801[t0, t1, t2] =
  t3 <- b1427[t0]
  b3591[t1, t2]
b3800 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3800[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b3591[t1, t2]
b3591 :: [Bit 32, Bit 32] >>= [Unit]
b3591[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b3588[t1]
    else b3593[t2, t0, t1]
b3593 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3593[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3600[t0, t3, t2]
b3600 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3600[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3800[t0, t1, t2]
    else b3801[t0, t1, t2]

-----------------------------------------
-- not recursive
str16 :: Bit 32
str16 <- "imgline"

-----------------------------------------
-- not recursive
b3511 :: [Bit 32, Bit 32] >>= [Unit]
b3511[t0, t1] =
  t2 <- add((str16, 1))
  t3 <- b2915[t0, t2]
  t4 <- load8((str18))
  t5 <- primEq((t4, 0))
  if t5
    then b3475[t1]
    else b3508[t4, t1]

-----------------------------------------
-- not recursive
b3509 :: [Bit 32] >>= [Unit]
b3509[t0] =
  t1 <- load8((str16))
  t2 <- primEq((t1, 0))
  if t2
    then b3503[t0]
    else b3511[t1, t0]

-----------------------------------------
-- recursive
b3523 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3523[t0, t1, t2] =
  t3 <- b1427[t0]
  b3514[t1, t2]
b3521 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3521[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b3514[t1, t2]
b3514 :: [Bit 32, Bit 32] >>= [Unit]
b3514[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b3509[t1]
    else b3516[t2, t0, t1]
b3516 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3516[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3518[t0, t3, t2]
b3518 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3518[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3521[t0, t1, t2]
    else b3523[t0, t1, t2]

-----------------------------------------
-- not recursive
b3669 :: [Bit 32, Bit 32] >>= [Unit]
b3669[t0, t1] =
  t2 <- add((str17, 1))
  b3518[t0, t2, t1]

-----------------------------------------
-- not recursive
b3672 :: [Bit 32, Bit 32] >>= [Unit]
b3672[t0, t1] =
  t2 <- add((str17, 1))
  t3 <- b3600[t0, t2, t1]
  t4 <- load32((4108))
  t5 <- load8((str17))
  t6 <- primEq((t5, 0))
  if t6
    then b3509[t4]
    else b3669[t5, t4]

-----------------------------------------
-- not recursive
b3658 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3658[t0, t1, t2] =
  t3 <- b1427[t0]
  t4 <- b3476[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str17))
  t7 <- primEq((t6, 0))
  if t7
    then b3509[t5]
    else b3669[t6, t5]

-----------------------------------------
-- not recursive
b3656 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3656[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  t7 <- b3476[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str17))
  t10 <- primEq((t9, 0))
  if t10
    then b3509[t8]
    else b3669[t9, t8]

-----------------------------------------
-- not recursive
b3661 :: [Bit 32, Bit 32] >>= [Unit]
b3661[t0, t1] =
  t2 <- add((str18, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3656[t0, t2, t1]
    else b3658[t0, t2, t1]

-----------------------------------------
-- not recursive
b3634 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3634[t0, t1, t2] =
  t3 <- b1427[t0]
  t4 <- b3436[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str17))
  t7 <- primEq((t6, 0))
  if t7
    then b3509[t5]
    else b3669[t6, t5]

-----------------------------------------
-- not recursive
b3632 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3632[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  t7 <- b3436[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str17))
  t10 <- primEq((t9, 0))
  if t10
    then b3509[t8]
    else b3669[t9, t8]

-----------------------------------------
-- not recursive
b3628 :: [Bit 32, Bit 32] >>= [Unit]
b3628[t0, t1] =
  t2 <- add((str19, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3632[t0, t2, t1]
    else b3634[t0, t2, t1]

-----------------------------------------
-- not recursive
b3617 :: [Bit 32] >>= [Unit]
b3617[t0] =
  t1 <- add((str20, 1))
  t2 <- b2915[t0, t1]
  t3 <- load32((4108))
  t4 <- load8((str17))
  t5 <- primEq((t4, 0))
  if t5
    then b3509[t3]
    else b3669[t4, t3]

-----------------------------------------
-- not recursive
b1977 :: [] >>= [Unit]
b1977[] =
  t0 <- load32((4108))
  t1 <- load8((str17))
  t2 <- primEq((t1, 0))
  if t2
    then b3509[t0]
    else b3669[t1, t0]

-----------------------------------------
-- not recursive
b2042 :: [Bit 32] >>= [Unit]
b2042[t0] =
  t1 <- and((t0, 15))
  t2 <- b1242[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b3934[1, 0, 31, t0, 32]
  t5 <- load8((str20))
  t6 <- primEq((t5, 0))
  if t6
    then b1977[]
    else b3617[t5]

-----------------------------------------
-- not recursive
b3626 :: [Bit 32] >>= [Unit]
b3626[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b2042[t0]
    else b3628[t1, t0]

-----------------------------------------
-- recursive
b3637 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3637[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3639[t0, t3, t2]
b3639 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3639[t0, t1, t2] =
  t3 <- b1436[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b3626[t2]
    else b3637[t4, t1, t2]

-----------------------------------------
-- not recursive
b3802 :: [Bit 32, Bit 32] >>= [Unit]
b3802[t0, t1] =
  t2 <- add((t1, 1))
  b3639[t0, t2, t1]

-----------------------------------------
-- not recursive
b3643 :: [Bit 32] >>= [Unit]
b3643[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b3626[t0]
    else b3802[t1, t0]

-----------------------------------------
-- not recursive
b3664 :: [Bit 32, Bit 32] >>= [Unit]
b3664[t0, t1] =
  t2 <- add((str15, 1))
  t3 <- b2915[t0, t2]
  t4 <- load8((str18))
  t5 <- primEq((t4, 0))
  if t5
    then b3643[t1]
    else b3661[t4, t1]

-----------------------------------------
-- not recursive
b3650 :: [Bit 32] >>= [Unit]
b3650[t0] =
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b3643[t0]
    else b3661[t1, t0]

-----------------------------------------
-- not recursive
b3662 :: [Bit 32] >>= [Unit]
b3662[t0] =
  t1 <- load8((str15))
  t2 <- primEq((t1, 0))
  if t2
    then b3650[t0]
    else b3664[t1, t0]

-----------------------------------------
-- not recursive
b1385 :: [] >>= [Unit]
b1385[] =
  t0 <- load32((4104))
  t1 <- load8((str17))
  t2 <- primEq((t1, 0))
  if t2
    then b3662[t0]
    else b3672[t1, t0]

-----------------------------------------
-- recursive
b3804 :: [Bit 32, Bit 32] >>= [Unit]
b3804[t0, t1] =
  t2 <- b1427[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1385[]
    else b3677[t3, t1]
b3803 :: [Bit 32, Bit 32] >>= [Unit]
b3803[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, 13]
  t5 <- b1427[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1385[]
    else b3677[t6, t1]
b3677 :: [Bit 32, Bit 32] >>= [Unit]
b3677[t0, t1] =
  t2 <- add((t1, 1))
  b3684[t0, t2]
b3684 :: [Bit 32, Bit 32] >>= [Unit]
b3684[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b3803[t0, t1]
    else b3804[t0, t1]

-----------------------------------------
-- not recursive
b3692 :: [Bit 32] >>= [Unit]
b3692[t0] =
  t1 <- add((str14, 1))
  b3684[t0, t1]

-----------------------------------------
-- not recursive
b1387 :: [] >>= [Unit]
b1387[] =
  t0 <- load32((4100))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b3187[t1, t2, 8, 0]
  t4 <- load8((str14))
  t5 <- primEq((t4, 0))
  if t5
    then b1385[]
    else b3692[t4]

-----------------------------------------
-- recursive
b3806 :: [Bit 32, Bit 32] >>= [Unit]
b3806[t0, t1] =
  t2 <- b1427[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1387[]
    else b3695[t3, t1]
b3805 :: [Bit 32, Bit 32] >>= [Unit]
b3805[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, 13]
  t5 <- b1427[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1387[]
    else b3695[t6, t1]
b3695 :: [Bit 32, Bit 32] >>= [Unit]
b3695[t0, t1] =
  t2 <- add((t1, 1))
  b3702[t0, t2]
b3702 :: [Bit 32, Bit 32] >>= [Unit]
b3702[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b3805[t0, t1]
    else b3806[t0, t1]

-----------------------------------------
-- not recursive
b3710 :: [Bit 32] >>= [Unit]
b3710[t0] =
  t1 <- add((str12, 1))
  b3702[t0, t1]

-----------------------------------------
-- not recursive
b1389 :: [] >>= [Unit]
b1389[] =
  t0 <- load32((4096))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b3049[t1, t2, 12, 0]
  t4 <- load8((str12))
  t5 <- primEq((t4, 0))
  if t5
    then b1387[]
    else b3710[t4]

-----------------------------------------
-- recursive
b3808 :: [Bit 32, Bit 32] >>= [Unit]
b3808[t0, t1] =
  t2 <- b1427[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1389[]
    else b3713[t3, t1]
b3807 :: [Bit 32, Bit 32] >>= [Unit]
b3807[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, 13]
  t5 <- b1427[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1389[]
    else b3713[t6, t1]
b3713 :: [Bit 32, Bit 32] >>= [Unit]
b3713[t0, t1] =
  t2 <- add((t1, 1))
  b3720[t0, t2]
b3720 :: [Bit 32, Bit 32] >>= [Unit]
b3720[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b3807[t0, t1]
    else b3808[t0, t1]

-----------------------------------------
-- not recursive
str51 :: Bit 32
str51 <- "Did not find first user program\n"

-----------------------------------------
-- not recursive
str45 :: Bit 32
str45 <- "\nHalting kernel, returning to mimgload\n"

-----------------------------------------
-- not recursive
b3201 :: [Bit 32] >>= [Unit]
b3201[t0] =
  t1 <- add((str45, 1))
  b2915[t0, t1]

-----------------------------------------
-- not recursive
b3199 :: [] >>= [Unit]
b3199[] =
  t0 <- load8((str45))
  t1 <- primEq((t0, 0))
  if t1
    then b295[]
    else b3201[t0]

-----------------------------------------
-- recursive
b3211 :: [Bit 32, Bit 32] >>= [Unit]
b3211[t0, t1] =
  t2 <- b1427[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b3199[]
    else b3204[t3, t1]
b3209 :: [Bit 32, Bit 32] >>= [Unit]
b3209[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, 13]
  t5 <- b1427[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b3199[]
    else b3204[t6, t1]
b3204 :: [Bit 32, Bit 32] >>= [Unit]
b3204[t0, t1] =
  t2 <- add((t1, 1))
  b3206[t0, t2]
b3206 :: [Bit 32, Bit 32] >>= [Unit]
b3206[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b3209[t0, t1]
    else b3211[t0, t1]

-----------------------------------------
-- not recursive
b3214 :: [Bit 32] >>= [Unit]
b3214[t0] =
  t1 <- add((str51, 1))
  b3206[t0, t1]

-----------------------------------------
-- not recursive
b3212 :: [] >>= [Unit]
b3212[] =
  t0 <- load8((str51))
  t1 <- primEq((t0, 0))
  if t1
    then b3199[]
    else b3214[t0]

-----------------------------------------
-- not recursive
str46 :: Bit 32
str46 <- "Found header for first user program:\n"

-----------------------------------------
-- not recursive
str47 :: Bit 32
str47 <- "\n"

-----------------------------------------
-- not recursive
str48 :: Bit 32
str48 <- "Found header for second user program:\n"

-----------------------------------------
-- not recursive
str49 :: Bit 32
str49 <- "\n"

-----------------------------------------
-- not recursive
str52 :: Bit 32
str52 <- "user code is at 0x"

-----------------------------------------
-- not recursive
str53 :: Bit 32
str53 <- "\n"

-----------------------------------------
-- not recursive
b1565 :: [Bit 32] >>= [Unit]
b1565[t0] =
  t1 <- add((users, 52))
  store32((t1, t0))

-----------------------------------------
-- recursive
b3237 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3237[t0, t1, t2] =
  t3 <- b1427[t0]
  b3228[t1, t2]
b3235 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3235[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b3228[t1, t2]
b3228 :: [Bit 32, Bit 32] >>= [Unit]
b3228[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1565[t1]
    else b3230[t2, t0, t1]
b3230 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3230[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3232[t0, t3, t2]
b3232 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3232[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3235[t0, t1, t2]
    else b3237[t0, t1, t2]

-----------------------------------------
-- not recursive
b3266 :: [Bit 32, Bit 32] >>= [Unit]
b3266[t0, t1] =
  t2 <- add((str53, 1))
  b3232[t0, t2, t1]

-----------------------------------------
-- not recursive
b1561 :: [Bit 32] >>= [Unit]
b1561[t0] =
  t1 <- and((t0, 15))
  t2 <- b1242[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b3934[1, 0, 31, t0, 32]
  t5 <- load8((str53))
  t6 <- primEq((t5, 0))
  if t6
    then b1565[t0]
    else b3266[t5, t0]

-----------------------------------------
-- recursive
b3810 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3810[t0, t1, t2] =
  t3 <- b1427[t0]
  b3272[t1, t2]
b3809 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3809[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b3272[t1, t2]
b3272 :: [Bit 32, Bit 32] >>= [Unit]
b3272[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1561[t1]
    else b3274[t2, t0, t1]
b3274 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3274[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3281[t0, t3, t2]
b3281 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3281[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3809[t0, t1, t2]
    else b3810[t0, t1, t2]

-----------------------------------------
-- not recursive
b1576 :: [Bit 32] >>= [Unit]
b1576[t0] =
  t1 <- add((users, 124))
  store32((t1, t0))

-----------------------------------------
-- recursive
b3247 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3247[t0, t1, t2] =
  t3 <- b1427[t0]
  b3238[t1, t2]
b3245 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3245[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b3238[t1, t2]
b3238 :: [Bit 32, Bit 32] >>= [Unit]
b3238[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1576[t1]
    else b3240[t2, t0, t1]
b3240 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3240[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3242[t0, t3, t2]
b3242 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3242[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3245[t0, t1, t2]
    else b3247[t0, t1, t2]

-----------------------------------------
-- not recursive
b3253 :: [Bit 32, Bit 32] >>= [Unit]
b3253[t0, t1] =
  t2 <- add((str53, 1))
  b3242[t0, t2, t1]

-----------------------------------------
-- not recursive
b1572 :: [Bit 32] >>= [Unit]
b1572[t0] =
  t1 <- and((t0, 15))
  t2 <- b1242[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b3934[1, 0, 31, t0, 32]
  t5 <- load8((str53))
  t6 <- primEq((t5, 0))
  if t6
    then b1576[t0]
    else b3253[t5, t0]

-----------------------------------------
-- recursive
b3812 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3812[t0, t1, t2] =
  t3 <- b1427[t0]
  b3254[t1, t2]
b3811 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3811[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  b3254[t1, t2]
b3254 :: [Bit 32, Bit 32] >>= [Unit]
b3254[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1572[t1]
    else b3256[t2, t0, t1]
b3256 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3256[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3263[t0, t3, t2]
b3263 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3263[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3811[t0, t1, t2]
    else b3812[t0, t1, t2]

-----------------------------------------
-- not recursive
b1663 :: [] >>= [Unit]
b1663[] =
  t0 <- store1((current, flag0))
  t1 <- outb((32, 17))
  t2 <- outb((33, 32))
  t3 <- outb((33, 4))
  t4 <- outb((33, 1))
  t5 <- outb((33, 251))
  t6 <- outb((160, 17))
  t7 <- outb((161, 40))
  t8 <- outb((161, 2))
  t9 <- outb((161, 1))
  t10 <- outb((161, 255))
  t11 <- outb((67, 52))
  t12 <- outb((64, 156))
  t13 <- outb((64, 46))
  t14 <- inb((33))
  t15 <- and((t14, -2))
  t16 <- outb((33, t15))
  t17 <- inb((33))
  t18 <- and((t17, -3))
  t19 <- outb((33, t18))
  t20 <- load1((current))
  t21 <- flagToWord((t20))
  t22 <- mul((t21, 72))
  t23 <- add((users, t22))
  t24 <- returnTo((t23))
  t25 <- load8((str45))
  t26 <- primEq((t25, 0))
  if t26
    then b295[]
    else b3201[t25]

-----------------------------------------
-- not recursive
b3284 :: [Bit 32, Bit 32] >>= [Unit]
b3284[t0, t1] =
  t2 <- add((str52, 1))
  t3 <- b3263[t0, t2, t1]
  b1663[]

-----------------------------------------
-- not recursive
b3987 :: [Bit 32, Bit 32] >>= [Unit]
b3987[t0, t1] =
  t2 <- add((str53, 1))
  t3 <- b3242[t0, t2, t1]
  b1663[]

-----------------------------------------
-- not recursive
b3986 :: [Bit 32] >>= [Unit]
b3986[t0] =
  t1 <- add((users, 124))
  t2 <- store32((t1, t0))
  b1663[]

-----------------------------------------
-- not recursive
b1763 :: [Bit 32] >>= [Unit]
b1763[t0] =
  t1 <- and((t0, 15))
  t2 <- b1242[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b3934[1, 0, 31, t0, 32]
  t5 <- load8((str53))
  t6 <- primEq((t5, 0))
  if t6
    then b3986[t0]
    else b3987[t5, t0]

-----------------------------------------
-- not recursive
b3287 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3287[t0, t1, t2] =
  t3 <- add((str52, 1))
  t4 <- b3281[t0, t3, t2]
  t5 <- add((t1, 8))
  t6 <- load32((t5))
  t7 <- load8((str52))
  t8 <- primEq((t7, 0))
  if t8
    then b1763[t6]
    else b3284[t7, t6]

-----------------------------------------
-- not recursive
b3990 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3990[t0, t1, t2] =
  t3 <- add((str53, 1))
  t4 <- b3232[t0, t3, t1]
  t5 <- add((t2, 8))
  t6 <- load32((t5))
  t7 <- load8((str52))
  t8 <- primEq((t7, 0))
  if t8
    then b1763[t6]
    else b3284[t7, t6]

-----------------------------------------
-- not recursive
b3989 :: [Bit 32, Bit 32] >>= [Unit]
b3989[t0, t1] =
  t2 <- add((users, 52))
  t3 <- store32((t2, t0))
  t4 <- add((t1, 8))
  t5 <- load32((t4))
  t6 <- load8((str52))
  t7 <- primEq((t6, 0))
  if t7
    then b1763[t5]
    else b3284[t6, t5]

-----------------------------------------
-- not recursive
b1775 :: [Bit 32, Bit 32] >>= [Unit]
b1775[t0, t1] =
  t2 <- and((t0, 15))
  t3 <- b1242[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b3934[1, 0, 31, t0, 32]
  t6 <- load8((str53))
  t7 <- primEq((t6, 0))
  if t7
    then b3989[t0, t1]
    else b3990[t6, t0, t1]

-----------------------------------------
-- not recursive
b3994 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3994[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- load8((str52))
  t6 <- primEq((t5, 0))
  if t6
    then b1775[t4, t2]
    else b3287[t5, t2, t4]

-----------------------------------------
-- recursive
b4000 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4000[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1206[t6, 0, 13]
  t8 <- b1427[t0]
  t9 <- load8((t1))
  t10 <- primEq((t9, 0))
  if t10
    then b3994[t3, t4, t2]
    else b4002[t9, t1, t2, t3, t4]
b4002 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4002[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 1))
  t6 <- inb((1021))
  t7 <- and((t6, 96))
  t8 <- b1206[t7, 0, t0]
  t9 <- primEq((t0, 10))
  if t9
    then b4000[t0, t5, t2, t3, t4]
    else b4001[t0, t5, t2, t3, t4]
b4001 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4001[t0, t1, t2, t3, t4] =
  t5 <- b1427[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b3994[t3, t4, t2]
    else b4002[t6, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b3995 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3995[t0, t1, t2, t3] =
  t4 <- add((str49, 1))
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1206[t6, 0, t0]
  t8 <- primEq((t0, 10))
  if t8
    then b4000[t0, t4, t1, t2, t3]
    else b4001[t0, t4, t1, t2, t3]

-----------------------------------------
-- not recursive
b3991 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3991[t0, t1, t2, t3, t4] =
  t5 <- b2994[t0]
  t6 <- load8((str49))
  t7 <- primEq((t6, 0))
  if t7
    then b3994[t3, t4, t0]
    else b3995[t6, t0, t3, t4]

-----------------------------------------
-- recursive
b3996 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3996[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- inb((1021))
  t8 <- and((t7, 96))
  t9 <- b1206[t8, 0, 13]
  t10 <- b1427[t0]
  t11 <- load8((t1))
  t12 <- primEq((t11, 0))
  if t12
    then b3991[t4, t5, t6, t2, t3]
    else b3999[t11, t1, t2, t3, t4, t5, t6]
b3999 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3999[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, 1))
  t8 <- inb((1021))
  t9 <- and((t8, 96))
  t10 <- b1206[t9, 0, t0]
  t11 <- primEq((t0, 10))
  if t11
    then b3996[t0, t7, t2, t3, t4, t5, t6]
    else b3997[t0, t7, t2, t3, t4, t5, t6]
b3997 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3997[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b1427[t0]
  t8 <- load8((t1))
  t9 <- primEq((t8, 0))
  if t9
    then b3991[t4, t5, t6, t2, t3]
    else b3999[t8, t1, t2, t3, t4, t5, t6]

-----------------------------------------
-- not recursive
b3992 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3992[t0, t1, t2, t3, t4, t5] =
  t6 <- add((str48, 1))
  t7 <- inb((1021))
  t8 <- and((t7, 96))
  t9 <- b1206[t8, 0, t0]
  t10 <- primEq((t0, 10))
  if t10
    then b3996[t0, t6, t1, t2, t3, t4, t5]
    else b3997[t0, t6, t1, t2, t3, t4, t5]

-----------------------------------------
-- not recursive
b3821 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3821[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- load8((str48))
  t7 <- primEq((t6, 0))
  if t7
    then b3991[t1, t5, t4, t3, t0]
    else b3992[t6, t3, t0, t1, t5, t4]

-----------------------------------------
-- not recursive
str50 :: Bit 32
str50 <- "Did not find second user program\n"

-----------------------------------------
-- recursive
b3224 :: [Bit 32, Bit 32] >>= [Unit]
b3224[t0, t1] =
  t2 <- b1427[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b3199[]
    else b3217[t3, t1]
b3222 :: [Bit 32, Bit 32] >>= [Unit]
b3222[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, 13]
  t5 <- b1427[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b3199[]
    else b3217[t6, t1]
b3217 :: [Bit 32, Bit 32] >>= [Unit]
b3217[t0, t1] =
  t2 <- add((t1, 1))
  b3219[t0, t2]
b3219 :: [Bit 32, Bit 32] >>= [Unit]
b3219[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b3222[t0, t1]
    else b3224[t0, t1]

-----------------------------------------
-- not recursive
b3227 :: [Bit 32] >>= [Unit]
b3227[t0] =
  t1 <- add((str50, 1))
  b3219[t0, t1]

-----------------------------------------
-- not recursive
b3225 :: [] >>= [Unit]
b3225[] =
  t0 <- load8((str50))
  t1 <- primEq((t0, 0))
  if t1
    then b3199[]
    else b3227[t0]

-----------------------------------------
-- not recursive
b3404 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3404[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b3225[]
    else b3821[t0, t1, t2, t3]

-----------------------------------------
-- recursive
b3413 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3413[t0, t1, t2, t3, t4] =
  t5 <- b1427[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b3404[t3, t4, 12, t2]
    else b3412[t6, t1, t2, t3, t4]
b3407 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3407[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1206[t6, 0, 13]
  t8 <- b1427[t0]
  t9 <- load8((t1))
  t10 <- primEq((t9, 0))
  if t10
    then b3404[t3, t4, 12, t2]
    else b3412[t9, t1, t2, t3, t4]
b3412 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3412[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 1))
  b3406[t0, t5, t2, t3, t4]
b3406 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3406[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1206[t6, 0, t0]
  t8 <- primEq((t0, 10))
  if t8
    then b3407[t0, t1, t2, t3, t4]
    else b3413[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b3405 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3405[t0, t1, t2, t3] =
  t4 <- add((str47, 1))
  b3406[t0, t4, t1, t2, t3]

-----------------------------------------
-- not recursive
b3368 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3368[t0, t1, t2] =
  t3 <- b2994[t0]
  t4 <- load8((str47))
  t5 <- primEq((t4, 0))
  if t5
    then b3404[t1, t2, 12, t0]
    else b3405[t4, t0, t1, t2]

-----------------------------------------
-- recursive
b3422 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3422[t0, t1, t2, t3, t4] =
  t5 <- b1427[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b3368[t2, t3, t4]
    else b3421[t6, t1, t2, t3, t4]
b3416 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3416[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1206[t6, 0, 13]
  t8 <- b1427[t0]
  t9 <- load8((t1))
  t10 <- primEq((t9, 0))
  if t10
    then b3368[t2, t3, t4]
    else b3421[t9, t1, t2, t3, t4]
b3421 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3421[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 1))
  b3415[t0, t5, t2, t3, t4]
b3415 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3415[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1206[t6, 0, t0]
  t8 <- primEq((t0, 10))
  if t8
    then b3416[t0, t1, t2, t3, t4]
    else b3422[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b3414 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3414[t0, t1, t2, t3] =
  t4 <- add((str46, 1))
  b3415[t0, t4, t1, t2, t3]

-----------------------------------------
-- not recursive
b3362 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3362[t0, t1, t2] =
  t3 <- add((t1, t2))
  t4 <- add((t0, -1))
  t5 <- load8((str46))
  t6 <- primEq((t5, 0))
  if t6
    then b3368[t1, t4, t3]
    else b3414[t5, t1, t4, t3]

-----------------------------------------
-- not recursive
b3360 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3360[t0, t1, t2] =
  t3 <- primEq((t0, 0))
  if t3
    then b3212[]
    else b3362[t0, t1, t2]

-----------------------------------------
-- recursive
b3423 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3423[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b3212[]
    else b3425[t0, t1, t2, t3]
b3425 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3425[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- add((t3, -1))
  t7 <- primEq((t6, 0))
  if t7
    then b3360[t5, t4, 12]
    else b3423[t5, t4, 12, t6]

-----------------------------------------
-- not recursive
b3723 :: [Bit 32] >>= [Unit]
b3723[t0] =
  t1 <- add((str10, 1))
  t2 <- b3720[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b3212[]
    else b3425[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b3705 :: [Bit 32] >>= [Unit]
b3705[t0] =
  t1 <- add((str12, 1))
  t2 <- b3702[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b3212[]
    else b3425[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b3687 :: [Bit 32] >>= [Unit]
b3687[t0] =
  t1 <- add((str14, 1))
  t2 <- b3684[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b3212[]
    else b3425[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b3532 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3532[t0, t1, t2] =
  t3 <- b1427[t0]
  t4 <- b3514[t1, t2]
  t5 <- load32((4096))
  t6 <- load32((t5))
  t7 <- add((t5, 4))
  t8 <- primEq((t6, 0))
  if t8
    then b3212[]
    else b3425[t6, t7, 12, 2]

-----------------------------------------
-- not recursive
b3530 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3530[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  t7 <- b3514[t1, t2]
  t8 <- load32((4096))
  t9 <- load32((t8))
  t10 <- add((t8, 4))
  t11 <- primEq((t9, 0))
  if t11
    then b3212[]
    else b3425[t9, t10, 12, 2]

-----------------------------------------
-- not recursive
b3603 :: [Bit 32, Bit 32] >>= [Unit]
b3603[t0, t1] =
  t2 <- add((str17, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3530[t0, t2, t1]
    else b3532[t0, t2, t1]

-----------------------------------------
-- not recursive
b3494 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3494[t0, t1, t2] =
  t3 <- b1427[t0]
  t4 <- b3476[t1, t2]
  t5 <- load32((4096))
  t6 <- load32((t5))
  t7 <- add((t5, 4))
  t8 <- primEq((t6, 0))
  if t8
    then b3212[]
    else b3425[t6, t7, 12, 2]

-----------------------------------------
-- not recursive
b3492 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3492[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  t7 <- b3476[t1, t2]
  t8 <- load32((4096))
  t9 <- load32((t8))
  t10 <- add((t8, 4))
  t11 <- primEq((t9, 0))
  if t11
    then b3212[]
    else b3425[t9, t10, 12, 2]

-----------------------------------------
-- not recursive
b3497 :: [Bit 32, Bit 32] >>= [Unit]
b3497[t0, t1] =
  t2 <- add((str18, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3492[t0, t2, t1]
    else b3494[t0, t2, t1]

-----------------------------------------
-- not recursive
b3454 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3454[t0, t1, t2] =
  t3 <- b1427[t0]
  t4 <- b3436[t1, t2]
  t5 <- load32((4096))
  t6 <- load32((t5))
  t7 <- add((t5, 4))
  t8 <- primEq((t6, 0))
  if t8
    then b3212[]
    else b3425[t6, t7, 12, 2]

-----------------------------------------
-- not recursive
b3452 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3452[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  t7 <- b3436[t1, t2]
  t8 <- load32((4096))
  t9 <- load32((t8))
  t10 <- add((t8, 4))
  t11 <- primEq((t9, 0))
  if t11
    then b3212[]
    else b3425[t9, t10, 12, 2]

-----------------------------------------
-- not recursive
b3448 :: [Bit 32, Bit 32] >>= [Unit]
b3448[t0, t1] =
  t2 <- add((str19, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3452[t0, t2, t1]
    else b3454[t0, t2, t1]

-----------------------------------------
-- not recursive
b3430 :: [Bit 32] >>= [Unit]
b3430[t0] =
  t1 <- add((str20, 1))
  t2 <- b2915[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b3212[]
    else b3425[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b2075 :: [] >>= [Unit]
b2075[] =
  t0 <- load32((4096))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- primEq((t1, 0))
  if t3
    then b3212[]
    else b3425[t1, t2, 12, 2]

-----------------------------------------
-- not recursive
b2143 :: [Bit 32] >>= [Unit]
b2143[t0] =
  t1 <- and((t0, 15))
  t2 <- b1242[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b3934[1, 0, 31, t0, 32]
  t5 <- load8((str20))
  t6 <- primEq((t5, 0))
  if t6
    then b2075[]
    else b3430[t5]

-----------------------------------------
-- not recursive
b3446 :: [Bit 32] >>= [Unit]
b3446[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b2143[t0]
    else b3448[t1, t0]

-----------------------------------------
-- recursive
b3457 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3457[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3459[t0, t3, t2]
b3459 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3459[t0, t1, t2] =
  t3 <- b1436[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b3446[t2]
    else b3457[t4, t1, t2]

-----------------------------------------
-- not recursive
b3822 :: [Bit 32, Bit 32] >>= [Unit]
b3822[t0, t1] =
  t2 <- add((t1, 1))
  b3459[t0, t2, t1]

-----------------------------------------
-- not recursive
b3463 :: [Bit 32] >>= [Unit]
b3463[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b3446[t0]
    else b3822[t1, t0]

-----------------------------------------
-- not recursive
b3500 :: [Bit 32, Bit 32] >>= [Unit]
b3500[t0, t1] =
  t2 <- add((str16, 1))
  t3 <- b2915[t0, t2]
  t4 <- load8((str18))
  t5 <- primEq((t4, 0))
  if t5
    then b3463[t1]
    else b3497[t4, t1]

-----------------------------------------
-- not recursive
b3486 :: [Bit 32] >>= [Unit]
b3486[t0] =
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b3463[t0]
    else b3497[t1, t0]

-----------------------------------------
-- not recursive
b3498 :: [Bit 32] >>= [Unit]
b3498[t0] =
  t1 <- load8((str16))
  t2 <- primEq((t1, 0))
  if t2
    then b3486[t0]
    else b3500[t1, t0]

-----------------------------------------
-- not recursive
b3606 :: [Bit 32, Bit 32] >>= [Unit]
b3606[t0, t1] =
  t2 <- add((str17, 1))
  t3 <- b3600[t0, t2, t1]
  t4 <- load32((4108))
  t5 <- load8((str17))
  t6 <- primEq((t5, 0))
  if t6
    then b3498[t4]
    else b3603[t5, t4]

-----------------------------------------
-- not recursive
b3579 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3579[t0, t1, t2] =
  t3 <- b1427[t0]
  t4 <- b3476[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str17))
  t7 <- primEq((t6, 0))
  if t7
    then b3498[t5]
    else b3603[t6, t5]

-----------------------------------------
-- not recursive
b3577 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3577[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  t7 <- b3476[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str17))
  t10 <- primEq((t9, 0))
  if t10
    then b3498[t8]
    else b3603[t9, t8]

-----------------------------------------
-- not recursive
b3582 :: [Bit 32, Bit 32] >>= [Unit]
b3582[t0, t1] =
  t2 <- add((str18, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3577[t0, t2, t1]
    else b3579[t0, t2, t1]

-----------------------------------------
-- not recursive
b3555 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3555[t0, t1, t2] =
  t3 <- b1427[t0]
  t4 <- b3436[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str17))
  t7 <- primEq((t6, 0))
  if t7
    then b3498[t5]
    else b3603[t6, t5]

-----------------------------------------
-- not recursive
b3553 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3553[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, 13]
  t6 <- b1427[t0]
  t7 <- b3436[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str17))
  t10 <- primEq((t9, 0))
  if t10
    then b3498[t8]
    else b3603[t9, t8]

-----------------------------------------
-- not recursive
b3549 :: [Bit 32, Bit 32] >>= [Unit]
b3549[t0, t1] =
  t2 <- add((str19, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1206[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3553[t0, t2, t1]
    else b3555[t0, t2, t1]

-----------------------------------------
-- not recursive
b3538 :: [Bit 32] >>= [Unit]
b3538[t0] =
  t1 <- add((str20, 1))
  t2 <- b2915[t0, t1]
  t3 <- load32((4108))
  t4 <- load8((str17))
  t5 <- primEq((t4, 0))
  if t5
    then b3498[t3]
    else b3603[t4, t3]

-----------------------------------------
-- not recursive
b2138 :: [] >>= [Unit]
b2138[] =
  t0 <- load32((4108))
  t1 <- load8((str17))
  t2 <- primEq((t1, 0))
  if t2
    then b3498[t0]
    else b3603[t1, t0]

-----------------------------------------
-- not recursive
b2137 :: [Bit 32] >>= [Unit]
b2137[t0] =
  t1 <- and((t0, 15))
  t2 <- b1242[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b3934[1, 0, 31, t0, 32]
  t5 <- load8((str20))
  t6 <- primEq((t5, 0))
  if t6
    then b2138[]
    else b3538[t5]

-----------------------------------------
-- not recursive
b3547 :: [Bit 32] >>= [Unit]
b3547[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b2137[t0]
    else b3549[t1, t0]

-----------------------------------------
-- recursive
b3558 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3558[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3560[t0, t3, t2]
b3560 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3560[t0, t1, t2] =
  t3 <- b1436[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b3547[t2]
    else b3558[t4, t1, t2]

-----------------------------------------
-- not recursive
b3823 :: [Bit 32, Bit 32] >>= [Unit]
b3823[t0, t1] =
  t2 <- add((t1, 1))
  b3560[t0, t2, t1]

-----------------------------------------
-- not recursive
b3564 :: [Bit 32] >>= [Unit]
b3564[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b3547[t0]
    else b3823[t1, t0]

-----------------------------------------
-- not recursive
b3585 :: [Bit 32, Bit 32] >>= [Unit]
b3585[t0, t1] =
  t2 <- add((str15, 1))
  t3 <- b2915[t0, t2]
  t4 <- load8((str18))
  t5 <- primEq((t4, 0))
  if t5
    then b3564[t1]
    else b3582[t4, t1]

-----------------------------------------
-- not recursive
b3571 :: [Bit 32] >>= [Unit]
b3571[t0] =
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b3564[t0]
    else b3582[t1, t0]

-----------------------------------------
-- not recursive
b3583 :: [Bit 32] >>= [Unit]
b3583[t0] =
  t1 <- load8((str15))
  t2 <- primEq((t1, 0))
  if t2
    then b3571[t0]
    else b3585[t1, t0]

-----------------------------------------
-- not recursive
b1969 :: [] >>= [Unit]
b1969[] =
  t0 <- load32((4104))
  t1 <- load8((str17))
  t2 <- primEq((t1, 0))
  if t2
    then b3583[t0]
    else b3606[t1, t0]

-----------------------------------------
-- not recursive
b1968 :: [] >>= [Unit]
b1968[] =
  t0 <- load32((4100))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b3187[t1, t2, 8, 0]
  t4 <- load8((str14))
  t5 <- primEq((t4, 0))
  if t5
    then b1969[]
    else b3687[t4]

-----------------------------------------
-- not recursive
b1967 :: [] >>= [Unit]
b1967[] =
  t0 <- load32((4096))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b3049[t1, t2, 12, 0]
  t4 <- load8((str12))
  t5 <- primEq((t4, 0))
  if t5
    then b1968[]
    else b3705[t4]

-----------------------------------------
-- not recursive
b1407 :: [] >>= [Unit]
b1407[] =
  t0 <- store8((console, 1))
  t1 <- add((console, 1))
  t2 <- store8((t1, 1))
  t3 <- add((console, 2))
  t4 <- store8((t3, 23))
  t5 <- add((console, 3))
  t6 <- store8((t5, 45))
  t7 <- add((console, 4))
  t8 <- store8((t7, 1))
  t9 <- add((console, 5))
  t10 <- store8((t9, 1))
  t11 <- add((console, 6))
  t12 <- store8((t11, 15))
  t13 <- load8((console))
  t14 <- load8((t1))
  t15 <- store8((t7, t13))
  t16 <- store8((t9, t14))
  t17 <- load8((t3))
  t18 <- load8((t5))
  t19 <- load8((t11))
  t20 <- b1280[t14, t18, t19, t13]
  t21 <- b3972[1, t13, t17, t14, t18, t19]
  t22 <- load8((str10))
  t23 <- primEq((t22, 0))
  if t23
    then b1967[]
    else b3723[t22]

-----------------------------------------
-- recursive
b3735 :: [Bit 32, Bit 32] >>= [Unit]
b3735[t0, t1] =
  t2 <- b1427[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1407[]
    else b3728[t3, t1]
b3733 :: [Bit 32, Bit 32] >>= [Unit]
b3733[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, 13]
  t5 <- b1427[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1407[]
    else b3728[t6, t1]
b3728 :: [Bit 32, Bit 32] >>= [Unit]
b3728[t0, t1] =
  t2 <- add((t1, 1))
  b3730[t0, t2]
b3730 :: [Bit 32, Bit 32] >>= [Unit]
b3730[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1206[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b3733[t0, t1]
    else b3735[t0, t1]

-----------------------------------------
-- not recursive
b3738 :: [Bit 32] >>= [Unit]
b3738[t0] =
  t1 <- add((str44, 1))
  b3730[t0, t1]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- store1((current, flag0))
  t1 <- store32((users, 0))
  t2 <- add((users, 4))
  t3 <- store32((t2, 0))
  t4 <- add((users, 8))
  t5 <- store32((t4, 0))
  t6 <- add((users, 12))
  t7 <- store32((t6, 0))
  t8 <- add((users, 16))
  t9 <- store32((t8, 0))
  t10 <- add((users, 20))
  t11 <- store32((t10, 0))
  t12 <- add((users, 24))
  t13 <- store32((t12, 0))
  t14 <- add((users, 28))
  t15 <- store32((t14, 0))
  t16 <- add((users, 32))
  t17 <- store32((t16, 59))
  t18 <- add((users, 36))
  t19 <- store32((t18, 59))
  t20 <- add((users, 40))
  t21 <- store32((t20, 59))
  t22 <- add((users, 44))
  t23 <- store32((t22, 59))
  t24 <- add((users, 48))
  t25 <- store32((t24, 0))
  t26 <- add((users, 52))
  t27 <- store32((t26, 0))
  t28 <- add((users, 56))
  t29 <- store32((t28, 51))
  t30 <- add((users, 60))
  t31 <- store32((t30, 12802))
  t32 <- add((users, 64))
  t33 <- store32((t32, 0))
  t34 <- add((users, 68))
  t35 <- store32((t34, 59))
  t36 <- add((users, 72))
  t37 <- store32((t36, 0))
  t38 <- add((users, 76))
  t39 <- store32((t38, 0))
  t40 <- add((users, 80))
  t41 <- store32((t40, 0))
  t42 <- add((users, 84))
  t43 <- store32((t42, 0))
  t44 <- add((users, 88))
  t45 <- store32((t44, 0))
  t46 <- add((users, 92))
  t47 <- store32((t46, 0))
  t48 <- add((users, 96))
  t49 <- store32((t48, 0))
  t50 <- add((users, 100))
  t51 <- store32((t50, 0))
  t52 <- add((users, 104))
  t53 <- store32((t52, 59))
  t54 <- add((users, 108))
  t55 <- store32((t54, 59))
  t56 <- add((users, 112))
  t57 <- store32((t56, 59))
  t58 <- add((users, 116))
  t59 <- store32((t58, 59))
  t60 <- add((users, 120))
  t61 <- store32((t60, 0))
  t62 <- add((users, 124))
  t63 <- store32((t62, 0))
  t64 <- add((users, 128))
  t65 <- store32((t64, 51))
  t66 <- add((users, 132))
  t67 <- store32((t66, 12802))
  t68 <- add((users, 136))
  t69 <- store32((t68, 0))
  t70 <- add((users, 140))
  t71 <- store32((t70, 59))
  t72 <- store8((console, 0))
  t73 <- add((console, 1))
  t74 <- store8((t73, 0))
  t75 <- add((console, 2))
  t76 <- store8((t75, 24))
  t77 <- add((console, 3))
  t78 <- store8((t77, 79))
  t79 <- add((console, 4))
  t80 <- store8((t79, 0))
  t81 <- add((console, 5))
  t82 <- store8((t81, 0))
  t83 <- add((console, 6))
  t84 <- store8((t83, 10))
  t85 <- store8((keyDown, 0))
  t86 <- store32((ticks, 1))
  t87 <- store8((spinner, 45))
  t88 <- add((spinner, 1))
  t89 <- store8((t88, 92))
  t90 <- add((spinner, 2))
  t91 <- store8((t90, 124))
  t92 <- add((spinner, 3))
  t93 <- store8((t92, 47))
  t94 <- store8((spinpos, 0))
  t95 <- store8((pos, 55))
  t96 <- store1((dir, flag1))
  t97 <- store8((itoaBuf, 0))
  t98 <- add((itoaBuf, 1))
  t99 <- b2553[t98, 1]
  t100 <- store8((t83, 32))
  t101 <- load8((console))
  t102 <- load8((t73))
  t103 <- store8((t79, t101))
  t104 <- store8((t81, t102))
  t105 <- load8((t75))
  t106 <- load8((t77))
  t107 <- load8((t83))
  t108 <- b1280[t102, t106, t107, t101]
  t109 <- b3972[1, t101, t105, t102, t106, t107]
  t110 <- load8((str44))
  t111 <- primEq((t110, 0))
  if t111
    then b1407[]
    else b3738[t110]

-----------------------------------------
-- Entrypoints: yield kputc keyboardInterrupt timerInterrupt unhandled
