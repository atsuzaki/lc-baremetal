bitdata Bool /1
  = False [ B0 ]
    -- predFalse(x :: Bit 1) = x == 0b0
  | True [ B1 ]
    -- predTrue(x :: Bit 1) = x == 0b1

-- bit pattern:
--  _

struct Context / 72
  [ regs :: Registers  {- offset=0 -}
  | segregs :: SegRegs  {- offset=32 -}
  | iframe :: IFrame  {- offset=48 -} ]
  aligned 4

struct Coord / 2
  [ row :: Stored (Ix 25)  {- offset=0 -}
  | col :: Stored (Ix 80)  {- offset=1 -} ]
  aligned 1

struct GameObject / 24
  [ width :: Stored (Bit 32)  {- offset=0 -}
  | height :: Stored (Bit 32)  {- offset=4 -}
  | xPos :: Stored (Bit 32)  {- offset=8 -}
  | yPos :: Stored (Bit 32)  {- offset=12 -}
  | attribute :: Stored (Bit 32)  {- offset=16 -}
  | typemask :: Stored GameObjectTypes  {- offset=20 -} ]
  aligned 4

bitdata GameObjectTypes /32
  = GameObjectTypes [ B000_0000_0000_0000_0000_0000_0000 | active :: Bool | ball :: Bool | paddle :: Bool | bouncable :: Bool | breakable :: Bool ]
    -- predGameObjectTypes(x :: Bit 32) = true

-- bit pattern:
--  000000000000000000000000000_____

bitdata IA32Flags /32
  = IA32Flags [ B00_0000_0000 | id :: Bit 1 | vip :: Bit 1 | vif :: Bit 1 | ac :: Bit 1 | vm :: Bit 1 | rf :: Bit 1 | B0 | nt :: Bit 1 | iopl :: Ix 4 | ovf :: Bit 1 | df :: Bit 1 | ifl :: Bit 1 | tf :: Bit 1 | sf :: Bit 1 | zf :: Bit 1 | B0 | af :: Bit 1 | B0 | pf :: Bit 1 | B1 | cf :: Bit 1 ]
    -- predIA32Flags(x :: Bit 32) = true

-- bit pattern:
--  0000000000______0_________0_0_1_

struct IFrame / 24
  [ err :: Stored (Bit 32)  {- offset=0 -}
  | eip :: Stored (Bit 32)  {- offset=4 -}
  | cs :: Stored SegSelector  {- offset=8 -}
  | eflags :: Stored IA32Flags  {- offset=12 -}
  | esp :: Stored (Bit 32)  {- offset=16 -}
  | ss :: Stored SegSelector  {- offset=20 -} ]
  aligned 4

struct Registers / 32
  [ edi :: Stored (Bit 32)  {- offset=0 -}
  | esi :: Stored (Bit 32)  {- offset=4 -}
  | ebp :: Stored (Bit 32)  {- offset=8 -}
  | esp :: Stored (Bit 32)  {- offset=12 -}
  | ebx :: Stored (Bit 32)  {- offset=16 -}
  | edx :: Stored (Bit 32)  {- offset=20 -}
  | ecx :: Stored (Bit 32)  {- offset=24 -}
  | eax :: Stored (Bit 32)  {- offset=28 -} ]
  aligned 4

struct SegRegs / 16
  [ ds :: Stored SegSelector  {- offset=0 -}
  | es :: Stored SegSelector  {- offset=4 -}
  | fs :: Stored SegSelector  {- offset=8 -}
  | gs :: Stored SegSelector  {- offset=12 -} ]
  aligned 4

bitdata SegSelector /32
  = SegSelector [ X0000 | index :: Ix 8192 | table :: Bit 1 | rpl :: Ix 4 ]
    -- predSegSelector(x :: Bit 32) = true

-- bit pattern:
--  0000000000000000________________

data Unit
  = Unit

struct Window / 7
  [ topleft :: Coord  {- offset=0 -}
  | bottomright :: Coord  {- offset=2 -}
  | current :: Coord  {- offset=4 -}
  | attr :: Stored (Bit 8)  {- offset=6 -} ]
  aligned 8

-----------------------------------------
-- not recursive
current :: Bit 32
current <- area (Stored (Ix 2)) aligned 1

-----------------------------------------
-- not recursive
users :: Bit 32
users <- area (Array 2 Context) aligned 4

-----------------------------------------
-- not recursive
b1354 :: [] >>= [Unit]
b1354[] =
  t0 <- load1((current))
  t1 <- flagToWord((t0))
  t2 <- mul((t1, 72))
  t3 <- add((users, t2))
  returnTo((t3))

-----------------------------------------
-- not recursive
entrypoint yield :: [] >>= [Unit]
yield[] =
  b1354[]

-----------------------------------------
-- not recursive
b4563 :: [Bit 32] >>= [Unit]
b4563[t0] =
  outb((1016, t0))

-----------------------------------------
-- recursive
b258 :: [Bit 32] >>= [Unit]
b258[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  b1572[t2, 0, t0]
b1572 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1572[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b258[t2]
    else b4563[t2]

-----------------------------------------
-- not recursive
console :: Bit 32
console <- area Window aligned 8

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
b303 :: [] >>= [Unit]
b303[] =
  return Unit

-----------------------------------------
-- recursive
b1578 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1578[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b1578[t11, t1, t2, t3]
    else b303[]

-----------------------------------------
-- recursive
b1580 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1580[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- mul((t2, 160))
  t9 <- add((t8, t5))
  t10 <- add((t9, 753664))
  t11 <- load16((t7))
  t12 <- store16((t10, t11))
  t13 <- add((t0, 1))
  t14 <- primUle((t13, t1))
  if t14
    then b1580[t13, t1, t2, t3]
    else b303[]

-----------------------------------------
-- recursive
b6357 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6357[t0, t1, t2, t3, t4, t5] =
  t6 <- b1580[t4, t3, t1, t0]
  t7 <- add((t0, 1))
  t8 <- primUle((t7, t2))
  if t8
    then b6357[t7, t0, t2, t3, t4, t5]
    else b1578[t4, t3, t5, t2]

-----------------------------------------
-- not recursive
b1954 :: [] >>= [Unit]
b1954[] =
  t0 <- load8((console))
  t1 <- add((console, 1))
  t2 <- load8((t1))
  t3 <- add((console, 2))
  t4 <- load8((t3))
  t5 <- add((console, 3))
  t6 <- load8((t5))
  t7 <- add((console, 6))
  t8 <- load8((t7))
  t9 <- add((t0, 1))
  t10 <- primUle((t9, t4))
  if t10
    then b6357[t9, t0, t4, t6, t2, t8]
    else b1578[t2, t6, t8, t4]

-----------------------------------------
-- not recursive
b6366 :: [Bit 32] >>= [Unit]
b6366[t0] =
  t1 <- add((console, 4))
  store8((t1, t0))

-----------------------------------------
-- not recursive
b1952 :: [Bit 32] >>= [Unit]
b1952[t0] =
  t1 <- add((console, 1))
  t2 <- add((console, 5))
  t3 <- load8((t1))
  t4 <- store8((t2, t3))
  t5 <- add((console, 2))
  t6 <- load8((t5))
  t7 <- add((t0, 1))
  t8 <- primUle((t7, t6))
  if t8
    then b6366[t7]
    else b1954[]

-----------------------------------------
-- not recursive
b6370 :: [Bit 32] >>= [Unit]
b6370[t0] =
  t1 <- add((console, 5))
  store8((t1, t0))

-----------------------------------------
-- not recursive
b1957 :: [Bit 32, Bit 32] >>= [Unit]
b1957[t0, t1] =
  t2 <- add((console, 5))
  t3 <- load8((t2))
  t4 <- add((console, 6))
  t5 <- load8((t4))
  t6 <- mul((t1, 160))
  t7 <- mul((t3, 2))
  t8 <- add((t6, t7))
  t9 <- add((t8, 753664))
  t10 <- and((t0, 255))
  t11 <- shl((t5, 8))
  t12 <- or((t10, t11))
  t13 <- store16((t9, t12))
  t14 <- add((console, 3))
  t15 <- load8((t14))
  t16 <- add((t3, 1))
  t17 <- primUle((t16, t15))
  if t17
    then b6370[t16]
    else b1952[t1]

-----------------------------------------
-- not recursive
b1955 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1955[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1952[t2]
    else b1957[t0, t2]

-----------------------------------------
-- not recursive
b1950 :: [Bit 32] >>= [Unit]
b1950[t0] =
  t1 <- add((console, 4))
  t2 <- load8((t1))
  t3 <- primEq((t0, 13))
  if t3
    then b1952[t2]
    else b1955[t0, 10, t2]

-----------------------------------------
-- not recursive
b2750 :: [Bit 32, Bit 32] >>= [Unit]
b2750[t0, t1] =
  t2 <- b1950[t0]
  returnTo((t1))

-----------------------------------------
-- not recursive
b2749 :: [Bit 32, Bit 32] >>= [Unit]
b2749[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, 13]
  t5 <- b1950[t0]
  returnTo((t1))

-----------------------------------------
-- not recursive
entrypoint kputc :: [] >>= [Unit]
kputc[] =
  t0 <- load1((current))
  t1 <- flagToWord((t0))
  t2 <- mul((t1, 72))
  t3 <- add((users, t2))
  t4 <- add((t3, 28))
  t5 <- load32((t4))
  t6 <- inb((1021))
  t7 <- and((t6, 96))
  t8 <- b1572[t7, 0, t5]
  t9 <- primEq((t5, 10))
  if t9
    then b2749[t5, t3]
    else b2750[t5, t3]

-----------------------------------------
-- not recursive
external keyb_layout :: Bit 32

-----------------------------------------
-- not recursive
keyUp :: Bit 32
keyUp <- area (Stored (Bit 8)) aligned 1

-----------------------------------------
-- not recursive
b1113 :: [Bit 32] >>= [Unit]
b1113[t0] =
  t1 <- and((t0, 127))
  t2 <- add((keyb_layout, t1))
  t3 <- load8((t2))
  t4 <- store8((keyUp, t3))
  t5 <- load1((current))
  t6 <- flagToWord((t5))
  t7 <- mul((t6, 72))
  t8 <- add((users, t7))
  returnTo((t8))

-----------------------------------------
-- not recursive
b1115 :: [Bit 32] >>= [Unit]
b1115[t0] =
  t1 <- lshr((t0, 7))
  t2 <- primEq((t1, 1))
  if t2
    then b1113[t0]
    else b1354[]

-----------------------------------------
-- not recursive
keyDown :: Bit 32
keyDown <- area (Stored (Bit 8)) aligned 1

-----------------------------------------
-- not recursive
b1116 :: [Bit 32] >>= [Unit]
b1116[t0] =
  t1 <- and((t0, 127))
  t2 <- add((keyb_layout, t1))
  t3 <- load8((t2))
  t4 <- load16((753702))
  t5 <- and((t4, 65280))
  t6 <- or((t5, t3))
  t7 <- store16((753702, t6))
  t8 <- store8((keyDown, t3))
  t9 <- lshr((t0, 7))
  t10 <- primEq((t9, 1))
  if t10
    then b1113[t0]
    else b1354[]

-----------------------------------------
-- not recursive
entrypoint keyboardInterrupt :: [] >>= [Unit]
keyboardInterrupt[] =
  t0 <- inb((33))
  t1 <- or((t0, 2))
  t2 <- outb((33, t1))
  t3 <- outb((32, 97))
  t4 <- inb((33))
  t5 <- and((t4, -3))
  t6 <- outb((33, t5))
  t7 <- inb((96))
  t8 <- lshr((t7, 7))
  t9 <- primEq((t8, 0))
  if t9
    then b1116[t7]
    else b1115[t7]

-----------------------------------------
-- not recursive
ticks :: Bit 32
ticks <- area (Stored (Bit 32)) aligned 4

-----------------------------------------
-- recursive
b1697 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1697[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b1697[t11, t1, t2, t3]
    else b303[]

-----------------------------------------
-- recursive
b1699 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1699[t0, t1, t2, t3, t4] =
  t5 <- b1697[t4, t3, t2, t0]
  t6 <- add((t0, 1))
  t7 <- primUle((t6, t1))
  if t7
    then b1699[t6, t1, t2, t3, t4]
    else b303[]

-----------------------------------------
-- not recursive
b1223 :: [] >>= [Unit]
b1223[] =
  t0 <- load8((console))
  t1 <- add((console, 1))
  t2 <- load8((t1))
  t3 <- add((console, 4))
  t4 <- store8((t3, t0))
  t5 <- add((console, 5))
  t6 <- store8((t5, t2))
  t7 <- add((console, 2))
  t8 <- load8((t7))
  t9 <- add((console, 3))
  t10 <- load8((t9))
  t11 <- add((console, 6))
  t12 <- load8((t11))
  b1699[t0, t8, t12, t10, t2]

-----------------------------------------
-- not recursive
objects :: Bit 32
objects <- area (Array 20 GameObject) aligned 4

-----------------------------------------
-- not recursive
ball :: Bit 32
ball <-
  add((objects, 24))

-----------------------------------------
-- not recursive
b4599 :: [] >>= [Unit]
b4599[] =
  t0 <- add((objects, 20))
  t1 <- load32((t0))
  t2 <- and((t1, -17))
  store32((t0, t2))

-----------------------------------------
-- not recursive
b4598 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4598[t0, t1, t2] =
  t3 <- add((t0, t1))
  t4 <- primUgt((t3, t2))
  if t4
    then b4599[]
    else b303[]

-----------------------------------------
-- not recursive
b4597 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4597[t0, t1, t2, t3] =
  t4 <- add((t3, t0))
  t5 <- primUlt((t1, t4))
  if t5
    then b4598[t1, t2, t3]
    else b303[]

-----------------------------------------
-- not recursive
b4596 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4596[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, t1))
  t8 <- primUgt((t7, t2))
  if t8
    then b4597[t3, t4, t5, t6]
    else b303[]

-----------------------------------------
-- not recursive
b4595 :: [] >>= [Unit]
b4595[] =
  t0 <- add((objects, 8))
  t1 <- load32((t0))
  t2 <- add((ball, 8))
  t3 <- load32((t2))
  t4 <- add((objects, 12))
  t5 <- load32((t4))
  t6 <- add((ball, 12))
  t7 <- load32((t6))
  t8 <- load32((objects))
  t9 <- add((objects, 4))
  t10 <- load32((t9))
  t11 <- load32((ball))
  t12 <- add((ball, 4))
  t13 <- load32((t12))
  t14 <- add((t3, t11))
  t15 <- primUlt((t1, t14))
  if t15
    then b4596[t1, t8, t3, t13, t5, t10, t7]
    else b303[]

-----------------------------------------
-- not recursive
b4594 :: [] >>= [Unit]
b4594[] =
  t0 <- primEq((objects, ball))
  if t0
    then b303[]
    else b4595[]

-----------------------------------------
-- not recursive
b4593 :: [Bit 32] >>= [Unit]
b4593[t0] =
  t1 <- and((t0, 1))
  t2 <- primNeq((t1, 0))
  if t2
    then b4594[]
    else b303[]

-----------------------------------------
-- not recursive
b4592 :: [] >>= [Unit]
b4592[] =
  t0 <- add((objects, 20))
  t1 <- load32((t0))
  t2 <- and((t1, 16))
  t3 <- primNeq((t2, 0))
  if t3
    then b4593[t1]
    else b303[]

-----------------------------------------
-- not recursive
b1017 :: [Bit 32] >>= [Unit]
b1017[t0] =
  t1 <- add((t0, 20))
  t2 <- load32((t1))
  t3 <- and((t2, -17))
  store32((t1, t3))

-----------------------------------------
-- not recursive
b2036 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2036[t0, t1, t2, t3] =
  t4 <- add((t0, t1))
  t5 <- primUgt((t4, t2))
  if t5
    then b1017[t3]
    else b303[]

-----------------------------------------
-- not recursive
b2035 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2035[t0, t1, t2, t3, t4] =
  t5 <- add((t3, t0))
  t6 <- primUlt((t1, t5))
  if t6
    then b2036[t1, t2, t3, t4]
    else b303[]

-----------------------------------------
-- not recursive
b2034 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2034[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t0, t1))
  t9 <- primUgt((t8, t2))
  if t9
    then b2035[t3, t4, t5, t6, t7]
    else b303[]

-----------------------------------------
-- not recursive
b1644 :: [Bit 32] >>= [Unit]
b1644[t0] =
  t1 <- add((t0, 8))
  t2 <- load32((t1))
  t3 <- add((ball, 8))
  t4 <- load32((t3))
  t5 <- add((t0, 12))
  t6 <- load32((t5))
  t7 <- add((ball, 12))
  t8 <- load32((t7))
  t9 <- load32((t0))
  t10 <- add((t0, 4))
  t11 <- load32((t10))
  t12 <- load32((ball))
  t13 <- add((ball, 4))
  t14 <- load32((t13))
  t15 <- add((t4, t12))
  t16 <- primUlt((t2, t15))
  if t16
    then b2034[t2, t9, t4, t14, t6, t11, t8, t0]
    else b303[]

-----------------------------------------
-- not recursive
b2427 :: [Bit 32] >>= [Unit]
b2427[t0] =
  t1 <- primEq((t0, ball))
  if t1
    then b303[]
    else b1644[t0]

-----------------------------------------
-- not recursive
b2658 :: [Bit 32, Bit 32] >>= [Unit]
b2658[t0, t1] =
  t2 <- and((t0, 1))
  t3 <- primNeq((t2, 0))
  if t3
    then b2427[t1]
    else b303[]

-----------------------------------------
-- not recursive
b2660 :: [Bit 32] >>= [Unit]
b2660[t0] =
  t1 <- add((t0, 20))
  t2 <- load32((t1))
  t3 <- and((t2, 16))
  t4 <- primNeq((t3, 0))
  if t4
    then b2658[t2, t0]
    else b303[]

-----------------------------------------
-- not recursive
str0 :: Bit 32
str0 <- "nothing\n"

-----------------------------------------
-- not recursive
b1818 :: [] >>= [Bit 32]
b1818[] =
  return 0

-----------------------------------------
-- recursive
b5076 :: [Bit 32, Bit 32] >>= [Bit 32]
b5076[t0, t1] =
  t2 <- b1950[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1818[]
    else b5069[t3, t1]
b5074 :: [Bit 32, Bit 32] >>= [Bit 32]
b5074[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, 13]
  t5 <- b1950[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1818[]
    else b5069[t6, t1]
b5069 :: [Bit 32, Bit 32] >>= [Bit 32]
b5069[t0, t1] =
  t2 <- add((t1, 1))
  b5071[t0, t2]
b5071 :: [Bit 32, Bit 32] >>= [Bit 32]
b5071[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b5074[t0, t1]
    else b5076[t0, t1]

-----------------------------------------
-- not recursive
b5084 :: [Bit 32] >>= [Bit 32]
b5084[t0] =
  t1 <- add((str0, 1))
  b5071[t0, t1]

-----------------------------------------
-- not recursive
b5082 :: [] >>= [Bit 32]
b5082[] =
  t0 <- load8((str0))
  t1 <- primEq((t0, 0))
  if t1
    then b1818[]
    else b5084[t0]

-----------------------------------------
-- recursive
b6443 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6443[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- primUle((t7, t2))
  if t8
    then b6448[t3, t7, 79, t2, t6, t5, t4]
    else b303[]
b6438 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6438[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t1, t0))
  t9 <- primUle((t8, t2))
  if t9
    then b6436[t8, t5, t3, t7, t6, t0, t1, t4]
    else b6443[1, t7, t4, t6, t0, t1, t5]
b6436 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6436[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- mul((t0, 160))
  t9 <- mul((t2, 2))
  t10 <- add((t8, t9))
  t11 <- add((t10, 753664))
  t12 <- shl((t1, 8))
  t13 <- and((t12, 65280))
  t14 <- or((t13, 32))
  t15 <- store16((t11, t14))
  t16 <- add((t3, 1))
  t17 <- primUle((t16, t7))
  if t17
    then b6448[t4, t16, 79, t7, t1, t6, t5]
    else b303[]
b6448 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6448[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- primUle((t7, t2))
  if t8
    then b6438[t6, t5, 24, t7, t3, t4, t0, t1]
    else b6443[1, t1, t3, t0, t6, t5, t4]

-----------------------------------------
-- recursive
b6449 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6449[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t1, t0))
  t9 <- primUle((t8, t2))
  if t9
    then b2182[t8, t7, t6, t5, t4, t3]
    else b303[]
b2182 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2182[t0, t1, t2, t3, t4, t5] =
  t6 <- b6448[t1, t5, 79, t4, t3, t0, t2]
  b6449[1, t0, 0, t5, t4, t3, t2, t1]

-----------------------------------------
-- not recursive
b2181 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2181[t0, t1, t2, t3] =
  t4 <- add((console, 1))
  t5 <- load8((t4))
  t6 <- load8((console))
  b2182[t3, t5, t6, t2, t1, t0]

-----------------------------------------
-- recursive
b6457 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6457[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t1, t0))
  t9 <- primUle((t8, t2))
  if t9
    then b2191[t8, t2, t7, t6, t5, t4, t3]
    else b303[]
b2191 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2191[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b6448[t2, t6, 79, t5, t4, t0, t3]
  b6457[1, t0, t1, t6, t5, t4, t3, t2]

-----------------------------------------
-- not recursive
b6002 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6002[t0, t1, t2, t3, t4] =
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- load8((console))
  b2191[t4, t0, t6, t7, t3, t2, t1]

-----------------------------------------
-- not recursive
b6682 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6682[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- add((t5, -1))
  t7 <- primUle((t6, 0))
  if t7
    then b6002[t6, t4, t3, t2, t1]
    else b2181[t4, t3, t2, t1]

-----------------------------------------
-- not recursive
b6681 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6681[t0, t1, t2, t3, t4] =
  t5 <- add((t2, t1))
  t6 <- add((t5, -1))
  t7 <- primUle((t6, 0))
  if t7
    then b6002[t6, t4, t0, t3, t2]
    else b2181[t4, t0, t3, t2]

-----------------------------------------
-- not recursive
b6701 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6701[t0, t1, t2] =
  t3 <- load32((objects))
  t4 <- add((objects, 4))
  t5 <- load32((t4))
  t6 <- add((objects, 16))
  t7 <- load32((t6))
  t8 <- add((t1, t3))
  t9 <- add((t8, -1))
  t10 <- primUle((t9, t2))
  if t10
    then b6681[t9, t5, t0, t7, t1]
    else b6682[t5, t0, t7, t2, t1]

-----------------------------------------
-- not recursive
b6686 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6686[t0, t1, t2, t3] =
  t4 <- primUle((t0, t1))
  if t4
    then b6701[t0, t2, t3]
    else b303[]

-----------------------------------------
-- not recursive
b2190 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2190[t0, t1, t2, t3, t4] =
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- load8((console))
  b2191[t4, t3, t6, t7, t2, t1, t0]

-----------------------------------------
-- not recursive
b6684 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6684[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- add((t6, -1))
  t8 <- primUle((t7, t5))
  if t8
    then b6002[t7, t4, t3, t2, t1]
    else b2190[t4, t3, t2, t5, t1]

-----------------------------------------
-- not recursive
b6683 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6683[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t2, t1))
  t7 <- add((t6, -1))
  t8 <- primUle((t7, t5))
  if t8
    then b6002[t7, t4, t0, t3, t2]
    else b2190[t4, t0, t3, t5, t2]

-----------------------------------------
-- not recursive
b6702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6702[t0, t1, t2, t3] =
  t4 <- load32((objects))
  t5 <- add((objects, 4))
  t6 <- load32((t5))
  t7 <- add((objects, 16))
  t8 <- load32((t7))
  t9 <- add((t1, t4))
  t10 <- add((t9, -1))
  t11 <- primUle((t10, t2))
  if t11
    then b6683[t10, t6, t0, t8, t1, t3]
    else b6684[t6, t0, t8, t2, t1, t3]

-----------------------------------------
-- not recursive
b6685 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6685[t0, t1, t2, t3] =
  t4 <- primUle((t0, t1))
  if t4
    then b6702[t0, t2, t3, t1]
    else b303[]

-----------------------------------------
-- not recursive
b6474 :: [Bit 32, Bit 32] >>= [Unit]
b6474[t0, t1] =
  t2 <- add((objects, 12))
  t3 <- load32((t2))
  t4 <- load8((console))
  t5 <- add((console, 2))
  t6 <- load8((t5))
  t7 <- sub((t6, t4))
  t8 <- primUle((t7, 24))
  if t8
    then b6685[t3, t7, t0, t1]
    else b6686[t3, 0, t0, t1]

-----------------------------------------
-- not recursive
b4577 :: [Bit 32] >>= [Unit]
b4577[t0] =
  t1 <- b5082[]
  t2 <- primUle((t0, t1))
  if t2
    then b6474[t0, t1]
    else b303[]

-----------------------------------------
-- not recursive
b6047 :: [Bit 32, Bit 32] >>= [Unit]
b6047[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b6474[t0, t1]
    else b303[]

-----------------------------------------
-- not recursive
b4576 :: [] >>= [Unit]
b4576[] =
  t0 <- add((objects, 8))
  t1 <- load32((t0))
  t2 <- add((console, 1))
  t3 <- load8((t2))
  t4 <- add((console, 3))
  t5 <- load8((t4))
  t6 <- sub((t5, t3))
  t7 <- primUle((t6, 79))
  if t7
    then b6047[t1, t6]
    else b4577[t1]

-----------------------------------------
-- not recursive
b2162 :: [] >>= [Unit]
b2162[] =
  t0 <- add((objects, 20))
  t1 <- load32((t0))
  t2 <- and((t1, 16))
  t3 <- primNeq((t2, 0))
  if t3
    then b4576[]
    else b303[]

-----------------------------------------
-- not recursive
b1145 :: [Bit 32] >>= [Bit 32]
b1145[t0] =
  t1 <- add((t0, 87))
  and((t1, 255))

-----------------------------------------
-- not recursive
b1144 :: [Bit 32] >>= [Bit 32]
b1144[t0] =
  t1 <- add((t0, 48))
  and((t1, 255))

-----------------------------------------
-- not recursive
b1608 :: [Bit 32, Bit 32] >>= [Bit 32]
b1608[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b1144[t0]
    else b1145[t0]

-----------------------------------------
-- not recursive
spinner :: Bit 32
spinner <- area (Array 4 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- not recursive
spinpos :: Bit 32
spinpos <- area (Stored (Ix 4)) aligned 1

-----------------------------------------
-- not recursive
b2501 :: [] >>= [Unit]
b2501[] =
  t0 <- load8((spinpos))
  t1 <- add((spinner, t0))
  t2 <- load8((t1))
  t3 <- add((t0, 1))
  t4 <- and((t3, 3))
  t5 <- store8((spinpos, t4))
  t6 <- load16((753822))
  t7 <- and((t6, 65280))
  t8 <- or((t7, t2))
  t9 <- store16((753822, t8))
  t10 <- load1((current))
  t11 <- flagToWord((t10))
  t12 <- mul((t11, 72))
  t13 <- add((users, t12))
  returnTo((t13))

-----------------------------------------
-- not recursive
b4197 :: [] >>= [Unit]
b4197[] =
  t0 <- store1((current, flag0))
  b2501[]

-----------------------------------------
-- not recursive
b6410 :: [Bit 32] >>= [Unit]
b6410[t0] =
  t1 <- wordToFlag((t0))
  t2 <- store1((current, t1))
  b2501[]

-----------------------------------------
-- not recursive
b1105 :: [] >>= [Unit]
b1105[] =
  t0 <- load1((current))
  t1 <- flagToWord((t0))
  t2 <- add((t1, 1))
  t3 <- primUle((t2, 1))
  if t3
    then b6410[t2]
    else b4197[]

-----------------------------------------
-- not recursive
b1107 :: [Bit 32] >>= [Unit]
b1107[t0] =
  t1 <- and((t0, 15))
  t2 <- primEq((t1, 0))
  if t2
    then b1105[]
    else b1354[]

-----------------------------------------
-- not recursive
pos :: Bit 32
pos <- area (Stored (Ix 80)) aligned 1

-----------------------------------------
-- not recursive
b865 :: [Bit 32, Bit 32] >>= [Unit]
b865[t0, t1] =
  t2 <- mul((t0, 2))
  t3 <- add((t2, 753664))
  t4 <- load16((t3))
  t5 <- and((t1, 255))
  t6 <- and((t4, 65280))
  t7 <- or((t6, t5))
  store16((t3, t7))

-----------------------------------------
-- not recursive
dir :: Bit 32
dir <- area (Stored Bool) aligned 1

-----------------------------------------
-- not recursive
b1732 :: [Bit 32, Bit 32] >>= [Unit]
b1732[t0, t1] =
  t2 <- b865[t0, 124]
  t3 <- store1((dir, flag1))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b1105[]
    else b1354[]

-----------------------------------------
-- not recursive
b6415 :: [Bit 32, Bit 32] >>= [Unit]
b6415[t0, t1] =
  t2 <- b865[t0, 60]
  t3 <- store8((pos, t0))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b1105[]
    else b1354[]

-----------------------------------------
-- not recursive
b6417 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6417[t0, t1, t2, t3] =
  t4 <- sub((t2, t0))
  t5 <- primSle((t1, t4))
  if t5
    then b6415[t4, t3]
    else b1732[t2, t3]

-----------------------------------------
-- not recursive
b1729 :: [Bit 32, Bit 32] >>= [Unit]
b1729[t0, t1] =
  t2 <- b865[t0, 124]
  t3 <- store1((dir, flag0))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b1105[]
    else b1354[]

-----------------------------------------
-- not recursive
b6420 :: [Bit 32, Bit 32] >>= [Unit]
b6420[t0, t1] =
  t2 <- b865[t0, 62]
  t3 <- store8((pos, t0))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b1105[]
    else b1354[]

-----------------------------------------
-- not recursive
b6422 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6422[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6420[t4, t3]
    else b1729[t1, t3]

-----------------------------------------
-- not recursive
b1726 :: [Bit 32] >>= [Unit]
b1726[t0] =
  t1 <- load8((pos))
  t2 <- b865[t1, 32]
  t3 <- load1((dir))
  if t3
    then b6422[1, t1, 68, t0]
    else b6417[1, 46, t1, t0]

-----------------------------------------
-- not recursive
b2505 :: [Bit 32] >>= [Unit]
b2505[t0] =
  t1 <- and((t0, 3))
  t2 <- primEq((t1, 0))
  if t2
    then b1726[t0]
    else b1107[t0]

-----------------------------------------
-- recursive
b6425 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6425[t0, t1, t2] =
  t3 <- lshr((t1, 4))
  t4 <- mul((t0, 2))
  t5 <- add((t4, 753664))
  t6 <- load16((t5))
  t7 <- and((t3, 15))
  t8 <- b1608[t7, 9]
  t9 <- and((t6, 65280))
  t10 <- or((t9, t8))
  t11 <- store16((t5, t10))
  t12 <- add((t0, -1))
  t13 <- primSle((70, t12))
  if t13
    then b6425[t12, t3, t2]
    else b2505[t2]

-----------------------------------------
-- not recursive
b3031 :: [Bit 32] >>= [Unit]
b3031[t0] =
  t1 <- load16((753818))
  t2 <- and((t0, 15))
  t3 <- b1608[t2, 9]
  t4 <- and((t1, 65280))
  t5 <- or((t4, t3))
  t6 <- store16((753818, t5))
  t7 <- lshr((t0, 4))
  t8 <- load16((753816))
  t9 <- and((t7, 15))
  t10 <- b1608[t9, 9]
  t11 <- and((t8, 65280))
  t12 <- or((t11, t10))
  t13 <- store16((753816, t12))
  b6425[75, t7, t0]

-----------------------------------------
-- not recursive
b6000 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6000[t0, t1, t2, t3, t4, t5] =
  t6 <- primUle((t0, t1))
  if t6
    then b6002[t0, t5, t4, t3, t2]
    else b2181[t5, t4, t3, t2]

-----------------------------------------
-- not recursive
b6020 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6020[t0, t1, t2, t3, t4, t5] =
  t6 <- primUle((t0, t1))
  if t6
    then b6002[t0, t5, t4, t3, t2]
    else b2190[t5, t4, t3, t1, t2]

-----------------------------------------
-- recursive
b3143 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3143[t0, t1, t2, t3, t4] =
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- load8((console))
  t8 <- b6448[t6, t0, 79, t1, t2, t3, t7]
  t9 <- b6449[1, t3, 0, t0, t1, t2, t7, t6]
  b6461[1, t4, 19]
b6704 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6704[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- add((t6, -1))
  t8 <- primUle((t7, 0))
  if t8
    then b6059[t7, t4, t3, t2, t1, t5]
    else b3143[t4, t3, t2, t1, t5]
b6059 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6059[t0, t1, t2, t3, t4, t5] =
  t6 <- add((console, 1))
  t7 <- load8((t6))
  t8 <- load8((console))
  t9 <- b6448[t7, t1, 79, t2, t3, t4, t8]
  t10 <- b6457[1, t4, t0, t1, t2, t3, t8, t7]
  b6461[1, t5, 19]
b6715 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6715[t0, t1, t2, t3, t4] =
  t5 <- load32((t1))
  t6 <- add((t1, 4))
  t7 <- load32((t6))
  t8 <- add((t1, 16))
  t9 <- load32((t8))
  t10 <- add((t2, t5))
  t11 <- add((t10, -1))
  t12 <- primUle((t11, t3))
  if t12
    then b6703[t11, t7, t0, t9, t2, t4]
    else b6704[t7, t0, t9, t3, t2, t4]
b6703 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6703[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t2, t1))
  t7 <- add((t6, -1))
  t8 <- b6000[t7, 0, t2, t3, t0, t4]
  b6461[1, t5, 19]
b6708 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6708[t0, t1, t2, t3, t4, t5] =
  t6 <- primUle((t0, t1))
  if t6
    then b6715[t0, t4, t2, t3, t5]
    else b6461[1, t5, 19]
b6706 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6706[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- add((t7, -1))
  t9 <- primUle((t8, t5))
  if t9
    then b6059[t8, t4, t3, t2, t1, t6]
    else b3149[t4, t3, t2, t5, t1, t6]
b3149 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3149[t0, t1, t2, t3, t4, t5] =
  t6 <- add((console, 1))
  t7 <- load8((t6))
  t8 <- load8((console))
  t9 <- b6448[t7, t0, 79, t1, t2, t4, t8]
  t10 <- b6457[1, t4, t3, t0, t1, t2, t8, t7]
  b6461[1, t5, 19]
b6716 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6716[t0, t1, t2, t3, t4, t5] =
  t6 <- load32((t1))
  t7 <- add((t1, 4))
  t8 <- load32((t7))
  t9 <- add((t1, 16))
  t10 <- load32((t9))
  t11 <- add((t2, t6))
  t12 <- add((t11, -1))
  t13 <- primUle((t12, t3))
  if t13
    then b6705[t12, t8, t0, t10, t2, t4, t5]
    else b6706[t8, t0, t10, t3, t2, t4, t5]
b6705 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6705[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t2, t1))
  t8 <- add((t7, -1))
  t9 <- b6020[t8, t5, t2, t3, t0, t4]
  b6461[1, t6, 19]
b6460 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6460[t0, t1, t2, t3] =
  t4 <- add((t1, 12))
  t5 <- load32((t4))
  t6 <- load8((console))
  t7 <- add((console, 2))
  t8 <- load8((t7))
  t9 <- sub((t8, t6))
  t10 <- primUle((t9, 24))
  if t10
    then b6707[t5, t9, t0, t2, t1, t3]
    else b6708[t5, 0, t0, t2, t1, t3]
b6707 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6707[t0, t1, t2, t3, t4, t5] =
  t6 <- primUle((t0, t1))
  if t6
    then b6716[t0, t4, t2, t3, t1, t5]
    else b6461[1, t5, 19]
b2652 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2652[t0, t1, t2] =
  t3 <- b5082[]
  t4 <- primUle((t0, t3))
  if t4
    then b6460[t0, t1, t3, t2]
    else b6461[1, t2, 19]
b2651 :: [Bit 32, Bit 32] >>= [Unit]
b2651[t0, t1] =
  t2 <- add((t0, 8))
  t3 <- load32((t2))
  t4 <- add((console, 1))
  t5 <- load8((t4))
  t6 <- add((console, 3))
  t7 <- load8((t6))
  t8 <- sub((t7, t5))
  t9 <- primUle((t8, 79))
  if t9
    then b6100[t3, t8, t0, t1]
    else b2652[t3, t0, t1]
b6100 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6100[t0, t1, t2, t3] =
  t4 <- primUle((t0, t1))
  if t4
    then b6460[t0, t2, t1, t3]
    else b6461[1, t3, 19]
b6463 :: [Bit 32] >>= [Unit]
b6463[t0] =
  t1 <- mul((t0, 24))
  t2 <- add((objects, t1))
  t3 <- add((t2, 20))
  t4 <- load32((t3))
  t5 <- and((t4, 16))
  t6 <- primNeq((t5, 0))
  if t6
    then b2651[t2, t0]
    else b6461[1, t0, 19]
b6461 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6461[t0, t1, t2] =
  t3 <- add((t1, t0))
  t4 <- primUle((t3, t2))
  if t4
    then b6463[t3]
    else b303[]

-----------------------------------------
-- not recursive
b3276 :: [Bit 32, Bit 32] >>= [Unit]
b3276[t0, t1] =
  t2 <- b6461[1, t0, 19]
  b3031[t1]

-----------------------------------------
-- not recursive
b3467 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3467[t0, t1, t2, t3, t4, t5] =
  t6 <- add((console, 1))
  t7 <- load8((t6))
  t8 <- load8((console))
  t9 <- b6448[t7, t0, 79, t1, t2, t3, t8]
  t10 <- b6449[1, t3, 0, t0, t1, t2, t8, t7]
  t11 <- b6461[1, t4, 19]
  b3031[t5]

-----------------------------------------
-- not recursive
b6104 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6104[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((console, 1))
  t8 <- load8((t7))
  t9 <- load8((console))
  t10 <- b6448[t8, t1, 79, t2, t3, t4, t9]
  t11 <- b6457[1, t4, t0, t1, t2, t3, t9, t8]
  t12 <- b6461[1, t5, 19]
  b3031[t6]

-----------------------------------------
-- not recursive
b6691 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6691[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- add((t7, -1))
  t9 <- primUle((t8, 0))
  if t9
    then b6104[t8, t4, t3, t2, t1, t5, t6]
    else b3467[t4, t3, t2, t1, t5, t6]

-----------------------------------------
-- not recursive
b6690 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6690[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t2, t1))
  t8 <- add((t7, -1))
  t9 <- b6000[t8, 0, t2, t3, t0, t4]
  t10 <- b6461[1, t5, 19]
  b3031[t6]

-----------------------------------------
-- not recursive
b6709 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6709[t0, t1, t2, t3, t4, t5] =
  t6 <- load32((t1))
  t7 <- add((t1, 4))
  t8 <- load32((t7))
  t9 <- add((t1, 16))
  t10 <- load32((t9))
  t11 <- add((t2, t6))
  t12 <- add((t11, -1))
  t13 <- primUle((t12, t3))
  if t13
    then b6690[t12, t8, t0, t10, t2, t4, t5]
    else b6691[t8, t0, t10, t3, t2, t4, t5]

-----------------------------------------
-- not recursive
b6695 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6695[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUle((t0, t1))
  if t7
    then b6709[t0, t4, t2, t3, t6, t5]
    else b3276[t6, t5]

-----------------------------------------
-- not recursive
b3477 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3477[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((console, 1))
  t8 <- load8((t7))
  t9 <- load8((console))
  t10 <- b6448[t8, t0, 79, t1, t2, t4, t9]
  t11 <- b6457[1, t4, t3, t0, t1, t2, t9, t8]
  t12 <- b6461[1, t5, 19]
  b3031[t6]

-----------------------------------------
-- not recursive
b6693 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6693[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t1, t0))
  t9 <- add((t8, -1))
  t10 <- primUle((t9, t5))
  if t10
    then b6104[t9, t4, t3, t2, t1, t6, t7]
    else b3477[t4, t3, t2, t5, t1, t6, t7]

-----------------------------------------
-- not recursive
b6692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6692[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t2, t1))
  t9 <- add((t8, -1))
  t10 <- b6020[t9, t5, t2, t3, t0, t4]
  t11 <- b6461[1, t6, 19]
  b3031[t7]

-----------------------------------------
-- not recursive
b6710 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6710[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- load32((t1))
  t8 <- add((t1, 4))
  t9 <- load32((t8))
  t10 <- add((t1, 16))
  t11 <- load32((t10))
  t12 <- add((t2, t7))
  t13 <- add((t12, -1))
  t14 <- primUle((t13, t3))
  if t14
    then b6692[t13, t9, t0, t11, t2, t4, t5, t6]
    else b6693[t9, t0, t11, t3, t2, t4, t5, t6]

-----------------------------------------
-- not recursive
b6694 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6694[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUle((t0, t1))
  if t7
    then b6710[t0, t4, t2, t3, t1, t6, t5]
    else b3276[t6, t5]

-----------------------------------------
-- not recursive
b6467 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6467[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 12))
  t6 <- load32((t5))
  t7 <- load8((console))
  t8 <- add((console, 2))
  t9 <- load8((t8))
  t10 <- sub((t9, t7))
  t11 <- primUle((t10, 24))
  if t11
    then b6694[t6, t10, t0, t2, t1, t4, t3]
    else b6695[t6, 0, t0, t2, t1, t4, t3]

-----------------------------------------
-- not recursive
b6138 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6138[t0, t1, t2, t3, t4] =
  t5 <- primUle((t0, t1))
  if t5
    then b6467[t0, t2, t1, t4, t3]
    else b3276[t4, t3]

-----------------------------------------
-- recursive
b3271 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3271[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- add((console, 3))
  t8 <- load8((t7))
  t9 <- sub((t8, t6))
  t10 <- primUle((t9, 79))
  if t10
    then b6138[t4, t9, t0, t2, t1]
    else b3272[t4, t0, t1, t2]
b3272 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3272[t0, t1, t2, t3] =
  t4 <- b5082[]
  t5 <- primUle((t0, t4))
  if t5
    then b6467[t0, t1, t4, t2, t3]
    else b6468[1, t2, 19, t3]
b6468 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6468[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6470[t4, t3]
    else b3031[t3]
b6470 :: [Bit 32, Bit 32] >>= [Unit]
b6470[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- add((t3, 20))
  t5 <- load32((t4))
  t6 <- and((t5, 16))
  t7 <- primNeq((t6, 0))
  if t7
    then b3271[t3, t0, t1]
    else b6468[1, t0, 19, t1]

-----------------------------------------
-- not recursive
b3334 :: [Bit 32] >>= [Unit]
b3334[t0] =
  t1 <- b2162[]
  b6470[1, t0]

-----------------------------------------
-- recursive
b6480 :: [Bit 32, Bit 32] >>= [Unit]
b6480[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- b2660[t3]
  t5 <- add((t0, 1))
  t6 <- primUle((t5, 19))
  if t6
    then b6480[t5, t1]
    else b3334[t1]

-----------------------------------------
-- not recursive
b3333 :: [Bit 32] >>= [Unit]
b3333[t0] =
  t1 <- b4592[]
  b6480[1, t0]

-----------------------------------------
-- not recursive
headingLeft :: Bit 32
headingLeft <- area (Stored Bool) aligned 1

-----------------------------------------
-- not recursive
headingTop :: Bit 32
headingTop <- area (Stored Bool) aligned 1

-----------------------------------------
-- recursive
b6487 :: [Bit 32, Bit 32] >>= [Unit]
b6487[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- b2660[t3]
  t5 <- add((t0, 1))
  t6 <- primUle((t5, 19))
  if t6
    then b6487[t5, t1]
    else b3334[t1]

-----------------------------------------
-- not recursive
b3267 :: [Bit 32] >>= [Unit]
b3267[t0] =
  t1 <- b4592[]
  b6487[1, t0]

-----------------------------------------
-- not recursive
b2161 :: [] >>= [Unit]
b2161[] =
  t0 <- b2162[]
  b6463[1]

-----------------------------------------
-- recursive
b6497 :: [Bit 32] >>= [Unit]
b6497[t0] =
  t1 <- mul((t0, 24))
  t2 <- add((objects, t1))
  t3 <- b2660[t2]
  t4 <- add((t0, 1))
  t5 <- primUle((t4, 19))
  if t5
    then b6497[t4]
    else b2161[]

-----------------------------------------
-- not recursive
b2159 :: [] >>= [Unit]
b2159[] =
  t0 <- b4592[]
  b6497[1]

-----------------------------------------
-- recursive
b6502 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6502[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b3239[t3, t4]
    else b2159[]
b3527 :: [Bit 32, Bit 32] >>= [Unit]
b3527[t0, t1] =
  t2 <- store1((headingLeft, flag1))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 19))
  if t4
    then b3239[t0, t3]
    else b2159[]
b3526 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3526[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3525[t2, t3]
    else b3527[t2, t3]
b3529 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3529[t0, t1, t2] =
  t3 <- add((t1, 20))
  t4 <- load32((t3))
  t5 <- and((t4, 16))
  t6 <- primNeq((t5, 0))
  if t6
    then b3709[t4, t0, t1, t2]
    else b6502[1, t2, 19, t0]
b3709 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3709[t0, t1, t2, t3] =
  t4 <- and((t0, 2))
  t5 <- primNeq((t4, 0))
  if t5
    then b3757[t2, t1, t3]
    else b6502[1, t3, 19, t1]
b3757 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3757[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 8))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((ball, 12))
  t10 <- load32((t9))
  t11 <- load32((t0))
  t12 <- add((t0, 4))
  t13 <- load32((t12))
  t14 <- load32((ball))
  t15 <- add((ball, 4))
  t16 <- load32((t15))
  t17 <- add((t6, t14))
  t18 <- primUlt((t4, t17))
  if t18
    then b3772[t4, t11, t6, t16, t8, t13, t10, t1, t0, t2]
    else b6502[1, t2, 19, t1]
b3772 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3772[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, t1))
  t11 <- primUgt((t10, t2))
  if t11
    then b3785[t3, t4, t5, t6, t7, t8, t9]
    else b6502[1, t9, 19, t7]
b3785 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3785[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t3, t0))
  t8 <- primUlt((t1, t7))
  if t8
    then b3793[t1, t2, t3, t4, t5, t6]
    else b6502[1, t6, 19, t4]
b3793 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3793[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, t1))
  t7 <- primUgt((t6, t2))
  if t7
    then b3798[t4, t3, t5]
    else b6502[1, t5, 19, t3]
b3798 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3798[t0, t1, t2] =
  t3 <- add((ball, 4))
  t4 <- load32((t3))
  t5 <- add((t0, 4))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((t1, t4))
  t10 <- add((t8, t6))
  t11 <- primUle((t1, t8))
  if t11
    then b3525[t1, t2]
    else b3526[t9, t10, t1, t2]
b3525 :: [Bit 32, Bit 32] >>= [Unit]
b3525[t0, t1] =
  t2 <- store1((headingTop, flag1))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 19))
  if t4
    then b3239[t0, t3]
    else b2159[]
b3239 :: [Bit 32, Bit 32] >>= [Unit]
b3239[t0, t1] =
  t2 <- mul((t1, 24))
  t3 <- add((objects, t2))
  t4 <- primEq((t3, ball))
  if t4
    then b6502[1, t1, 19, t0]
    else b3529[t0, t3, t1]

-----------------------------------------
-- not recursive
b6508 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6508[t0, t1, t2] =
  t3 <- b3239[t1, t0]
  b3031[t2]

-----------------------------------------
-- not recursive
b6506 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6506[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6508[t5, t3, t4]
    else b3267[t4]

-----------------------------------------
-- recursive
b3934 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3934[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- add((console, 3))
  t8 <- load8((t7))
  t9 <- sub((t8, t6))
  t10 <- primUle((t9, 79))
  if t10
    then b6138[t4, t9, t0, t2, t1]
    else b3935[t4, t0, t1, t2]
b3935 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3935[t0, t1, t2, t3] =
  t4 <- b5082[]
  t5 <- primUle((t0, t4))
  if t5
    then b6467[t0, t1, t4, t2, t3]
    else b6510[1, t2, 19, t3]
b6510 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6510[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6512[t4, t3]
    else b3031[t3]
b6512 :: [Bit 32, Bit 32] >>= [Unit]
b6512[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- add((t3, 20))
  t5 <- load32((t4))
  t6 <- and((t5, 16))
  t7 <- primNeq((t6, 0))
  if t7
    then b3934[t3, t0, t1]
    else b6510[1, t0, 19, t1]

-----------------------------------------
-- not recursive
b3931 :: [Bit 32] >>= [Unit]
b3931[t0] =
  t1 <- b2162[]
  b6512[1, t0]

-----------------------------------------
-- recursive
b6519 :: [Bit 32, Bit 32] >>= [Unit]
b6519[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- b2660[t3]
  t5 <- add((t0, 1))
  t6 <- primUle((t5, 19))
  if t6
    then b6519[t5, t1]
    else b3931[t1]

-----------------------------------------
-- not recursive
b3930 :: [Bit 32] >>= [Unit]
b3930[t0] =
  t1 <- b4592[]
  b6519[1, t0]

-----------------------------------------
-- not recursive
b6524 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6524[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6508[t5, t3, t4]
    else b3930[t4]

-----------------------------------------
-- not recursive
b3957 :: [Bit 32, Bit 32] >>= [Unit]
b3957[t0, t1] =
  t2 <- store1((headingLeft, flag1))
  t3 <- b3239[t0, 1]
  b3031[t1]

-----------------------------------------
-- not recursive
b3929 :: [Bit 32, Bit 32] >>= [Unit]
b3929[t0, t1] =
  t2 <- store1((headingTop, flag1))
  t3 <- b3239[t0, 1]
  b3031[t1]

-----------------------------------------
-- not recursive
b3956 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3956[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3929[t2, t3]
    else b3957[t2, t3]

-----------------------------------------
-- not recursive
b4606 :: [Bit 32, Bit 32] >>= [Unit]
b4606[t0, t1] =
  t2 <- add((ball, 4))
  t3 <- load32((t2))
  t4 <- add((objects, 4))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((t0, t3))
  t9 <- add((t7, t5))
  t10 <- primUle((t0, t7))
  if t10
    then b3929[t0, t1]
    else b3956[t8, t9, t0, t1]

-----------------------------------------
-- not recursive
b4605 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4605[t0, t1, t2, t3, t4] =
  t5 <- add((t0, t1))
  t6 <- primUgt((t5, t2))
  if t6
    then b4606[t3, t4]
    else b6524[1, 0, 19, t3, t4]

-----------------------------------------
-- not recursive
b4604 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4604[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b4605[t1, t2, t3, t4, t5]
    else b6506[1, 0, 19, t4, t5]

-----------------------------------------
-- not recursive
b4603 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4603[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b4604[t3, t4, t5, t6, t7, t8]
    else b6506[1, 0, 19, t7, t8]

-----------------------------------------
-- not recursive
b4602 :: [Bit 32, Bit 32] >>= [Unit]
b4602[t0, t1] =
  t2 <- add((objects, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((objects))
  t11 <- add((objects, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b4603[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6506[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b4601 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4601[t0, t1, t2] =
  t3 <- and((t0, 2))
  t4 <- primNeq((t3, 0))
  if t4
    then b4602[t1, t2]
    else b6506[1, 0, 19, t1, t2]

-----------------------------------------
-- not recursive
b4600 :: [Bit 32, Bit 32] >>= [Unit]
b4600[t0, t1] =
  t2 <- add((objects, 20))
  t3 <- load32((t2))
  t4 <- and((t3, 16))
  t5 <- primNeq((t4, 0))
  if t5
    then b4601[t3, t0, t1]
    else b6506[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b3323 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3323[t0, t1, t2] =
  t3 <- add((t0, 1))
  t4 <- add((ball, 8))
  t5 <- store32((t4, t1))
  t6 <- add((ball, 12))
  t7 <- store32((t6, t3))
  t8 <- primEq((objects, ball))
  if t8
    then b6506[1, 0, 19, t0, t2]
    else b4600[t0, t2]

-----------------------------------------
-- recursive
b6533 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6533[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b3220[t3, t4]
    else b2159[]
b3518 :: [Bit 32, Bit 32] >>= [Unit]
b3518[t0, t1] =
  t2 <- store1((headingLeft, flag1))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 19))
  if t4
    then b3220[t0, t3]
    else b2159[]
b3517 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3517[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3516[t2, t3]
    else b3518[t2, t3]
b3520 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3520[t0, t1, t2] =
  t3 <- add((t1, 20))
  t4 <- load32((t3))
  t5 <- and((t4, 16))
  t6 <- primNeq((t5, 0))
  if t6
    then b3707[t4, t0, t1, t2]
    else b6533[1, t2, 19, t0]
b3707 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3707[t0, t1, t2, t3] =
  t4 <- and((t0, 2))
  t5 <- primNeq((t4, 0))
  if t5
    then b3755[t2, t1, t3]
    else b6533[1, t3, 19, t1]
b3755 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3755[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 8))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((ball, 12))
  t10 <- load32((t9))
  t11 <- load32((t0))
  t12 <- add((t0, 4))
  t13 <- load32((t12))
  t14 <- load32((ball))
  t15 <- add((ball, 4))
  t16 <- load32((t15))
  t17 <- add((t6, t14))
  t18 <- primUlt((t4, t17))
  if t18
    then b3770[t4, t11, t6, t16, t8, t13, t10, t1, t0, t2]
    else b6533[1, t2, 19, t1]
b3770 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3770[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, t1))
  t11 <- primUgt((t10, t2))
  if t11
    then b3783[t3, t4, t5, t6, t7, t8, t9]
    else b6533[1, t9, 19, t7]
b3783 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3783[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t3, t0))
  t8 <- primUlt((t1, t7))
  if t8
    then b3791[t1, t2, t3, t4, t5, t6]
    else b6533[1, t6, 19, t4]
b3791 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3791[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, t1))
  t7 <- primUgt((t6, t2))
  if t7
    then b3797[t4, t3, t5]
    else b6533[1, t5, 19, t3]
b3797 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3797[t0, t1, t2] =
  t3 <- add((ball, 4))
  t4 <- load32((t3))
  t5 <- add((t0, 4))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((t1, t4))
  t10 <- add((t8, t6))
  t11 <- primUle((t1, t8))
  if t11
    then b3516[t1, t2]
    else b3517[t9, t10, t1, t2]
b3516 :: [Bit 32, Bit 32] >>= [Unit]
b3516[t0, t1] =
  t2 <- store1((headingTop, flag0))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 19))
  if t4
    then b3220[t0, t3]
    else b2159[]
b3220 :: [Bit 32, Bit 32] >>= [Unit]
b3220[t0, t1] =
  t2 <- mul((t1, 24))
  t3 <- add((objects, t2))
  t4 <- primEq((t3, ball))
  if t4
    then b6533[1, t1, 19, t0]
    else b3520[t0, t3, t1]

-----------------------------------------
-- not recursive
b6539 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6539[t0, t1, t2] =
  t3 <- b3220[t1, t0]
  b3031[t2]

-----------------------------------------
-- not recursive
b6537 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6537[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6539[t5, t3, t4]
    else b3267[t4]

-----------------------------------------
-- recursive
b3902 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3902[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- add((console, 3))
  t8 <- load8((t7))
  t9 <- sub((t8, t6))
  t10 <- primUle((t9, 79))
  if t10
    then b6138[t4, t9, t0, t2, t1]
    else b3903[t4, t0, t1, t2]
b3903 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3903[t0, t1, t2, t3] =
  t4 <- b5082[]
  t5 <- primUle((t0, t4))
  if t5
    then b6467[t0, t1, t4, t2, t3]
    else b6541[1, t2, 19, t3]
b6541 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6541[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6543[t4, t3]
    else b3031[t3]
b6543 :: [Bit 32, Bit 32] >>= [Unit]
b6543[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- add((t3, 20))
  t5 <- load32((t4))
  t6 <- and((t5, 16))
  t7 <- primNeq((t6, 0))
  if t7
    then b3902[t3, t0, t1]
    else b6541[1, t0, 19, t1]

-----------------------------------------
-- not recursive
b3899 :: [Bit 32] >>= [Unit]
b3899[t0] =
  t1 <- b2162[]
  b6543[1, t0]

-----------------------------------------
-- recursive
b6550 :: [Bit 32, Bit 32] >>= [Unit]
b6550[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- b2660[t3]
  t5 <- add((t0, 1))
  t6 <- primUle((t5, 19))
  if t6
    then b6550[t5, t1]
    else b3899[t1]

-----------------------------------------
-- not recursive
b3898 :: [Bit 32] >>= [Unit]
b3898[t0] =
  t1 <- b4592[]
  b6550[1, t0]

-----------------------------------------
-- not recursive
b6555 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6555[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6539[t5, t3, t4]
    else b3898[t4]

-----------------------------------------
-- not recursive
b3925 :: [Bit 32, Bit 32] >>= [Unit]
b3925[t0, t1] =
  t2 <- store1((headingLeft, flag1))
  t3 <- b3220[t0, 1]
  b3031[t1]

-----------------------------------------
-- not recursive
b3897 :: [Bit 32, Bit 32] >>= [Unit]
b3897[t0, t1] =
  t2 <- store1((headingTop, flag0))
  t3 <- b3220[t0, 1]
  b3031[t1]

-----------------------------------------
-- not recursive
b3924 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3924[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3897[t2, t3]
    else b3925[t2, t3]

-----------------------------------------
-- not recursive
b4613 :: [Bit 32, Bit 32] >>= [Unit]
b4613[t0, t1] =
  t2 <- add((ball, 4))
  t3 <- load32((t2))
  t4 <- add((objects, 4))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((t0, t3))
  t9 <- add((t7, t5))
  t10 <- primUle((t0, t7))
  if t10
    then b3897[t0, t1]
    else b3924[t8, t9, t0, t1]

-----------------------------------------
-- not recursive
b4612 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4612[t0, t1, t2, t3, t4] =
  t5 <- add((t0, t1))
  t6 <- primUgt((t5, t2))
  if t6
    then b4613[t3, t4]
    else b6555[1, 0, 19, t3, t4]

-----------------------------------------
-- not recursive
b4611 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4611[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b4612[t1, t2, t3, t4, t5]
    else b6537[1, 0, 19, t4, t5]

-----------------------------------------
-- not recursive
b4610 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4610[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b4611[t3, t4, t5, t6, t7, t8]
    else b6537[1, 0, 19, t7, t8]

-----------------------------------------
-- not recursive
b4609 :: [Bit 32, Bit 32] >>= [Unit]
b4609[t0, t1] =
  t2 <- add((objects, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((objects))
  t11 <- add((objects, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b4610[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6537[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b4608 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4608[t0, t1, t2] =
  t3 <- and((t0, 2))
  t4 <- primNeq((t3, 0))
  if t4
    then b4609[t1, t2]
    else b6537[1, 0, 19, t1, t2]

-----------------------------------------
-- not recursive
b4607 :: [Bit 32, Bit 32] >>= [Unit]
b4607[t0, t1] =
  t2 <- add((objects, 20))
  t3 <- load32((t2))
  t4 <- and((t3, 16))
  t5 <- primNeq((t4, 0))
  if t5
    then b4608[t3, t0, t1]
    else b6537[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b3313 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3313[t0, t1, t2] =
  t3 <- add((t0, -1))
  t4 <- add((ball, 8))
  t5 <- store32((t4, t1))
  t6 <- add((ball, 12))
  t7 <- store32((t6, t3))
  t8 <- primEq((objects, ball))
  if t8
    then b6537[1, 0, 19, t0, t2]
    else b4607[t0, t2]

-----------------------------------------
-- not recursive
b3312 :: [Bit 32, Bit 32, Bit 1, Bit 32] >>= [Unit]
b3312[t0, t1, t2, t3] =
  t4 <- add((t0, 1))
  if t2
    then b3313[t1, t4, t3]
    else b3323[t1, t4, t3]

-----------------------------------------
-- recursive
b6564 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6564[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b3201[t3, t4]
    else b2159[]
b3509 :: [Bit 32, Bit 32] >>= [Unit]
b3509[t0, t1] =
  t2 <- store1((headingLeft, flag0))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 19))
  if t4
    then b3201[t0, t3]
    else b2159[]
b3508 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3508[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3507[t2, t3]
    else b3509[t2, t3]
b3511 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3511[t0, t1, t2] =
  t3 <- add((t1, 20))
  t4 <- load32((t3))
  t5 <- and((t4, 16))
  t6 <- primNeq((t5, 0))
  if t6
    then b3705[t4, t0, t1, t2]
    else b6564[1, t2, 19, t0]
b3705 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3705[t0, t1, t2, t3] =
  t4 <- and((t0, 2))
  t5 <- primNeq((t4, 0))
  if t5
    then b3753[t2, t1, t3]
    else b6564[1, t3, 19, t1]
b3753 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3753[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 8))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((ball, 12))
  t10 <- load32((t9))
  t11 <- load32((t0))
  t12 <- add((t0, 4))
  t13 <- load32((t12))
  t14 <- load32((ball))
  t15 <- add((ball, 4))
  t16 <- load32((t15))
  t17 <- add((t6, t14))
  t18 <- primUlt((t4, t17))
  if t18
    then b3768[t4, t11, t6, t16, t8, t13, t10, t1, t0, t2]
    else b6564[1, t2, 19, t1]
b3768 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3768[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, t1))
  t11 <- primUgt((t10, t2))
  if t11
    then b3781[t3, t4, t5, t6, t7, t8, t9]
    else b6564[1, t9, 19, t7]
b3781 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3781[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t3, t0))
  t8 <- primUlt((t1, t7))
  if t8
    then b3789[t1, t2, t3, t4, t5, t6]
    else b6564[1, t6, 19, t4]
b3789 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3789[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, t1))
  t7 <- primUgt((t6, t2))
  if t7
    then b3796[t4, t3, t5]
    else b6564[1, t5, 19, t3]
b3796 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3796[t0, t1, t2] =
  t3 <- add((ball, 4))
  t4 <- load32((t3))
  t5 <- add((t0, 4))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((t1, t4))
  t10 <- add((t8, t6))
  t11 <- primUle((t1, t8))
  if t11
    then b3507[t1, t2]
    else b3508[t9, t10, t1, t2]
b3507 :: [Bit 32, Bit 32] >>= [Unit]
b3507[t0, t1] =
  t2 <- store1((headingTop, flag1))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 19))
  if t4
    then b3201[t0, t3]
    else b2159[]
b3201 :: [Bit 32, Bit 32] >>= [Unit]
b3201[t0, t1] =
  t2 <- mul((t1, 24))
  t3 <- add((objects, t2))
  t4 <- primEq((t3, ball))
  if t4
    then b6564[1, t1, 19, t0]
    else b3511[t0, t3, t1]

-----------------------------------------
-- not recursive
b6570 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6570[t0, t1, t2] =
  t3 <- b3201[t1, t0]
  b3031[t2]

-----------------------------------------
-- not recursive
b6568 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6568[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6570[t5, t3, t4]
    else b3267[t4]

-----------------------------------------
-- recursive
b3870 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3870[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- add((console, 3))
  t8 <- load8((t7))
  t9 <- sub((t8, t6))
  t10 <- primUle((t9, 79))
  if t10
    then b6138[t4, t9, t0, t2, t1]
    else b3871[t4, t0, t1, t2]
b3871 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3871[t0, t1, t2, t3] =
  t4 <- b5082[]
  t5 <- primUle((t0, t4))
  if t5
    then b6467[t0, t1, t4, t2, t3]
    else b6572[1, t2, 19, t3]
b6572 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6572[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6574[t4, t3]
    else b3031[t3]
b6574 :: [Bit 32, Bit 32] >>= [Unit]
b6574[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- add((t3, 20))
  t5 <- load32((t4))
  t6 <- and((t5, 16))
  t7 <- primNeq((t6, 0))
  if t7
    then b3870[t3, t0, t1]
    else b6572[1, t0, 19, t1]

-----------------------------------------
-- not recursive
b3867 :: [Bit 32] >>= [Unit]
b3867[t0] =
  t1 <- b2162[]
  b6574[1, t0]

-----------------------------------------
-- recursive
b6581 :: [Bit 32, Bit 32] >>= [Unit]
b6581[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- b2660[t3]
  t5 <- add((t0, 1))
  t6 <- primUle((t5, 19))
  if t6
    then b6581[t5, t1]
    else b3867[t1]

-----------------------------------------
-- not recursive
b3866 :: [Bit 32] >>= [Unit]
b3866[t0] =
  t1 <- b4592[]
  b6581[1, t0]

-----------------------------------------
-- not recursive
b6586 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6586[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6570[t5, t3, t4]
    else b3866[t4]

-----------------------------------------
-- not recursive
b3893 :: [Bit 32, Bit 32] >>= [Unit]
b3893[t0, t1] =
  t2 <- store1((headingLeft, flag0))
  t3 <- b3201[t0, 1]
  b3031[t1]

-----------------------------------------
-- not recursive
b3865 :: [Bit 32, Bit 32] >>= [Unit]
b3865[t0, t1] =
  t2 <- store1((headingTop, flag1))
  t3 <- b3201[t0, 1]
  b3031[t1]

-----------------------------------------
-- not recursive
b3892 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3892[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3865[t2, t3]
    else b3893[t2, t3]

-----------------------------------------
-- not recursive
b4620 :: [Bit 32, Bit 32] >>= [Unit]
b4620[t0, t1] =
  t2 <- add((ball, 4))
  t3 <- load32((t2))
  t4 <- add((objects, 4))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((t0, t3))
  t9 <- add((t7, t5))
  t10 <- primUle((t0, t7))
  if t10
    then b3865[t0, t1]
    else b3892[t8, t9, t0, t1]

-----------------------------------------
-- not recursive
b4619 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4619[t0, t1, t2, t3, t4] =
  t5 <- add((t0, t1))
  t6 <- primUgt((t5, t2))
  if t6
    then b4620[t3, t4]
    else b6586[1, 0, 19, t3, t4]

-----------------------------------------
-- not recursive
b4618 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4618[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b4619[t1, t2, t3, t4, t5]
    else b6568[1, 0, 19, t4, t5]

-----------------------------------------
-- not recursive
b4617 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4617[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b4618[t3, t4, t5, t6, t7, t8]
    else b6568[1, 0, 19, t7, t8]

-----------------------------------------
-- not recursive
b4616 :: [Bit 32, Bit 32] >>= [Unit]
b4616[t0, t1] =
  t2 <- add((objects, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((objects))
  t11 <- add((objects, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b4617[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6568[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b4615 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4615[t0, t1, t2] =
  t3 <- and((t0, 2))
  t4 <- primNeq((t3, 0))
  if t4
    then b4616[t1, t2]
    else b6568[1, 0, 19, t1, t2]

-----------------------------------------
-- not recursive
b4614 :: [Bit 32, Bit 32] >>= [Unit]
b4614[t0, t1] =
  t2 <- add((objects, 20))
  t3 <- load32((t2))
  t4 <- and((t3, 16))
  t5 <- primNeq((t4, 0))
  if t5
    then b4615[t3, t0, t1]
    else b6568[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b3302 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3302[t0, t1, t2] =
  t3 <- add((t0, 1))
  t4 <- add((ball, 8))
  t5 <- store32((t4, t1))
  t6 <- add((ball, 12))
  t7 <- store32((t6, t3))
  t8 <- primEq((objects, ball))
  if t8
    then b6568[1, 0, 19, t0, t2]
    else b4614[t0, t2]

-----------------------------------------
-- recursive
b6595 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6595[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b3181[t3, t4]
    else b2159[]
b3500 :: [Bit 32, Bit 32] >>= [Unit]
b3500[t0, t1] =
  t2 <- store1((headingLeft, flag0))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 19))
  if t4
    then b3181[t0, t3]
    else b2159[]
b3499 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3499[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3498[t2, t3]
    else b3500[t2, t3]
b3502 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3502[t0, t1, t2] =
  t3 <- add((t1, 20))
  t4 <- load32((t3))
  t5 <- and((t4, 16))
  t6 <- primNeq((t5, 0))
  if t6
    then b3703[t4, t0, t1, t2]
    else b6595[1, t2, 19, t0]
b3703 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3703[t0, t1, t2, t3] =
  t4 <- and((t0, 2))
  t5 <- primNeq((t4, 0))
  if t5
    then b3751[t2, t1, t3]
    else b6595[1, t3, 19, t1]
b3751 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3751[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 8))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((ball, 12))
  t10 <- load32((t9))
  t11 <- load32((t0))
  t12 <- add((t0, 4))
  t13 <- load32((t12))
  t14 <- load32((ball))
  t15 <- add((ball, 4))
  t16 <- load32((t15))
  t17 <- add((t6, t14))
  t18 <- primUlt((t4, t17))
  if t18
    then b3766[t4, t11, t6, t16, t8, t13, t10, t1, t0, t2]
    else b6595[1, t2, 19, t1]
b3766 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3766[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, t1))
  t11 <- primUgt((t10, t2))
  if t11
    then b3779[t3, t4, t5, t6, t7, t8, t9]
    else b6595[1, t9, 19, t7]
b3779 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3779[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t3, t0))
  t8 <- primUlt((t1, t7))
  if t8
    then b3787[t1, t2, t3, t4, t5, t6]
    else b6595[1, t6, 19, t4]
b3787 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3787[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, t1))
  t7 <- primUgt((t6, t2))
  if t7
    then b3795[t4, t3, t5]
    else b6595[1, t5, 19, t3]
b3795 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3795[t0, t1, t2] =
  t3 <- add((ball, 4))
  t4 <- load32((t3))
  t5 <- add((t0, 4))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((t1, t4))
  t10 <- add((t8, t6))
  t11 <- primUle((t1, t8))
  if t11
    then b3498[t1, t2]
    else b3499[t9, t10, t1, t2]
b3498 :: [Bit 32, Bit 32] >>= [Unit]
b3498[t0, t1] =
  t2 <- store1((headingTop, flag0))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 19))
  if t4
    then b3181[t0, t3]
    else b2159[]
b3181 :: [Bit 32, Bit 32] >>= [Unit]
b3181[t0, t1] =
  t2 <- mul((t1, 24))
  t3 <- add((objects, t2))
  t4 <- primEq((t3, ball))
  if t4
    then b6595[1, t1, 19, t0]
    else b3502[t0, t3, t1]

-----------------------------------------
-- not recursive
b6601 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6601[t0, t1, t2] =
  t3 <- b3181[t1, t0]
  b3031[t2]

-----------------------------------------
-- not recursive
b6599 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6599[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6601[t5, t3, t4]
    else b3267[t4]

-----------------------------------------
-- recursive
b3838 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3838[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- add((console, 3))
  t8 <- load8((t7))
  t9 <- sub((t8, t6))
  t10 <- primUle((t9, 79))
  if t10
    then b6138[t4, t9, t0, t2, t1]
    else b3839[t4, t0, t1, t2]
b3839 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3839[t0, t1, t2, t3] =
  t4 <- b5082[]
  t5 <- primUle((t0, t4))
  if t5
    then b6467[t0, t1, t4, t2, t3]
    else b6603[1, t2, 19, t3]
b6603 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6603[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6605[t4, t3]
    else b3031[t3]
b6605 :: [Bit 32, Bit 32] >>= [Unit]
b6605[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- add((t3, 20))
  t5 <- load32((t4))
  t6 <- and((t5, 16))
  t7 <- primNeq((t6, 0))
  if t7
    then b3838[t3, t0, t1]
    else b6603[1, t0, 19, t1]

-----------------------------------------
-- not recursive
b3835 :: [Bit 32] >>= [Unit]
b3835[t0] =
  t1 <- b2162[]
  b6605[1, t0]

-----------------------------------------
-- recursive
b6612 :: [Bit 32, Bit 32] >>= [Unit]
b6612[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- b2660[t3]
  t5 <- add((t0, 1))
  t6 <- primUle((t5, 19))
  if t6
    then b6612[t5, t1]
    else b3835[t1]

-----------------------------------------
-- not recursive
b3834 :: [Bit 32] >>= [Unit]
b3834[t0] =
  t1 <- b4592[]
  b6612[1, t0]

-----------------------------------------
-- not recursive
b6617 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6617[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6601[t5, t3, t4]
    else b3834[t4]

-----------------------------------------
-- not recursive
b3861 :: [Bit 32, Bit 32] >>= [Unit]
b3861[t0, t1] =
  t2 <- store1((headingLeft, flag0))
  t3 <- b3181[t0, 1]
  b3031[t1]

-----------------------------------------
-- not recursive
b3833 :: [Bit 32, Bit 32] >>= [Unit]
b3833[t0, t1] =
  t2 <- store1((headingTop, flag0))
  t3 <- b3181[t0, 1]
  b3031[t1]

-----------------------------------------
-- not recursive
b3860 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3860[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3833[t2, t3]
    else b3861[t2, t3]

-----------------------------------------
-- not recursive
b4627 :: [Bit 32, Bit 32] >>= [Unit]
b4627[t0, t1] =
  t2 <- add((ball, 4))
  t3 <- load32((t2))
  t4 <- add((objects, 4))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((t0, t3))
  t9 <- add((t7, t5))
  t10 <- primUle((t0, t7))
  if t10
    then b3833[t0, t1]
    else b3860[t8, t9, t0, t1]

-----------------------------------------
-- not recursive
b4626 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4626[t0, t1, t2, t3, t4] =
  t5 <- add((t0, t1))
  t6 <- primUgt((t5, t2))
  if t6
    then b4627[t3, t4]
    else b6617[1, 0, 19, t3, t4]

-----------------------------------------
-- not recursive
b4625 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4625[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b4626[t1, t2, t3, t4, t5]
    else b6599[1, 0, 19, t4, t5]

-----------------------------------------
-- not recursive
b4624 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4624[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b4625[t3, t4, t5, t6, t7, t8]
    else b6599[1, 0, 19, t7, t8]

-----------------------------------------
-- not recursive
b4623 :: [Bit 32, Bit 32] >>= [Unit]
b4623[t0, t1] =
  t2 <- add((objects, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((objects))
  t11 <- add((objects, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b4624[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6599[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b4622 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4622[t0, t1, t2] =
  t3 <- and((t0, 2))
  t4 <- primNeq((t3, 0))
  if t4
    then b4623[t1, t2]
    else b6599[1, 0, 19, t1, t2]

-----------------------------------------
-- not recursive
b4621 :: [Bit 32, Bit 32] >>= [Unit]
b4621[t0, t1] =
  t2 <- add((objects, 20))
  t3 <- load32((t2))
  t4 <- and((t3, 16))
  t5 <- primNeq((t4, 0))
  if t5
    then b4622[t3, t0, t1]
    else b6599[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b3265 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3265[t0, t1, t2] =
  t3 <- add((t0, -1))
  t4 <- add((ball, 8))
  t5 <- store32((t4, t1))
  t6 <- add((ball, 12))
  t7 <- store32((t6, t3))
  t8 <- primEq((objects, ball))
  if t8
    then b6599[1, 0, 19, t0, t2]
    else b4621[t0, t2]

-----------------------------------------
-- not recursive
b3264 :: [Bit 32, Bit 32, Bit 1, Bit 32] >>= [Unit]
b3264[t0, t1, t2, t3] =
  t4 <- add((t0, -1))
  if t2
    then b3265[t1, t4, t3]
    else b3302[t1, t4, t3]

-----------------------------------------
-- not recursive
b3263 :: [Bit 32] >>= [Unit]
b3263[t0] =
  t1 <- load1((headingLeft))
  t2 <- load1((headingTop))
  t3 <- add((ball, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 12))
  t6 <- load32((t5))
  if t1
    then b3264[t4, t6, t2, t0]
    else b3312[t4, t6, t2, t0]

-----------------------------------------
-- not recursive
b3712 :: [Bit 32] >>= [Unit]
b3712[t0] =
  t1 <- and((t0, 15))
  t2 <- primEq((t1, 0))
  if t2
    then b3263[t0]
    else b3333[t0]

-----------------------------------------
-- not recursive
b979 :: [] >>= [Unit]
b979[] =
  t0 <- add((objects, 8))
  t1 <- load32((t0))
  t2 <- add((t1, -1))
  store32((t0, t2))

-----------------------------------------
-- not recursive
b2729 :: [Bit 32, Bit 32] >>= [Unit]
b2729[t0, t1] =
  t2 <- primNeq((t0, t1))
  if t2
    then b979[]
    else b303[]

-----------------------------------------
-- not recursive
b3711 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3711[t0, t1, t2] =
  t3 <- b2729[t0, t1]
  t4 <- and((t2, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b3263[t2]
    else b3333[t2]

-----------------------------------------
-- not recursive
b3633 :: [Bit 32] >>= [Unit]
b3633[t0] =
  t1 <- load8((keyDown))
  t2 <- load8((keyUp))
  t3 <- primEq((52, t1))
  if t3
    then b3711[52, t2, t0]
    else b3712[t0]

-----------------------------------------
-- recursive
b3566 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3566[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- add((console, 3))
  t8 <- load8((t7))
  t9 <- sub((t8, t6))
  t10 <- primUle((t9, 79))
  if t10
    then b6138[t4, t9, t0, t2, t1]
    else b3567[t4, t0, t1, t2]
b3567 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3567[t0, t1, t2, t3] =
  t4 <- b5082[]
  t5 <- primUle((t0, t4))
  if t5
    then b6467[t0, t1, t4, t2, t3]
    else b6626[1, t2, 19, t3]
b6626 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6626[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6628[t4, t3]
    else b3031[t3]
b6628 :: [Bit 32, Bit 32] >>= [Unit]
b6628[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- add((t3, 20))
  t5 <- load32((t4))
  t6 <- and((t5, 16))
  t7 <- primNeq((t6, 0))
  if t7
    then b3566[t3, t0, t1]
    else b6626[1, t0, 19, t1]

-----------------------------------------
-- not recursive
b3627 :: [Bit 32] >>= [Unit]
b3627[t0] =
  t1 <- b2162[]
  b6628[1, t0]

-----------------------------------------
-- recursive
b6635 :: [Bit 32, Bit 32] >>= [Unit]
b6635[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- b2660[t3]
  t5 <- add((t0, 1))
  t6 <- primUle((t5, 19))
  if t6
    then b6635[t5, t1]
    else b3627[t1]

-----------------------------------------
-- not recursive
b3626 :: [Bit 32] >>= [Unit]
b3626[t0] =
  t1 <- b4592[]
  b6635[1, t0]

-----------------------------------------
-- recursive
b6642 :: [Bit 32, Bit 32] >>= [Unit]
b6642[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- b2660[t3]
  t5 <- add((t0, 1))
  t6 <- primUle((t5, 19))
  if t6
    then b6642[t5, t1]
    else b3627[t1]

-----------------------------------------
-- not recursive
b3562 :: [Bit 32] >>= [Unit]
b3562[t0] =
  t1 <- b4592[]
  b6642[1, t0]

-----------------------------------------
-- not recursive
b6647 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6647[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6508[t5, t3, t4]
    else b3562[t4]

-----------------------------------------
-- not recursive
b4632 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4632[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b4605[t1, t2, t3, t4, t5]
    else b6647[1, 0, 19, t4, t5]

-----------------------------------------
-- not recursive
b4631 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4631[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b4632[t3, t4, t5, t6, t7, t8]
    else b6647[1, 0, 19, t7, t8]

-----------------------------------------
-- not recursive
b4630 :: [Bit 32, Bit 32] >>= [Unit]
b4630[t0, t1] =
  t2 <- add((objects, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((objects))
  t11 <- add((objects, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b4631[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6647[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b4629 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4629[t0, t1, t2] =
  t3 <- and((t0, 2))
  t4 <- primNeq((t3, 0))
  if t4
    then b4630[t1, t2]
    else b6647[1, 0, 19, t1, t2]

-----------------------------------------
-- not recursive
b4628 :: [Bit 32, Bit 32] >>= [Unit]
b4628[t0, t1] =
  t2 <- add((objects, 20))
  t3 <- load32((t2))
  t4 <- and((t3, 16))
  t5 <- primNeq((t4, 0))
  if t5
    then b4629[t3, t0, t1]
    else b6647[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b3616 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3616[t0, t1, t2] =
  t3 <- add((t0, 1))
  t4 <- add((ball, 8))
  t5 <- store32((t4, t1))
  t6 <- add((ball, 12))
  t7 <- store32((t6, t3))
  t8 <- primEq((objects, ball))
  if t8
    then b6647[1, 0, 19, t0, t2]
    else b4628[t0, t2]

-----------------------------------------
-- not recursive
b6650 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6650[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6539[t5, t3, t4]
    else b3562[t4]

-----------------------------------------
-- not recursive
b4637 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4637[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b4612[t1, t2, t3, t4, t5]
    else b6650[1, 0, 19, t4, t5]

-----------------------------------------
-- not recursive
b4636 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4636[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b4637[t3, t4, t5, t6, t7, t8]
    else b6650[1, 0, 19, t7, t8]

-----------------------------------------
-- not recursive
b4635 :: [Bit 32, Bit 32] >>= [Unit]
b4635[t0, t1] =
  t2 <- add((objects, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((objects))
  t11 <- add((objects, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b4636[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6650[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b4634 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4634[t0, t1, t2] =
  t3 <- and((t0, 2))
  t4 <- primNeq((t3, 0))
  if t4
    then b4635[t1, t2]
    else b6650[1, 0, 19, t1, t2]

-----------------------------------------
-- not recursive
b4633 :: [Bit 32, Bit 32] >>= [Unit]
b4633[t0, t1] =
  t2 <- add((objects, 20))
  t3 <- load32((t2))
  t4 <- and((t3, 16))
  t5 <- primNeq((t4, 0))
  if t5
    then b4634[t3, t0, t1]
    else b6650[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b3606 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3606[t0, t1, t2] =
  t3 <- add((t0, -1))
  t4 <- add((ball, 8))
  t5 <- store32((t4, t1))
  t6 <- add((ball, 12))
  t7 <- store32((t6, t3))
  t8 <- primEq((objects, ball))
  if t8
    then b6650[1, 0, 19, t0, t2]
    else b4633[t0, t2]

-----------------------------------------
-- not recursive
b3605 :: [Bit 32, Bit 32, Bit 1, Bit 32] >>= [Unit]
b3605[t0, t1, t2, t3] =
  t4 <- add((t0, 1))
  if t2
    then b3606[t1, t4, t3]
    else b3616[t1, t4, t3]

-----------------------------------------
-- not recursive
b6653 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6653[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6570[t5, t3, t4]
    else b3562[t4]

-----------------------------------------
-- not recursive
b4642 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4642[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b4619[t1, t2, t3, t4, t5]
    else b6653[1, 0, 19, t4, t5]

-----------------------------------------
-- not recursive
b4641 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4641[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b4642[t3, t4, t5, t6, t7, t8]
    else b6653[1, 0, 19, t7, t8]

-----------------------------------------
-- not recursive
b4640 :: [Bit 32, Bit 32] >>= [Unit]
b4640[t0, t1] =
  t2 <- add((objects, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((objects))
  t11 <- add((objects, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b4641[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6653[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b4639 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4639[t0, t1, t2] =
  t3 <- and((t0, 2))
  t4 <- primNeq((t3, 0))
  if t4
    then b4640[t1, t2]
    else b6653[1, 0, 19, t1, t2]

-----------------------------------------
-- not recursive
b4638 :: [Bit 32, Bit 32] >>= [Unit]
b4638[t0, t1] =
  t2 <- add((objects, 20))
  t3 <- load32((t2))
  t4 <- and((t3, 16))
  t5 <- primNeq((t4, 0))
  if t5
    then b4639[t3, t0, t1]
    else b6653[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b3595 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3595[t0, t1, t2] =
  t3 <- add((t0, 1))
  t4 <- add((ball, 8))
  t5 <- store32((t4, t1))
  t6 <- add((ball, 12))
  t7 <- store32((t6, t3))
  t8 <- primEq((objects, ball))
  if t8
    then b6653[1, 0, 19, t0, t2]
    else b4638[t0, t2]

-----------------------------------------
-- not recursive
b6656 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6656[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6601[t5, t3, t4]
    else b3562[t4]

-----------------------------------------
-- not recursive
b4647 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4647[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b4626[t1, t2, t3, t4, t5]
    else b6656[1, 0, 19, t4, t5]

-----------------------------------------
-- not recursive
b4646 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4646[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b4647[t3, t4, t5, t6, t7, t8]
    else b6656[1, 0, 19, t7, t8]

-----------------------------------------
-- not recursive
b4645 :: [Bit 32, Bit 32] >>= [Unit]
b4645[t0, t1] =
  t2 <- add((objects, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((objects))
  t11 <- add((objects, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b4646[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6656[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b4644 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4644[t0, t1, t2] =
  t3 <- and((t0, 2))
  t4 <- primNeq((t3, 0))
  if t4
    then b4645[t1, t2]
    else b6656[1, 0, 19, t1, t2]

-----------------------------------------
-- not recursive
b4643 :: [Bit 32, Bit 32] >>= [Unit]
b4643[t0, t1] =
  t2 <- add((objects, 20))
  t3 <- load32((t2))
  t4 <- and((t3, 16))
  t5 <- primNeq((t4, 0))
  if t5
    then b4644[t3, t0, t1]
    else b6656[1, 0, 19, t0, t1]

-----------------------------------------
-- not recursive
b3560 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3560[t0, t1, t2] =
  t3 <- add((t0, -1))
  t4 <- add((ball, 8))
  t5 <- store32((t4, t1))
  t6 <- add((ball, 12))
  t7 <- store32((t6, t3))
  t8 <- primEq((objects, ball))
  if t8
    then b6656[1, 0, 19, t0, t2]
    else b4643[t0, t2]

-----------------------------------------
-- not recursive
b3559 :: [Bit 32, Bit 32, Bit 1, Bit 32] >>= [Unit]
b3559[t0, t1, t2, t3] =
  t4 <- add((t0, -1))
  if t2
    then b3560[t1, t4, t3]
    else b3595[t1, t4, t3]

-----------------------------------------
-- not recursive
b3558 :: [Bit 32] >>= [Unit]
b3558[t0] =
  t1 <- load1((headingLeft))
  t2 <- load1((headingTop))
  t3 <- add((ball, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 12))
  t6 <- load32((t5))
  if t1
    then b3559[t4, t6, t2, t0]
    else b3605[t4, t6, t2, t0]

-----------------------------------------
-- not recursive
b3764 :: [Bit 32] >>= [Unit]
b3764[t0] =
  t1 <- and((t0, 15))
  t2 <- primEq((t1, 0))
  if t2
    then b3558[t0]
    else b3626[t0]

-----------------------------------------
-- not recursive
b3763 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3763[t0, t1, t2] =
  t3 <- b2729[t0, t1]
  t4 <- and((t2, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b3558[t2]
    else b3626[t2]

-----------------------------------------
-- not recursive
b3735 :: [Bit 32] >>= [Unit]
b3735[t0] =
  t1 <- load8((keyDown))
  t2 <- load8((keyUp))
  t3 <- primEq((52, t1))
  if t3
    then b3763[52, t2, t0]
    else b3764[t0]

-----------------------------------------
-- not recursive
b3778 :: [Bit 32] >>= [Unit]
b3778[t0] =
  t1 <- add((objects, 8))
  t2 <- load32((t1))
  t3 <- add((t2, -1))
  t4 <- store32((t1, t3))
  t5 <- and((t0, 15))
  t6 <- primEq((t5, 0))
  if t6
    then b3558[t0]
    else b3626[t0]

-----------------------------------------
-- not recursive
b3765 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3765[t0, t1, t2] =
  t3 <- primNeq((t0, t1))
  if t3
    then b3778[t2]
    else b3764[t2]

-----------------------------------------
-- not recursive
b3734 :: [Bit 32] >>= [Unit]
b3734[t0] =
  t1 <- add((objects, 8))
  t2 <- load32((t1))
  t3 <- add((t2, 1))
  t4 <- store32((t1, t3))
  t5 <- load8((keyDown))
  t6 <- load8((keyUp))
  t7 <- primEq((52, t5))
  if t7
    then b3765[52, t6, t0]
    else b3764[t0]

-----------------------------------------
-- not recursive
b3632 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3632[t0, t1, t2] =
  t3 <- primNeq((t0, t1))
  if t3
    then b3734[t2]
    else b3735[t2]

-----------------------------------------
-- not recursive
entrypoint timerInterrupt :: [] >>= [Unit]
timerInterrupt[] =
  t0 <- inb((33))
  t1 <- or((t0, 1))
  t2 <- outb((33, t1))
  t3 <- outb((32, 96))
  t4 <- inb((33))
  t5 <- and((t4, -2))
  t6 <- outb((33, t5))
  t7 <- load32((ticks))
  t8 <- add((t7, 1))
  t9 <- store32((ticks, t8))
  t10 <- b1223[]
  t11 <- load8((keyDown))
  t12 <- load8((keyUp))
  t13 <- primEq((54, t11))
  if t13
    then b3632[54, t12, t7]
    else b3633[t7]

-----------------------------------------
-- not recursive
str55 :: Bit 32
str55 <- "Exception 0x"

-----------------------------------------
-- not recursive
itoaBuf :: Bit 32
itoaBuf <- area (Array 32 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- not recursive
b1947 :: [Bit 32] >>= [Unit]
b1947[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  t3 <- b1572[t2, 0, 13]
  t4 <- add((console, 4))
  t5 <- load8((t4))
  t6 <- primEq((t0, 13))
  if t6
    then b1952[t5]
    else b1955[t0, 10, t5]

-----------------------------------------
-- not recursive
b1959 :: [Bit 32] >>= [Unit]
b1959[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  t3 <- b1572[t2, 0, t0]
  t4 <- primEq((t0, 10))
  if t4
    then b1947[t0]
    else b1950[t0]

-----------------------------------------
-- not recursive
b3390 :: [] >>= [Unit]
b3390[] =
  t0 <- load8((itoaBuf))
  t1 <- b1959[t0]
  return Unit

-----------------------------------------
-- recursive
b6381 :: [Bit 32, Bit 32] >>= [Unit]
b6381[t0, t1] =
  t2 <- b1959[t1]
  b6379[1, t0, 0, t1]
b6379 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6379[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6381[t4, t3]
    else b303[]

-----------------------------------------
-- not recursive
b6388 :: [Bit 32, Bit 32] >>= [Unit]
b6388[t0, t1] =
  t2 <- b1959[t1]
  t3 <- b6379[1, t0, 0, t1]
  t4 <- load8((itoaBuf))
  t5 <- b1959[t4]
  return Unit

-----------------------------------------
-- not recursive
b6386 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6386[t0, t1, t2] =
  t3 <- add((t1, t0))
  t4 <- primUle((t3, t1))
  if t4
    then b6388[t3, t2]
    else b3390[]

-----------------------------------------
-- recursive
b3126 :: [Bit 32] >>= [Unit]
b3126[t0] =
  t1 <- add((itoaBuf, t0))
  t2 <- load8((t1))
  t3 <- b1959[t2]
  t4 <- add((t0, -1))
  t5 <- primSle((0, t4))
  if t5
    then b3126[t4]
    else b303[]

-----------------------------------------
-- not recursive
b3129 :: [Bit 32, Bit 32] >>= [Unit]
b3129[t0, t1] =
  t2 <- b6379[1, t1, 0, t0]
  b3126[t1]

-----------------------------------------
-- recursive
b6392 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6392[t0, t1, t2, t3] =
  t4 <- lshr((t1, 4))
  t5 <- primEq((t4, 0))
  if t5
    then b3129[t3, t2]
    else b3128[t4, t0, t3]
b3128 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3128[t0, t1, t2] =
  t3 <- add((itoaBuf, t1))
  t4 <- and((t0, 15))
  t5 <- b1608[t4, 9]
  t6 <- store8((t3, t5))
  t7 <- add((t1, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b6392[t7, t0, t1, t2]
    else b3129[t2, t1]

-----------------------------------------
-- not recursive
b6397 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6397[t0, t1, t2] =
  t3 <- lshr((t1, 4))
  t4 <- primEq((t3, 0))
  if t4
    then b6386[1, 0, t2]
    else b3128[t3, t0, t2]

-----------------------------------------
-- not recursive
b6395 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6395[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6397[t5, t3, t4]
    else b6386[1, 0, t4]

-----------------------------------------
-- not recursive
str56 :: Bit 32
str56 <- ", frame=0x"

-----------------------------------------
-- not recursive
str57 :: Bit 32
str57 <- "\n"

-----------------------------------------
-- recursive
b5997 :: [Bit 32, Bit 32] >>= [Unit]
b5997[t0, t1] =
  t2 <- b1950[t0]
  b5025[t1]
b5996 :: [Bit 32, Bit 32] >>= [Unit]
b5996[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, 13]
  t5 <- b1950[t0]
  b5025[t1]
b5025 :: [Bit 32] >>= [Unit]
b5025[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b303[]
    else b5027[t1, t0]
b5027 :: [Bit 32, Bit 32] >>= [Unit]
b5027[t0, t1] =
  t2 <- add((t1, 1))
  b5034[t0, t2]
b5034 :: [Bit 32, Bit 32] >>= [Unit]
b5034[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b5996[t0, t1]
    else b5997[t0, t1]

-----------------------------------------
-- not recursive
b5037 :: [Bit 32] >>= [Unit]
b5037[t0] =
  t1 <- add((str57, 1))
  b5034[t0, t1]

-----------------------------------------
-- not recursive
b1806 :: [Bit 32] >>= [Unit]
b1806[t0] =
  t1 <- and((t0, 15))
  t2 <- b1608[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6395[1, 0, 31, t0, 32]
  t5 <- load8((str57))
  t6 <- primEq((t5, 0))
  if t6
    then b303[]
    else b5037[t5]

-----------------------------------------
-- recursive
b5047 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5047[t0, t1, t2] =
  t3 <- b1950[t0]
  b5038[t1, t2]
b5045 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5045[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5038[t1, t2]
b5038 :: [Bit 32, Bit 32] >>= [Unit]
b5038[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1806[t1]
    else b5040[t2, t0, t1]
b5040 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5040[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5042[t0, t3, t2]
b5042 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5042[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5045[t0, t1, t2]
    else b5047[t0, t1, t2]

-----------------------------------------
-- not recursive
b5050 :: [Bit 32, Bit 32] >>= [Unit]
b5050[t0, t1] =
  t2 <- add((str56, 1))
  b5042[t0, t2, t1]

-----------------------------------------
-- not recursive
b1810 :: [Bit 32, Bit 32] >>= [Unit]
b1810[t0, t1] =
  t2 <- and((t0, 15))
  t3 <- b1608[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b6395[1, 0, 31, t0, 32]
  t6 <- load8((str56))
  t7 <- primEq((t6, 0))
  if t7
    then b1806[t1]
    else b5050[t6, t1]

-----------------------------------------
-- recursive
b5060 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5060[t0, t1, t2, t3] =
  t4 <- b1950[t0]
  b5051[t1, t2, t3]
b5058 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5058[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, 13]
  t7 <- b1950[t0]
  b5051[t1, t2, t3]
b5051 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5051[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b1810[t2, t1]
    else b5053[t3, t0, t1, t2]
b5053 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5053[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5055[t0, t4, t3, t2]
b5055 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5055[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5058[t0, t1, t3, t2]
    else b5060[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b5063 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5063[t0, t1, t2] =
  t3 <- add((str55, 1))
  b5055[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
entrypoint unhandled :: [Bit 32, Bit 32] >>= [Unit]
unhandled[t0, t1] =
  t2 <- load8((str55))
  t3 <- primEq((t2, 0))
  if t3
    then b1810[t0, t1]
    else b5063[t2, t1, t0]

-----------------------------------------
-- not recursive
s283 :: Unit
s283 <-
  Unit()

-----------------------------------------
-- not recursive
b4027 :: [] >>= [Unit]
b4027[] =
  return s283

-----------------------------------------
-- not recursive
b4335 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4335[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12] =
  t13 <- add((t12, t1))
  t14 <- store32((t13, t0))
  t15 <- add((t12, t3))
  t16 <- store32((t15, t2))
  t17 <- add((t12, t5))
  t18 <- store32((t17, t4))
  t19 <- add((t12, t7))
  t20 <- store32((t19, t6))
  t21 <- add((t12, t9))
  t22 <- store32((t21, t8))
  t23 <- add((t12, t11))
  store32((t23, t10))

-----------------------------------------
-- recursive
b6722 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6722[t0, t1, t2, t3, t4] =
  t5 <- and((t0, 2))
  t6 <- primEq((t5, 2))
  if t6
    then b6721[192, t1, t2, t3, t4]
    else b6721[208, t1, t2, t3, t4]
b6717 :: [Bit 32, Bit 32] >>= [Unit]
b6717[t0, t1] =
  t2 <- add((t0, -5))
  t3 <- div((t2, 5))
  t4 <- nzrem((t2, 5))
  t5 <- shl((t4, 3))
  t6 <- add((t5, 3))
  t7 <- mul((t3, 3))
  t8 <- add((t7, 2))
  t9 <- and((t2, 1))
  t10 <- primEq((t9, 1))
  if t10
    then b6721[80, t8, t6, t1, t0]
    else b6722[t2, t8, t6, t1, t0]
b6721 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6721[t0, t1, t2, t3, t4] =
  t5 <- b4335[6, 0, 1, 4, t2, 8, t1, 12, t0, 16, 19, 20, t3]
  b4995[t4, t3]
b6711 :: [Bit 32, Bit 32] >>= [Unit]
b6711[t0, t1] =
  t2 <- primEq((t0, 4))
  if t2
    then b6696[44, 0, 1, 4, 0, 8, 0, 12, 112, 16, 20, t1, t0]
    else b6717[t0, t1]
b6697 :: [Bit 32, Bit 32] >>= [Unit]
b6697[t0, t1] =
  t2 <- primEq((t0, 3))
  if t2
    then b6696[1, 0, 25, 4, 44, 8, 0, 12, 112, 16, 20, t1, t0]
    else b6711[t0, t1]
b6660 :: [Bit 32, Bit 32] >>= [Unit]
b6660[t0, t1] =
  t2 <- primEq((t0, 2))
  if t2
    then b6696[1, 0, 25, 4, 0, 8, 0, 12, 112, 16, 20, t1, t0]
    else b6697[t0, t1]
b6696 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6696[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12] =
  t13 <- add((t11, t1))
  t14 <- store32((t13, t0))
  t15 <- add((t11, t3))
  t16 <- store32((t15, t2))
  t17 <- add((t11, t5))
  t18 <- store32((t17, t4))
  t19 <- add((t11, t7))
  t20 <- store32((t19, t6))
  t21 <- add((t11, t9))
  t22 <- store32((t21, t8))
  t23 <- add((t11, t10))
  t24 <- store32((t23, 18))
  b4995[t12, t11]
b6183 :: [Bit 32, Bit 32] >>= [Unit]
b6183[t0, t1] =
  t2 <- primEq((t0, 1))
  if t2
    then b6659[t1, t0]
    else b6660[t0, t1]
b6659 :: [Bit 32, Bit 32] >>= [Unit]
b6659[t0, t1] =
  t2 <- b4335[1, 0, 1, 4, 18, 8, 20, 12, 224, 16, 26, 20, t0]
  b4995[t1, t0]
b5920 :: [Bit 32, Bit 32] >>= [Unit]
b5920[t0, t1] =
  t2 <- primEq((t0, 0))
  if t2
    then b6182[t1, t0]
    else b6183[t0, t1]
b6182 :: [Bit 32, Bit 32] >>= [Unit]
b6182[t0, t1] =
  t2 <- b4335[8, 0, 1, 4, 18, 8, 21, 12, 48, 16, 22, 20, t0]
  b4995[t1, t0]
b4995 :: [Bit 32, Bit 32] >>= [Unit]
b4995[t0, t1] =
  t2 <- add((t0, 1))
  t3 <- add((t1, 24))
  b4523[t3, t2]
b4523 :: [Bit 32, Bit 32] >>= [Unit]
b4523[t0, t1] =
  t2 <- primUlt((t1, 20))
  if t2
    then b5920[t1, t0]
    else b4027[]

-----------------------------------------
-- recursive
b4531 :: [Bit 32, Bit 32] >>= [Unit]
b4531[t0, t1] =
  t2 <- store8((t0, 0))
  t3 <- add((t1, 1))
  t4 <- add((t0, 1))
  b4530[t4, t3]
b4530 :: [Bit 32, Bit 32] >>= [Unit]
b4530[t0, t1] =
  t2 <- primUlt((t1, 32))
  if t2
    then b4531[t0, t1]
    else b4027[]

-----------------------------------------
-- not recursive
str45 :: Bit 32
str45 <- " Last key pressed:"

-----------------------------------------
-- not recursive
str11 :: Bit 32
str11 <- "Headers:\n"

-----------------------------------------
-- not recursive
str1 :: Bit 32
str1 <- " "

-----------------------------------------
-- not recursive
str12 :: Bit 32
str12 <- "header"

-----------------------------------------
-- not recursive
str2 :: Bit 32
str2 <- "["

-----------------------------------------
-- recursive
b6663 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6663[t0, t1, t2, t3] =
  t4 <- nzdiv((t1, 10))
  t5 <- primEq((t4, 0))
  if t5
    then b3129[t3, t2]
    else b3339[t4, t0, t3]
b3339 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3339[t0, t1, t2] =
  t3 <- add((itoaBuf, t1))
  t4 <- nzrem((t0, 10))
  t5 <- b1608[t4, 9]
  t6 <- store8((t3, t5))
  t7 <- add((t1, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b6663[t7, t0, t1, t2]
    else b3129[t2, t1]

-----------------------------------------
-- not recursive
b6671 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6671[t0, t1, t2] =
  t3 <- nzdiv((t1, 10))
  t4 <- primEq((t3, 0))
  if t4
    then b6386[1, 0, t2]
    else b3339[t3, t0, t2]

-----------------------------------------
-- not recursive
b6669 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6669[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6671[t5, t3, t4]
    else b6386[1, 0, t4]

-----------------------------------------
-- not recursive
str3 :: Bit 32
str3 <- "]: "

-----------------------------------------
-- not recursive
str5 :: Bit 32
str5 <- "[0x"

-----------------------------------------
-- not recursive
str6 :: Bit 32
str6 <- "-0x"

-----------------------------------------
-- not recursive
str7 :: Bit 32
str7 <- "], entry 0x"

-----------------------------------------
-- not recursive
b1880 :: [Bit 32] >>= [Unit]
b1880[t0] =
  t1 <- add((t0, 8))
  t2 <- load32((t1))
  t3 <- and((t2, 15))
  t4 <- b1608[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- lshr((t2, 4))
  t7 <- primEq((t6, 0))
  if t7
    then b6386[1, 0, 32]
    else b3128[t6, 1, 32]

-----------------------------------------
-- recursive
b5099 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5099[t0, t1, t2] =
  t3 <- b1950[t0]
  b5090[t1, t2]
b5097 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5097[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5090[t1, t2]
b5090 :: [Bit 32, Bit 32] >>= [Unit]
b5090[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1880[t1]
    else b5092[t2, t0, t1]
b5092 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5092[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5094[t0, t3, t2]
b5094 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5094[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5097[t0, t1, t2]
    else b5099[t0, t1, t2]

-----------------------------------------
-- not recursive
b5102 :: [Bit 32, Bit 32] >>= [Unit]
b5102[t0, t1] =
  t2 <- add((str7, 1))
  b5094[t0, t2, t1]

-----------------------------------------
-- not recursive
b1882 :: [Bit 32] >>= [Unit]
b1882[t0] =
  t1 <- add((t0, 4))
  t2 <- load32((t1))
  t3 <- and((t2, 15))
  t4 <- b1608[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- b6395[1, 0, 31, t2, 32]
  t7 <- load8((str7))
  t8 <- primEq((t7, 0))
  if t8
    then b1880[t0]
    else b5102[t7, t0]

-----------------------------------------
-- recursive
b5112 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5112[t0, t1, t2] =
  t3 <- b1950[t0]
  b5103[t1, t2]
b5110 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5110[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5103[t1, t2]
b5103 :: [Bit 32, Bit 32] >>= [Unit]
b5103[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1882[t1]
    else b5105[t2, t0, t1]
b5105 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5105[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5107[t0, t3, t2]
b5107 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5107[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5110[t0, t1, t2]
    else b5112[t0, t1, t2]

-----------------------------------------
-- not recursive
b5115 :: [Bit 32, Bit 32] >>= [Unit]
b5115[t0, t1] =
  t2 <- add((str6, 1))
  b5107[t0, t2, t1]

-----------------------------------------
-- not recursive
b1884 :: [Bit 32] >>= [Unit]
b1884[t0] =
  t1 <- load32((t0))
  t2 <- and((t1, 15))
  t3 <- b1608[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b6395[1, 0, 31, t1, 32]
  t6 <- load8((str6))
  t7 <- primEq((t6, 0))
  if t7
    then b1882[t0]
    else b5115[t6, t0]

-----------------------------------------
-- recursive
b5125 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5125[t0, t1, t2] =
  t3 <- b1950[t0]
  b5116[t1, t2]
b5123 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5123[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5116[t1, t2]
b5116 :: [Bit 32, Bit 32] >>= [Unit]
b5116[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1884[t1]
    else b5118[t2, t0, t1]
b5118 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5118[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5120[t0, t3, t2]
b5120 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5120[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5123[t0, t1, t2]
    else b5125[t0, t1, t2]

-----------------------------------------
-- not recursive
b5138 :: [Bit 32, Bit 32] >>= [Unit]
b5138[t0, t1] =
  t2 <- add((str5, 1))
  b5120[t0, t2, t1]

-----------------------------------------
-- not recursive
b5136 :: [Bit 32] >>= [Unit]
b5136[t0] =
  t1 <- load8((str5))
  t2 <- primEq((t1, 0))
  if t2
    then b1884[t0]
    else b5138[t1, t0]

-----------------------------------------
-- not recursive
str4 :: Bit 32
str4 <- "\n"

-----------------------------------------
-- not recursive
b1886 :: [Bit 32] >>= [Bit 32]
b1886[t0] =
  add((t0, 1))

-----------------------------------------
-- recursive
b5135 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5135[t0, t1, t2] =
  t3 <- b1950[t0]
  b5126[t1, t2]
b5133 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5133[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5126[t1, t2]
b5126 :: [Bit 32, Bit 32] >>= [Bit 32]
b5126[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1886[t1]
    else b5128[t2, t0, t1]
b5128 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5128[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5130[t0, t3, t2]
b5130 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5130[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5133[t0, t1, t2]
    else b5135[t0, t1, t2]

-----------------------------------------
-- not recursive
b5141 :: [Bit 32, Bit 32] >>= [Bit 32]
b5141[t0, t1] =
  t2 <- add((str4, 1))
  b5130[t0, t2, t1]

-----------------------------------------
-- not recursive
b2853 :: [Bit 32, Bit 32] >>= [Bit 32]
b2853[t0, t1] =
  t2 <- b5136[t0]
  t3 <- load8((str4))
  t4 <- primEq((t3, 0))
  if t4
    then b1886[t1]
    else b5141[t3, t1]

-----------------------------------------
-- recursive
b5151 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5151[t0, t1, t2, t3] =
  t4 <- b1950[t0]
  b5142[t1, t2, t3]
b5149 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5149[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, 13]
  t7 <- b1950[t0]
  b5142[t1, t2, t3]
b5142 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5142[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b2853[t2, t1]
    else b5144[t3, t0, t1, t2]
b5144 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5144[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5146[t0, t4, t3, t2]
b5146 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5146[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5149[t0, t1, t3, t2]
    else b5151[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b5154 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5154[t0, t1, t2] =
  t3 <- add((str3, 1))
  b5146[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b2852 :: [Bit 32, Bit 32] >>= [Bit 32]
b2852[t0, t1] =
  t2 <- nzrem((t0, 10))
  t3 <- b1608[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b6669[1, 0, 31, t0, 32]
  t6 <- load8((str3))
  t7 <- primEq((t6, 0))
  if t7
    then b2853[t1, t0]
    else b5154[t6, t0, t1]

-----------------------------------------
-- recursive
b5164 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5164[t0, t1, t2, t3] =
  t4 <- b1950[t0]
  b5155[t1, t2, t3]
b5162 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5162[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, 13]
  t7 <- b1950[t0]
  b5155[t1, t2, t3]
b5155 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5155[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b2852[t2, t1]
    else b5157[t3, t0, t1, t2]
b5157 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5157[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5159[t0, t4, t3, t2]
b5159 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5159[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5162[t0, t1, t3, t2]
    else b5164[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b5167 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5167[t0, t1, t2] =
  t3 <- add((str2, 1))
  b5159[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b5165 :: [Bit 32, Bit 32] >>= [Bit 32]
b5165[t0, t1] =
  t2 <- load8((str2))
  t3 <- primEq((t2, 0))
  if t3
    then b2852[t1, t0]
    else b5167[t2, t0, t1]

-----------------------------------------
-- recursive
b5170 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5170[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5172[t0, t4, t3, t2]
b5172 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5172[t0, t1, t2, t3] =
  t4 <- b1959[t0]
  t5 <- load8((t1))
  t6 <- primEq((t5, 0))
  if t6
    then b5165[t2, t3]
    else b5170[t5, t1, t3, t2]

-----------------------------------------
-- not recursive
b5175 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5175[t0, t1, t2] =
  t3 <- add((str12, 1))
  b5172[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b5173 :: [Bit 32, Bit 32] >>= [Bit 32]
b5173[t0, t1] =
  t2 <- load8((str12))
  t3 <- primEq((t2, 0))
  if t3
    then b5165[t1, t0]
    else b5175[t2, t0, t1]

-----------------------------------------
-- recursive
b6185 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6185[t0, t1, t2, t3] =
  t4 <- b1950[t0]
  b5176[t1, t2, t3]
b6184 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6184[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, 13]
  t7 <- b1950[t0]
  b5176[t1, t2, t3]
b5176 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5176[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b5173[t1, t2]
    else b5178[t3, t0, t1, t2]
b5178 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5178[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5185[t0, t4, t2, t3]
b5185 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5185[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b6184[t0, t1, t2, t3]
    else b6185[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b444 :: [Bit 32] >>= [Bit 32]
b444[t0] =
  return t0

-----------------------------------------
-- recursive
b6189 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6189[t0, t1, t2, t3, t4] =
  t5 <- add((str1, 1))
  t6 <- b5185[t0, t5, t4, t1]
  b5191[t2, t3, 12, t6]
b5193 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5193[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- load8((str1))
  t7 <- primEq((t6, 0))
  if t7
    then b6188[t1, t3, t5, t4]
    else b6189[t6, t1, t5, t4, t3]
b6188 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6188[t0, t1, t2, t3] =
  t4 <- b5173[t1, t0]
  b5191[t2, t3, 12, t4]
b5191 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5191[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b444[t3]
    else b5193[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
str13 :: Bit 32
str13 <- "Memory map:\n"

-----------------------------------------
-- not recursive
str14 :: Bit 32
str14 <- "mmap"

-----------------------------------------
-- not recursive
str8 :: Bit 32
str8 <- "[0x"

-----------------------------------------
-- not recursive
str9 :: Bit 32
str9 <- "-0x"

-----------------------------------------
-- not recursive
str10 :: Bit 32
str10 <- "]"

-----------------------------------------
-- not recursive
b5226 :: [Bit 32] >>= [Unit]
b5226[t0] =
  t1 <- add((str10, 1))
  b5034[t0, t1]

-----------------------------------------
-- not recursive
b1894 :: [Bit 32] >>= [Unit]
b1894[t0] =
  t1 <- add((t0, 4))
  t2 <- load32((t1))
  t3 <- and((t2, 15))
  t4 <- b1608[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- b6395[1, 0, 31, t2, 32]
  t7 <- load8((str10))
  t8 <- primEq((t7, 0))
  if t8
    then b303[]
    else b5226[t7]

-----------------------------------------
-- recursive
b5236 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5236[t0, t1, t2] =
  t3 <- b1950[t0]
  b5227[t1, t2]
b5234 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5234[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5227[t1, t2]
b5227 :: [Bit 32, Bit 32] >>= [Unit]
b5227[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1894[t1]
    else b5229[t2, t0, t1]
b5229 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5229[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5231[t0, t3, t2]
b5231 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5231[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5234[t0, t1, t2]
    else b5236[t0, t1, t2]

-----------------------------------------
-- not recursive
b5254 :: [Bit 32, Bit 32] >>= [Unit]
b5254[t0, t1] =
  t2 <- add((str9, 1))
  b5231[t0, t2, t1]

-----------------------------------------
-- not recursive
b1896 :: [Bit 32] >>= [Unit]
b1896[t0] =
  t1 <- load32((t0))
  t2 <- and((t1, 15))
  t3 <- b1608[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b6395[1, 0, 31, t1, 32]
  t6 <- load8((str9))
  t7 <- primEq((t6, 0))
  if t7
    then b1894[t0]
    else b5254[t6, t0]

-----------------------------------------
-- recursive
b5264 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5264[t0, t1, t2] =
  t3 <- b1950[t0]
  b5255[t1, t2]
b5257 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5257[t0, t1, t2] =
  t3 <- add((t1, 1))
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5262[t0, t3, t2]
    else b5264[t0, t3, t2]
b5262 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5262[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5255[t1, t2]
b5255 :: [Bit 32, Bit 32] >>= [Unit]
b5255[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1896[t1]
    else b5257[t2, t0, t1]

-----------------------------------------
-- recursive
b5212 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5212[t0, t1, t2] =
  t3 <- b1950[t0]
  b5203[t1, t2]
b5210 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5210[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5203[t1, t2]
b5203 :: [Bit 32, Bit 32] >>= [Bit 32]
b5203[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1886[t1]
    else b5205[t2, t0, t1]
b5205 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5205[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5207[t0, t3, t2]
b5207 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5207[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5210[t0, t1, t2]
    else b5212[t0, t1, t2]

-----------------------------------------
-- not recursive
b5267 :: [Bit 32, Bit 32] >>= [Bit 32]
b5267[t0, t1] =
  t2 <- add((str4, 1))
  b5207[t0, t2, t1]

-----------------------------------------
-- not recursive
b5279 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5279[t0, t1, t2, t3] =
  t4 <- b1950[t0]
  t5 <- b5255[t1, t2]
  t6 <- load8((str4))
  t7 <- primEq((t6, 0))
  if t7
    then b1886[t3]
    else b5267[t6, t3]

-----------------------------------------
-- not recursive
b5277 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5277[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, 13]
  t7 <- b1950[t0]
  t8 <- b5255[t1, t2]
  t9 <- load8((str4))
  t10 <- primEq((t9, 0))
  if t10
    then b1886[t3]
    else b5267[t9, t3]

-----------------------------------------
-- not recursive
b5273 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5273[t0, t1, t2] =
  t3 <- add((str8, 1))
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5277[t0, t3, t2, t1]
    else b5279[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b5251 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5251[t0, t1, t2, t3] =
  t4 <- b1950[t0]
  t5 <- b5227[t1, t2]
  t6 <- load8((str4))
  t7 <- primEq((t6, 0))
  if t7
    then b1886[t3]
    else b5267[t6, t3]

-----------------------------------------
-- not recursive
b5249 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5249[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, 13]
  t7 <- b1950[t0]
  t8 <- b5227[t1, t2]
  t9 <- load8((str4))
  t10 <- primEq((t9, 0))
  if t10
    then b1886[t3]
    else b5267[t9, t3]

-----------------------------------------
-- not recursive
b5245 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5245[t0, t1, t2] =
  t3 <- add((str9, 1))
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5249[t0, t3, t2, t1]
    else b5251[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b5221 :: [Bit 32, Bit 32] >>= [Bit 32]
b5221[t0, t1] =
  t2 <- add((str10, 1))
  t3 <- b5034[t0, t2]
  t4 <- load8((str4))
  t5 <- primEq((t4, 0))
  if t5
    then b1886[t1]
    else b5267[t4, t1]

-----------------------------------------
-- not recursive
b5213 :: [Bit 32] >>= [Bit 32]
b5213[t0] =
  t1 <- load8((str4))
  t2 <- primEq((t1, 0))
  if t2
    then b1886[t0]
    else b5267[t1, t0]

-----------------------------------------
-- not recursive
b3640 :: [Bit 32, Bit 32] >>= [Bit 32]
b3640[t0, t1] =
  t2 <- add((t0, 4))
  t3 <- load32((t2))
  t4 <- and((t3, 15))
  t5 <- b1608[t4, 9]
  t6 <- store8((itoaBuf, t5))
  t7 <- b6395[1, 0, 31, t3, 32]
  t8 <- load8((str10))
  t9 <- primEq((t8, 0))
  if t9
    then b5213[t1]
    else b5221[t8, t1]

-----------------------------------------
-- not recursive
b3639 :: [Bit 32, Bit 32] >>= [Bit 32]
b3639[t0, t1] =
  t2 <- load32((t0))
  t3 <- and((t2, 15))
  t4 <- b1608[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- b6395[1, 0, 31, t2, 32]
  t7 <- load8((str9))
  t8 <- primEq((t7, 0))
  if t8
    then b3640[t0, t1]
    else b5245[t7, t1, t0]

-----------------------------------------
-- not recursive
b5271 :: [Bit 32, Bit 32] >>= [Bit 32]
b5271[t0, t1] =
  t2 <- load8((str8))
  t3 <- primEq((t2, 0))
  if t3
    then b3639[t1, t0]
    else b5273[t2, t0, t1]

-----------------------------------------
-- recursive
b5289 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5289[t0, t1, t2, t3] =
  t4 <- b1950[t0]
  b5280[t1, t2, t3]
b5287 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5287[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, 13]
  t7 <- b1950[t0]
  b5280[t1, t2, t3]
b5280 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5280[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b5271[t1, t2]
    else b5282[t3, t0, t1, t2]
b5282 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5282[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5284[t0, t4, t3, t2]
b5284 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5284[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5287[t0, t1, t3, t2]
    else b5289[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b5292 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5292[t0, t1, t2] =
  t3 <- add((str3, 1))
  b5284[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b2916 :: [Bit 32, Bit 32] >>= [Bit 32]
b2916[t0, t1] =
  t2 <- nzrem((t0, 10))
  t3 <- b1608[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b6669[1, 0, 31, t0, 32]
  t6 <- load8((str3))
  t7 <- primEq((t6, 0))
  if t7
    then b5271[t0, t1]
    else b5292[t6, t0, t1]

-----------------------------------------
-- recursive
b5302 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5302[t0, t1, t2, t3] =
  t4 <- b1950[t0]
  b5293[t1, t2, t3]
b5300 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5300[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, 13]
  t7 <- b1950[t0]
  b5293[t1, t2, t3]
b5293 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5293[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b2916[t2, t1]
    else b5295[t3, t0, t1, t2]
b5295 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5295[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5297[t0, t4, t3, t2]
b5297 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5297[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5300[t0, t1, t3, t2]
    else b5302[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b5305 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5305[t0, t1, t2] =
  t3 <- add((str2, 1))
  b5297[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b5303 :: [Bit 32, Bit 32] >>= [Bit 32]
b5303[t0, t1] =
  t2 <- load8((str2))
  t3 <- primEq((t2, 0))
  if t3
    then b2916[t1, t0]
    else b5305[t2, t0, t1]

-----------------------------------------
-- recursive
b5308 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5308[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5310[t0, t4, t3, t2]
b5310 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5310[t0, t1, t2, t3] =
  t4 <- b1959[t0]
  t5 <- load8((t1))
  t6 <- primEq((t5, 0))
  if t6
    then b5303[t2, t3]
    else b5308[t5, t1, t3, t2]

-----------------------------------------
-- not recursive
b5313 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5313[t0, t1, t2] =
  t3 <- add((str14, 1))
  b5310[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b5311 :: [Bit 32, Bit 32] >>= [Bit 32]
b5311[t0, t1] =
  t2 <- load8((str14))
  t3 <- primEq((t2, 0))
  if t3
    then b5303[t1, t0]
    else b5313[t2, t0, t1]

-----------------------------------------
-- recursive
b6191 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6191[t0, t1, t2, t3] =
  t4 <- b1950[t0]
  b5314[t1, t2, t3]
b6190 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6190[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, 13]
  t7 <- b1950[t0]
  b5314[t1, t2, t3]
b5314 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5314[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b5311[t1, t2]
    else b5316[t3, t0, t1, t2]
b5316 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5316[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5323[t0, t4, t2, t3]
b5323 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5323[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1572[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b6190[t0, t1, t2, t3]
    else b6191[t0, t1, t2, t3]

-----------------------------------------
-- recursive
b6195 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6195[t0, t1, t2, t3, t4] =
  t5 <- add((str1, 1))
  t6 <- b5323[t0, t5, t4, t1]
  b5329[t2, t3, 8, t6]
b5331 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5331[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- load8((str1))
  t7 <- primEq((t6, 0))
  if t7
    then b6194[t1, t3, t5, t4]
    else b6195[t6, t1, t5, t4, t3]
b6194 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6194[t0, t1, t2, t3] =
  t4 <- b5311[t1, t0]
  b5329[t2, t3, 8, t4]
b5329 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5329[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b444[t3]
    else b5331[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
str15 :: Bit 32
str15 <- "Strings:\n"

-----------------------------------------
-- not recursive
str18 :: Bit 32
str18 <- " "

-----------------------------------------
-- not recursive
str16 :: Bit 32
str16 <- "cmdline"

-----------------------------------------
-- not recursive
str19 :: Bit 32
str19 <- ": "

-----------------------------------------
-- not recursive
str20 :: Bit 32
str20 <- " ["

-----------------------------------------
-- not recursive
str21 :: Bit 32
str21 <- "]\n"

-----------------------------------------
-- not recursive
b5577 :: [Bit 32] >>= [Unit]
b5577[t0] =
  t1 <- add((str21, 1))
  b5034[t0, t1]

-----------------------------------------
-- not recursive
b1902 :: [Bit 32] >>= [Unit]
b1902[t0] =
  t1 <- and((t0, 15))
  t2 <- b1608[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6395[1, 0, 31, t0, 32]
  t5 <- load8((str21))
  t6 <- primEq((t5, 0))
  if t6
    then b303[]
    else b5577[t5]

-----------------------------------------
-- recursive
b5587 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5587[t0, t1, t2] =
  t3 <- b1950[t0]
  b5578[t1, t2]
b5585 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5585[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5578[t1, t2]
b5578 :: [Bit 32, Bit 32] >>= [Unit]
b5578[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1902[t1]
    else b5580[t2, t0, t1]
b5580 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5580[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5582[t0, t3, t2]
b5582 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5582[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5585[t0, t1, t2]
    else b5587[t0, t1, t2]

-----------------------------------------
-- not recursive
b5608 :: [Bit 32, Bit 32] >>= [Unit]
b5608[t0, t1] =
  t2 <- add((str20, 1))
  b5582[t0, t2, t1]

-----------------------------------------
-- not recursive
b5606 :: [Bit 32] >>= [Unit]
b5606[t0] =
  t1 <- load8((str20))
  t2 <- primEq((t1, 0))
  if t2
    then b1902[t0]
    else b5608[t1, t0]

-----------------------------------------
-- recursive
b5611 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5611[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5613[t0, t3, t2]
b5613 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5613[t0, t1, t2] =
  t3 <- b1959[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b5606[t2]
    else b5611[t4, t1, t2]

-----------------------------------------
-- not recursive
b6196 :: [Bit 32, Bit 32] >>= [Unit]
b6196[t0, t1] =
  t2 <- add((t1, 1))
  b5613[t0, t2, t1]

-----------------------------------------
-- not recursive
b5617 :: [Bit 32] >>= [Unit]
b5617[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b5606[t0]
    else b6196[t1, t0]

-----------------------------------------
-- recursive
b5627 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5627[t0, t1, t2] =
  t3 <- b1950[t0]
  b5618[t1, t2]
b5625 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5625[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5618[t1, t2]
b5618 :: [Bit 32, Bit 32] >>= [Unit]
b5618[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b5617[t1]
    else b5620[t2, t0, t1]
b5620 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5620[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5622[t0, t3, t2]
b5622 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5622[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5625[t0, t1, t2]
    else b5627[t0, t1, t2]

-----------------------------------------
-- not recursive
b5650 :: [Bit 32, Bit 32] >>= [Unit]
b5650[t0, t1] =
  t2 <- add((str19, 1))
  b5622[t0, t2, t1]

-----------------------------------------
-- not recursive
b5732 :: [Bit 32, Bit 32] >>= [Unit]
b5732[t0, t1] =
  t2 <- add((str16, 1))
  t3 <- b5034[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b5617[t1]
    else b5650[t4, t1]

-----------------------------------------
-- not recursive
b5645 :: [Bit 32] >>= [Unit]
b5645[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b5617[t0]
    else b5650[t1, t0]

-----------------------------------------
-- not recursive
b5730 :: [Bit 32] >>= [Unit]
b5730[t0] =
  t1 <- load8((str16))
  t2 <- primEq((t1, 0))
  if t2
    then b5645[t0]
    else b5732[t1, t0]

-----------------------------------------
-- recursive
b6198 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6198[t0, t1, t2] =
  t3 <- b1950[t0]
  b5733[t1, t2]
b6197 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6197[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5733[t1, t2]
b5733 :: [Bit 32, Bit 32] >>= [Unit]
b5733[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b5730[t1]
    else b5735[t2, t0, t1]
b5735 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5735[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5742[t0, t3, t2]
b5742 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5742[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b6197[t0, t1, t2]
    else b6198[t0, t1, t2]

-----------------------------------------
-- not recursive
str17 :: Bit 32
str17 <- "imgline"

-----------------------------------------
-- not recursive
b5653 :: [Bit 32, Bit 32] >>= [Unit]
b5653[t0, t1] =
  t2 <- add((str17, 1))
  t3 <- b5034[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b5617[t1]
    else b5650[t4, t1]

-----------------------------------------
-- not recursive
b5651 :: [Bit 32] >>= [Unit]
b5651[t0] =
  t1 <- load8((str17))
  t2 <- primEq((t1, 0))
  if t2
    then b5645[t0]
    else b5653[t1, t0]

-----------------------------------------
-- recursive
b5665 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5665[t0, t1, t2] =
  t3 <- b1950[t0]
  b5656[t1, t2]
b5663 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5663[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5656[t1, t2]
b5656 :: [Bit 32, Bit 32] >>= [Unit]
b5656[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b5651[t1]
    else b5658[t2, t0, t1]
b5658 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5658[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5660[t0, t3, t2]
b5660 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5660[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5663[t0, t1, t2]
    else b5665[t0, t1, t2]

-----------------------------------------
-- not recursive
b5811 :: [Bit 32, Bit 32] >>= [Unit]
b5811[t0, t1] =
  t2 <- add((str18, 1))
  b5660[t0, t2, t1]

-----------------------------------------
-- not recursive
b5814 :: [Bit 32, Bit 32] >>= [Unit]
b5814[t0, t1] =
  t2 <- add((str18, 1))
  t3 <- b5742[t0, t2, t1]
  t4 <- load32((4108))
  t5 <- load8((str18))
  t6 <- primEq((t5, 0))
  if t6
    then b5651[t4]
    else b5811[t5, t4]

-----------------------------------------
-- not recursive
b5800 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5800[t0, t1, t2] =
  t3 <- b1950[t0]
  t4 <- b5618[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str18))
  t7 <- primEq((t6, 0))
  if t7
    then b5651[t5]
    else b5811[t6, t5]

-----------------------------------------
-- not recursive
b5798 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5798[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  t7 <- b5618[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str18))
  t10 <- primEq((t9, 0))
  if t10
    then b5651[t8]
    else b5811[t9, t8]

-----------------------------------------
-- not recursive
b5803 :: [Bit 32, Bit 32] >>= [Unit]
b5803[t0, t1] =
  t2 <- add((str19, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5798[t0, t2, t1]
    else b5800[t0, t2, t1]

-----------------------------------------
-- not recursive
b5776 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5776[t0, t1, t2] =
  t3 <- b1950[t0]
  t4 <- b5578[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str18))
  t7 <- primEq((t6, 0))
  if t7
    then b5651[t5]
    else b5811[t6, t5]

-----------------------------------------
-- not recursive
b5774 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5774[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  t7 <- b5578[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str18))
  t10 <- primEq((t9, 0))
  if t10
    then b5651[t8]
    else b5811[t9, t8]

-----------------------------------------
-- not recursive
b5770 :: [Bit 32, Bit 32] >>= [Unit]
b5770[t0, t1] =
  t2 <- add((str20, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5774[t0, t2, t1]
    else b5776[t0, t2, t1]

-----------------------------------------
-- not recursive
b5759 :: [Bit 32] >>= [Unit]
b5759[t0] =
  t1 <- add((str21, 1))
  t2 <- b5034[t0, t1]
  t3 <- load32((4108))
  t4 <- load8((str18))
  t5 <- primEq((t4, 0))
  if t5
    then b5651[t3]
    else b5811[t4, t3]

-----------------------------------------
-- not recursive
b3102 :: [] >>= [Unit]
b3102[] =
  t0 <- load32((4108))
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b5651[t0]
    else b5811[t1, t0]

-----------------------------------------
-- not recursive
b3371 :: [Bit 32] >>= [Unit]
b3371[t0] =
  t1 <- and((t0, 15))
  t2 <- b1608[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6395[1, 0, 31, t0, 32]
  t5 <- load8((str21))
  t6 <- primEq((t5, 0))
  if t6
    then b3102[]
    else b5759[t5]

-----------------------------------------
-- not recursive
b5768 :: [Bit 32] >>= [Unit]
b5768[t0] =
  t1 <- load8((str20))
  t2 <- primEq((t1, 0))
  if t2
    then b3371[t0]
    else b5770[t1, t0]

-----------------------------------------
-- recursive
b5779 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5779[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5781[t0, t3, t2]
b5781 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5781[t0, t1, t2] =
  t3 <- b1959[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b5768[t2]
    else b5779[t4, t1, t2]

-----------------------------------------
-- not recursive
b6199 :: [Bit 32, Bit 32] >>= [Unit]
b6199[t0, t1] =
  t2 <- add((t1, 1))
  b5781[t0, t2, t1]

-----------------------------------------
-- not recursive
b5785 :: [Bit 32] >>= [Unit]
b5785[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b5768[t0]
    else b6199[t1, t0]

-----------------------------------------
-- not recursive
b5806 :: [Bit 32, Bit 32] >>= [Unit]
b5806[t0, t1] =
  t2 <- add((str16, 1))
  t3 <- b5034[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b5785[t1]
    else b5803[t4, t1]

-----------------------------------------
-- not recursive
b5792 :: [Bit 32] >>= [Unit]
b5792[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b5785[t0]
    else b5803[t1, t0]

-----------------------------------------
-- not recursive
b5804 :: [Bit 32] >>= [Unit]
b5804[t0] =
  t1 <- load8((str16))
  t2 <- primEq((t1, 0))
  if t2
    then b5792[t0]
    else b5806[t1, t0]

-----------------------------------------
-- not recursive
b1908 :: [] >>= [Unit]
b1908[] =
  t0 <- load32((4104))
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b5804[t0]
    else b5814[t1, t0]

-----------------------------------------
-- recursive
b6201 :: [Bit 32, Bit 32] >>= [Unit]
b6201[t0, t1] =
  t2 <- b1950[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1908[]
    else b5819[t3, t1]
b6200 :: [Bit 32, Bit 32] >>= [Unit]
b6200[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, 13]
  t5 <- b1950[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1908[]
    else b5819[t6, t1]
b5819 :: [Bit 32, Bit 32] >>= [Unit]
b5819[t0, t1] =
  t2 <- add((t1, 1))
  b5826[t0, t2]
b5826 :: [Bit 32, Bit 32] >>= [Unit]
b5826[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b6200[t0, t1]
    else b6201[t0, t1]

-----------------------------------------
-- not recursive
b5834 :: [Bit 32] >>= [Unit]
b5834[t0] =
  t1 <- add((str15, 1))
  b5826[t0, t1]

-----------------------------------------
-- not recursive
b1910 :: [] >>= [Unit]
b1910[] =
  t0 <- load32((4100))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b5329[t1, t2, 8, 0]
  t4 <- load8((str15))
  t5 <- primEq((t4, 0))
  if t5
    then b1908[]
    else b5834[t4]

-----------------------------------------
-- recursive
b6203 :: [Bit 32, Bit 32] >>= [Unit]
b6203[t0, t1] =
  t2 <- b1950[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1910[]
    else b5837[t3, t1]
b6202 :: [Bit 32, Bit 32] >>= [Unit]
b6202[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, 13]
  t5 <- b1950[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1910[]
    else b5837[t6, t1]
b5837 :: [Bit 32, Bit 32] >>= [Unit]
b5837[t0, t1] =
  t2 <- add((t1, 1))
  b5844[t0, t2]
b5844 :: [Bit 32, Bit 32] >>= [Unit]
b5844[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b6202[t0, t1]
    else b6203[t0, t1]

-----------------------------------------
-- not recursive
b5852 :: [Bit 32] >>= [Unit]
b5852[t0] =
  t1 <- add((str13, 1))
  b5844[t0, t1]

-----------------------------------------
-- not recursive
b1912 :: [] >>= [Unit]
b1912[] =
  t0 <- load32((4096))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b5191[t1, t2, 12, 0]
  t4 <- load8((str13))
  t5 <- primEq((t4, 0))
  if t5
    then b1910[]
    else b5852[t4]

-----------------------------------------
-- recursive
b6205 :: [Bit 32, Bit 32] >>= [Unit]
b6205[t0, t1] =
  t2 <- b1950[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1912[]
    else b5855[t3, t1]
b6204 :: [Bit 32, Bit 32] >>= [Unit]
b6204[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, 13]
  t5 <- b1950[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1912[]
    else b5855[t6, t1]
b5855 :: [Bit 32, Bit 32] >>= [Unit]
b5855[t0, t1] =
  t2 <- add((t1, 1))
  b5862[t0, t2]
b5862 :: [Bit 32, Bit 32] >>= [Unit]
b5862[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b6204[t0, t1]
    else b6205[t0, t1]

-----------------------------------------
-- not recursive
str52 :: Bit 32
str52 <- "Did not find first user program\n"

-----------------------------------------
-- not recursive
str46 :: Bit 32
str46 <- "\nHalting kernel, returning to mimgload\n"

-----------------------------------------
-- not recursive
b5343 :: [Bit 32] >>= [Unit]
b5343[t0] =
  t1 <- add((str46, 1))
  b5034[t0, t1]

-----------------------------------------
-- not recursive
b5341 :: [] >>= [Unit]
b5341[] =
  t0 <- load8((str46))
  t1 <- primEq((t0, 0))
  if t1
    then b303[]
    else b5343[t0]

-----------------------------------------
-- recursive
b5353 :: [Bit 32, Bit 32] >>= [Unit]
b5353[t0, t1] =
  t2 <- b1950[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b5341[]
    else b5346[t3, t1]
b5351 :: [Bit 32, Bit 32] >>= [Unit]
b5351[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, 13]
  t5 <- b1950[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b5341[]
    else b5346[t6, t1]
b5346 :: [Bit 32, Bit 32] >>= [Unit]
b5346[t0, t1] =
  t2 <- add((t1, 1))
  b5348[t0, t2]
b5348 :: [Bit 32, Bit 32] >>= [Unit]
b5348[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b5351[t0, t1]
    else b5353[t0, t1]

-----------------------------------------
-- not recursive
b5356 :: [Bit 32] >>= [Unit]
b5356[t0] =
  t1 <- add((str52, 1))
  b5348[t0, t1]

-----------------------------------------
-- not recursive
b5354 :: [] >>= [Unit]
b5354[] =
  t0 <- load8((str52))
  t1 <- primEq((t0, 0))
  if t1
    then b5341[]
    else b5356[t0]

-----------------------------------------
-- not recursive
str47 :: Bit 32
str47 <- "Found header for first user program:\n"

-----------------------------------------
-- not recursive
str48 :: Bit 32
str48 <- "\n"

-----------------------------------------
-- not recursive
str49 :: Bit 32
str49 <- "Found header for second user program:\n"

-----------------------------------------
-- not recursive
str50 :: Bit 32
str50 <- "\n"

-----------------------------------------
-- not recursive
str53 :: Bit 32
str53 <- "user code is at 0x"

-----------------------------------------
-- not recursive
str54 :: Bit 32
str54 <- "\n"

-----------------------------------------
-- not recursive
b2351 :: [Bit 32] >>= [Unit]
b2351[t0] =
  t1 <- add((users, 52))
  store32((t1, t0))

-----------------------------------------
-- recursive
b5379 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5379[t0, t1, t2] =
  t3 <- b1950[t0]
  b5370[t1, t2]
b5377 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5377[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5370[t1, t2]
b5370 :: [Bit 32, Bit 32] >>= [Unit]
b5370[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b2351[t1]
    else b5372[t2, t0, t1]
b5372 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5372[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5374[t0, t3, t2]
b5374 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5374[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5377[t0, t1, t2]
    else b5379[t0, t1, t2]

-----------------------------------------
-- not recursive
b5408 :: [Bit 32, Bit 32] >>= [Unit]
b5408[t0, t1] =
  t2 <- add((str54, 1))
  b5374[t0, t2, t1]

-----------------------------------------
-- not recursive
b2347 :: [Bit 32] >>= [Unit]
b2347[t0] =
  t1 <- and((t0, 15))
  t2 <- b1608[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6395[1, 0, 31, t0, 32]
  t5 <- load8((str54))
  t6 <- primEq((t5, 0))
  if t6
    then b2351[t0]
    else b5408[t5, t0]

-----------------------------------------
-- recursive
b6207 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6207[t0, t1, t2] =
  t3 <- b1950[t0]
  b5414[t1, t2]
b6206 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6206[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5414[t1, t2]
b5414 :: [Bit 32, Bit 32] >>= [Unit]
b5414[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b2347[t1]
    else b5416[t2, t0, t1]
b5416 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5416[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5423[t0, t3, t2]
b5423 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5423[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b6206[t0, t1, t2]
    else b6207[t0, t1, t2]

-----------------------------------------
-- not recursive
b2362 :: [Bit 32] >>= [Unit]
b2362[t0] =
  t1 <- add((users, 124))
  store32((t1, t0))

-----------------------------------------
-- recursive
b5389 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5389[t0, t1, t2] =
  t3 <- b1950[t0]
  b5380[t1, t2]
b5387 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5387[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5380[t1, t2]
b5380 :: [Bit 32, Bit 32] >>= [Unit]
b5380[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b2362[t1]
    else b5382[t2, t0, t1]
b5382 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5382[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5384[t0, t3, t2]
b5384 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5384[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5387[t0, t1, t2]
    else b5389[t0, t1, t2]

-----------------------------------------
-- not recursive
b5395 :: [Bit 32, Bit 32] >>= [Unit]
b5395[t0, t1] =
  t2 <- add((str54, 1))
  b5384[t0, t2, t1]

-----------------------------------------
-- not recursive
b2358 :: [Bit 32] >>= [Unit]
b2358[t0] =
  t1 <- and((t0, 15))
  t2 <- b1608[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6395[1, 0, 31, t0, 32]
  t5 <- load8((str54))
  t6 <- primEq((t5, 0))
  if t6
    then b2362[t0]
    else b5395[t5, t0]

-----------------------------------------
-- recursive
b6209 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6209[t0, t1, t2] =
  t3 <- b1950[t0]
  b5396[t1, t2]
b6208 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6208[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  b5396[t1, t2]
b5396 :: [Bit 32, Bit 32] >>= [Unit]
b5396[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b2358[t1]
    else b5398[t2, t0, t1]
b5398 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5398[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5405[t0, t3, t2]
b5405 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5405[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b6208[t0, t1, t2]
    else b6209[t0, t1, t2]

-----------------------------------------
-- not recursive
b2560 :: [] >>= [Unit]
b2560[] =
  t0 <- store1((current, flag0))
  t1 <- outb((32, 17))
  t2 <- outb((33, 32))
  t3 <- outb((33, 4))
  t4 <- outb((33, 1))
  t5 <- outb((33, 251))
  t6 <- outb((160, 17))
  t7 <- outb((161, 40))
  t8 <- outb((161, 2))
  t9 <- outb((161, 1))
  t10 <- outb((161, 255))
  t11 <- outb((67, 52))
  t12 <- outb((64, 156))
  t13 <- outb((64, 46))
  t14 <- inb((33))
  t15 <- and((t14, -2))
  t16 <- outb((33, t15))
  t17 <- inb((33))
  t18 <- and((t17, -3))
  t19 <- outb((33, t18))
  t20 <- load1((current))
  t21 <- flagToWord((t20))
  t22 <- mul((t21, 72))
  t23 <- add((users, t22))
  t24 <- returnTo((t23))
  t25 <- load8((str46))
  t26 <- primEq((t25, 0))
  if t26
    then b303[]
    else b5343[t25]

-----------------------------------------
-- not recursive
b5426 :: [Bit 32, Bit 32] >>= [Unit]
b5426[t0, t1] =
  t2 <- add((str53, 1))
  t3 <- b5405[t0, t2, t1]
  b2560[]

-----------------------------------------
-- not recursive
b6675 :: [Bit 32, Bit 32] >>= [Unit]
b6675[t0, t1] =
  t2 <- add((str54, 1))
  t3 <- b5384[t0, t2, t1]
  b2560[]

-----------------------------------------
-- not recursive
b6674 :: [Bit 32] >>= [Unit]
b6674[t0] =
  t1 <- add((users, 124))
  t2 <- store32((t1, t0))
  b2560[]

-----------------------------------------
-- not recursive
b2783 :: [Bit 32] >>= [Unit]
b2783[t0] =
  t1 <- and((t0, 15))
  t2 <- b1608[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6395[1, 0, 31, t0, 32]
  t5 <- load8((str54))
  t6 <- primEq((t5, 0))
  if t6
    then b6674[t0]
    else b6675[t5, t0]

-----------------------------------------
-- not recursive
b5429 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5429[t0, t1, t2] =
  t3 <- add((str53, 1))
  t4 <- b5423[t0, t3, t2]
  t5 <- add((t1, 8))
  t6 <- load32((t5))
  t7 <- load8((str53))
  t8 <- primEq((t7, 0))
  if t8
    then b2783[t6]
    else b5426[t7, t6]

-----------------------------------------
-- not recursive
b6678 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6678[t0, t1, t2] =
  t3 <- add((str54, 1))
  t4 <- b5374[t0, t3, t1]
  t5 <- add((t2, 8))
  t6 <- load32((t5))
  t7 <- load8((str53))
  t8 <- primEq((t7, 0))
  if t8
    then b2783[t6]
    else b5426[t7, t6]

-----------------------------------------
-- not recursive
b6677 :: [Bit 32, Bit 32] >>= [Unit]
b6677[t0, t1] =
  t2 <- add((users, 52))
  t3 <- store32((t2, t0))
  t4 <- add((t1, 8))
  t5 <- load32((t4))
  t6 <- load8((str53))
  t7 <- primEq((t6, 0))
  if t7
    then b2783[t5]
    else b5426[t6, t5]

-----------------------------------------
-- not recursive
b2795 :: [Bit 32, Bit 32] >>= [Unit]
b2795[t0, t1] =
  t2 <- and((t0, 15))
  t3 <- b1608[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b6395[1, 0, 31, t0, 32]
  t6 <- load8((str54))
  t7 <- primEq((t6, 0))
  if t7
    then b6677[t0, t1]
    else b6678[t6, t0, t1]

-----------------------------------------
-- not recursive
b6699 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6699[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- load8((str53))
  t6 <- primEq((t5, 0))
  if t6
    then b2795[t4, t2]
    else b5429[t5, t2, t4]

-----------------------------------------
-- recursive
b6719 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6719[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1572[t6, 0, 13]
  t8 <- b1950[t0]
  t9 <- load8((t1))
  t10 <- primEq((t9, 0))
  if t10
    then b6699[t3, t4, t2]
    else b6723[t9, t1, t2, t3, t4]
b6723 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6723[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 1))
  t6 <- inb((1021))
  t7 <- and((t6, 96))
  t8 <- b1572[t7, 0, t0]
  t9 <- primEq((t0, 10))
  if t9
    then b6719[t0, t5, t2, t3, t4]
    else b6720[t0, t5, t2, t3, t4]
b6720 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6720[t0, t1, t2, t3, t4] =
  t5 <- b1950[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b6699[t3, t4, t2]
    else b6723[t6, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b6700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6700[t0, t1, t2, t3] =
  t4 <- add((str50, 1))
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1572[t6, 0, t0]
  t8 <- primEq((t0, 10))
  if t8
    then b6719[t0, t4, t1, t2, t3]
    else b6720[t0, t4, t1, t2, t3]

-----------------------------------------
-- not recursive
b6679 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6679[t0, t1, t2, t3, t4] =
  t5 <- b5136[t0]
  t6 <- load8((str50))
  t7 <- primEq((t6, 0))
  if t7
    then b6699[t3, t4, t0]
    else b6700[t6, t0, t3, t4]

-----------------------------------------
-- recursive
b6712 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6712[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- inb((1021))
  t8 <- and((t7, 96))
  t9 <- b1572[t8, 0, 13]
  t10 <- b1950[t0]
  t11 <- load8((t1))
  t12 <- primEq((t11, 0))
  if t12
    then b6679[t4, t5, t6, t2, t3]
    else b6718[t11, t1, t2, t3, t4, t5, t6]
b6718 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6718[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, 1))
  t8 <- inb((1021))
  t9 <- and((t8, 96))
  t10 <- b1572[t9, 0, t0]
  t11 <- primEq((t0, 10))
  if t11
    then b6712[t0, t7, t2, t3, t4, t5, t6]
    else b6713[t0, t7, t2, t3, t4, t5, t6]
b6713 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6713[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b1950[t0]
  t8 <- load8((t1))
  t9 <- primEq((t8, 0))
  if t9
    then b6679[t4, t5, t6, t2, t3]
    else b6718[t8, t1, t2, t3, t4, t5, t6]

-----------------------------------------
-- not recursive
b6680 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6680[t0, t1, t2, t3, t4, t5] =
  t6 <- add((str49, 1))
  t7 <- inb((1021))
  t8 <- and((t7, 96))
  t9 <- b1572[t8, 0, t0]
  t10 <- primEq((t0, 10))
  if t10
    then b6712[t0, t6, t1, t2, t3, t4, t5]
    else b6713[t0, t6, t1, t2, t3, t4, t5]

-----------------------------------------
-- not recursive
b6218 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6218[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- load8((str49))
  t7 <- primEq((t6, 0))
  if t7
    then b6679[t1, t5, t4, t3, t0]
    else b6680[t6, t3, t0, t1, t5, t4]

-----------------------------------------
-- not recursive
str51 :: Bit 32
str51 <- "Did not find second user program\n"

-----------------------------------------
-- recursive
b5366 :: [Bit 32, Bit 32] >>= [Unit]
b5366[t0, t1] =
  t2 <- b1950[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b5341[]
    else b5359[t3, t1]
b5364 :: [Bit 32, Bit 32] >>= [Unit]
b5364[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, 13]
  t5 <- b1950[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b5341[]
    else b5359[t6, t1]
b5359 :: [Bit 32, Bit 32] >>= [Unit]
b5359[t0, t1] =
  t2 <- add((t1, 1))
  b5361[t0, t2]
b5361 :: [Bit 32, Bit 32] >>= [Unit]
b5361[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b5364[t0, t1]
    else b5366[t0, t1]

-----------------------------------------
-- not recursive
b5369 :: [Bit 32] >>= [Unit]
b5369[t0] =
  t1 <- add((str51, 1))
  b5361[t0, t1]

-----------------------------------------
-- not recursive
b5367 :: [] >>= [Unit]
b5367[] =
  t0 <- load8((str51))
  t1 <- primEq((t0, 0))
  if t1
    then b5341[]
    else b5369[t0]

-----------------------------------------
-- not recursive
b5546 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5546[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b5367[]
    else b6218[t0, t1, t2, t3]

-----------------------------------------
-- recursive
b5555 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5555[t0, t1, t2, t3, t4] =
  t5 <- b1950[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b5546[t3, t4, 12, t2]
    else b5554[t6, t1, t2, t3, t4]
b5549 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5549[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1572[t6, 0, 13]
  t8 <- b1950[t0]
  t9 <- load8((t1))
  t10 <- primEq((t9, 0))
  if t10
    then b5546[t3, t4, 12, t2]
    else b5554[t9, t1, t2, t3, t4]
b5554 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5554[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 1))
  b5548[t0, t5, t2, t3, t4]
b5548 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5548[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1572[t6, 0, t0]
  t8 <- primEq((t0, 10))
  if t8
    then b5549[t0, t1, t2, t3, t4]
    else b5555[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b5547 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5547[t0, t1, t2, t3] =
  t4 <- add((str48, 1))
  b5548[t0, t4, t1, t2, t3]

-----------------------------------------
-- not recursive
b5510 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5510[t0, t1, t2] =
  t3 <- b5136[t0]
  t4 <- load8((str48))
  t5 <- primEq((t4, 0))
  if t5
    then b5546[t1, t2, 12, t0]
    else b5547[t4, t0, t1, t2]

-----------------------------------------
-- recursive
b5564 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5564[t0, t1, t2, t3, t4] =
  t5 <- b1950[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b5510[t2, t3, t4]
    else b5563[t6, t1, t2, t3, t4]
b5558 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5558[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1572[t6, 0, 13]
  t8 <- b1950[t0]
  t9 <- load8((t1))
  t10 <- primEq((t9, 0))
  if t10
    then b5510[t2, t3, t4]
    else b5563[t9, t1, t2, t3, t4]
b5563 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5563[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 1))
  b5557[t0, t5, t2, t3, t4]
b5557 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5557[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1572[t6, 0, t0]
  t8 <- primEq((t0, 10))
  if t8
    then b5558[t0, t1, t2, t3, t4]
    else b5564[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b5556 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5556[t0, t1, t2, t3] =
  t4 <- add((str47, 1))
  b5557[t0, t4, t1, t2, t3]

-----------------------------------------
-- not recursive
b5504 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5504[t0, t1, t2] =
  t3 <- add((t1, t2))
  t4 <- add((t0, -1))
  t5 <- load8((str47))
  t6 <- primEq((t5, 0))
  if t6
    then b5510[t1, t4, t3]
    else b5556[t5, t1, t4, t3]

-----------------------------------------
-- not recursive
b5502 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5502[t0, t1, t2] =
  t3 <- primEq((t0, 0))
  if t3
    then b5354[]
    else b5504[t0, t1, t2]

-----------------------------------------
-- recursive
b5565 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5565[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b5354[]
    else b5567[t0, t1, t2, t3]
b5567 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5567[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- add((t3, -1))
  t7 <- primEq((t6, 0))
  if t7
    then b5502[t5, t4, 12]
    else b5565[t5, t4, 12, t6]

-----------------------------------------
-- not recursive
b5865 :: [Bit 32] >>= [Unit]
b5865[t0] =
  t1 <- add((str11, 1))
  t2 <- b5862[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b5354[]
    else b5567[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b5847 :: [Bit 32] >>= [Unit]
b5847[t0] =
  t1 <- add((str13, 1))
  t2 <- b5844[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b5354[]
    else b5567[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b5829 :: [Bit 32] >>= [Unit]
b5829[t0] =
  t1 <- add((str15, 1))
  t2 <- b5826[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b5354[]
    else b5567[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b5674 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5674[t0, t1, t2] =
  t3 <- b1950[t0]
  t4 <- b5656[t1, t2]
  t5 <- load32((4096))
  t6 <- load32((t5))
  t7 <- add((t5, 4))
  t8 <- primEq((t6, 0))
  if t8
    then b5354[]
    else b5567[t6, t7, 12, 2]

-----------------------------------------
-- not recursive
b5672 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5672[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  t7 <- b5656[t1, t2]
  t8 <- load32((4096))
  t9 <- load32((t8))
  t10 <- add((t8, 4))
  t11 <- primEq((t9, 0))
  if t11
    then b5354[]
    else b5567[t9, t10, 12, 2]

-----------------------------------------
-- not recursive
b5745 :: [Bit 32, Bit 32] >>= [Unit]
b5745[t0, t1] =
  t2 <- add((str18, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5672[t0, t2, t1]
    else b5674[t0, t2, t1]

-----------------------------------------
-- not recursive
b5636 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5636[t0, t1, t2] =
  t3 <- b1950[t0]
  t4 <- b5618[t1, t2]
  t5 <- load32((4096))
  t6 <- load32((t5))
  t7 <- add((t5, 4))
  t8 <- primEq((t6, 0))
  if t8
    then b5354[]
    else b5567[t6, t7, 12, 2]

-----------------------------------------
-- not recursive
b5634 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5634[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  t7 <- b5618[t1, t2]
  t8 <- load32((4096))
  t9 <- load32((t8))
  t10 <- add((t8, 4))
  t11 <- primEq((t9, 0))
  if t11
    then b5354[]
    else b5567[t9, t10, 12, 2]

-----------------------------------------
-- not recursive
b5639 :: [Bit 32, Bit 32] >>= [Unit]
b5639[t0, t1] =
  t2 <- add((str19, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5634[t0, t2, t1]
    else b5636[t0, t2, t1]

-----------------------------------------
-- not recursive
b5596 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5596[t0, t1, t2] =
  t3 <- b1950[t0]
  t4 <- b5578[t1, t2]
  t5 <- load32((4096))
  t6 <- load32((t5))
  t7 <- add((t5, 4))
  t8 <- primEq((t6, 0))
  if t8
    then b5354[]
    else b5567[t6, t7, 12, 2]

-----------------------------------------
-- not recursive
b5594 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5594[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  t7 <- b5578[t1, t2]
  t8 <- load32((4096))
  t9 <- load32((t8))
  t10 <- add((t8, 4))
  t11 <- primEq((t9, 0))
  if t11
    then b5354[]
    else b5567[t9, t10, 12, 2]

-----------------------------------------
-- not recursive
b5590 :: [Bit 32, Bit 32] >>= [Unit]
b5590[t0, t1] =
  t2 <- add((str20, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5594[t0, t2, t1]
    else b5596[t0, t2, t1]

-----------------------------------------
-- not recursive
b5572 :: [Bit 32] >>= [Unit]
b5572[t0] =
  t1 <- add((str21, 1))
  t2 <- b5034[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b5354[]
    else b5567[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b3416 :: [] >>= [Unit]
b3416[] =
  t0 <- load32((4096))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- primEq((t1, 0))
  if t3
    then b5354[]
    else b5567[t1, t2, 12, 2]

-----------------------------------------
-- not recursive
b3668 :: [Bit 32] >>= [Unit]
b3668[t0] =
  t1 <- and((t0, 15))
  t2 <- b1608[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6395[1, 0, 31, t0, 32]
  t5 <- load8((str21))
  t6 <- primEq((t5, 0))
  if t6
    then b3416[]
    else b5572[t5]

-----------------------------------------
-- not recursive
b5588 :: [Bit 32] >>= [Unit]
b5588[t0] =
  t1 <- load8((str20))
  t2 <- primEq((t1, 0))
  if t2
    then b3668[t0]
    else b5590[t1, t0]

-----------------------------------------
-- recursive
b5599 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5599[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5601[t0, t3, t2]
b5601 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5601[t0, t1, t2] =
  t3 <- b1959[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b5588[t2]
    else b5599[t4, t1, t2]

-----------------------------------------
-- not recursive
b6219 :: [Bit 32, Bit 32] >>= [Unit]
b6219[t0, t1] =
  t2 <- add((t1, 1))
  b5601[t0, t2, t1]

-----------------------------------------
-- not recursive
b5605 :: [Bit 32] >>= [Unit]
b5605[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b5588[t0]
    else b6219[t1, t0]

-----------------------------------------
-- not recursive
b5642 :: [Bit 32, Bit 32] >>= [Unit]
b5642[t0, t1] =
  t2 <- add((str17, 1))
  t3 <- b5034[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b5605[t1]
    else b5639[t4, t1]

-----------------------------------------
-- not recursive
b5628 :: [Bit 32] >>= [Unit]
b5628[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b5605[t0]
    else b5639[t1, t0]

-----------------------------------------
-- not recursive
b5640 :: [Bit 32] >>= [Unit]
b5640[t0] =
  t1 <- load8((str17))
  t2 <- primEq((t1, 0))
  if t2
    then b5628[t0]
    else b5642[t1, t0]

-----------------------------------------
-- not recursive
b5748 :: [Bit 32, Bit 32] >>= [Unit]
b5748[t0, t1] =
  t2 <- add((str18, 1))
  t3 <- b5742[t0, t2, t1]
  t4 <- load32((4108))
  t5 <- load8((str18))
  t6 <- primEq((t5, 0))
  if t6
    then b5640[t4]
    else b5745[t5, t4]

-----------------------------------------
-- not recursive
b5721 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5721[t0, t1, t2] =
  t3 <- b1950[t0]
  t4 <- b5618[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str18))
  t7 <- primEq((t6, 0))
  if t7
    then b5640[t5]
    else b5745[t6, t5]

-----------------------------------------
-- not recursive
b5719 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5719[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  t7 <- b5618[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str18))
  t10 <- primEq((t9, 0))
  if t10
    then b5640[t8]
    else b5745[t9, t8]

-----------------------------------------
-- not recursive
b5724 :: [Bit 32, Bit 32] >>= [Unit]
b5724[t0, t1] =
  t2 <- add((str19, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5719[t0, t2, t1]
    else b5721[t0, t2, t1]

-----------------------------------------
-- not recursive
b5697 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5697[t0, t1, t2] =
  t3 <- b1950[t0]
  t4 <- b5578[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str18))
  t7 <- primEq((t6, 0))
  if t7
    then b5640[t5]
    else b5745[t6, t5]

-----------------------------------------
-- not recursive
b5695 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5695[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, 13]
  t6 <- b1950[t0]
  t7 <- b5578[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str18))
  t10 <- primEq((t9, 0))
  if t10
    then b5640[t8]
    else b5745[t9, t8]

-----------------------------------------
-- not recursive
b5691 :: [Bit 32, Bit 32] >>= [Unit]
b5691[t0, t1] =
  t2 <- add((str20, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1572[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5695[t0, t2, t1]
    else b5697[t0, t2, t1]

-----------------------------------------
-- not recursive
b5680 :: [Bit 32] >>= [Unit]
b5680[t0] =
  t1 <- add((str21, 1))
  t2 <- b5034[t0, t1]
  t3 <- load32((4108))
  t4 <- load8((str18))
  t5 <- primEq((t4, 0))
  if t5
    then b5640[t3]
    else b5745[t4, t3]

-----------------------------------------
-- not recursive
b3663 :: [] >>= [Unit]
b3663[] =
  t0 <- load32((4108))
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b5640[t0]
    else b5745[t1, t0]

-----------------------------------------
-- not recursive
b3662 :: [Bit 32] >>= [Unit]
b3662[t0] =
  t1 <- and((t0, 15))
  t2 <- b1608[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6395[1, 0, 31, t0, 32]
  t5 <- load8((str21))
  t6 <- primEq((t5, 0))
  if t6
    then b3663[]
    else b5680[t5]

-----------------------------------------
-- not recursive
b5689 :: [Bit 32] >>= [Unit]
b5689[t0] =
  t1 <- load8((str20))
  t2 <- primEq((t1, 0))
  if t2
    then b3662[t0]
    else b5691[t1, t0]

-----------------------------------------
-- recursive
b5700 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5700[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5702[t0, t3, t2]
b5702 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5702[t0, t1, t2] =
  t3 <- b1959[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b5689[t2]
    else b5700[t4, t1, t2]

-----------------------------------------
-- not recursive
b6220 :: [Bit 32, Bit 32] >>= [Unit]
b6220[t0, t1] =
  t2 <- add((t1, 1))
  b5702[t0, t2, t1]

-----------------------------------------
-- not recursive
b5706 :: [Bit 32] >>= [Unit]
b5706[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b5689[t0]
    else b6220[t1, t0]

-----------------------------------------
-- not recursive
b5727 :: [Bit 32, Bit 32] >>= [Unit]
b5727[t0, t1] =
  t2 <- add((str16, 1))
  t3 <- b5034[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b5706[t1]
    else b5724[t4, t1]

-----------------------------------------
-- not recursive
b5713 :: [Bit 32] >>= [Unit]
b5713[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b5706[t0]
    else b5724[t1, t0]

-----------------------------------------
-- not recursive
b5725 :: [Bit 32] >>= [Unit]
b5725[t0] =
  t1 <- load8((str16))
  t2 <- primEq((t1, 0))
  if t2
    then b5713[t0]
    else b5727[t1, t0]

-----------------------------------------
-- not recursive
b2989 :: [] >>= [Unit]
b2989[] =
  t0 <- load32((4104))
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b5725[t0]
    else b5748[t1, t0]

-----------------------------------------
-- not recursive
b2988 :: [] >>= [Unit]
b2988[] =
  t0 <- load32((4100))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b5329[t1, t2, 8, 0]
  t4 <- load8((str15))
  t5 <- primEq((t4, 0))
  if t5
    then b2989[]
    else b5829[t4]

-----------------------------------------
-- not recursive
b2987 :: [] >>= [Unit]
b2987[] =
  t0 <- load32((4096))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b5191[t1, t2, 12, 0]
  t4 <- load8((str13))
  t5 <- primEq((t4, 0))
  if t5
    then b2988[]
    else b5847[t4]

-----------------------------------------
-- not recursive
b1930 :: [] >>= [Unit]
b1930[] =
  t0 <- store8((console, 1))
  t1 <- add((console, 1))
  t2 <- store8((t1, 1))
  t3 <- add((console, 2))
  t4 <- store8((t3, 23))
  t5 <- add((console, 3))
  t6 <- store8((t5, 45))
  t7 <- add((console, 4))
  t8 <- store8((t7, 1))
  t9 <- add((console, 5))
  t10 <- store8((t9, 1))
  t11 <- add((console, 6))
  t12 <- store8((t11, 15))
  t13 <- b1223[]
  t14 <- load8((str11))
  t15 <- primEq((t14, 0))
  if t15
    then b2987[]
    else b5865[t14]

-----------------------------------------
-- recursive
b5877 :: [Bit 32, Bit 32] >>= [Unit]
b5877[t0, t1] =
  t2 <- b1950[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1930[]
    else b5870[t3, t1]
b5875 :: [Bit 32, Bit 32] >>= [Unit]
b5875[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, 13]
  t5 <- b1950[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1930[]
    else b5870[t6, t1]
b5870 :: [Bit 32, Bit 32] >>= [Unit]
b5870[t0, t1] =
  t2 <- add((t1, 1))
  b5872[t0, t2]
b5872 :: [Bit 32, Bit 32] >>= [Unit]
b5872[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1572[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b5875[t0, t1]
    else b5877[t0, t1]

-----------------------------------------
-- not recursive
b5880 :: [Bit 32] >>= [Unit]
b5880[t0] =
  t1 <- add((str45, 1))
  b5872[t0, t1]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- store1((current, flag0))
  t1 <- store32((users, 0))
  t2 <- add((users, 4))
  t3 <- store32((t2, 0))
  t4 <- add((users, 8))
  t5 <- store32((t4, 0))
  t6 <- add((users, 12))
  t7 <- store32((t6, 0))
  t8 <- add((users, 16))
  t9 <- store32((t8, 0))
  t10 <- add((users, 20))
  t11 <- store32((t10, 0))
  t12 <- add((users, 24))
  t13 <- store32((t12, 0))
  t14 <- add((users, 28))
  t15 <- store32((t14, 0))
  t16 <- add((users, 32))
  t17 <- store32((t16, 59))
  t18 <- add((users, 36))
  t19 <- store32((t18, 59))
  t20 <- add((users, 40))
  t21 <- store32((t20, 59))
  t22 <- add((users, 44))
  t23 <- store32((t22, 59))
  t24 <- add((users, 48))
  t25 <- store32((t24, 0))
  t26 <- add((users, 52))
  t27 <- store32((t26, 0))
  t28 <- add((users, 56))
  t29 <- store32((t28, 51))
  t30 <- add((users, 60))
  t31 <- store32((t30, 12802))
  t32 <- add((users, 64))
  t33 <- store32((t32, 0))
  t34 <- add((users, 68))
  t35 <- store32((t34, 59))
  t36 <- add((users, 72))
  t37 <- store32((t36, 0))
  t38 <- add((users, 76))
  t39 <- store32((t38, 0))
  t40 <- add((users, 80))
  t41 <- store32((t40, 0))
  t42 <- add((users, 84))
  t43 <- store32((t42, 0))
  t44 <- add((users, 88))
  t45 <- store32((t44, 0))
  t46 <- add((users, 92))
  t47 <- store32((t46, 0))
  t48 <- add((users, 96))
  t49 <- store32((t48, 0))
  t50 <- add((users, 100))
  t51 <- store32((t50, 0))
  t52 <- add((users, 104))
  t53 <- store32((t52, 59))
  t54 <- add((users, 108))
  t55 <- store32((t54, 59))
  t56 <- add((users, 112))
  t57 <- store32((t56, 59))
  t58 <- add((users, 116))
  t59 <- store32((t58, 59))
  t60 <- add((users, 120))
  t61 <- store32((t60, 0))
  t62 <- add((users, 124))
  t63 <- store32((t62, 0))
  t64 <- add((users, 128))
  t65 <- store32((t64, 51))
  t66 <- add((users, 132))
  t67 <- store32((t66, 12802))
  t68 <- add((users, 136))
  t69 <- store32((t68, 0))
  t70 <- add((users, 140))
  t71 <- store32((t70, 59))
  t72 <- store8((console, 0))
  t73 <- add((console, 1))
  t74 <- store8((t73, 0))
  t75 <- add((console, 2))
  t76 <- store8((t75, 24))
  t77 <- add((console, 3))
  t78 <- store8((t77, 79))
  t79 <- add((console, 4))
  t80 <- store8((t79, 0))
  t81 <- add((console, 5))
  t82 <- store8((t81, 0))
  t83 <- add((console, 6))
  t84 <- store8((t83, 10))
  t85 <- store8((keyUp, 0))
  t86 <- store8((keyDown, 0))
  t87 <- store32((ticks, 1))
  t88 <- store32((objects, 8))
  t89 <- add((objects, 4))
  t90 <- store32((t89, 1))
  t91 <- add((objects, 8))
  t92 <- store32((t91, 18))
  t93 <- add((objects, 12))
  t94 <- store32((t93, 21))
  t95 <- add((objects, 16))
  t96 <- store32((t95, 48))
  t97 <- add((objects, 20))
  t98 <- store32((t97, 22))
  t99 <- add((objects, 24))
  t100 <- b4523[t99, 1]
  t101 <- store8((spinner, 45))
  t102 <- add((spinner, 1))
  t103 <- store8((t102, 92))
  t104 <- add((spinner, 2))
  t105 <- store8((t104, 124))
  t106 <- add((spinner, 3))
  t107 <- store8((t106, 47))
  t108 <- store8((spinpos, 0))
  t109 <- store8((pos, 55))
  t110 <- store1((dir, flag1))
  t111 <- store1((headingLeft, flag1))
  t112 <- store1((headingTop, flag1))
  t113 <- store8((itoaBuf, 0))
  t114 <- add((itoaBuf, 1))
  t115 <- b4530[t114, 1]
  t116 <- store8((t83, 32))
  t117 <- b1223[]
  t118 <- load8((str45))
  t119 <- primEq((t118, 0))
  if t119
    then b1930[]
    else b5880[t118]

-----------------------------------------
-- Entrypoints: yield kputc keyboardInterrupt timerInterrupt unhandled
