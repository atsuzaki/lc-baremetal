bitdata Bool /1
  = False [ B0 ]
    -- predFalse(x :: Bit 1) = x == 0b0
  | True [ B1 ]
    -- predTrue(x :: Bit 1) = x == 0b1

-- bit pattern:
--  _

struct Context / 72
  [ regs :: Registers  {- offset=0 -}
  | segregs :: SegRegs  {- offset=32 -}
  | iframe :: IFrame  {- offset=48 -} ]
  aligned 4

struct Coord / 2
  [ row :: Stored (Ix 25)  {- offset=0 -}
  | col :: Stored (Ix 80)  {- offset=1 -} ]
  aligned 1

struct GameObject / 16
  [ width :: Stored (Bit 32)  {- offset=0 -}
  | height :: Stored (Bit 32)  {- offset=4 -}
  | xPos :: Stored (Bit 32)  {- offset=8 -}
  | yPos :: Stored (Bit 32)  {- offset=12 -} ]
  aligned 4

bitdata IA32Flags /32
  = IA32Flags [ B00_0000_0000 | id :: Bit 1 | vip :: Bit 1 | vif :: Bit 1 | ac :: Bit 1 | vm :: Bit 1 | rf :: Bit 1 | B0 | nt :: Bit 1 | iopl :: Ix 4 | ovf :: Bit 1 | df :: Bit 1 | ifl :: Bit 1 | tf :: Bit 1 | sf :: Bit 1 | zf :: Bit 1 | B0 | af :: Bit 1 | B0 | pf :: Bit 1 | B1 | cf :: Bit 1 ]
    -- predIA32Flags(x :: Bit 32) = true

-- bit pattern:
--  0000000000______0_________0_0_1_

struct IFrame / 24
  [ err :: Stored (Bit 32)  {- offset=0 -}
  | eip :: Stored (Bit 32)  {- offset=4 -}
  | cs :: Stored SegSelector  {- offset=8 -}
  | eflags :: Stored IA32Flags  {- offset=12 -}
  | esp :: Stored (Bit 32)  {- offset=16 -}
  | ss :: Stored SegSelector  {- offset=20 -} ]
  aligned 4

struct Registers / 32
  [ edi :: Stored (Bit 32)  {- offset=0 -}
  | esi :: Stored (Bit 32)  {- offset=4 -}
  | ebp :: Stored (Bit 32)  {- offset=8 -}
  | esp :: Stored (Bit 32)  {- offset=12 -}
  | ebx :: Stored (Bit 32)  {- offset=16 -}
  | edx :: Stored (Bit 32)  {- offset=20 -}
  | ecx :: Stored (Bit 32)  {- offset=24 -}
  | eax :: Stored (Bit 32)  {- offset=28 -} ]
  aligned 4

struct SegRegs / 16
  [ ds :: Stored SegSelector  {- offset=0 -}
  | es :: Stored SegSelector  {- offset=4 -}
  | fs :: Stored SegSelector  {- offset=8 -}
  | gs :: Stored SegSelector  {- offset=12 -} ]
  aligned 4

bitdata SegSelector /32
  = SegSelector [ X0000 | index :: Ix 8192 | table :: Bit 1 | rpl :: Ix 4 ]
    -- predSegSelector(x :: Bit 32) = true

-- bit pattern:
--  0000000000000000________________

data Unit
  = Unit

struct Window / 7
  [ topleft :: Coord  {- offset=0 -}
  | bottomright :: Coord  {- offset=2 -}
  | current :: Coord  {- offset=4 -}
  | attr :: Stored (Bit 8)  {- offset=6 -} ]
  aligned 8

-----------------------------------------
-- not recursive
current :: Bit 32
current <- area (Stored (Ix 2)) aligned 1

-----------------------------------------
-- not recursive
users :: Bit 32
users <- area (Array 2 Context) aligned 4

-----------------------------------------
-- not recursive
b1116 :: [] >>= [Unit]
b1116[] =
  t0 <- load1((current))
  t1 <- flagToWord((t0))
  t2 <- mul((t1, 72))
  t3 <- add((users, t2))
  returnTo((t3))

-----------------------------------------
-- not recursive
entrypoint yield :: [] >>= [Unit]
yield[] =
  b1116[]

-----------------------------------------
-- not recursive
b2873 :: [Bit 32] >>= [Unit]
b2873[t0] =
  outb((1016, t0))

-----------------------------------------
-- recursive
b258 :: [Bit 32] >>= [Unit]
b258[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  b1309[t2, 0, t0]
b1309 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1309[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b258[t2]
    else b2873[t2]

-----------------------------------------
-- not recursive
console :: Bit 32
console <- area Window aligned 8

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
b303 :: [] >>= [Unit]
b303[] =
  return Unit

-----------------------------------------
-- recursive
b1315 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1315[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b1315[t11, t1, t2, t3]
    else b303[]

-----------------------------------------
-- recursive
b1317 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1317[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- mul((t2, 160))
  t9 <- add((t8, t5))
  t10 <- add((t9, 753664))
  t11 <- load16((t7))
  t12 <- store16((t10, t11))
  t13 <- add((t0, 1))
  t14 <- primUle((t13, t1))
  if t14
    then b1317[t13, t1, t2, t3]
    else b303[]

-----------------------------------------
-- recursive
b4336 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4336[t0, t1, t2, t3, t4, t5] =
  t6 <- b1317[t4, t3, t1, t0]
  t7 <- add((t0, 1))
  t8 <- primUle((t7, t2))
  if t8
    then b4336[t7, t0, t2, t3, t4, t5]
    else b1315[t4, t3, t5, t2]

-----------------------------------------
-- not recursive
b1584 :: [] >>= [Unit]
b1584[] =
  t0 <- load8((console))
  t1 <- add((console, 1))
  t2 <- load8((t1))
  t3 <- add((console, 2))
  t4 <- load8((t3))
  t5 <- add((console, 3))
  t6 <- load8((t5))
  t7 <- add((console, 6))
  t8 <- load8((t7))
  t9 <- add((t0, 1))
  t10 <- primUle((t9, t4))
  if t10
    then b4336[t9, t0, t4, t6, t2, t8]
    else b1315[t2, t6, t8, t4]

-----------------------------------------
-- not recursive
b4345 :: [Bit 32] >>= [Unit]
b4345[t0] =
  t1 <- add((console, 4))
  store8((t1, t0))

-----------------------------------------
-- not recursive
b1582 :: [Bit 32] >>= [Unit]
b1582[t0] =
  t1 <- add((console, 1))
  t2 <- add((console, 5))
  t3 <- load8((t1))
  t4 <- store8((t2, t3))
  t5 <- add((console, 2))
  t6 <- load8((t5))
  t7 <- add((t0, 1))
  t8 <- primUle((t7, t6))
  if t8
    then b4345[t7]
    else b1584[]

-----------------------------------------
-- not recursive
b4349 :: [Bit 32] >>= [Unit]
b4349[t0] =
  t1 <- add((console, 5))
  store8((t1, t0))

-----------------------------------------
-- not recursive
b1587 :: [Bit 32, Bit 32] >>= [Unit]
b1587[t0, t1] =
  t2 <- add((console, 5))
  t3 <- load8((t2))
  t4 <- add((console, 6))
  t5 <- load8((t4))
  t6 <- mul((t1, 160))
  t7 <- mul((t3, 2))
  t8 <- add((t6, t7))
  t9 <- add((t8, 753664))
  t10 <- and((t0, 255))
  t11 <- shl((t5, 8))
  t12 <- or((t10, t11))
  t13 <- store16((t9, t12))
  t14 <- add((console, 3))
  t15 <- load8((t14))
  t16 <- add((t3, 1))
  t17 <- primUle((t16, t15))
  if t17
    then b4349[t16]
    else b1582[t1]

-----------------------------------------
-- not recursive
b1585 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1585[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1582[t2]
    else b1587[t0, t2]

-----------------------------------------
-- not recursive
b1580 :: [Bit 32] >>= [Unit]
b1580[t0] =
  t1 <- add((console, 4))
  t2 <- load8((t1))
  t3 <- primEq((t0, 13))
  if t3
    then b1582[t2]
    else b1585[t0, 10, t2]

-----------------------------------------
-- not recursive
b1968 :: [Bit 32, Bit 32] >>= [Unit]
b1968[t0, t1] =
  t2 <- b1580[t0]
  returnTo((t1))

-----------------------------------------
-- not recursive
b1967 :: [Bit 32, Bit 32] >>= [Unit]
b1967[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, 13]
  t5 <- b1580[t0]
  returnTo((t1))

-----------------------------------------
-- not recursive
entrypoint kputc :: [] >>= [Unit]
kputc[] =
  t0 <- load1((current))
  t1 <- flagToWord((t0))
  t2 <- mul((t1, 72))
  t3 <- add((users, t2))
  t4 <- add((t3, 28))
  t5 <- load32((t4))
  t6 <- inb((1021))
  t7 <- and((t6, 96))
  t8 <- b1309[t7, 0, t5]
  t9 <- primEq((t5, 10))
  if t9
    then b1967[t5, t3]
    else b1968[t5, t3]

-----------------------------------------
-- not recursive
external keyb_layout :: Bit 32

-----------------------------------------
-- not recursive
keyUp :: Bit 32
keyUp <- area (Stored (Bit 8)) aligned 1

-----------------------------------------
-- not recursive
b957 :: [Bit 32] >>= [Unit]
b957[t0] =
  t1 <- and((t0, 127))
  t2 <- add((keyb_layout, t1))
  t3 <- load8((t2))
  t4 <- store8((keyUp, t3))
  t5 <- load1((current))
  t6 <- flagToWord((t5))
  t7 <- mul((t6, 72))
  t8 <- add((users, t7))
  returnTo((t8))

-----------------------------------------
-- not recursive
b959 :: [Bit 32] >>= [Unit]
b959[t0] =
  t1 <- lshr((t0, 7))
  t2 <- primEq((t1, 1))
  if t2
    then b957[t0]
    else b1116[]

-----------------------------------------
-- not recursive
keyDown :: Bit 32
keyDown <- area (Stored (Bit 8)) aligned 1

-----------------------------------------
-- not recursive
b960 :: [Bit 32] >>= [Unit]
b960[t0] =
  t1 <- and((t0, 127))
  t2 <- add((keyb_layout, t1))
  t3 <- load8((t2))
  t4 <- load16((753702))
  t5 <- and((t4, 65280))
  t6 <- or((t5, t3))
  t7 <- store16((753702, t6))
  t8 <- store8((keyDown, t3))
  t9 <- lshr((t0, 7))
  t10 <- primEq((t9, 1))
  if t10
    then b957[t0]
    else b1116[]

-----------------------------------------
-- not recursive
entrypoint keyboardInterrupt :: [] >>= [Unit]
keyboardInterrupt[] =
  t0 <- inb((33))
  t1 <- or((t0, 2))
  t2 <- outb((33, t1))
  t3 <- outb((32, 97))
  t4 <- inb((33))
  t5 <- and((t4, -3))
  t6 <- outb((33, t5))
  t7 <- inb((96))
  t8 <- lshr((t7, 7))
  t9 <- primEq((t8, 0))
  if t9
    then b960[t7]
    else b959[t7]

-----------------------------------------
-- not recursive
ticks :: Bit 32
ticks <- area (Stored (Bit 32)) aligned 4

-----------------------------------------
-- not recursive
b989 :: [Bit 32] >>= [Bit 32]
b989[t0] =
  t1 <- add((t0, 87))
  and((t1, 255))

-----------------------------------------
-- not recursive
b988 :: [Bit 32] >>= [Bit 32]
b988[t0] =
  t1 <- add((t0, 48))
  and((t1, 255))

-----------------------------------------
-- not recursive
b1345 :: [Bit 32, Bit 32] >>= [Bit 32]
b1345[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b988[t0]
    else b989[t0]

-----------------------------------------
-- recursive
b1376 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1376[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b1376[t11, t1, t2, t3]
    else b303[]

-----------------------------------------
-- recursive
b1378 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1378[t0, t1, t2, t3, t4] =
  t5 <- b1376[t4, t3, t2, t0]
  t6 <- add((t0, 1))
  t7 <- primUle((t6, t1))
  if t7
    then b1378[t6, t1, t2, t3, t4]
    else b303[]

-----------------------------------------
-- not recursive
b1074 :: [] >>= [Unit]
b1074[] =
  t0 <- load8((console))
  t1 <- add((console, 1))
  t2 <- load8((t1))
  t3 <- add((console, 4))
  t4 <- store8((t3, t0))
  t5 <- add((console, 5))
  t6 <- store8((t5, t2))
  t7 <- add((console, 2))
  t8 <- load8((t7))
  t9 <- add((console, 3))
  t10 <- load8((t9))
  t11 <- add((console, 6))
  t12 <- load8((t11))
  b1378[t0, t8, t12, t10, t2]

-----------------------------------------
-- not recursive
ball :: Bit 32
ball <- area GameObject aligned 4

-----------------------------------------
-- not recursive
str0 :: Bit 32
str0 <- "nothing\n"

-----------------------------------------
-- not recursive
b1484 :: [] >>= [Bit 32]
b1484[] =
  return 0

-----------------------------------------
-- recursive
b3270 :: [Bit 32, Bit 32] >>= [Bit 32]
b3270[t0, t1] =
  t2 <- b1580[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1484[]
    else b3263[t3, t1]
b3268 :: [Bit 32, Bit 32] >>= [Bit 32]
b3268[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, 13]
  t5 <- b1580[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1484[]
    else b3263[t6, t1]
b3263 :: [Bit 32, Bit 32] >>= [Bit 32]
b3263[t0, t1] =
  t2 <- add((t1, 1))
  b3265[t0, t2]
b3265 :: [Bit 32, Bit 32] >>= [Bit 32]
b3265[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b3268[t0, t1]
    else b3270[t0, t1]

-----------------------------------------
-- not recursive
b3276 :: [Bit 32] >>= [Bit 32]
b3276[t0] =
  t1 <- add((str0, 1))
  b3265[t0, t1]

-----------------------------------------
-- not recursive
b3274 :: [] >>= [Bit 32]
b3274[] =
  t0 <- load8((str0))
  t1 <- primEq((t0, 0))
  if t1
    then b1484[]
    else b3276[t0]

-----------------------------------------
-- recursive
b1383 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1383[t0, t1, t2] =
  t3 <- mul((t2, 160))
  t4 <- mul((t0, 2))
  t5 <- add((t3, t4))
  t6 <- add((t5, 753664))
  t7 <- store16((t6, 28704))
  t8 <- add((t0, 1))
  t9 <- primUle((t8, t1))
  if t9
    then b1383[t8, t1, t2]
    else b303[]

-----------------------------------------
-- recursive
b1634 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1634[t0, t1, t2] =
  t3 <- b1383[t2, t1, t0]
  t4 <- add((t0, 1))
  t5 <- primUle((t4, 0))
  if t5
    then b1634[t4, t1, t2]
    else b303[]

-----------------------------------------
-- recursive
b1385 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1385[t0, t1, t2, t3] =
  t4 <- b1383[t3, t2, t0]
  t5 <- add((t0, 1))
  t6 <- primUle((t5, t1))
  if t6
    then b1385[t5, t1, t2, t3]
    else b303[]

-----------------------------------------
-- not recursive
b4454 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4454[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- add((t4, -1))
  t6 <- primUle((t5, 0))
  if t6
    then b1385[t1, t5, t2, t3]
    else b1634[t1, t2, t3]

-----------------------------------------
-- not recursive
b4453 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4453[t0, t1, t2, t3] =
  t4 <- add((t2, t1))
  t5 <- add((t4, -1))
  t6 <- primUle((t5, 0))
  if t6
    then b1385[t2, t5, t0, t3]
    else b1634[t2, t0, t3]

-----------------------------------------
-- not recursive
b4464 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4464[t0, t1, t2] =
  t3 <- load32((ball))
  t4 <- add((ball, 4))
  t5 <- load32((t4))
  t6 <- add((t1, t3))
  t7 <- add((t6, -1))
  t8 <- primUle((t7, t2))
  if t8
    then b4453[t7, t5, t0, t1]
    else b4454[t5, t0, t2, t1]

-----------------------------------------
-- not recursive
b4458 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4458[t0, t1, t2, t3] =
  t4 <- primUle((t0, t1))
  if t4
    then b4464[t0, t2, t3]
    else b303[]

-----------------------------------------
-- not recursive
b4456 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4456[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- add((t5, -1))
  t7 <- primUle((t6, t4))
  if t7
    then b1385[t1, t6, t2, t3]
    else b1385[t1, t4, t2, t3]

-----------------------------------------
-- not recursive
b4455 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4455[t0, t1, t2, t3, t4] =
  t5 <- add((t2, t1))
  t6 <- add((t5, -1))
  t7 <- primUle((t6, t4))
  if t7
    then b1385[t2, t6, t0, t3]
    else b1385[t2, t4, t0, t3]

-----------------------------------------
-- not recursive
b4465 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4465[t0, t1, t2, t3] =
  t4 <- load32((ball))
  t5 <- add((ball, 4))
  t6 <- load32((t5))
  t7 <- add((t1, t4))
  t8 <- add((t7, -1))
  t9 <- primUle((t8, t2))
  if t9
    then b4455[t8, t6, t0, t1, t3]
    else b4456[t6, t0, t2, t1, t3]

-----------------------------------------
-- not recursive
b4457 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4457[t0, t1, t2, t3] =
  t4 <- primUle((t0, t1))
  if t4
    then b4465[t0, t2, t3, t1]
    else b303[]

-----------------------------------------
-- not recursive
b4404 :: [Bit 32, Bit 32] >>= [Unit]
b4404[t0, t1] =
  t2 <- add((ball, 12))
  t3 <- load32((t2))
  t4 <- load8((console))
  t5 <- add((console, 2))
  t6 <- load8((t5))
  t7 <- sub((t6, t4))
  t8 <- primUle((t7, 24))
  if t8
    then b4457[t3, t7, t0, t1]
    else b4458[t3, 0, t0, t1]

-----------------------------------------
-- not recursive
b4212 :: [Bit 32, Bit 32] >>= [Unit]
b4212[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b4404[t0, t1]
    else b303[]

-----------------------------------------
-- not recursive
paddle :: Bit 32
paddle <- area GameObject aligned 4

-----------------------------------------
-- not recursive
b4466 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4466[t0, t1, t2] =
  t3 <- load32((paddle))
  t4 <- add((paddle, 4))
  t5 <- load32((t4))
  t6 <- add((t1, t3))
  t7 <- add((t6, -1))
  t8 <- primUle((t7, t2))
  if t8
    then b4453[t7, t5, t0, t1]
    else b4454[t5, t0, t2, t1]

-----------------------------------------
-- not recursive
b4460 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4460[t0, t1, t2, t3] =
  t4 <- primUle((t0, t1))
  if t4
    then b4466[t0, t2, t3]
    else b303[]

-----------------------------------------
-- not recursive
b4467 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4467[t0, t1, t2, t3] =
  t4 <- load32((paddle))
  t5 <- add((paddle, 4))
  t6 <- load32((t5))
  t7 <- add((t1, t4))
  t8 <- add((t7, -1))
  t9 <- primUle((t8, t2))
  if t9
    then b4455[t8, t6, t0, t1, t3]
    else b4456[t6, t0, t2, t1, t3]

-----------------------------------------
-- not recursive
b4459 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4459[t0, t1, t2, t3] =
  t4 <- primUle((t0, t1))
  if t4
    then b4467[t0, t2, t3, t1]
    else b303[]

-----------------------------------------
-- not recursive
b4407 :: [Bit 32, Bit 32] >>= [Unit]
b4407[t0, t1] =
  t2 <- add((paddle, 12))
  t3 <- load32((t2))
  t4 <- load8((console))
  t5 <- add((console, 2))
  t6 <- load8((t5))
  t7 <- sub((t6, t4))
  t8 <- primUle((t7, 24))
  if t8
    then b4459[t3, t7, t0, t1]
    else b4460[t3, 0, t0, t1]

-----------------------------------------
-- not recursive
b4207 :: [Bit 32, Bit 32] >>= [Unit]
b4207[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b4407[t0, t1]
    else b303[]

-----------------------------------------
-- not recursive
spinner :: Bit 32
spinner <- area (Array 4 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- not recursive
spinpos :: Bit 32
spinpos <- area (Stored (Ix 4)) aligned 1

-----------------------------------------
-- not recursive
b1804 :: [] >>= [Unit]
b1804[] =
  t0 <- load8((spinpos))
  t1 <- add((spinner, t0))
  t2 <- load8((t1))
  t3 <- add((t0, 1))
  t4 <- and((t3, 3))
  t5 <- store8((spinpos, t4))
  t6 <- load16((753822))
  t7 <- and((t6, 65280))
  t8 <- or((t7, t2))
  t9 <- store16((753822, t8))
  t10 <- load1((current))
  t11 <- flagToWord((t10))
  t12 <- mul((t11, 72))
  t13 <- add((users, t12))
  returnTo((t13))

-----------------------------------------
-- not recursive
b2572 :: [] >>= [Unit]
b2572[] =
  t0 <- store1((current, flag0))
  b1804[]

-----------------------------------------
-- not recursive
b4409 :: [Bit 32] >>= [Unit]
b4409[t0] =
  t1 <- wordToFlag((t0))
  t2 <- store1((current, t1))
  b1804[]

-----------------------------------------
-- not recursive
b949 :: [] >>= [Unit]
b949[] =
  t0 <- load1((current))
  t1 <- flagToWord((t0))
  t2 <- add((t1, 1))
  t3 <- primUle((t2, 1))
  if t3
    then b4409[t2]
    else b2572[]

-----------------------------------------
-- not recursive
b951 :: [Bit 32] >>= [Unit]
b951[t0] =
  t1 <- and((t0, 15))
  t2 <- primEq((t1, 0))
  if t2
    then b949[]
    else b1116[]

-----------------------------------------
-- not recursive
pos :: Bit 32
pos <- area (Stored (Ix 80)) aligned 1

-----------------------------------------
-- not recursive
b851 :: [Bit 32, Bit 32] >>= [Unit]
b851[t0, t1] =
  t2 <- mul((t0, 2))
  t3 <- add((t2, 753664))
  t4 <- load16((t3))
  t5 <- and((t1, 255))
  t6 <- and((t4, 65280))
  t7 <- or((t6, t5))
  store16((t3, t7))

-----------------------------------------
-- not recursive
dir :: Bit 32
dir <- area (Stored Bool) aligned 1

-----------------------------------------
-- not recursive
b1375 :: [Bit 32, Bit 32] >>= [Unit]
b1375[t0, t1] =
  t2 <- b851[t0, 124]
  t3 <- store1((dir, flag1))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b949[]
    else b1116[]

-----------------------------------------
-- not recursive
b4414 :: [Bit 32, Bit 32] >>= [Unit]
b4414[t0, t1] =
  t2 <- b851[t0, 60]
  t3 <- store8((pos, t0))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b949[]
    else b1116[]

-----------------------------------------
-- not recursive
b4416 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4416[t0, t1, t2, t3] =
  t4 <- sub((t2, t0))
  t5 <- primSle((t1, t4))
  if t5
    then b4414[t4, t3]
    else b1375[t2, t3]

-----------------------------------------
-- not recursive
b1372 :: [Bit 32, Bit 32] >>= [Unit]
b1372[t0, t1] =
  t2 <- b851[t0, 124]
  t3 <- store1((dir, flag0))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b949[]
    else b1116[]

-----------------------------------------
-- not recursive
b4419 :: [Bit 32, Bit 32] >>= [Unit]
b4419[t0, t1] =
  t2 <- b851[t0, 62]
  t3 <- store8((pos, t0))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b949[]
    else b1116[]

-----------------------------------------
-- not recursive
b4421 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4421[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b4419[t4, t3]
    else b1372[t1, t3]

-----------------------------------------
-- not recursive
b1369 :: [Bit 32] >>= [Unit]
b1369[t0] =
  t1 <- load8((pos))
  t2 <- b851[t1, 32]
  t3 <- load1((dir))
  if t3
    then b4421[1, t1, 68, t0]
    else b4416[1, 46, t1, t0]

-----------------------------------------
-- not recursive
b1502 :: [Bit 32] >>= [Unit]
b1502[t0] =
  t1 <- and((t0, 3))
  t2 <- primEq((t1, 0))
  if t2
    then b1369[t0]
    else b951[t0]

-----------------------------------------
-- not recursive
b1661 :: [Bit 32] >>= [Unit]
b1661[t0] =
  t1 <- add((paddle, 8))
  t2 <- load32((t1))
  t3 <- add((t2, -1))
  t4 <- store32((t1, t3))
  t5 <- and((t0, 3))
  t6 <- primEq((t5, 0))
  if t6
    then b1369[t0]
    else b951[t0]

-----------------------------------------
-- not recursive
b1660 :: [Bit 32, Bit 32] >>= [Unit]
b1660[t0, t1] =
  t2 <- primNeq((52, t0))
  if t2
    then b1661[t1]
    else b1502[t1]

-----------------------------------------
-- not recursive
b1663 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1663[t0, t1, t2] =
  t3 <- primEq((52, t1))
  if t3
    then b1660[t0, t2]
    else b1502[t2]

-----------------------------------------
-- not recursive
b1659 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1659[t0, t1, t2] =
  t3 <- add((paddle, 8))
  t4 <- load32((t3))
  t5 <- add((t4, 1))
  t6 <- store32((t3, t5))
  t7 <- primEq((52, t1))
  if t7
    then b1660[t0, t2]
    else b1502[t2]

-----------------------------------------
-- not recursive
b1658 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1658[t0, t1, t2] =
  t3 <- primNeq((54, t1))
  if t3
    then b1659[t1, t0, t2]
    else b1663[t1, t0, t2]

-----------------------------------------
-- not recursive
b1949 :: [Bit 32, Bit 32] >>= [Unit]
b1949[t0, t1] =
  t2 <- b3274[]
  t3 <- b4207[t0, t2]
  t4 <- load8((keyDown))
  t5 <- load8((keyUp))
  t6 <- primEq((54, t4))
  if t6
    then b1658[t4, t5, t1]
    else b1663[t5, t4, t1]

-----------------------------------------
-- not recursive
b4215 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4215[t0, t1, t2] =
  t3 <- b4207[t1, t0]
  t4 <- load8((keyDown))
  t5 <- load8((keyUp))
  t6 <- primEq((54, t4))
  if t6
    then b1658[t4, t5, t2]
    else b1663[t5, t4, t2]

-----------------------------------------
-- not recursive
b1959 :: [Bit 32, Bit 32] >>= [Unit]
b1959[t0, t1] =
  t2 <- b3274[]
  t3 <- b4212[t0, t2]
  t4 <- add((paddle, 8))
  t5 <- load32((t4))
  t6 <- add((console, 1))
  t7 <- load8((t6))
  t8 <- add((console, 3))
  t9 <- load8((t8))
  t10 <- sub((t9, t7))
  t11 <- primUle((t10, 79))
  if t11
    then b4215[t10, t5, t1]
    else b1949[t5, t1]

-----------------------------------------
-- not recursive
b4222 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4222[t0, t1, t2] =
  t3 <- b4212[t1, t0]
  t4 <- add((paddle, 8))
  t5 <- load32((t4))
  t6 <- add((console, 1))
  t7 <- load8((t6))
  t8 <- add((console, 3))
  t9 <- load8((t8))
  t10 <- sub((t9, t7))
  t11 <- primUle((t10, 79))
  if t11
    then b4215[t10, t5, t2]
    else b1949[t5, t2]

-----------------------------------------
-- not recursive
b1817 :: [Bit 32] >>= [Unit]
b1817[t0] =
  t1 <- b1074[]
  t2 <- add((ball, 8))
  t3 <- load32((t2))
  t4 <- add((console, 1))
  t5 <- load8((t4))
  t6 <- add((console, 3))
  t7 <- load8((t6))
  t8 <- sub((t7, t5))
  t9 <- primUle((t8, 79))
  if t9
    then b4222[t8, t3, t0]
    else b1959[t3, t0]

-----------------------------------------
-- recursive
b4424 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4424[t0, t1, t2] =
  t3 <- lshr((t1, 4))
  t4 <- mul((t0, 2))
  t5 <- add((t4, 753664))
  t6 <- load16((t5))
  t7 <- and((t3, 15))
  t8 <- b1345[t7, 9]
  t9 <- and((t6, 65280))
  t10 <- or((t9, t8))
  t11 <- store16((t5, t10))
  t12 <- add((t0, -1))
  t13 <- primSle((70, t12))
  if t13
    then b4424[t12, t3, t2]
    else b1817[t2]

-----------------------------------------
-- not recursive
entrypoint timerInterrupt :: [] >>= [Unit]
timerInterrupt[] =
  t0 <- inb((33))
  t1 <- or((t0, 1))
  t2 <- outb((33, t1))
  t3 <- outb((32, 96))
  t4 <- inb((33))
  t5 <- and((t4, -2))
  t6 <- outb((33, t5))
  t7 <- load32((ticks))
  t8 <- add((t7, 1))
  t9 <- store32((ticks, t8))
  t10 <- load16((753818))
  t11 <- and((t7, 15))
  t12 <- b1345[t11, 9]
  t13 <- and((t10, 65280))
  t14 <- or((t13, t12))
  t15 <- store16((753818, t14))
  t16 <- lshr((t7, 4))
  t17 <- load16((753816))
  t18 <- and((t16, 15))
  t19 <- b1345[t18, 9]
  t20 <- and((t17, 65280))
  t21 <- or((t20, t19))
  t22 <- store16((753816, t21))
  b4424[75, t16, t7]

-----------------------------------------
-- not recursive
str55 :: Bit 32
str55 <- "Exception 0x"

-----------------------------------------
-- not recursive
itoaBuf :: Bit 32
itoaBuf <- area (Array 32 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- not recursive
b1577 :: [Bit 32] >>= [Unit]
b1577[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  t3 <- b1309[t2, 0, 13]
  t4 <- add((console, 4))
  t5 <- load8((t4))
  t6 <- primEq((t0, 13))
  if t6
    then b1582[t5]
    else b1585[t0, 10, t5]

-----------------------------------------
-- not recursive
b1589 :: [Bit 32] >>= [Unit]
b1589[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  t3 <- b1309[t2, 0, t0]
  t4 <- primEq((t0, 10))
  if t4
    then b1577[t0]
    else b1580[t0]

-----------------------------------------
-- not recursive
b2309 :: [] >>= [Unit]
b2309[] =
  t0 <- load8((itoaBuf))
  t1 <- b1589[t0]
  return Unit

-----------------------------------------
-- recursive
b4360 :: [Bit 32, Bit 32] >>= [Unit]
b4360[t0, t1] =
  t2 <- b1589[t1]
  b4358[1, t0, 0, t1]
b4358 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4358[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b4360[t4, t3]
    else b303[]

-----------------------------------------
-- not recursive
b4367 :: [Bit 32, Bit 32] >>= [Unit]
b4367[t0, t1] =
  t2 <- b1589[t1]
  t3 <- b4358[1, t0, 0, t1]
  t4 <- load8((itoaBuf))
  t5 <- b1589[t4]
  return Unit

-----------------------------------------
-- not recursive
b4365 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4365[t0, t1, t2] =
  t3 <- add((t1, t0))
  t4 <- primUle((t3, t1))
  if t4
    then b4367[t3, t2]
    else b2309[]

-----------------------------------------
-- recursive
b2239 :: [Bit 32] >>= [Unit]
b2239[t0] =
  t1 <- add((itoaBuf, t0))
  t2 <- load8((t1))
  t3 <- b1589[t2]
  t4 <- add((t0, -1))
  t5 <- primSle((0, t4))
  if t5
    then b2239[t4]
    else b303[]

-----------------------------------------
-- not recursive
b2242 :: [Bit 32, Bit 32] >>= [Unit]
b2242[t0, t1] =
  t2 <- b4358[1, t1, 0, t0]
  b2239[t1]

-----------------------------------------
-- recursive
b4371 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4371[t0, t1, t2, t3] =
  t4 <- lshr((t1, 4))
  t5 <- primEq((t4, 0))
  if t5
    then b2242[t3, t2]
    else b2241[t4, t0, t3]
b2241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2241[t0, t1, t2] =
  t3 <- add((itoaBuf, t1))
  t4 <- and((t0, 15))
  t5 <- b1345[t4, 9]
  t6 <- store8((t3, t5))
  t7 <- add((t1, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b4371[t7, t0, t1, t2]
    else b2242[t2, t1]

-----------------------------------------
-- not recursive
b4376 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4376[t0, t1, t2] =
  t3 <- lshr((t1, 4))
  t4 <- primEq((t3, 0))
  if t4
    then b4365[1, 0, t2]
    else b2241[t3, t0, t2]

-----------------------------------------
-- not recursive
b4374 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4374[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b4376[t5, t3, t4]
    else b4365[1, 0, t4]

-----------------------------------------
-- not recursive
str56 :: Bit 32
str56 <- ", frame=0x"

-----------------------------------------
-- not recursive
str57 :: Bit 32
str57 <- "\n"

-----------------------------------------
-- recursive
b4136 :: [Bit 32, Bit 32] >>= [Unit]
b4136[t0, t1] =
  t2 <- b1580[t0]
  b3219[t1]
b4135 :: [Bit 32, Bit 32] >>= [Unit]
b4135[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, 13]
  t5 <- b1580[t0]
  b3219[t1]
b3219 :: [Bit 32] >>= [Unit]
b3219[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b303[]
    else b3221[t1, t0]
b3221 :: [Bit 32, Bit 32] >>= [Unit]
b3221[t0, t1] =
  t2 <- add((t1, 1))
  b3228[t0, t2]
b3228 :: [Bit 32, Bit 32] >>= [Unit]
b3228[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b4135[t0, t1]
    else b4136[t0, t1]

-----------------------------------------
-- not recursive
b3231 :: [Bit 32] >>= [Unit]
b3231[t0] =
  t1 <- add((str57, 1))
  b3228[t0, t1]

-----------------------------------------
-- not recursive
b1473 :: [Bit 32] >>= [Unit]
b1473[t0] =
  t1 <- and((t0, 15))
  t2 <- b1345[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b4374[1, 0, 31, t0, 32]
  t5 <- load8((str57))
  t6 <- primEq((t5, 0))
  if t6
    then b303[]
    else b3231[t5]

-----------------------------------------
-- recursive
b3241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3241[t0, t1, t2] =
  t3 <- b1580[t0]
  b3232[t1, t2]
b3239 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3239[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3232[t1, t2]
b3232 :: [Bit 32, Bit 32] >>= [Unit]
b3232[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1473[t1]
    else b3234[t2, t0, t1]
b3234 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3234[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3236[t0, t3, t2]
b3236 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3236[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3239[t0, t1, t2]
    else b3241[t0, t1, t2]

-----------------------------------------
-- not recursive
b3244 :: [Bit 32, Bit 32] >>= [Unit]
b3244[t0, t1] =
  t2 <- add((str56, 1))
  b3236[t0, t2, t1]

-----------------------------------------
-- not recursive
b1477 :: [Bit 32, Bit 32] >>= [Unit]
b1477[t0, t1] =
  t2 <- and((t0, 15))
  t3 <- b1345[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b4374[1, 0, 31, t0, 32]
  t6 <- load8((str56))
  t7 <- primEq((t6, 0))
  if t7
    then b1473[t1]
    else b3244[t6, t1]

-----------------------------------------
-- recursive
b3254 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3254[t0, t1, t2, t3] =
  t4 <- b1580[t0]
  b3245[t1, t2, t3]
b3252 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3252[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, 13]
  t7 <- b1580[t0]
  b3245[t1, t2, t3]
b3245 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3245[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b1477[t2, t1]
    else b3247[t3, t0, t1, t2]
b3247 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3247[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3249[t0, t4, t3, t2]
b3249 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3249[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3252[t0, t1, t3, t2]
    else b3254[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b3257 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3257[t0, t1, t2] =
  t3 <- add((str55, 1))
  b3249[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
entrypoint unhandled :: [Bit 32, Bit 32] >>= [Unit]
unhandled[t0, t1] =
  t2 <- load8((str55))
  t3 <- primEq((t2, 0))
  if t3
    then b1477[t0, t1]
    else b3257[t2, t1, t0]

-----------------------------------------
-- not recursive
s230 :: Unit
s230 <-
  Unit()

-----------------------------------------
-- not recursive
b2479 :: [] >>= [Unit]
b2479[] =
  return s230

-----------------------------------------
-- recursive
b2858 :: [Bit 32, Bit 32] >>= [Unit]
b2858[t0, t1] =
  t2 <- store8((t0, 0))
  t3 <- add((t1, 1))
  t4 <- add((t0, 1))
  b2857[t4, t3]
b2857 :: [Bit 32, Bit 32] >>= [Unit]
b2857[t0, t1] =
  t2 <- primUlt((t1, 32))
  if t2
    then b2858[t0, t1]
    else b2479[]

-----------------------------------------
-- not recursive
str45 :: Bit 32
str45 <- " Last key pressed:"

-----------------------------------------
-- not recursive
str11 :: Bit 32
str11 <- "Headers:\n"

-----------------------------------------
-- not recursive
str1 :: Bit 32
str1 <- " "

-----------------------------------------
-- not recursive
str12 :: Bit 32
str12 <- "header"

-----------------------------------------
-- not recursive
str2 :: Bit 32
str2 <- "["

-----------------------------------------
-- recursive
b4435 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4435[t0, t1, t2, t3] =
  t4 <- nzdiv((t1, 10))
  t5 <- primEq((t4, 0))
  if t5
    then b2242[t3, t2]
    else b2258[t4, t0, t3]
b2258 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2258[t0, t1, t2] =
  t3 <- add((itoaBuf, t1))
  t4 <- nzrem((t0, 10))
  t5 <- b1345[t4, 9]
  t6 <- store8((t3, t5))
  t7 <- add((t1, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b4435[t7, t0, t1, t2]
    else b2242[t2, t1]

-----------------------------------------
-- not recursive
b4443 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4443[t0, t1, t2] =
  t3 <- nzdiv((t1, 10))
  t4 <- primEq((t3, 0))
  if t4
    then b4365[1, 0, t2]
    else b2258[t3, t0, t2]

-----------------------------------------
-- not recursive
b4441 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4441[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b4443[t5, t3, t4]
    else b4365[1, 0, t4]

-----------------------------------------
-- not recursive
str3 :: Bit 32
str3 <- "]: "

-----------------------------------------
-- not recursive
str5 :: Bit 32
str5 <- "[0x"

-----------------------------------------
-- not recursive
str6 :: Bit 32
str6 <- "-0x"

-----------------------------------------
-- not recursive
str7 :: Bit 32
str7 <- "], entry 0x"

-----------------------------------------
-- not recursive
b1510 :: [Bit 32] >>= [Unit]
b1510[t0] =
  t1 <- add((t0, 8))
  t2 <- load32((t1))
  t3 <- and((t2, 15))
  t4 <- b1345[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- lshr((t2, 4))
  t7 <- primEq((t6, 0))
  if t7
    then b4365[1, 0, 32]
    else b2241[t6, 1, 32]

-----------------------------------------
-- recursive
b3287 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3287[t0, t1, t2] =
  t3 <- b1580[t0]
  b3278[t1, t2]
b3285 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3285[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3278[t1, t2]
b3278 :: [Bit 32, Bit 32] >>= [Unit]
b3278[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1510[t1]
    else b3280[t2, t0, t1]
b3280 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3280[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3282[t0, t3, t2]
b3282 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3282[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3285[t0, t1, t2]
    else b3287[t0, t1, t2]

-----------------------------------------
-- not recursive
b3290 :: [Bit 32, Bit 32] >>= [Unit]
b3290[t0, t1] =
  t2 <- add((str7, 1))
  b3282[t0, t2, t1]

-----------------------------------------
-- not recursive
b1512 :: [Bit 32] >>= [Unit]
b1512[t0] =
  t1 <- add((t0, 4))
  t2 <- load32((t1))
  t3 <- and((t2, 15))
  t4 <- b1345[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- b4374[1, 0, 31, t2, 32]
  t7 <- load8((str7))
  t8 <- primEq((t7, 0))
  if t8
    then b1510[t0]
    else b3290[t7, t0]

-----------------------------------------
-- recursive
b3300 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3300[t0, t1, t2] =
  t3 <- b1580[t0]
  b3291[t1, t2]
b3298 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3298[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3291[t1, t2]
b3291 :: [Bit 32, Bit 32] >>= [Unit]
b3291[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1512[t1]
    else b3293[t2, t0, t1]
b3293 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3293[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3295[t0, t3, t2]
b3295 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3295[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3298[t0, t1, t2]
    else b3300[t0, t1, t2]

-----------------------------------------
-- not recursive
b3303 :: [Bit 32, Bit 32] >>= [Unit]
b3303[t0, t1] =
  t2 <- add((str6, 1))
  b3295[t0, t2, t1]

-----------------------------------------
-- not recursive
b1514 :: [Bit 32] >>= [Unit]
b1514[t0] =
  t1 <- load32((t0))
  t2 <- and((t1, 15))
  t3 <- b1345[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b4374[1, 0, 31, t1, 32]
  t6 <- load8((str6))
  t7 <- primEq((t6, 0))
  if t7
    then b1512[t0]
    else b3303[t6, t0]

-----------------------------------------
-- recursive
b3313 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3313[t0, t1, t2] =
  t3 <- b1580[t0]
  b3304[t1, t2]
b3311 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3311[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3304[t1, t2]
b3304 :: [Bit 32, Bit 32] >>= [Unit]
b3304[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1514[t1]
    else b3306[t2, t0, t1]
b3306 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3306[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3308[t0, t3, t2]
b3308 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3308[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3311[t0, t1, t2]
    else b3313[t0, t1, t2]

-----------------------------------------
-- not recursive
b3326 :: [Bit 32, Bit 32] >>= [Unit]
b3326[t0, t1] =
  t2 <- add((str5, 1))
  b3308[t0, t2, t1]

-----------------------------------------
-- not recursive
b3324 :: [Bit 32] >>= [Unit]
b3324[t0] =
  t1 <- load8((str5))
  t2 <- primEq((t1, 0))
  if t2
    then b1514[t0]
    else b3326[t1, t0]

-----------------------------------------
-- not recursive
str4 :: Bit 32
str4 <- "\n"

-----------------------------------------
-- not recursive
b1516 :: [Bit 32] >>= [Bit 32]
b1516[t0] =
  add((t0, 1))

-----------------------------------------
-- recursive
b3323 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3323[t0, t1, t2] =
  t3 <- b1580[t0]
  b3314[t1, t2]
b3321 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3321[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3314[t1, t2]
b3314 :: [Bit 32, Bit 32] >>= [Bit 32]
b3314[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1516[t1]
    else b3316[t2, t0, t1]
b3316 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3316[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3318[t0, t3, t2]
b3318 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3318[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3321[t0, t1, t2]
    else b3323[t0, t1, t2]

-----------------------------------------
-- not recursive
b3329 :: [Bit 32, Bit 32] >>= [Bit 32]
b3329[t0, t1] =
  t2 <- add((str4, 1))
  b3318[t0, t2, t1]

-----------------------------------------
-- not recursive
b2071 :: [Bit 32, Bit 32] >>= [Bit 32]
b2071[t0, t1] =
  t2 <- b3324[t0]
  t3 <- load8((str4))
  t4 <- primEq((t3, 0))
  if t4
    then b1516[t1]
    else b3329[t3, t1]

-----------------------------------------
-- recursive
b3339 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3339[t0, t1, t2, t3] =
  t4 <- b1580[t0]
  b3330[t1, t2, t3]
b3337 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3337[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, 13]
  t7 <- b1580[t0]
  b3330[t1, t2, t3]
b3330 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3330[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b2071[t2, t1]
    else b3332[t3, t0, t1, t2]
b3332 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3332[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3334[t0, t4, t3, t2]
b3334 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3334[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3337[t0, t1, t3, t2]
    else b3339[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b3342 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3342[t0, t1, t2] =
  t3 <- add((str3, 1))
  b3334[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b2070 :: [Bit 32, Bit 32] >>= [Bit 32]
b2070[t0, t1] =
  t2 <- nzrem((t0, 10))
  t3 <- b1345[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b4441[1, 0, 31, t0, 32]
  t6 <- load8((str3))
  t7 <- primEq((t6, 0))
  if t7
    then b2071[t1, t0]
    else b3342[t6, t0, t1]

-----------------------------------------
-- recursive
b3352 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3352[t0, t1, t2, t3] =
  t4 <- b1580[t0]
  b3343[t1, t2, t3]
b3350 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3350[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, 13]
  t7 <- b1580[t0]
  b3343[t1, t2, t3]
b3343 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3343[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b2070[t2, t1]
    else b3345[t3, t0, t1, t2]
b3345 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3345[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3347[t0, t4, t3, t2]
b3347 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3347[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3350[t0, t1, t3, t2]
    else b3352[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b3355 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3355[t0, t1, t2] =
  t3 <- add((str2, 1))
  b3347[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b3353 :: [Bit 32, Bit 32] >>= [Bit 32]
b3353[t0, t1] =
  t2 <- load8((str2))
  t3 <- primEq((t2, 0))
  if t3
    then b2070[t1, t0]
    else b3355[t2, t0, t1]

-----------------------------------------
-- recursive
b3358 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3358[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3360[t0, t4, t3, t2]
b3360 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3360[t0, t1, t2, t3] =
  t4 <- b1589[t0]
  t5 <- load8((t1))
  t6 <- primEq((t5, 0))
  if t6
    then b3353[t2, t3]
    else b3358[t5, t1, t3, t2]

-----------------------------------------
-- not recursive
b3363 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3363[t0, t1, t2] =
  t3 <- add((str12, 1))
  b3360[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b3361 :: [Bit 32, Bit 32] >>= [Bit 32]
b3361[t0, t1] =
  t2 <- load8((str12))
  t3 <- primEq((t2, 0))
  if t3
    then b3353[t1, t0]
    else b3363[t2, t0, t1]

-----------------------------------------
-- recursive
b4225 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b4225[t0, t1, t2, t3] =
  t4 <- b1580[t0]
  b3364[t1, t2, t3]
b4224 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b4224[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, 13]
  t7 <- b1580[t0]
  b3364[t1, t2, t3]
b3364 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3364[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b3361[t1, t2]
    else b3366[t3, t0, t1, t2]
b3366 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3366[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3373[t0, t4, t2, t3]
b3373 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3373[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b4224[t0, t1, t2, t3]
    else b4225[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b444 :: [Bit 32] >>= [Bit 32]
b444[t0] =
  return t0

-----------------------------------------
-- recursive
b4229 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b4229[t0, t1, t2, t3, t4] =
  t5 <- add((str1, 1))
  t6 <- b3373[t0, t5, t4, t1]
  b3379[t2, t3, 12, t6]
b3381 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3381[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- load8((str1))
  t7 <- primEq((t6, 0))
  if t7
    then b4228[t1, t3, t5, t4]
    else b4229[t6, t1, t5, t4, t3]
b4228 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b4228[t0, t1, t2, t3] =
  t4 <- b3361[t1, t0]
  b3379[t2, t3, 12, t4]
b3379 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3379[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b444[t3]
    else b3381[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
str13 :: Bit 32
str13 <- "Memory map:\n"

-----------------------------------------
-- not recursive
str14 :: Bit 32
str14 <- "mmap"

-----------------------------------------
-- not recursive
str8 :: Bit 32
str8 <- "[0x"

-----------------------------------------
-- not recursive
str9 :: Bit 32
str9 <- "-0x"

-----------------------------------------
-- not recursive
str10 :: Bit 32
str10 <- "]"

-----------------------------------------
-- not recursive
b3414 :: [Bit 32] >>= [Unit]
b3414[t0] =
  t1 <- add((str10, 1))
  b3228[t0, t1]

-----------------------------------------
-- not recursive
b1524 :: [Bit 32] >>= [Unit]
b1524[t0] =
  t1 <- add((t0, 4))
  t2 <- load32((t1))
  t3 <- and((t2, 15))
  t4 <- b1345[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- b4374[1, 0, 31, t2, 32]
  t7 <- load8((str10))
  t8 <- primEq((t7, 0))
  if t8
    then b303[]
    else b3414[t7]

-----------------------------------------
-- recursive
b3424 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3424[t0, t1, t2] =
  t3 <- b1580[t0]
  b3415[t1, t2]
b3422 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3422[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3415[t1, t2]
b3415 :: [Bit 32, Bit 32] >>= [Unit]
b3415[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1524[t1]
    else b3417[t2, t0, t1]
b3417 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3417[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3419[t0, t3, t2]
b3419 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3419[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3422[t0, t1, t2]
    else b3424[t0, t1, t2]

-----------------------------------------
-- not recursive
b3442 :: [Bit 32, Bit 32] >>= [Unit]
b3442[t0, t1] =
  t2 <- add((str9, 1))
  b3419[t0, t2, t1]

-----------------------------------------
-- not recursive
b1526 :: [Bit 32] >>= [Unit]
b1526[t0] =
  t1 <- load32((t0))
  t2 <- and((t1, 15))
  t3 <- b1345[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b4374[1, 0, 31, t1, 32]
  t6 <- load8((str9))
  t7 <- primEq((t6, 0))
  if t7
    then b1524[t0]
    else b3442[t6, t0]

-----------------------------------------
-- recursive
b3452 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3452[t0, t1, t2] =
  t3 <- b1580[t0]
  b3443[t1, t2]
b3445 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3445[t0, t1, t2] =
  t3 <- add((t1, 1))
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3450[t0, t3, t2]
    else b3452[t0, t3, t2]
b3450 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3450[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3443[t1, t2]
b3443 :: [Bit 32, Bit 32] >>= [Unit]
b3443[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1526[t1]
    else b3445[t2, t0, t1]

-----------------------------------------
-- recursive
b3400 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3400[t0, t1, t2] =
  t3 <- b1580[t0]
  b3391[t1, t2]
b3398 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3398[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3391[t1, t2]
b3391 :: [Bit 32, Bit 32] >>= [Bit 32]
b3391[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1516[t1]
    else b3393[t2, t0, t1]
b3393 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3393[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3395[t0, t3, t2]
b3395 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3395[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3398[t0, t1, t2]
    else b3400[t0, t1, t2]

-----------------------------------------
-- not recursive
b3455 :: [Bit 32, Bit 32] >>= [Bit 32]
b3455[t0, t1] =
  t2 <- add((str4, 1))
  b3395[t0, t2, t1]

-----------------------------------------
-- not recursive
b3467 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3467[t0, t1, t2, t3] =
  t4 <- b1580[t0]
  t5 <- b3443[t1, t2]
  t6 <- load8((str4))
  t7 <- primEq((t6, 0))
  if t7
    then b1516[t3]
    else b3455[t6, t3]

-----------------------------------------
-- not recursive
b3465 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3465[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, 13]
  t7 <- b1580[t0]
  t8 <- b3443[t1, t2]
  t9 <- load8((str4))
  t10 <- primEq((t9, 0))
  if t10
    then b1516[t3]
    else b3455[t9, t3]

-----------------------------------------
-- not recursive
b3461 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3461[t0, t1, t2] =
  t3 <- add((str8, 1))
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3465[t0, t3, t2, t1]
    else b3467[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b3439 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3439[t0, t1, t2, t3] =
  t4 <- b1580[t0]
  t5 <- b3415[t1, t2]
  t6 <- load8((str4))
  t7 <- primEq((t6, 0))
  if t7
    then b1516[t3]
    else b3455[t6, t3]

-----------------------------------------
-- not recursive
b3437 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3437[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, 13]
  t7 <- b1580[t0]
  t8 <- b3415[t1, t2]
  t9 <- load8((str4))
  t10 <- primEq((t9, 0))
  if t10
    then b1516[t3]
    else b3455[t9, t3]

-----------------------------------------
-- not recursive
b3433 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3433[t0, t1, t2] =
  t3 <- add((str9, 1))
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3437[t0, t3, t2, t1]
    else b3439[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b3409 :: [Bit 32, Bit 32] >>= [Bit 32]
b3409[t0, t1] =
  t2 <- add((str10, 1))
  t3 <- b3228[t0, t2]
  t4 <- load8((str4))
  t5 <- primEq((t4, 0))
  if t5
    then b1516[t1]
    else b3455[t4, t1]

-----------------------------------------
-- not recursive
b3401 :: [Bit 32] >>= [Bit 32]
b3401[t0] =
  t1 <- load8((str4))
  t2 <- primEq((t1, 0))
  if t2
    then b1516[t0]
    else b3455[t1, t0]

-----------------------------------------
-- not recursive
b2363 :: [Bit 32, Bit 32] >>= [Bit 32]
b2363[t0, t1] =
  t2 <- add((t0, 4))
  t3 <- load32((t2))
  t4 <- and((t3, 15))
  t5 <- b1345[t4, 9]
  t6 <- store8((itoaBuf, t5))
  t7 <- b4374[1, 0, 31, t3, 32]
  t8 <- load8((str10))
  t9 <- primEq((t8, 0))
  if t9
    then b3401[t1]
    else b3409[t8, t1]

-----------------------------------------
-- not recursive
b2362 :: [Bit 32, Bit 32] >>= [Bit 32]
b2362[t0, t1] =
  t2 <- load32((t0))
  t3 <- and((t2, 15))
  t4 <- b1345[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- b4374[1, 0, 31, t2, 32]
  t7 <- load8((str9))
  t8 <- primEq((t7, 0))
  if t8
    then b2363[t0, t1]
    else b3433[t7, t1, t0]

-----------------------------------------
-- not recursive
b3459 :: [Bit 32, Bit 32] >>= [Bit 32]
b3459[t0, t1] =
  t2 <- load8((str8))
  t3 <- primEq((t2, 0))
  if t3
    then b2362[t1, t0]
    else b3461[t2, t0, t1]

-----------------------------------------
-- recursive
b3477 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3477[t0, t1, t2, t3] =
  t4 <- b1580[t0]
  b3468[t1, t2, t3]
b3475 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3475[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, 13]
  t7 <- b1580[t0]
  b3468[t1, t2, t3]
b3468 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3468[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b3459[t1, t2]
    else b3470[t3, t0, t1, t2]
b3470 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3470[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3472[t0, t4, t3, t2]
b3472 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3472[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3475[t0, t1, t3, t2]
    else b3477[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b3480 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3480[t0, t1, t2] =
  t3 <- add((str3, 1))
  b3472[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b2134 :: [Bit 32, Bit 32] >>= [Bit 32]
b2134[t0, t1] =
  t2 <- nzrem((t0, 10))
  t3 <- b1345[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b4441[1, 0, 31, t0, 32]
  t6 <- load8((str3))
  t7 <- primEq((t6, 0))
  if t7
    then b3459[t0, t1]
    else b3480[t6, t0, t1]

-----------------------------------------
-- recursive
b3490 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3490[t0, t1, t2, t3] =
  t4 <- b1580[t0]
  b3481[t1, t2, t3]
b3488 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3488[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, 13]
  t7 <- b1580[t0]
  b3481[t1, t2, t3]
b3481 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3481[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b2134[t2, t1]
    else b3483[t3, t0, t1, t2]
b3483 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3483[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3485[t0, t4, t3, t2]
b3485 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3485[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b3488[t0, t1, t3, t2]
    else b3490[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b3493 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3493[t0, t1, t2] =
  t3 <- add((str2, 1))
  b3485[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b3491 :: [Bit 32, Bit 32] >>= [Bit 32]
b3491[t0, t1] =
  t2 <- load8((str2))
  t3 <- primEq((t2, 0))
  if t3
    then b2134[t1, t0]
    else b3493[t2, t0, t1]

-----------------------------------------
-- recursive
b3496 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3496[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3498[t0, t4, t3, t2]
b3498 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3498[t0, t1, t2, t3] =
  t4 <- b1589[t0]
  t5 <- load8((t1))
  t6 <- primEq((t5, 0))
  if t6
    then b3491[t2, t3]
    else b3496[t5, t1, t3, t2]

-----------------------------------------
-- not recursive
b3501 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3501[t0, t1, t2] =
  t3 <- add((str14, 1))
  b3498[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b3499 :: [Bit 32, Bit 32] >>= [Bit 32]
b3499[t0, t1] =
  t2 <- load8((str14))
  t3 <- primEq((t2, 0))
  if t3
    then b3491[t1, t0]
    else b3501[t2, t0, t1]

-----------------------------------------
-- recursive
b4231 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b4231[t0, t1, t2, t3] =
  t4 <- b1580[t0]
  b3502[t1, t2, t3]
b4230 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b4230[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, 13]
  t7 <- b1580[t0]
  b3502[t1, t2, t3]
b3502 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3502[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b3499[t1, t2]
    else b3504[t3, t0, t1, t2]
b3504 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3504[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b3511[t0, t4, t2, t3]
b3511 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3511[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1309[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b4230[t0, t1, t2, t3]
    else b4231[t0, t1, t2, t3]

-----------------------------------------
-- recursive
b4235 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b4235[t0, t1, t2, t3, t4] =
  t5 <- add((str1, 1))
  t6 <- b3511[t0, t5, t4, t1]
  b3517[t2, t3, 8, t6]
b3519 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3519[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- load8((str1))
  t7 <- primEq((t6, 0))
  if t7
    then b4234[t1, t3, t5, t4]
    else b4235[t6, t1, t5, t4, t3]
b4234 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b4234[t0, t1, t2, t3] =
  t4 <- b3499[t1, t0]
  b3517[t2, t3, 8, t4]
b3517 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b3517[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b444[t3]
    else b3519[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
str15 :: Bit 32
str15 <- "Strings:\n"

-----------------------------------------
-- not recursive
str18 :: Bit 32
str18 <- " "

-----------------------------------------
-- not recursive
str16 :: Bit 32
str16 <- "cmdline"

-----------------------------------------
-- not recursive
str19 :: Bit 32
str19 <- ": "

-----------------------------------------
-- not recursive
str20 :: Bit 32
str20 <- " ["

-----------------------------------------
-- not recursive
str21 :: Bit 32
str21 <- "]\n"

-----------------------------------------
-- not recursive
b3765 :: [Bit 32] >>= [Unit]
b3765[t0] =
  t1 <- add((str21, 1))
  b3228[t0, t1]

-----------------------------------------
-- not recursive
b1532 :: [Bit 32] >>= [Unit]
b1532[t0] =
  t1 <- and((t0, 15))
  t2 <- b1345[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b4374[1, 0, 31, t0, 32]
  t5 <- load8((str21))
  t6 <- primEq((t5, 0))
  if t6
    then b303[]
    else b3765[t5]

-----------------------------------------
-- recursive
b3775 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3775[t0, t1, t2] =
  t3 <- b1580[t0]
  b3766[t1, t2]
b3773 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3773[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3766[t1, t2]
b3766 :: [Bit 32, Bit 32] >>= [Unit]
b3766[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1532[t1]
    else b3768[t2, t0, t1]
b3768 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3768[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3770[t0, t3, t2]
b3770 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3770[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3773[t0, t1, t2]
    else b3775[t0, t1, t2]

-----------------------------------------
-- not recursive
b3796 :: [Bit 32, Bit 32] >>= [Unit]
b3796[t0, t1] =
  t2 <- add((str20, 1))
  b3770[t0, t2, t1]

-----------------------------------------
-- not recursive
b3794 :: [Bit 32] >>= [Unit]
b3794[t0] =
  t1 <- load8((str20))
  t2 <- primEq((t1, 0))
  if t2
    then b1532[t0]
    else b3796[t1, t0]

-----------------------------------------
-- recursive
b3799 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3799[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3801[t0, t3, t2]
b3801 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3801[t0, t1, t2] =
  t3 <- b1589[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b3794[t2]
    else b3799[t4, t1, t2]

-----------------------------------------
-- not recursive
b4236 :: [Bit 32, Bit 32] >>= [Unit]
b4236[t0, t1] =
  t2 <- add((t1, 1))
  b3801[t0, t2, t1]

-----------------------------------------
-- not recursive
b3805 :: [Bit 32] >>= [Unit]
b3805[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b3794[t0]
    else b4236[t1, t0]

-----------------------------------------
-- recursive
b3815 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3815[t0, t1, t2] =
  t3 <- b1580[t0]
  b3806[t1, t2]
b3813 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3813[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3806[t1, t2]
b3806 :: [Bit 32, Bit 32] >>= [Unit]
b3806[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b3805[t1]
    else b3808[t2, t0, t1]
b3808 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3808[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3810[t0, t3, t2]
b3810 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3810[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3813[t0, t1, t2]
    else b3815[t0, t1, t2]

-----------------------------------------
-- not recursive
b3838 :: [Bit 32, Bit 32] >>= [Unit]
b3838[t0, t1] =
  t2 <- add((str19, 1))
  b3810[t0, t2, t1]

-----------------------------------------
-- not recursive
b3920 :: [Bit 32, Bit 32] >>= [Unit]
b3920[t0, t1] =
  t2 <- add((str16, 1))
  t3 <- b3228[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b3805[t1]
    else b3838[t4, t1]

-----------------------------------------
-- not recursive
b3833 :: [Bit 32] >>= [Unit]
b3833[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b3805[t0]
    else b3838[t1, t0]

-----------------------------------------
-- not recursive
b3918 :: [Bit 32] >>= [Unit]
b3918[t0] =
  t1 <- load8((str16))
  t2 <- primEq((t1, 0))
  if t2
    then b3833[t0]
    else b3920[t1, t0]

-----------------------------------------
-- recursive
b4238 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4238[t0, t1, t2] =
  t3 <- b1580[t0]
  b3921[t1, t2]
b4237 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4237[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3921[t1, t2]
b3921 :: [Bit 32, Bit 32] >>= [Unit]
b3921[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b3918[t1]
    else b3923[t2, t0, t1]
b3923 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3923[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3930[t0, t3, t2]
b3930 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3930[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b4237[t0, t1, t2]
    else b4238[t0, t1, t2]

-----------------------------------------
-- not recursive
str17 :: Bit 32
str17 <- "imgline"

-----------------------------------------
-- not recursive
b3841 :: [Bit 32, Bit 32] >>= [Unit]
b3841[t0, t1] =
  t2 <- add((str17, 1))
  t3 <- b3228[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b3805[t1]
    else b3838[t4, t1]

-----------------------------------------
-- not recursive
b3839 :: [Bit 32] >>= [Unit]
b3839[t0] =
  t1 <- load8((str17))
  t2 <- primEq((t1, 0))
  if t2
    then b3833[t0]
    else b3841[t1, t0]

-----------------------------------------
-- recursive
b3853 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3853[t0, t1, t2] =
  t3 <- b1580[t0]
  b3844[t1, t2]
b3851 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3851[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3844[t1, t2]
b3844 :: [Bit 32, Bit 32] >>= [Unit]
b3844[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b3839[t1]
    else b3846[t2, t0, t1]
b3846 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3846[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3848[t0, t3, t2]
b3848 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3848[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3851[t0, t1, t2]
    else b3853[t0, t1, t2]

-----------------------------------------
-- not recursive
b3999 :: [Bit 32, Bit 32] >>= [Unit]
b3999[t0, t1] =
  t2 <- add((str18, 1))
  b3848[t0, t2, t1]

-----------------------------------------
-- not recursive
b4002 :: [Bit 32, Bit 32] >>= [Unit]
b4002[t0, t1] =
  t2 <- add((str18, 1))
  t3 <- b3930[t0, t2, t1]
  t4 <- load32((4108))
  t5 <- load8((str18))
  t6 <- primEq((t5, 0))
  if t6
    then b3839[t4]
    else b3999[t5, t4]

-----------------------------------------
-- not recursive
b3988 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3988[t0, t1, t2] =
  t3 <- b1580[t0]
  t4 <- b3806[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str18))
  t7 <- primEq((t6, 0))
  if t7
    then b3839[t5]
    else b3999[t6, t5]

-----------------------------------------
-- not recursive
b3986 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3986[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  t7 <- b3806[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str18))
  t10 <- primEq((t9, 0))
  if t10
    then b3839[t8]
    else b3999[t9, t8]

-----------------------------------------
-- not recursive
b3991 :: [Bit 32, Bit 32] >>= [Unit]
b3991[t0, t1] =
  t2 <- add((str19, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3986[t0, t2, t1]
    else b3988[t0, t2, t1]

-----------------------------------------
-- not recursive
b3964 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3964[t0, t1, t2] =
  t3 <- b1580[t0]
  t4 <- b3766[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str18))
  t7 <- primEq((t6, 0))
  if t7
    then b3839[t5]
    else b3999[t6, t5]

-----------------------------------------
-- not recursive
b3962 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3962[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  t7 <- b3766[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str18))
  t10 <- primEq((t9, 0))
  if t10
    then b3839[t8]
    else b3999[t9, t8]

-----------------------------------------
-- not recursive
b3958 :: [Bit 32, Bit 32] >>= [Unit]
b3958[t0, t1] =
  t2 <- add((str20, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3962[t0, t2, t1]
    else b3964[t0, t2, t1]

-----------------------------------------
-- not recursive
b3947 :: [Bit 32] >>= [Unit]
b3947[t0] =
  t1 <- add((str21, 1))
  t2 <- b3228[t0, t1]
  t3 <- load32((4108))
  t4 <- load8((str18))
  t5 <- primEq((t4, 0))
  if t5
    then b3839[t3]
    else b3999[t4, t3]

-----------------------------------------
-- not recursive
b2215 :: [] >>= [Unit]
b2215[] =
  t0 <- load32((4108))
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b3839[t0]
    else b3999[t1, t0]

-----------------------------------------
-- not recursive
b2290 :: [Bit 32] >>= [Unit]
b2290[t0] =
  t1 <- and((t0, 15))
  t2 <- b1345[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b4374[1, 0, 31, t0, 32]
  t5 <- load8((str21))
  t6 <- primEq((t5, 0))
  if t6
    then b2215[]
    else b3947[t5]

-----------------------------------------
-- not recursive
b3956 :: [Bit 32] >>= [Unit]
b3956[t0] =
  t1 <- load8((str20))
  t2 <- primEq((t1, 0))
  if t2
    then b2290[t0]
    else b3958[t1, t0]

-----------------------------------------
-- recursive
b3967 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3967[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3969[t0, t3, t2]
b3969 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3969[t0, t1, t2] =
  t3 <- b1589[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b3956[t2]
    else b3967[t4, t1, t2]

-----------------------------------------
-- not recursive
b4239 :: [Bit 32, Bit 32] >>= [Unit]
b4239[t0, t1] =
  t2 <- add((t1, 1))
  b3969[t0, t2, t1]

-----------------------------------------
-- not recursive
b3973 :: [Bit 32] >>= [Unit]
b3973[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b3956[t0]
    else b4239[t1, t0]

-----------------------------------------
-- not recursive
b3994 :: [Bit 32, Bit 32] >>= [Unit]
b3994[t0, t1] =
  t2 <- add((str16, 1))
  t3 <- b3228[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b3973[t1]
    else b3991[t4, t1]

-----------------------------------------
-- not recursive
b3980 :: [Bit 32] >>= [Unit]
b3980[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b3973[t0]
    else b3991[t1, t0]

-----------------------------------------
-- not recursive
b3992 :: [Bit 32] >>= [Unit]
b3992[t0] =
  t1 <- load8((str16))
  t2 <- primEq((t1, 0))
  if t2
    then b3980[t0]
    else b3994[t1, t0]

-----------------------------------------
-- not recursive
b1538 :: [] >>= [Unit]
b1538[] =
  t0 <- load32((4104))
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b3992[t0]
    else b4002[t1, t0]

-----------------------------------------
-- recursive
b4241 :: [Bit 32, Bit 32] >>= [Unit]
b4241[t0, t1] =
  t2 <- b1580[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1538[]
    else b4007[t3, t1]
b4240 :: [Bit 32, Bit 32] >>= [Unit]
b4240[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, 13]
  t5 <- b1580[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1538[]
    else b4007[t6, t1]
b4007 :: [Bit 32, Bit 32] >>= [Unit]
b4007[t0, t1] =
  t2 <- add((t1, 1))
  b4014[t0, t2]
b4014 :: [Bit 32, Bit 32] >>= [Unit]
b4014[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b4240[t0, t1]
    else b4241[t0, t1]

-----------------------------------------
-- not recursive
b4022 :: [Bit 32] >>= [Unit]
b4022[t0] =
  t1 <- add((str15, 1))
  b4014[t0, t1]

-----------------------------------------
-- not recursive
b1540 :: [] >>= [Unit]
b1540[] =
  t0 <- load32((4100))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b3517[t1, t2, 8, 0]
  t4 <- load8((str15))
  t5 <- primEq((t4, 0))
  if t5
    then b1538[]
    else b4022[t4]

-----------------------------------------
-- recursive
b4243 :: [Bit 32, Bit 32] >>= [Unit]
b4243[t0, t1] =
  t2 <- b1580[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1540[]
    else b4025[t3, t1]
b4242 :: [Bit 32, Bit 32] >>= [Unit]
b4242[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, 13]
  t5 <- b1580[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1540[]
    else b4025[t6, t1]
b4025 :: [Bit 32, Bit 32] >>= [Unit]
b4025[t0, t1] =
  t2 <- add((t1, 1))
  b4032[t0, t2]
b4032 :: [Bit 32, Bit 32] >>= [Unit]
b4032[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b4242[t0, t1]
    else b4243[t0, t1]

-----------------------------------------
-- not recursive
b4040 :: [Bit 32] >>= [Unit]
b4040[t0] =
  t1 <- add((str13, 1))
  b4032[t0, t1]

-----------------------------------------
-- not recursive
b1542 :: [] >>= [Unit]
b1542[] =
  t0 <- load32((4096))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b3379[t1, t2, 12, 0]
  t4 <- load8((str13))
  t5 <- primEq((t4, 0))
  if t5
    then b1540[]
    else b4040[t4]

-----------------------------------------
-- recursive
b4245 :: [Bit 32, Bit 32] >>= [Unit]
b4245[t0, t1] =
  t2 <- b1580[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1542[]
    else b4043[t3, t1]
b4244 :: [Bit 32, Bit 32] >>= [Unit]
b4244[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, 13]
  t5 <- b1580[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1542[]
    else b4043[t6, t1]
b4043 :: [Bit 32, Bit 32] >>= [Unit]
b4043[t0, t1] =
  t2 <- add((t1, 1))
  b4050[t0, t2]
b4050 :: [Bit 32, Bit 32] >>= [Unit]
b4050[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b4244[t0, t1]
    else b4245[t0, t1]

-----------------------------------------
-- not recursive
str52 :: Bit 32
str52 <- "Did not find first user program\n"

-----------------------------------------
-- not recursive
str46 :: Bit 32
str46 <- "\nHalting kernel, returning to mimgload\n"

-----------------------------------------
-- not recursive
b3531 :: [Bit 32] >>= [Unit]
b3531[t0] =
  t1 <- add((str46, 1))
  b3228[t0, t1]

-----------------------------------------
-- not recursive
b3529 :: [] >>= [Unit]
b3529[] =
  t0 <- load8((str46))
  t1 <- primEq((t0, 0))
  if t1
    then b303[]
    else b3531[t0]

-----------------------------------------
-- recursive
b3541 :: [Bit 32, Bit 32] >>= [Unit]
b3541[t0, t1] =
  t2 <- b1580[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b3529[]
    else b3534[t3, t1]
b3539 :: [Bit 32, Bit 32] >>= [Unit]
b3539[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, 13]
  t5 <- b1580[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b3529[]
    else b3534[t6, t1]
b3534 :: [Bit 32, Bit 32] >>= [Unit]
b3534[t0, t1] =
  t2 <- add((t1, 1))
  b3536[t0, t2]
b3536 :: [Bit 32, Bit 32] >>= [Unit]
b3536[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b3539[t0, t1]
    else b3541[t0, t1]

-----------------------------------------
-- not recursive
b3544 :: [Bit 32] >>= [Unit]
b3544[t0] =
  t1 <- add((str52, 1))
  b3536[t0, t1]

-----------------------------------------
-- not recursive
b3542 :: [] >>= [Unit]
b3542[] =
  t0 <- load8((str52))
  t1 <- primEq((t0, 0))
  if t1
    then b3529[]
    else b3544[t0]

-----------------------------------------
-- not recursive
str47 :: Bit 32
str47 <- "Found header for first user program:\n"

-----------------------------------------
-- not recursive
str48 :: Bit 32
str48 <- "\n"

-----------------------------------------
-- not recursive
str49 :: Bit 32
str49 <- "Found header for second user program:\n"

-----------------------------------------
-- not recursive
str50 :: Bit 32
str50 <- "\n"

-----------------------------------------
-- not recursive
str53 :: Bit 32
str53 <- "user code is at 0x"

-----------------------------------------
-- not recursive
str54 :: Bit 32
str54 <- "\n"

-----------------------------------------
-- not recursive
b1765 :: [Bit 32] >>= [Unit]
b1765[t0] =
  t1 <- add((users, 52))
  store32((t1, t0))

-----------------------------------------
-- recursive
b3567 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3567[t0, t1, t2] =
  t3 <- b1580[t0]
  b3558[t1, t2]
b3565 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3565[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3558[t1, t2]
b3558 :: [Bit 32, Bit 32] >>= [Unit]
b3558[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1765[t1]
    else b3560[t2, t0, t1]
b3560 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3560[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3562[t0, t3, t2]
b3562 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3562[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3565[t0, t1, t2]
    else b3567[t0, t1, t2]

-----------------------------------------
-- not recursive
b3596 :: [Bit 32, Bit 32] >>= [Unit]
b3596[t0, t1] =
  t2 <- add((str54, 1))
  b3562[t0, t2, t1]

-----------------------------------------
-- not recursive
b1761 :: [Bit 32] >>= [Unit]
b1761[t0] =
  t1 <- and((t0, 15))
  t2 <- b1345[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b4374[1, 0, 31, t0, 32]
  t5 <- load8((str54))
  t6 <- primEq((t5, 0))
  if t6
    then b1765[t0]
    else b3596[t5, t0]

-----------------------------------------
-- recursive
b4247 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4247[t0, t1, t2] =
  t3 <- b1580[t0]
  b3602[t1, t2]
b4246 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4246[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3602[t1, t2]
b3602 :: [Bit 32, Bit 32] >>= [Unit]
b3602[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1761[t1]
    else b3604[t2, t0, t1]
b3604 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3604[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3611[t0, t3, t2]
b3611 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3611[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b4246[t0, t1, t2]
    else b4247[t0, t1, t2]

-----------------------------------------
-- not recursive
b1776 :: [Bit 32] >>= [Unit]
b1776[t0] =
  t1 <- add((users, 124))
  store32((t1, t0))

-----------------------------------------
-- recursive
b3577 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3577[t0, t1, t2] =
  t3 <- b1580[t0]
  b3568[t1, t2]
b3575 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3575[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3568[t1, t2]
b3568 :: [Bit 32, Bit 32] >>= [Unit]
b3568[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1776[t1]
    else b3570[t2, t0, t1]
b3570 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3570[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3572[t0, t3, t2]
b3572 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3572[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3575[t0, t1, t2]
    else b3577[t0, t1, t2]

-----------------------------------------
-- not recursive
b3583 :: [Bit 32, Bit 32] >>= [Unit]
b3583[t0, t1] =
  t2 <- add((str54, 1))
  b3572[t0, t2, t1]

-----------------------------------------
-- not recursive
b1772 :: [Bit 32] >>= [Unit]
b1772[t0] =
  t1 <- and((t0, 15))
  t2 <- b1345[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b4374[1, 0, 31, t0, 32]
  t5 <- load8((str54))
  t6 <- primEq((t5, 0))
  if t6
    then b1776[t0]
    else b3583[t5, t0]

-----------------------------------------
-- recursive
b4249 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4249[t0, t1, t2] =
  t3 <- b1580[t0]
  b3584[t1, t2]
b4248 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4248[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  b3584[t1, t2]
b3584 :: [Bit 32, Bit 32] >>= [Unit]
b3584[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1772[t1]
    else b3586[t2, t0, t1]
b3586 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3586[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3593[t0, t3, t2]
b3593 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3593[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b4248[t0, t1, t2]
    else b4249[t0, t1, t2]

-----------------------------------------
-- not recursive
b1872 :: [] >>= [Unit]
b1872[] =
  t0 <- store1((current, flag0))
  t1 <- outb((32, 17))
  t2 <- outb((33, 32))
  t3 <- outb((33, 4))
  t4 <- outb((33, 1))
  t5 <- outb((33, 251))
  t6 <- outb((160, 17))
  t7 <- outb((161, 40))
  t8 <- outb((161, 2))
  t9 <- outb((161, 1))
  t10 <- outb((161, 255))
  t11 <- outb((67, 52))
  t12 <- outb((64, 156))
  t13 <- outb((64, 46))
  t14 <- inb((33))
  t15 <- and((t14, -2))
  t16 <- outb((33, t15))
  t17 <- inb((33))
  t18 <- and((t17, -3))
  t19 <- outb((33, t18))
  t20 <- load1((current))
  t21 <- flagToWord((t20))
  t22 <- mul((t21, 72))
  t23 <- add((users, t22))
  t24 <- returnTo((t23))
  t25 <- load8((str46))
  t26 <- primEq((t25, 0))
  if t26
    then b303[]
    else b3531[t25]

-----------------------------------------
-- not recursive
b3614 :: [Bit 32, Bit 32] >>= [Unit]
b3614[t0, t1] =
  t2 <- add((str53, 1))
  t3 <- b3593[t0, t2, t1]
  b1872[]

-----------------------------------------
-- not recursive
b4447 :: [Bit 32, Bit 32] >>= [Unit]
b4447[t0, t1] =
  t2 <- add((str54, 1))
  t3 <- b3572[t0, t2, t1]
  b1872[]

-----------------------------------------
-- not recursive
b4446 :: [Bit 32] >>= [Unit]
b4446[t0] =
  t1 <- add((users, 124))
  t2 <- store32((t1, t0))
  b1872[]

-----------------------------------------
-- not recursive
b2001 :: [Bit 32] >>= [Unit]
b2001[t0] =
  t1 <- and((t0, 15))
  t2 <- b1345[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b4374[1, 0, 31, t0, 32]
  t5 <- load8((str54))
  t6 <- primEq((t5, 0))
  if t6
    then b4446[t0]
    else b4447[t5, t0]

-----------------------------------------
-- not recursive
b3617 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3617[t0, t1, t2] =
  t3 <- add((str53, 1))
  t4 <- b3611[t0, t3, t2]
  t5 <- add((t1, 8))
  t6 <- load32((t5))
  t7 <- load8((str53))
  t8 <- primEq((t7, 0))
  if t8
    then b2001[t6]
    else b3614[t7, t6]

-----------------------------------------
-- not recursive
b4450 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4450[t0, t1, t2] =
  t3 <- add((str54, 1))
  t4 <- b3562[t0, t3, t1]
  t5 <- add((t2, 8))
  t6 <- load32((t5))
  t7 <- load8((str53))
  t8 <- primEq((t7, 0))
  if t8
    then b2001[t6]
    else b3614[t7, t6]

-----------------------------------------
-- not recursive
b4449 :: [Bit 32, Bit 32] >>= [Unit]
b4449[t0, t1] =
  t2 <- add((users, 52))
  t3 <- store32((t2, t0))
  t4 <- add((t1, 8))
  t5 <- load32((t4))
  t6 <- load8((str53))
  t7 <- primEq((t6, 0))
  if t7
    then b2001[t5]
    else b3614[t6, t5]

-----------------------------------------
-- not recursive
b2013 :: [Bit 32, Bit 32] >>= [Unit]
b2013[t0, t1] =
  t2 <- and((t0, 15))
  t3 <- b1345[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b4374[1, 0, 31, t0, 32]
  t6 <- load8((str54))
  t7 <- primEq((t6, 0))
  if t7
    then b4449[t0, t1]
    else b4450[t6, t0, t1]

-----------------------------------------
-- not recursive
b4462 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4462[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- load8((str53))
  t6 <- primEq((t5, 0))
  if t6
    then b2013[t4, t2]
    else b3617[t5, t2, t4]

-----------------------------------------
-- recursive
b4472 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4472[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1309[t6, 0, 13]
  t8 <- b1580[t0]
  t9 <- load8((t1))
  t10 <- primEq((t9, 0))
  if t10
    then b4462[t3, t4, t2]
    else b4474[t9, t1, t2, t3, t4]
b4474 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4474[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 1))
  t6 <- inb((1021))
  t7 <- and((t6, 96))
  t8 <- b1309[t7, 0, t0]
  t9 <- primEq((t0, 10))
  if t9
    then b4472[t0, t5, t2, t3, t4]
    else b4473[t0, t5, t2, t3, t4]
b4473 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4473[t0, t1, t2, t3, t4] =
  t5 <- b1580[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b4462[t3, t4, t2]
    else b4474[t6, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b4463 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4463[t0, t1, t2, t3] =
  t4 <- add((str50, 1))
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1309[t6, 0, t0]
  t8 <- primEq((t0, 10))
  if t8
    then b4472[t0, t4, t1, t2, t3]
    else b4473[t0, t4, t1, t2, t3]

-----------------------------------------
-- not recursive
b4451 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4451[t0, t1, t2, t3, t4] =
  t5 <- b3324[t0]
  t6 <- load8((str50))
  t7 <- primEq((t6, 0))
  if t7
    then b4462[t3, t4, t0]
    else b4463[t6, t0, t3, t4]

-----------------------------------------
-- recursive
b4468 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4468[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- inb((1021))
  t8 <- and((t7, 96))
  t9 <- b1309[t8, 0, 13]
  t10 <- b1580[t0]
  t11 <- load8((t1))
  t12 <- primEq((t11, 0))
  if t12
    then b4451[t4, t5, t6, t2, t3]
    else b4471[t11, t1, t2, t3, t4, t5, t6]
b4471 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4471[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, 1))
  t8 <- inb((1021))
  t9 <- and((t8, 96))
  t10 <- b1309[t9, 0, t0]
  t11 <- primEq((t0, 10))
  if t11
    then b4468[t0, t7, t2, t3, t4, t5, t6]
    else b4469[t0, t7, t2, t3, t4, t5, t6]
b4469 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4469[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b1580[t0]
  t8 <- load8((t1))
  t9 <- primEq((t8, 0))
  if t9
    then b4451[t4, t5, t6, t2, t3]
    else b4471[t8, t1, t2, t3, t4, t5, t6]

-----------------------------------------
-- not recursive
b4452 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4452[t0, t1, t2, t3, t4, t5] =
  t6 <- add((str49, 1))
  t7 <- inb((1021))
  t8 <- and((t7, 96))
  t9 <- b1309[t8, 0, t0]
  t10 <- primEq((t0, 10))
  if t10
    then b4468[t0, t6, t1, t2, t3, t4, t5]
    else b4469[t0, t6, t1, t2, t3, t4, t5]

-----------------------------------------
-- not recursive
b4258 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4258[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- load8((str49))
  t7 <- primEq((t6, 0))
  if t7
    then b4451[t1, t5, t4, t3, t0]
    else b4452[t6, t3, t0, t1, t5, t4]

-----------------------------------------
-- not recursive
str51 :: Bit 32
str51 <- "Did not find second user program\n"

-----------------------------------------
-- recursive
b3554 :: [Bit 32, Bit 32] >>= [Unit]
b3554[t0, t1] =
  t2 <- b1580[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b3529[]
    else b3547[t3, t1]
b3552 :: [Bit 32, Bit 32] >>= [Unit]
b3552[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, 13]
  t5 <- b1580[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b3529[]
    else b3547[t6, t1]
b3547 :: [Bit 32, Bit 32] >>= [Unit]
b3547[t0, t1] =
  t2 <- add((t1, 1))
  b3549[t0, t2]
b3549 :: [Bit 32, Bit 32] >>= [Unit]
b3549[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b3552[t0, t1]
    else b3554[t0, t1]

-----------------------------------------
-- not recursive
b3557 :: [Bit 32] >>= [Unit]
b3557[t0] =
  t1 <- add((str51, 1))
  b3549[t0, t1]

-----------------------------------------
-- not recursive
b3555 :: [] >>= [Unit]
b3555[] =
  t0 <- load8((str51))
  t1 <- primEq((t0, 0))
  if t1
    then b3529[]
    else b3557[t0]

-----------------------------------------
-- not recursive
b3734 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3734[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b3555[]
    else b4258[t0, t1, t2, t3]

-----------------------------------------
-- recursive
b3743 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3743[t0, t1, t2, t3, t4] =
  t5 <- b1580[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b3734[t3, t4, 12, t2]
    else b3742[t6, t1, t2, t3, t4]
b3737 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3737[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1309[t6, 0, 13]
  t8 <- b1580[t0]
  t9 <- load8((t1))
  t10 <- primEq((t9, 0))
  if t10
    then b3734[t3, t4, 12, t2]
    else b3742[t9, t1, t2, t3, t4]
b3742 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3742[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 1))
  b3736[t0, t5, t2, t3, t4]
b3736 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3736[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1309[t6, 0, t0]
  t8 <- primEq((t0, 10))
  if t8
    then b3737[t0, t1, t2, t3, t4]
    else b3743[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b3735 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3735[t0, t1, t2, t3] =
  t4 <- add((str48, 1))
  b3736[t0, t4, t1, t2, t3]

-----------------------------------------
-- not recursive
b3698 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3698[t0, t1, t2] =
  t3 <- b3324[t0]
  t4 <- load8((str48))
  t5 <- primEq((t4, 0))
  if t5
    then b3734[t1, t2, 12, t0]
    else b3735[t4, t0, t1, t2]

-----------------------------------------
-- recursive
b3752 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3752[t0, t1, t2, t3, t4] =
  t5 <- b1580[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b3698[t2, t3, t4]
    else b3751[t6, t1, t2, t3, t4]
b3746 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3746[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1309[t6, 0, 13]
  t8 <- b1580[t0]
  t9 <- load8((t1))
  t10 <- primEq((t9, 0))
  if t10
    then b3698[t2, t3, t4]
    else b3751[t9, t1, t2, t3, t4]
b3751 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3751[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 1))
  b3745[t0, t5, t2, t3, t4]
b3745 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3745[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1309[t6, 0, t0]
  t8 <- primEq((t0, 10))
  if t8
    then b3746[t0, t1, t2, t3, t4]
    else b3752[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b3744 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3744[t0, t1, t2, t3] =
  t4 <- add((str47, 1))
  b3745[t0, t4, t1, t2, t3]

-----------------------------------------
-- not recursive
b3692 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3692[t0, t1, t2] =
  t3 <- add((t1, t2))
  t4 <- add((t0, -1))
  t5 <- load8((str47))
  t6 <- primEq((t5, 0))
  if t6
    then b3698[t1, t4, t3]
    else b3744[t5, t1, t4, t3]

-----------------------------------------
-- not recursive
b3690 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3690[t0, t1, t2] =
  t3 <- primEq((t0, 0))
  if t3
    then b3542[]
    else b3692[t0, t1, t2]

-----------------------------------------
-- recursive
b3753 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3753[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b3542[]
    else b3755[t0, t1, t2, t3]
b3755 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3755[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- add((t3, -1))
  t7 <- primEq((t6, 0))
  if t7
    then b3690[t5, t4, 12]
    else b3753[t5, t4, 12, t6]

-----------------------------------------
-- not recursive
b4053 :: [Bit 32] >>= [Unit]
b4053[t0] =
  t1 <- add((str11, 1))
  t2 <- b4050[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b3542[]
    else b3755[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b4035 :: [Bit 32] >>= [Unit]
b4035[t0] =
  t1 <- add((str13, 1))
  t2 <- b4032[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b3542[]
    else b3755[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b4017 :: [Bit 32] >>= [Unit]
b4017[t0] =
  t1 <- add((str15, 1))
  t2 <- b4014[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b3542[]
    else b3755[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b3862 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3862[t0, t1, t2] =
  t3 <- b1580[t0]
  t4 <- b3844[t1, t2]
  t5 <- load32((4096))
  t6 <- load32((t5))
  t7 <- add((t5, 4))
  t8 <- primEq((t6, 0))
  if t8
    then b3542[]
    else b3755[t6, t7, 12, 2]

-----------------------------------------
-- not recursive
b3860 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3860[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  t7 <- b3844[t1, t2]
  t8 <- load32((4096))
  t9 <- load32((t8))
  t10 <- add((t8, 4))
  t11 <- primEq((t9, 0))
  if t11
    then b3542[]
    else b3755[t9, t10, 12, 2]

-----------------------------------------
-- not recursive
b3933 :: [Bit 32, Bit 32] >>= [Unit]
b3933[t0, t1] =
  t2 <- add((str18, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3860[t0, t2, t1]
    else b3862[t0, t2, t1]

-----------------------------------------
-- not recursive
b3824 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3824[t0, t1, t2] =
  t3 <- b1580[t0]
  t4 <- b3806[t1, t2]
  t5 <- load32((4096))
  t6 <- load32((t5))
  t7 <- add((t5, 4))
  t8 <- primEq((t6, 0))
  if t8
    then b3542[]
    else b3755[t6, t7, 12, 2]

-----------------------------------------
-- not recursive
b3822 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3822[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  t7 <- b3806[t1, t2]
  t8 <- load32((4096))
  t9 <- load32((t8))
  t10 <- add((t8, 4))
  t11 <- primEq((t9, 0))
  if t11
    then b3542[]
    else b3755[t9, t10, 12, 2]

-----------------------------------------
-- not recursive
b3827 :: [Bit 32, Bit 32] >>= [Unit]
b3827[t0, t1] =
  t2 <- add((str19, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3822[t0, t2, t1]
    else b3824[t0, t2, t1]

-----------------------------------------
-- not recursive
b3784 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3784[t0, t1, t2] =
  t3 <- b1580[t0]
  t4 <- b3766[t1, t2]
  t5 <- load32((4096))
  t6 <- load32((t5))
  t7 <- add((t5, 4))
  t8 <- primEq((t6, 0))
  if t8
    then b3542[]
    else b3755[t6, t7, 12, 2]

-----------------------------------------
-- not recursive
b3782 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3782[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  t7 <- b3766[t1, t2]
  t8 <- load32((4096))
  t9 <- load32((t8))
  t10 <- add((t8, 4))
  t11 <- primEq((t9, 0))
  if t11
    then b3542[]
    else b3755[t9, t10, 12, 2]

-----------------------------------------
-- not recursive
b3778 :: [Bit 32, Bit 32] >>= [Unit]
b3778[t0, t1] =
  t2 <- add((str20, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3782[t0, t2, t1]
    else b3784[t0, t2, t1]

-----------------------------------------
-- not recursive
b3760 :: [Bit 32] >>= [Unit]
b3760[t0] =
  t1 <- add((str21, 1))
  t2 <- b3228[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b3542[]
    else b3755[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b2323 :: [] >>= [Unit]
b2323[] =
  t0 <- load32((4096))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- primEq((t1, 0))
  if t3
    then b3542[]
    else b3755[t1, t2, 12, 2]

-----------------------------------------
-- not recursive
b2391 :: [Bit 32] >>= [Unit]
b2391[t0] =
  t1 <- and((t0, 15))
  t2 <- b1345[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b4374[1, 0, 31, t0, 32]
  t5 <- load8((str21))
  t6 <- primEq((t5, 0))
  if t6
    then b2323[]
    else b3760[t5]

-----------------------------------------
-- not recursive
b3776 :: [Bit 32] >>= [Unit]
b3776[t0] =
  t1 <- load8((str20))
  t2 <- primEq((t1, 0))
  if t2
    then b2391[t0]
    else b3778[t1, t0]

-----------------------------------------
-- recursive
b3787 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3787[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3789[t0, t3, t2]
b3789 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3789[t0, t1, t2] =
  t3 <- b1589[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b3776[t2]
    else b3787[t4, t1, t2]

-----------------------------------------
-- not recursive
b4259 :: [Bit 32, Bit 32] >>= [Unit]
b4259[t0, t1] =
  t2 <- add((t1, 1))
  b3789[t0, t2, t1]

-----------------------------------------
-- not recursive
b3793 :: [Bit 32] >>= [Unit]
b3793[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b3776[t0]
    else b4259[t1, t0]

-----------------------------------------
-- not recursive
b3830 :: [Bit 32, Bit 32] >>= [Unit]
b3830[t0, t1] =
  t2 <- add((str17, 1))
  t3 <- b3228[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b3793[t1]
    else b3827[t4, t1]

-----------------------------------------
-- not recursive
b3816 :: [Bit 32] >>= [Unit]
b3816[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b3793[t0]
    else b3827[t1, t0]

-----------------------------------------
-- not recursive
b3828 :: [Bit 32] >>= [Unit]
b3828[t0] =
  t1 <- load8((str17))
  t2 <- primEq((t1, 0))
  if t2
    then b3816[t0]
    else b3830[t1, t0]

-----------------------------------------
-- not recursive
b3936 :: [Bit 32, Bit 32] >>= [Unit]
b3936[t0, t1] =
  t2 <- add((str18, 1))
  t3 <- b3930[t0, t2, t1]
  t4 <- load32((4108))
  t5 <- load8((str18))
  t6 <- primEq((t5, 0))
  if t6
    then b3828[t4]
    else b3933[t5, t4]

-----------------------------------------
-- not recursive
b3909 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3909[t0, t1, t2] =
  t3 <- b1580[t0]
  t4 <- b3806[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str18))
  t7 <- primEq((t6, 0))
  if t7
    then b3828[t5]
    else b3933[t6, t5]

-----------------------------------------
-- not recursive
b3907 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3907[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  t7 <- b3806[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str18))
  t10 <- primEq((t9, 0))
  if t10
    then b3828[t8]
    else b3933[t9, t8]

-----------------------------------------
-- not recursive
b3912 :: [Bit 32, Bit 32] >>= [Unit]
b3912[t0, t1] =
  t2 <- add((str19, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3907[t0, t2, t1]
    else b3909[t0, t2, t1]

-----------------------------------------
-- not recursive
b3885 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3885[t0, t1, t2] =
  t3 <- b1580[t0]
  t4 <- b3766[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str18))
  t7 <- primEq((t6, 0))
  if t7
    then b3828[t5]
    else b3933[t6, t5]

-----------------------------------------
-- not recursive
b3883 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3883[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, 13]
  t6 <- b1580[t0]
  t7 <- b3766[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str18))
  t10 <- primEq((t9, 0))
  if t10
    then b3828[t8]
    else b3933[t9, t8]

-----------------------------------------
-- not recursive
b3879 :: [Bit 32, Bit 32] >>= [Unit]
b3879[t0, t1] =
  t2 <- add((str20, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1309[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b3883[t0, t2, t1]
    else b3885[t0, t2, t1]

-----------------------------------------
-- not recursive
b3868 :: [Bit 32] >>= [Unit]
b3868[t0] =
  t1 <- add((str21, 1))
  t2 <- b3228[t0, t1]
  t3 <- load32((4108))
  t4 <- load8((str18))
  t5 <- primEq((t4, 0))
  if t5
    then b3828[t3]
    else b3933[t4, t3]

-----------------------------------------
-- not recursive
b2386 :: [] >>= [Unit]
b2386[] =
  t0 <- load32((4108))
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b3828[t0]
    else b3933[t1, t0]

-----------------------------------------
-- not recursive
b2385 :: [Bit 32] >>= [Unit]
b2385[t0] =
  t1 <- and((t0, 15))
  t2 <- b1345[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b4374[1, 0, 31, t0, 32]
  t5 <- load8((str21))
  t6 <- primEq((t5, 0))
  if t6
    then b2386[]
    else b3868[t5]

-----------------------------------------
-- not recursive
b3877 :: [Bit 32] >>= [Unit]
b3877[t0] =
  t1 <- load8((str20))
  t2 <- primEq((t1, 0))
  if t2
    then b2385[t0]
    else b3879[t1, t0]

-----------------------------------------
-- recursive
b3888 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3888[t0, t1, t2] =
  t3 <- add((t1, 1))
  b3890[t0, t3, t2]
b3890 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3890[t0, t1, t2] =
  t3 <- b1589[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b3877[t2]
    else b3888[t4, t1, t2]

-----------------------------------------
-- not recursive
b4260 :: [Bit 32, Bit 32] >>= [Unit]
b4260[t0, t1] =
  t2 <- add((t1, 1))
  b3890[t0, t2, t1]

-----------------------------------------
-- not recursive
b3894 :: [Bit 32] >>= [Unit]
b3894[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b3877[t0]
    else b4260[t1, t0]

-----------------------------------------
-- not recursive
b3915 :: [Bit 32, Bit 32] >>= [Unit]
b3915[t0, t1] =
  t2 <- add((str16, 1))
  t3 <- b3228[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b3894[t1]
    else b3912[t4, t1]

-----------------------------------------
-- not recursive
b3901 :: [Bit 32] >>= [Unit]
b3901[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b3894[t0]
    else b3912[t1, t0]

-----------------------------------------
-- not recursive
b3913 :: [Bit 32] >>= [Unit]
b3913[t0] =
  t1 <- load8((str16))
  t2 <- primEq((t1, 0))
  if t2
    then b3901[t0]
    else b3915[t1, t0]

-----------------------------------------
-- not recursive
b2207 :: [] >>= [Unit]
b2207[] =
  t0 <- load32((4104))
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b3913[t0]
    else b3936[t1, t0]

-----------------------------------------
-- not recursive
b2206 :: [] >>= [Unit]
b2206[] =
  t0 <- load32((4100))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b3517[t1, t2, 8, 0]
  t4 <- load8((str15))
  t5 <- primEq((t4, 0))
  if t5
    then b2207[]
    else b4017[t4]

-----------------------------------------
-- not recursive
b2205 :: [] >>= [Unit]
b2205[] =
  t0 <- load32((4096))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b3379[t1, t2, 12, 0]
  t4 <- load8((str13))
  t5 <- primEq((t4, 0))
  if t5
    then b2206[]
    else b4035[t4]

-----------------------------------------
-- not recursive
b1560 :: [] >>= [Unit]
b1560[] =
  t0 <- store8((console, 1))
  t1 <- add((console, 1))
  t2 <- store8((t1, 1))
  t3 <- add((console, 2))
  t4 <- store8((t3, 23))
  t5 <- add((console, 3))
  t6 <- store8((t5, 45))
  t7 <- add((console, 4))
  t8 <- store8((t7, 1))
  t9 <- add((console, 5))
  t10 <- store8((t9, 1))
  t11 <- add((console, 6))
  t12 <- store8((t11, 15))
  t13 <- b1074[]
  t14 <- load8((str11))
  t15 <- primEq((t14, 0))
  if t15
    then b2205[]
    else b4053[t14]

-----------------------------------------
-- recursive
b4065 :: [Bit 32, Bit 32] >>= [Unit]
b4065[t0, t1] =
  t2 <- b1580[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1560[]
    else b4058[t3, t1]
b4063 :: [Bit 32, Bit 32] >>= [Unit]
b4063[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, 13]
  t5 <- b1580[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1560[]
    else b4058[t6, t1]
b4058 :: [Bit 32, Bit 32] >>= [Unit]
b4058[t0, t1] =
  t2 <- add((t1, 1))
  b4060[t0, t2]
b4060 :: [Bit 32, Bit 32] >>= [Unit]
b4060[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1309[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b4063[t0, t1]
    else b4065[t0, t1]

-----------------------------------------
-- not recursive
b4068 :: [Bit 32] >>= [Unit]
b4068[t0] =
  t1 <- add((str45, 1))
  b4060[t0, t1]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- store1((current, flag0))
  t1 <- store32((users, 0))
  t2 <- add((users, 4))
  t3 <- store32((t2, 0))
  t4 <- add((users, 8))
  t5 <- store32((t4, 0))
  t6 <- add((users, 12))
  t7 <- store32((t6, 0))
  t8 <- add((users, 16))
  t9 <- store32((t8, 0))
  t10 <- add((users, 20))
  t11 <- store32((t10, 0))
  t12 <- add((users, 24))
  t13 <- store32((t12, 0))
  t14 <- add((users, 28))
  t15 <- store32((t14, 0))
  t16 <- add((users, 32))
  t17 <- store32((t16, 59))
  t18 <- add((users, 36))
  t19 <- store32((t18, 59))
  t20 <- add((users, 40))
  t21 <- store32((t20, 59))
  t22 <- add((users, 44))
  t23 <- store32((t22, 59))
  t24 <- add((users, 48))
  t25 <- store32((t24, 0))
  t26 <- add((users, 52))
  t27 <- store32((t26, 0))
  t28 <- add((users, 56))
  t29 <- store32((t28, 51))
  t30 <- add((users, 60))
  t31 <- store32((t30, 12802))
  t32 <- add((users, 64))
  t33 <- store32((t32, 0))
  t34 <- add((users, 68))
  t35 <- store32((t34, 59))
  t36 <- add((users, 72))
  t37 <- store32((t36, 0))
  t38 <- add((users, 76))
  t39 <- store32((t38, 0))
  t40 <- add((users, 80))
  t41 <- store32((t40, 0))
  t42 <- add((users, 84))
  t43 <- store32((t42, 0))
  t44 <- add((users, 88))
  t45 <- store32((t44, 0))
  t46 <- add((users, 92))
  t47 <- store32((t46, 0))
  t48 <- add((users, 96))
  t49 <- store32((t48, 0))
  t50 <- add((users, 100))
  t51 <- store32((t50, 0))
  t52 <- add((users, 104))
  t53 <- store32((t52, 59))
  t54 <- add((users, 108))
  t55 <- store32((t54, 59))
  t56 <- add((users, 112))
  t57 <- store32((t56, 59))
  t58 <- add((users, 116))
  t59 <- store32((t58, 59))
  t60 <- add((users, 120))
  t61 <- store32((t60, 0))
  t62 <- add((users, 124))
  t63 <- store32((t62, 0))
  t64 <- add((users, 128))
  t65 <- store32((t64, 51))
  t66 <- add((users, 132))
  t67 <- store32((t66, 12802))
  t68 <- add((users, 136))
  t69 <- store32((t68, 0))
  t70 <- add((users, 140))
  t71 <- store32((t70, 59))
  t72 <- store8((console, 0))
  t73 <- add((console, 1))
  t74 <- store8((t73, 0))
  t75 <- add((console, 2))
  t76 <- store8((t75, 24))
  t77 <- add((console, 3))
  t78 <- store8((t77, 79))
  t79 <- add((console, 4))
  t80 <- store8((t79, 0))
  t81 <- add((console, 5))
  t82 <- store8((t81, 0))
  t83 <- add((console, 6))
  t84 <- store8((t83, 10))
  t85 <- store8((keyUp, 0))
  t86 <- store8((keyDown, 0))
  t87 <- store32((ticks, 1))
  t88 <- store32((ball, 1))
  t89 <- add((ball, 4))
  t90 <- store32((t89, 1))
  t91 <- add((ball, 8))
  t92 <- store32((t91, 10))
  t93 <- add((ball, 12))
  t94 <- store32((t93, 10))
  t95 <- store32((paddle, 8))
  t96 <- add((paddle, 4))
  t97 <- store32((t96, 1))
  t98 <- add((paddle, 8))
  t99 <- store32((t98, 18))
  t100 <- add((paddle, 12))
  t101 <- store32((t100, 22))
  t102 <- store8((spinner, 45))
  t103 <- add((spinner, 1))
  t104 <- store8((t103, 92))
  t105 <- add((spinner, 2))
  t106 <- store8((t105, 124))
  t107 <- add((spinner, 3))
  t108 <- store8((t107, 47))
  t109 <- store8((spinpos, 0))
  t110 <- store8((pos, 55))
  t111 <- store1((dir, flag1))
  t112 <- store8((itoaBuf, 0))
  t113 <- add((itoaBuf, 1))
  t114 <- b2857[t113, 1]
  t115 <- store8((t83, 32))
  t116 <- b1074[]
  t117 <- load8((str45))
  t118 <- primEq((t117, 0))
  if t118
    then b1560[]
    else b4068[t117]

-----------------------------------------
-- Entrypoints: yield kputc keyboardInterrupt timerInterrupt unhandled
