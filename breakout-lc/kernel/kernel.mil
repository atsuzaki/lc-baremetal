bitdata Bool /1
  = False [ B0 ]
    -- predFalse(x :: Bit 1) = x == 0b0
  | True [ B1 ]
    -- predTrue(x :: Bit 1) = x == 0b1

-- bit pattern:
--  _

struct Context / 72
  [ regs :: Registers  {- offset=0 -}
  | segregs :: SegRegs  {- offset=32 -}
  | iframe :: IFrame  {- offset=48 -} ]
  aligned 4

struct Coord / 2
  [ row :: Stored (Ix 25)  {- offset=0 -}
  | col :: Stored (Ix 80)  {- offset=1 -} ]
  aligned 1

struct GameObject / 24
  [ width :: Stored (Bit 32)  {- offset=0 -}
  | height :: Stored (Bit 32)  {- offset=4 -}
  | xPos :: Stored (Bit 32)  {- offset=8 -}
  | yPos :: Stored (Bit 32)  {- offset=12 -}
  | attribute :: Stored (Bit 32)  {- offset=16 -}
  | typemask :: Stored GameObjectTypes  {- offset=20 -} ]
  aligned 4

bitdata GameObjectTypes /32
  = GameObjectTypes [ B000_0000_0000_0000_0000_0000_0000 | active :: Bool | ball :: Bool | paddle :: Bool | bouncable :: Bool | breakable :: Bool ]
    -- predGameObjectTypes(x :: Bit 32) = true

-- bit pattern:
--  000000000000000000000000000_____

bitdata IA32Flags /32
  = IA32Flags [ B00_0000_0000 | id :: Bit 1 | vip :: Bit 1 | vif :: Bit 1 | ac :: Bit 1 | vm :: Bit 1 | rf :: Bit 1 | B0 | nt :: Bit 1 | iopl :: Ix 4 | ovf :: Bit 1 | df :: Bit 1 | ifl :: Bit 1 | tf :: Bit 1 | sf :: Bit 1 | zf :: Bit 1 | B0 | af :: Bit 1 | B0 | pf :: Bit 1 | B1 | cf :: Bit 1 ]
    -- predIA32Flags(x :: Bit 32) = true

-- bit pattern:
--  0000000000______0_________0_0_1_

struct IFrame / 24
  [ err :: Stored (Bit 32)  {- offset=0 -}
  | eip :: Stored (Bit 32)  {- offset=4 -}
  | cs :: Stored SegSelector  {- offset=8 -}
  | eflags :: Stored IA32Flags  {- offset=12 -}
  | esp :: Stored (Bit 32)  {- offset=16 -}
  | ss :: Stored SegSelector  {- offset=20 -} ]
  aligned 4

struct Registers / 32
  [ edi :: Stored (Bit 32)  {- offset=0 -}
  | esi :: Stored (Bit 32)  {- offset=4 -}
  | ebp :: Stored (Bit 32)  {- offset=8 -}
  | esp :: Stored (Bit 32)  {- offset=12 -}
  | ebx :: Stored (Bit 32)  {- offset=16 -}
  | edx :: Stored (Bit 32)  {- offset=20 -}
  | ecx :: Stored (Bit 32)  {- offset=24 -}
  | eax :: Stored (Bit 32)  {- offset=28 -} ]
  aligned 4

struct SegRegs / 16
  [ ds :: Stored SegSelector  {- offset=0 -}
  | es :: Stored SegSelector  {- offset=4 -}
  | fs :: Stored SegSelector  {- offset=8 -}
  | gs :: Stored SegSelector  {- offset=12 -} ]
  aligned 4

bitdata SegSelector /32
  = SegSelector [ X0000 | index :: Ix 8192 | table :: Bit 1 | rpl :: Ix 4 ]
    -- predSegSelector(x :: Bit 32) = true

-- bit pattern:
--  0000000000000000________________

data Unit
  = Unit

struct Window / 7
  [ topleft :: Coord  {- offset=0 -}
  | bottomright :: Coord  {- offset=2 -}
  | current :: Coord  {- offset=4 -}
  | attr :: Stored (Bit 8)  {- offset=6 -} ]
  aligned 8

-----------------------------------------
-- not recursive
current :: Bit 32
current <- area (Stored (Ix 2)) aligned 1

-----------------------------------------
-- not recursive
users :: Bit 32
users <- area (Array 2 Context) aligned 4

-----------------------------------------
-- not recursive
b1384 :: [] >>= [Unit]
b1384[] =
  t0 <- load1((current))
  t1 <- flagToWord((t0))
  t2 <- mul((t1, 72))
  t3 <- add((users, t2))
  returnTo((t3))

-----------------------------------------
-- not recursive
entrypoint yield :: [] >>= [Unit]
yield[] =
  b1384[]

-----------------------------------------
-- not recursive
b4656 :: [Bit 32] >>= [Unit]
b4656[t0] =
  outb((1016, t0))

-----------------------------------------
-- recursive
b258 :: [Bit 32] >>= [Unit]
b258[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  b1602[t2, 0, t0]
b1602 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1602[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b258[t2]
    else b4656[t2]

-----------------------------------------
-- not recursive
console :: Bit 32
console <- area Window aligned 8

-----------------------------------------
-- not recursive
Unit :: Unit
Unit <-
  Unit()

-----------------------------------------
-- not recursive
b303 :: [] >>= [Unit]
b303[] =
  return Unit

-----------------------------------------
-- recursive
b1608 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1608[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b1608[t11, t1, t2, t3]
    else b303[]

-----------------------------------------
-- recursive
b1610 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1610[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- mul((t2, 160))
  t9 <- add((t8, t5))
  t10 <- add((t9, 753664))
  t11 <- load16((t7))
  t12 <- store16((t10, t11))
  t13 <- add((t0, 1))
  t14 <- primUle((t13, t1))
  if t14
    then b1610[t13, t1, t2, t3]
    else b303[]

-----------------------------------------
-- recursive
b6609 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6609[t0, t1, t2, t3, t4, t5] =
  t6 <- b1610[t4, t3, t1, t0]
  t7 <- add((t0, 1))
  t8 <- primUle((t7, t2))
  if t8
    then b6609[t7, t0, t2, t3, t4, t5]
    else b1608[t4, t3, t5, t2]

-----------------------------------------
-- not recursive
b1992 :: [] >>= [Unit]
b1992[] =
  t0 <- load8((console))
  t1 <- add((console, 1))
  t2 <- load8((t1))
  t3 <- add((console, 2))
  t4 <- load8((t3))
  t5 <- add((console, 3))
  t6 <- load8((t5))
  t7 <- add((console, 6))
  t8 <- load8((t7))
  t9 <- add((t0, 1))
  t10 <- primUle((t9, t4))
  if t10
    then b6609[t9, t0, t4, t6, t2, t8]
    else b1608[t2, t6, t8, t4]

-----------------------------------------
-- not recursive
b6618 :: [Bit 32] >>= [Unit]
b6618[t0] =
  t1 <- add((console, 4))
  store8((t1, t0))

-----------------------------------------
-- not recursive
b1990 :: [Bit 32] >>= [Unit]
b1990[t0] =
  t1 <- add((console, 1))
  t2 <- add((console, 5))
  t3 <- load8((t1))
  t4 <- store8((t2, t3))
  t5 <- add((console, 2))
  t6 <- load8((t5))
  t7 <- add((t0, 1))
  t8 <- primUle((t7, t6))
  if t8
    then b6618[t7]
    else b1992[]

-----------------------------------------
-- not recursive
b6622 :: [Bit 32] >>= [Unit]
b6622[t0] =
  t1 <- add((console, 5))
  store8((t1, t0))

-----------------------------------------
-- not recursive
b1995 :: [Bit 32, Bit 32] >>= [Unit]
b1995[t0, t1] =
  t2 <- add((console, 5))
  t3 <- load8((t2))
  t4 <- add((console, 6))
  t5 <- load8((t4))
  t6 <- mul((t1, 160))
  t7 <- mul((t3, 2))
  t8 <- add((t6, t7))
  t9 <- add((t8, 753664))
  t10 <- and((t0, 255))
  t11 <- shl((t5, 8))
  t12 <- or((t10, t11))
  t13 <- store16((t9, t12))
  t14 <- add((console, 3))
  t15 <- load8((t14))
  t16 <- add((t3, 1))
  t17 <- primUle((t16, t15))
  if t17
    then b6622[t16]
    else b1990[t1]

-----------------------------------------
-- not recursive
b1993 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b1993[t0, t1, t2] =
  t3 <- primEq((t0, t1))
  if t3
    then b1990[t2]
    else b1995[t0, t2]

-----------------------------------------
-- not recursive
b1988 :: [Bit 32] >>= [Unit]
b1988[t0] =
  t1 <- add((console, 4))
  t2 <- load8((t1))
  t3 <- primEq((t0, 13))
  if t3
    then b1990[t2]
    else b1993[t0, 10, t2]

-----------------------------------------
-- not recursive
b2828 :: [Bit 32, Bit 32] >>= [Unit]
b2828[t0, t1] =
  t2 <- b1988[t0]
  returnTo((t1))

-----------------------------------------
-- not recursive
b2827 :: [Bit 32, Bit 32] >>= [Unit]
b2827[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, 13]
  t5 <- b1988[t0]
  returnTo((t1))

-----------------------------------------
-- not recursive
entrypoint kputc :: [] >>= [Unit]
kputc[] =
  t0 <- load1((current))
  t1 <- flagToWord((t0))
  t2 <- mul((t1, 72))
  t3 <- add((users, t2))
  t4 <- add((t3, 28))
  t5 <- load32((t4))
  t6 <- inb((1021))
  t7 <- and((t6, 96))
  t8 <- b1602[t7, 0, t5]
  t9 <- primEq((t5, 10))
  if t9
    then b2827[t5, t3]
    else b2828[t5, t3]

-----------------------------------------
-- not recursive
external keyb_layout :: Bit 32

-----------------------------------------
-- not recursive
keyUp :: Bit 32
keyUp <- area (Stored (Bit 8)) aligned 1

-----------------------------------------
-- not recursive
b1134 :: [Bit 32] >>= [Unit]
b1134[t0] =
  t1 <- and((t0, 127))
  t2 <- add((keyb_layout, t1))
  t3 <- load8((t2))
  t4 <- store8((keyUp, t3))
  t5 <- load1((current))
  t6 <- flagToWord((t5))
  t7 <- mul((t6, 72))
  t8 <- add((users, t7))
  returnTo((t8))

-----------------------------------------
-- not recursive
b1136 :: [Bit 32] >>= [Unit]
b1136[t0] =
  t1 <- lshr((t0, 7))
  t2 <- primEq((t1, 1))
  if t2
    then b1134[t0]
    else b1384[]

-----------------------------------------
-- not recursive
keyDown :: Bit 32
keyDown <- area (Stored (Bit 8)) aligned 1

-----------------------------------------
-- not recursive
b1137 :: [Bit 32] >>= [Unit]
b1137[t0] =
  t1 <- and((t0, 127))
  t2 <- add((keyb_layout, t1))
  t3 <- load8((t2))
  t4 <- load16((753702))
  t5 <- and((t4, 65280))
  t6 <- or((t5, t3))
  t7 <- store16((753702, t6))
  t8 <- store8((keyDown, t3))
  t9 <- lshr((t0, 7))
  t10 <- primEq((t9, 1))
  if t10
    then b1134[t0]
    else b1384[]

-----------------------------------------
-- not recursive
entrypoint keyboardInterrupt :: [] >>= [Unit]
keyboardInterrupt[] =
  t0 <- inb((33))
  t1 <- or((t0, 2))
  t2 <- outb((33, t1))
  t3 <- outb((32, 97))
  t4 <- inb((33))
  t5 <- and((t4, -3))
  t6 <- outb((33, t5))
  t7 <- inb((96))
  t8 <- lshr((t7, 7))
  t9 <- primEq((t8, 0))
  if t9
    then b1137[t7]
    else b1136[t7]

-----------------------------------------
-- not recursive
ticks :: Bit 32
ticks <- area (Stored (Bit 32)) aligned 4

-----------------------------------------
-- not recursive
isPlaying :: Bit 32
isPlaying <- area (Stored Bool) aligned 1

-----------------------------------------
-- not recursive
b1166 :: [Bit 32] >>= [Bit 32]
b1166[t0] =
  t1 <- add((t0, 87))
  and((t1, 255))

-----------------------------------------
-- not recursive
b1165 :: [Bit 32] >>= [Bit 32]
b1165[t0] =
  t1 <- add((t0, 48))
  and((t1, 255))

-----------------------------------------
-- not recursive
b1638 :: [Bit 32, Bit 32] >>= [Bit 32]
b1638[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b1165[t0]
    else b1166[t0]

-----------------------------------------
-- not recursive
spinner :: Bit 32
spinner <- area (Array 4 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- not recursive
spinpos :: Bit 32
spinpos <- area (Stored (Ix 4)) aligned 1

-----------------------------------------
-- not recursive
b2552 :: [] >>= [Unit]
b2552[] =
  t0 <- load8((spinpos))
  t1 <- add((spinner, t0))
  t2 <- load8((t1))
  t3 <- add((t0, 1))
  t4 <- and((t3, 3))
  t5 <- store8((spinpos, t4))
  t6 <- load16((753822))
  t7 <- and((t6, 65280))
  t8 <- or((t7, t2))
  t9 <- store16((753822, t8))
  t10 <- load1((current))
  t11 <- flagToWord((t10))
  t12 <- mul((t11, 72))
  t13 <- add((users, t12))
  returnTo((t13))

-----------------------------------------
-- not recursive
b4232 :: [] >>= [Unit]
b4232[] =
  t0 <- store1((current, flag0))
  b2552[]

-----------------------------------------
-- not recursive
b6652 :: [Bit 32] >>= [Unit]
b6652[t0] =
  t1 <- wordToFlag((t0))
  t2 <- store1((current, t1))
  b2552[]

-----------------------------------------
-- not recursive
b1126 :: [] >>= [Unit]
b1126[] =
  t0 <- load1((current))
  t1 <- flagToWord((t0))
  t2 <- add((t1, 1))
  t3 <- primUle((t2, 1))
  if t3
    then b6652[t2]
    else b4232[]

-----------------------------------------
-- not recursive
b1128 :: [Bit 32] >>= [Unit]
b1128[t0] =
  t1 <- and((t0, 15))
  t2 <- primEq((t1, 0))
  if t2
    then b1126[]
    else b1384[]

-----------------------------------------
-- not recursive
pos :: Bit 32
pos <- area (Stored (Ix 80)) aligned 1

-----------------------------------------
-- not recursive
b865 :: [Bit 32, Bit 32] >>= [Unit]
b865[t0, t1] =
  t2 <- mul((t0, 2))
  t3 <- add((t2, 753664))
  t4 <- load16((t3))
  t5 <- and((t1, 255))
  t6 <- and((t4, 65280))
  t7 <- or((t6, t5))
  store16((t3, t7))

-----------------------------------------
-- not recursive
dir :: Bit 32
dir <- area (Stored Bool) aligned 1

-----------------------------------------
-- not recursive
b1764 :: [Bit 32, Bit 32] >>= [Unit]
b1764[t0, t1] =
  t2 <- b865[t0, 124]
  t3 <- store1((dir, flag1))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b1126[]
    else b1384[]

-----------------------------------------
-- not recursive
b6657 :: [Bit 32, Bit 32] >>= [Unit]
b6657[t0, t1] =
  t2 <- b865[t0, 60]
  t3 <- store8((pos, t0))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b1126[]
    else b1384[]

-----------------------------------------
-- not recursive
b6659 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6659[t0, t1, t2, t3] =
  t4 <- sub((t2, t0))
  t5 <- primSle((t1, t4))
  if t5
    then b6657[t4, t3]
    else b1764[t2, t3]

-----------------------------------------
-- not recursive
b1761 :: [Bit 32, Bit 32] >>= [Unit]
b1761[t0, t1] =
  t2 <- b865[t0, 124]
  t3 <- store1((dir, flag0))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b1126[]
    else b1384[]

-----------------------------------------
-- not recursive
b6662 :: [Bit 32, Bit 32] >>= [Unit]
b6662[t0, t1] =
  t2 <- b865[t0, 62]
  t3 <- store8((pos, t0))
  t4 <- and((t1, 15))
  t5 <- primEq((t4, 0))
  if t5
    then b1126[]
    else b1384[]

-----------------------------------------
-- not recursive
b6664 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6664[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6662[t4, t3]
    else b1761[t1, t3]

-----------------------------------------
-- not recursive
b1758 :: [Bit 32] >>= [Unit]
b1758[t0] =
  t1 <- load8((pos))
  t2 <- b865[t1, 32]
  t3 <- load1((dir))
  if t3
    then b6664[1, t1, 68, t0]
    else b6659[1, 46, t1, t0]

-----------------------------------------
-- not recursive
b2556 :: [Bit 32] >>= [Unit]
b2556[t0] =
  t1 <- and((t0, 3))
  t2 <- primEq((t1, 0))
  if t2
    then b1758[t0]
    else b1128[t0]

-----------------------------------------
-- recursive
b6667 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6667[t0, t1, t2] =
  t3 <- lshr((t1, 4))
  t4 <- mul((t0, 2))
  t5 <- add((t4, 753664))
  t6 <- load16((t5))
  t7 <- and((t3, 15))
  t8 <- b1638[t7, 9]
  t9 <- and((t6, 65280))
  t10 <- or((t9, t8))
  t11 <- store16((t5, t10))
  t12 <- add((t0, -1))
  t13 <- primSle((70, t12))
  if t13
    then b6667[t12, t3, t2]
    else b2556[t2]

-----------------------------------------
-- not recursive
b3124 :: [Bit 32] >>= [Unit]
b3124[t0] =
  t1 <- load16((753818))
  t2 <- and((t0, 15))
  t3 <- b1638[t2, 9]
  t4 <- and((t1, 65280))
  t5 <- or((t4, t3))
  t6 <- store16((753818, t5))
  t7 <- lshr((t0, 4))
  t8 <- load16((753816))
  t9 <- and((t7, 15))
  t10 <- b1638[t9, 9]
  t11 <- and((t8, 65280))
  t12 <- or((t11, t10))
  t13 <- store16((753816, t12))
  b6667[75, t7, t0]

-----------------------------------------
-- recursive
b1685 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1685[t0, t1, t2, t3] =
  t4 <- mul((t3, 160))
  t5 <- mul((t0, 2))
  t6 <- add((t4, t5))
  t7 <- add((t6, 753664))
  t8 <- shl((t2, 8))
  t9 <- or((t8, 32))
  t10 <- store16((t7, t9))
  t11 <- add((t0, 1))
  t12 <- primUle((t11, t1))
  if t12
    then b1685[t11, t1, t2, t3]
    else b303[]

-----------------------------------------
-- recursive
b1687 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b1687[t0, t1, t2, t3, t4] =
  t5 <- b1685[t4, t3, t2, t0]
  t6 <- add((t0, 1))
  t7 <- primUle((t6, t1))
  if t7
    then b1687[t6, t1, t2, t3, t4]
    else b303[]

-----------------------------------------
-- not recursive
b1244 :: [] >>= [Unit]
b1244[] =
  t0 <- load8((console))
  t1 <- add((console, 1))
  t2 <- load8((t1))
  t3 <- add((console, 4))
  t4 <- store8((t3, t0))
  t5 <- add((console, 5))
  t6 <- store8((t5, t2))
  t7 <- add((console, 2))
  t8 <- load8((t7))
  t9 <- add((console, 3))
  t10 <- load8((t9))
  t11 <- add((console, 6))
  t12 <- load8((t11))
  b1687[t0, t8, t12, t10, t2]

-----------------------------------------
-- not recursive
objects :: Bit 32
objects <- area (Array 21 GameObject) aligned 4

-----------------------------------------
-- not recursive
ball :: Bit 32
ball <-
  add((objects, 24))

-----------------------------------------
-- not recursive
gameoverZone :: Bit 32
gameoverZone <-
  add((objects, 120))

-----------------------------------------
-- not recursive
str45 :: Bit 32
str45 <- "Game Over"

-----------------------------------------
-- not recursive
b4261 :: [] >>= [Unit]
b4261[] =
  store1((isPlaying, flag0))

-----------------------------------------
-- recursive
b5192 :: [Bit 32, Bit 32] >>= [Unit]
b5192[t0, t1] =
  t2 <- b1988[t0]
  b5183[t1]
b5185 :: [Bit 32, Bit 32] >>= [Unit]
b5185[t0, t1] =
  t2 <- add((t1, 1))
  b5187[t0, t2]
b5187 :: [Bit 32, Bit 32] >>= [Unit]
b5187[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b5190[t0, t1]
    else b5192[t0, t1]
b5190 :: [Bit 32, Bit 32] >>= [Unit]
b5190[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, 13]
  t5 <- b1988[t0]
  b5183[t1]
b5183 :: [Bit 32] >>= [Unit]
b5183[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b4261[]
    else b5185[t1, t0]

-----------------------------------------
-- not recursive
b5201 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5201[t0, t1, t2] =
  t3 <- b1988[t0]
  t4 <- b5183[t1]
  b3124[t2]

-----------------------------------------
-- not recursive
b5199 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5199[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  t7 <- b5183[t1]
  b3124[t2]

-----------------------------------------
-- not recursive
b5195 :: [Bit 32, Bit 32] >>= [Unit]
b5195[t0, t1] =
  t2 <- add((str45, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5199[t0, t2, t1]
    else b5201[t0, t2, t1]

-----------------------------------------
-- not recursive
b3881 :: [Bit 32] >>= [Unit]
b3881[t0] =
  t1 <- store1((isPlaying, flag0))
  b3124[t0]

-----------------------------------------
-- not recursive
b3880 :: [Bit 32] >>= [Unit]
b3880[t0] =
  t1 <- b1244[]
  t2 <- load8((str45))
  t3 <- primEq((t2, 0))
  if t3
    then b3881[t0]
    else b5195[t2, t0]

-----------------------------------------
-- not recursive
b3879 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3879[t0, t1, t2, t3] =
  t4 <- add((t0, t1))
  t5 <- primUgt((t4, t2))
  if t5
    then b3880[t3]
    else b3124[t3]

-----------------------------------------
-- not recursive
b3878 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3878[t0, t1, t2, t3, t4] =
  t5 <- add((t3, t0))
  t6 <- primUlt((t1, t5))
  if t6
    then b3879[t1, t2, t3, t4]
    else b3124[t4]

-----------------------------------------
-- not recursive
b3877 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3877[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t0, t1))
  t9 <- primUgt((t8, t2))
  if t9
    then b3878[t3, t4, t5, t6, t7]
    else b3124[t7]

-----------------------------------------
-- not recursive
b3876 :: [Bit 32] >>= [Unit]
b3876[t0] =
  t1 <- add((ball, 8))
  t2 <- load32((t1))
  t3 <- add((gameoverZone, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 12))
  t6 <- load32((t5))
  t7 <- add((gameoverZone, 12))
  t8 <- load32((t7))
  t9 <- load32((ball))
  t10 <- add((ball, 4))
  t11 <- load32((t10))
  t12 <- load32((gameoverZone))
  t13 <- add((gameoverZone, 4))
  t14 <- load32((t13))
  t15 <- add((t4, t12))
  t16 <- primUlt((t2, t15))
  if t16
    then b3877[t2, t9, t4, t14, t6, t11, t8, t0]
    else b3124[t0]

-----------------------------------------
-- not recursive
str0 :: Bit 32
str0 <- "nothing\n"

-----------------------------------------
-- not recursive
b1850 :: [] >>= [Bit 32]
b1850[] =
  return 0

-----------------------------------------
-- recursive
b5213 :: [Bit 32, Bit 32] >>= [Bit 32]
b5213[t0, t1] =
  t2 <- b1988[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1850[]
    else b5206[t3, t1]
b5211 :: [Bit 32, Bit 32] >>= [Bit 32]
b5211[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, 13]
  t5 <- b1988[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1850[]
    else b5206[t6, t1]
b5206 :: [Bit 32, Bit 32] >>= [Bit 32]
b5206[t0, t1] =
  t2 <- add((t1, 1))
  b5208[t0, t2]
b5208 :: [Bit 32, Bit 32] >>= [Bit 32]
b5208[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b5211[t0, t1]
    else b5213[t0, t1]

-----------------------------------------
-- not recursive
b5221 :: [Bit 32] >>= [Bit 32]
b5221[t0] =
  t1 <- add((str0, 1))
  b5208[t0, t1]

-----------------------------------------
-- not recursive
b5219 :: [] >>= [Bit 32]
b5219[] =
  t0 <- load8((str0))
  t1 <- primEq((t0, 0))
  if t1
    then b1850[]
    else b5221[t0]

-----------------------------------------
-- recursive
b6695 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6695[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- primUle((t7, t2))
  if t8
    then b6700[t3, t7, 79, t2, t6, t5, t4]
    else b303[]
b6690 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6690[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t1, t0))
  t9 <- primUle((t8, t2))
  if t9
    then b6688[t8, t5, t3, t7, t6, t0, t1, t4]
    else b6695[1, t7, t4, t6, t0, t1, t5]
b6688 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6688[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- mul((t0, 160))
  t9 <- mul((t2, 2))
  t10 <- add((t8, t9))
  t11 <- add((t10, 753664))
  t12 <- shl((t1, 8))
  t13 <- and((t12, 65280))
  t14 <- or((t13, 32))
  t15 <- store16((t11, t14))
  t16 <- add((t3, 1))
  t17 <- primUle((t16, t7))
  if t17
    then b6700[t4, t16, 79, t7, t1, t6, t5]
    else b303[]
b6700 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6700[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- primUle((t7, t2))
  if t8
    then b6690[t6, t5, 24, t7, t3, t4, t0, t1]
    else b6695[1, t1, t3, t0, t6, t5, t4]

-----------------------------------------
-- recursive
b2232 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2232[t0, t1, t2, t3, t4, t5] =
  t6 <- b6700[t1, t5, 79, t4, t3, t0, t2]
  b6701[1, t0, 0, t5, t4, t3, t2, t1]
b6701 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6701[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t1, t0))
  t9 <- primUle((t8, t2))
  if t9
    then b2232[t8, t7, t6, t5, t4, t3]
    else b303[]

-----------------------------------------
-- not recursive
b5218 :: [Bit 32] >>= [Unit]
b5218[t0] =
  t1 <- add((str45, 1))
  b5187[t0, t1]

-----------------------------------------
-- not recursive
b1041 :: [] >>= [Unit]
b1041[] =
  t0 <- b1244[]
  t1 <- load8((str45))
  t2 <- primEq((t1, 0))
  if t2
    then b4261[]
    else b5218[t1]

-----------------------------------------
-- not recursive
b2037 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2037[t0, t1, t2] =
  t3 <- add((t0, t1))
  t4 <- primUgt((t3, t2))
  if t4
    then b1041[]
    else b303[]

-----------------------------------------
-- not recursive
b2036 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2036[t0, t1, t2, t3] =
  t4 <- add((t3, t0))
  t5 <- primUlt((t1, t4))
  if t5
    then b2037[t1, t2, t3]
    else b303[]

-----------------------------------------
-- not recursive
b2035 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2035[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, t1))
  t8 <- primUgt((t7, t2))
  if t8
    then b2036[t3, t4, t5, t6]
    else b303[]

-----------------------------------------
-- not recursive
b2034 :: [] >>= [Unit]
b2034[] =
  t0 <- add((ball, 8))
  t1 <- load32((t0))
  t2 <- add((gameoverZone, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 12))
  t5 <- load32((t4))
  t6 <- add((gameoverZone, 12))
  t7 <- load32((t6))
  t8 <- load32((ball))
  t9 <- add((ball, 4))
  t10 <- load32((t9))
  t11 <- load32((gameoverZone))
  t12 <- add((gameoverZone, 4))
  t13 <- load32((t12))
  t14 <- add((t3, t11))
  t15 <- primUlt((t1, t14))
  if t15
    then b2035[t1, t8, t3, t13, t5, t10, t7]
    else b303[]

-----------------------------------------
-- recursive
b2241 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2241[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b6700[t2, t6, 79, t5, t4, t0, t3]
  b6709[1, t0, t1, t6, t5, t4, t3, t2]
b6709 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6709[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t1, t0))
  t9 <- primUle((t8, t2))
  if t9
    then b2241[t8, t2, t7, t6, t5, t4, t3]
    else b303[]

-----------------------------------------
-- not recursive
b2231 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2231[t0, t1, t2, t3] =
  t4 <- add((console, 1))
  t5 <- load8((t4))
  t6 <- load8((console))
  b2232[t3, t5, t6, t2, t1, t0]

-----------------------------------------
-- not recursive
b6182 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6182[t0, t1, t2, t3, t4] =
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- load8((console))
  b2241[t4, t0, t6, t7, t3, t2, t1]

-----------------------------------------
-- not recursive
b6180 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6180[t0, t1, t2, t3, t4, t5] =
  t6 <- primUle((t0, t1))
  if t6
    then b6182[t0, t5, t4, t3, t2]
    else b2231[t5, t4, t3, t2]

-----------------------------------------
-- not recursive
b2240 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2240[t0, t1, t2, t3, t4] =
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- load8((console))
  b2241[t4, t3, t6, t7, t2, t1, t0]

-----------------------------------------
-- not recursive
b6201 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6201[t0, t1, t2, t3, t4, t5] =
  t6 <- primUle((t0, t1))
  if t6
    then b6182[t0, t5, t4, t3, t2]
    else b2240[t5, t4, t3, t1, t2]

-----------------------------------------
-- recursive
b3211 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3211[t0, t1, t2, t3, t4] =
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- load8((console))
  t8 <- b6700[t6, t0, 79, t1, t2, t3, t7]
  t9 <- b6701[1, t3, 0, t0, t1, t2, t7, t6]
  b6713[1, t4, 20]
b6972 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6972[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- add((t6, -1))
  t8 <- primUle((t7, 0))
  if t8
    then b6175[t7, t4, t3, t2, t1, t5]
    else b3211[t4, t3, t2, t1, t5]
b6175 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6175[t0, t1, t2, t3, t4, t5] =
  t6 <- add((console, 1))
  t7 <- load8((t6))
  t8 <- load8((console))
  t9 <- b6700[t7, t1, 79, t2, t3, t4, t8]
  t10 <- b6709[1, t4, t0, t1, t2, t3, t8, t7]
  b6713[1, t5, 20]
b6991 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6991[t0, t1, t2, t3, t4] =
  t5 <- load32((t1))
  t6 <- add((t1, 4))
  t7 <- load32((t6))
  t8 <- add((t1, 16))
  t9 <- load32((t8))
  t10 <- add((t2, t5))
  t11 <- add((t10, -1))
  t12 <- primUle((t11, t3))
  if t12
    then b6971[t11, t7, t0, t9, t2, t4]
    else b6972[t7, t0, t9, t3, t2, t4]
b6971 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6971[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t2, t1))
  t7 <- add((t6, -1))
  t8 <- b6180[t7, 0, t2, t3, t0, t4]
  b6713[1, t5, 20]
b6976 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6976[t0, t1, t2, t3, t4, t5] =
  t6 <- primUle((t0, t1))
  if t6
    then b6991[t0, t4, t2, t3, t5]
    else b6713[1, t5, 20]
b6974 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6974[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- add((t7, -1))
  t9 <- primUle((t8, t5))
  if t9
    then b6175[t8, t4, t3, t2, t1, t6]
    else b3217[t4, t3, t2, t5, t1, t6]
b3217 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3217[t0, t1, t2, t3, t4, t5] =
  t6 <- add((console, 1))
  t7 <- load8((t6))
  t8 <- load8((console))
  t9 <- b6700[t7, t0, 79, t1, t2, t4, t8]
  t10 <- b6709[1, t4, t3, t0, t1, t2, t8, t7]
  b6713[1, t5, 20]
b6992 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6992[t0, t1, t2, t3, t4, t5] =
  t6 <- load32((t1))
  t7 <- add((t1, 4))
  t8 <- load32((t7))
  t9 <- add((t1, 16))
  t10 <- load32((t9))
  t11 <- add((t2, t6))
  t12 <- add((t11, -1))
  t13 <- primUle((t12, t3))
  if t13
    then b6973[t12, t8, t0, t10, t2, t4, t5]
    else b6974[t8, t0, t10, t3, t2, t4, t5]
b6973 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6973[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t2, t1))
  t8 <- add((t7, -1))
  t9 <- b6201[t8, t5, t2, t3, t0, t4]
  b6713[1, t6, 20]
b6712 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6712[t0, t1, t2, t3] =
  t4 <- add((t1, 12))
  t5 <- load32((t4))
  t6 <- load8((console))
  t7 <- add((console, 2))
  t8 <- load8((t7))
  t9 <- sub((t8, t6))
  t10 <- primUle((t9, 24))
  if t10
    then b6975[t5, t9, t0, t2, t1, t3]
    else b6976[t5, 0, t0, t2, t1, t3]
b6975 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6975[t0, t1, t2, t3, t4, t5] =
  t6 <- primUle((t0, t1))
  if t6
    then b6992[t0, t4, t2, t3, t1, t5]
    else b6713[1, t5, 20]
b2716 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b2716[t0, t1, t2] =
  t3 <- b5219[]
  t4 <- primUle((t0, t3))
  if t4
    then b6712[t0, t1, t3, t2]
    else b6713[1, t2, 20]
b2715 :: [Bit 32, Bit 32] >>= [Unit]
b2715[t0, t1] =
  t2 <- add((t0, 8))
  t3 <- load32((t2))
  t4 <- add((console, 1))
  t5 <- load8((t4))
  t6 <- add((console, 3))
  t7 <- load8((t6))
  t8 <- sub((t7, t5))
  t9 <- primUle((t8, 79))
  if t9
    then b6224[t3, t8, t0, t1]
    else b2716[t3, t0, t1]
b6224 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6224[t0, t1, t2, t3] =
  t4 <- primUle((t0, t1))
  if t4
    then b6712[t0, t2, t1, t3]
    else b6713[1, t3, 20]
b6715 :: [Bit 32] >>= [Unit]
b6715[t0] =
  t1 <- mul((t0, 24))
  t2 <- add((objects, t1))
  t3 <- add((t2, 20))
  t4 <- load32((t3))
  t5 <- and((t4, 16))
  t6 <- primNeq((t5, 0))
  if t6
    then b2715[t2, t0]
    else b6713[1, t0, 20]
b6713 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6713[t0, t1, t2] =
  t3 <- add((t1, t0))
  t4 <- primUle((t3, t2))
  if t4
    then b6715[t3]
    else b2034[]

-----------------------------------------
-- not recursive
b3894 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3894[t0, t1, t2, t3, t4, t5] =
  t6 <- add((console, 1))
  t7 <- load8((t6))
  t8 <- load8((console))
  t9 <- b6700[t7, t0, 79, t1, t2, t3, t8]
  t10 <- b6701[1, t3, 0, t0, t1, t2, t8, t7]
  t11 <- b6713[1, t4, 20]
  b3124[t5]

-----------------------------------------
-- not recursive
b6228 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6228[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((console, 1))
  t8 <- load8((t7))
  t9 <- load8((console))
  t10 <- b6700[t8, t1, 79, t2, t3, t4, t9]
  t11 <- b6709[1, t4, t0, t1, t2, t3, t9, t8]
  t12 <- b6713[1, t5, 20]
  b3124[t6]

-----------------------------------------
-- not recursive
b6943 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6943[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- add((t7, -1))
  t9 <- primUle((t8, 0))
  if t9
    then b6228[t8, t4, t3, t2, t1, t5, t6]
    else b3894[t4, t3, t2, t1, t5, t6]

-----------------------------------------
-- not recursive
b6942 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6942[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t2, t1))
  t8 <- add((t7, -1))
  t9 <- b6180[t8, 0, t2, t3, t0, t4]
  t10 <- b6713[1, t5, 20]
  b3124[t6]

-----------------------------------------
-- not recursive
b6993 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6993[t0, t1, t2, t3, t4, t5] =
  t6 <- load32((t1))
  t7 <- add((t1, 4))
  t8 <- load32((t7))
  t9 <- add((t1, 16))
  t10 <- load32((t9))
  t11 <- add((t2, t6))
  t12 <- add((t11, -1))
  t13 <- primUle((t12, t3))
  if t13
    then b6942[t12, t8, t0, t10, t2, t4, t5]
    else b6943[t8, t0, t10, t3, t2, t4, t5]

-----------------------------------------
-- not recursive
b3900 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3900[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((console, 1))
  t8 <- load8((t7))
  t9 <- load8((console))
  t10 <- b6700[t8, t0, 79, t1, t2, t4, t9]
  t11 <- b6709[1, t4, t3, t0, t1, t2, t9, t8]
  t12 <- b6713[1, t5, 20]
  b3124[t6]

-----------------------------------------
-- not recursive
b6945 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6945[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t1, t0))
  t9 <- add((t8, -1))
  t10 <- primUle((t9, t5))
  if t10
    then b6228[t9, t4, t3, t2, t1, t6, t7]
    else b3900[t4, t3, t2, t5, t1, t6, t7]

-----------------------------------------
-- not recursive
b6944 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6944[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t2, t1))
  t9 <- add((t8, -1))
  t10 <- b6201[t9, t5, t2, t3, t0, t4]
  t11 <- b6713[1, t6, 20]
  b3124[t7]

-----------------------------------------
-- not recursive
b6994 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6994[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- load32((t1))
  t8 <- add((t1, 4))
  t9 <- load32((t8))
  t10 <- add((t1, 16))
  t11 <- load32((t10))
  t12 <- add((t2, t7))
  t13 <- add((t12, -1))
  t14 <- primUle((t13, t3))
  if t14
    then b6944[t13, t9, t0, t11, t2, t4, t5, t6]
    else b6945[t9, t0, t11, t3, t2, t4, t5, t6]

-----------------------------------------
-- recursive
b6978 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6978[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUle((t0, t1))
  if t7
    then b6993[t0, t4, t2, t3, t6, t5]
    else b6720[1, t6, 20, t5]
b6719 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6719[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 12))
  t6 <- load32((t5))
  t7 <- load8((console))
  t8 <- add((console, 2))
  t9 <- load8((t8))
  t10 <- sub((t9, t7))
  t11 <- primUle((t10, 24))
  if t11
    then b6977[t6, t10, t0, t2, t1, t4, t3]
    else b6978[t6, 0, t0, t2, t1, t4, t3]
b6977 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6977[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUle((t0, t1))
  if t7
    then b6994[t0, t4, t2, t3, t1, t6, t5]
    else b6720[1, t6, 20, t5]
b3888 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3888[t0, t1, t2, t3] =
  t4 <- b5219[]
  t5 <- primUle((t0, t4))
  if t5
    then b6719[t0, t1, t4, t2, t3]
    else b6720[1, t2, 20, t3]
b3887 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3887[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- add((console, 3))
  t8 <- load8((t7))
  t9 <- sub((t8, t6))
  t10 <- primUle((t9, 79))
  if t10
    then b6269[t4, t9, t0, t2, t1]
    else b3888[t4, t0, t1, t2]
b6269 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6269[t0, t1, t2, t3, t4] =
  t5 <- primUle((t0, t1))
  if t5
    then b6719[t0, t2, t1, t4, t3]
    else b6720[1, t4, 20, t3]
b6722 :: [Bit 32, Bit 32] >>= [Unit]
b6722[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- add((t3, 20))
  t5 <- load32((t4))
  t6 <- and((t5, 16))
  t7 <- primNeq((t6, 0))
  if t7
    then b3887[t3, t0, t1]
    else b6720[1, t0, 20, t1]
b6720 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6720[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6722[t4, t3]
    else b3876[t3]

-----------------------------------------
-- not recursive
b3907 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3907[t0, t1, t2, t3, t4] =
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- load8((console))
  t8 <- b6700[t6, t0, 79, t1, t2, t3, t7]
  t9 <- b6701[1, t3, 0, t0, t1, t2, t7, t6]
  b6722[1, t4]

-----------------------------------------
-- not recursive
b6273 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6273[t0, t1, t2, t3, t4, t5] =
  t6 <- add((console, 1))
  t7 <- load8((t6))
  t8 <- load8((console))
  t9 <- b6700[t7, t1, 79, t2, t3, t4, t8]
  t10 <- b6709[1, t4, t0, t1, t2, t3, t8, t7]
  b6722[1, t5]

-----------------------------------------
-- not recursive
b6948 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6948[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- add((t6, -1))
  t8 <- primUle((t7, 0))
  if t8
    then b6273[t7, t4, t3, t2, t1, t5]
    else b3907[t4, t3, t2, t1, t5]

-----------------------------------------
-- not recursive
b6947 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6947[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t2, t1))
  t7 <- add((t6, -1))
  t8 <- b6180[t7, 0, t2, t3, t0, t4]
  b6722[1, t5]

-----------------------------------------
-- not recursive
b6979 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6979[t0, t1, t2, t3] =
  t4 <- load32((objects))
  t5 <- add((objects, 4))
  t6 <- load32((t5))
  t7 <- add((objects, 16))
  t8 <- load32((t7))
  t9 <- add((t1, t4))
  t10 <- add((t9, -1))
  t11 <- primUle((t10, t2))
  if t11
    then b6947[t10, t6, t0, t8, t1, t3]
    else b6948[t6, t0, t8, t2, t1, t3]

-----------------------------------------
-- not recursive
b6952 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6952[t0, t1, t2, t3, t4] =
  t5 <- primUle((t0, t1))
  if t5
    then b6979[t0, t2, t3, t4]
    else b6720[1, 0, 20, t4]

-----------------------------------------
-- not recursive
b3913 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3913[t0, t1, t2, t3, t4, t5] =
  t6 <- add((console, 1))
  t7 <- load8((t6))
  t8 <- load8((console))
  t9 <- b6700[t7, t0, 79, t1, t2, t4, t8]
  t10 <- b6709[1, t4, t3, t0, t1, t2, t8, t7]
  b6722[1, t5]

-----------------------------------------
-- not recursive
b6950 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6950[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- add((t7, -1))
  t9 <- primUle((t8, t5))
  if t9
    then b6273[t8, t4, t3, t2, t1, t6]
    else b3913[t4, t3, t2, t5, t1, t6]

-----------------------------------------
-- not recursive
b6949 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6949[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t2, t1))
  t8 <- add((t7, -1))
  t9 <- b6201[t8, t5, t2, t3, t0, t4]
  b6722[1, t6]

-----------------------------------------
-- not recursive
b6980 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6980[t0, t1, t2, t3, t4] =
  t5 <- load32((objects))
  t6 <- add((objects, 4))
  t7 <- load32((t6))
  t8 <- add((objects, 16))
  t9 <- load32((t8))
  t10 <- add((t1, t5))
  t11 <- add((t10, -1))
  t12 <- primUle((t11, t2))
  if t12
    then b6949[t11, t7, t0, t9, t1, t3, t4]
    else b6950[t7, t0, t9, t2, t1, t3, t4]

-----------------------------------------
-- not recursive
b6951 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6951[t0, t1, t2, t3, t4] =
  t5 <- primUle((t0, t1))
  if t5
    then b6980[t0, t2, t3, t1, t4]
    else b6720[1, 0, 20, t4]

-----------------------------------------
-- not recursive
b6753 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6753[t0, t1, t2] =
  t3 <- add((objects, 12))
  t4 <- load32((t3))
  t5 <- load8((console))
  t6 <- add((console, 2))
  t7 <- load8((t6))
  t8 <- sub((t7, t5))
  t9 <- primUle((t8, 24))
  if t9
    then b6951[t4, t8, t0, t1, t2]
    else b6952[t4, 0, t0, t1, t2]

-----------------------------------------
-- not recursive
b4680 :: [Bit 32, Bit 32] >>= [Unit]
b4680[t0, t1] =
  t2 <- b5219[]
  t3 <- primUle((t0, t2))
  if t3
    then b6753[t0, t2, t1]
    else b6720[1, 0, 20, t1]

-----------------------------------------
-- not recursive
b6311 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6311[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b6753[t0, t1, t2]
    else b6720[1, 0, 20, t2]

-----------------------------------------
-- not recursive
b4679 :: [Bit 32] >>= [Unit]
b4679[t0] =
  t1 <- add((objects, 8))
  t2 <- load32((t1))
  t3 <- add((console, 1))
  t4 <- load8((t3))
  t5 <- add((console, 3))
  t6 <- load8((t5))
  t7 <- sub((t6, t4))
  t8 <- primUle((t7, 79))
  if t8
    then b6311[t2, t7, t0]
    else b4680[t2, t0]

-----------------------------------------
-- not recursive
b3872 :: [Bit 32] >>= [Unit]
b3872[t0] =
  t1 <- add((objects, 20))
  t2 <- load32((t1))
  t3 <- and((t2, 16))
  t4 <- primNeq((t3, 0))
  if t4
    then b4679[t0]
    else b6720[1, 0, 20, t0]

-----------------------------------------
-- not recursive
bricksLeft :: Bit 32
bricksLeft <- area (Stored (Bit 32)) aligned 4

-----------------------------------------
-- not recursive
b2504 :: [] >>= [Unit]
b2504[] =
  b6715[1]

-----------------------------------------
-- not recursive
b2729 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2729[t0, t1, t2, t3] =
  t4 <- add((console, 1))
  t5 <- load8((t4))
  t6 <- load8((console))
  t7 <- b6700[t5, t0, 79, t1, t2, t3, t6]
  t8 <- b6701[1, t3, 0, t0, t1, t2, t6, t5]
  b6715[1]

-----------------------------------------
-- not recursive
b6318 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6318[t0, t1, t2, t3, t4] =
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- load8((console))
  t8 <- b6700[t6, t1, 79, t2, t3, t4, t7]
  t9 <- b6709[1, t4, t0, t1, t2, t3, t7, t6]
  b6715[1]

-----------------------------------------
-- not recursive
b6954 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6954[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- add((t5, -1))
  t7 <- primUle((t6, 0))
  if t7
    then b6318[t6, t4, t3, t2, t1]
    else b2729[t4, t3, t2, t1]

-----------------------------------------
-- not recursive
b6953 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6953[t0, t1, t2, t3, t4] =
  t5 <- add((t2, t1))
  t6 <- add((t5, -1))
  t7 <- b6180[t6, 0, t2, t3, t0, t4]
  b6715[1]

-----------------------------------------
-- not recursive
b6981 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6981[t0, t1, t2] =
  t3 <- load32((objects))
  t4 <- add((objects, 4))
  t5 <- load32((t4))
  t6 <- add((objects, 16))
  t7 <- load32((t6))
  t8 <- add((t1, t3))
  t9 <- add((t8, -1))
  t10 <- primUle((t9, t2))
  if t10
    then b6953[t9, t5, t0, t7, t1]
    else b6954[t5, t0, t7, t2, t1]

-----------------------------------------
-- not recursive
b6958 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6958[t0, t1, t2, t3] =
  t4 <- primUle((t0, t1))
  if t4
    then b6981[t0, t2, t3]
    else b2504[]

-----------------------------------------
-- not recursive
b2735 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b2735[t0, t1, t2, t3, t4] =
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- load8((console))
  t8 <- b6700[t6, t0, 79, t1, t2, t4, t7]
  t9 <- b6709[1, t4, t3, t0, t1, t2, t7, t6]
  b6715[1]

-----------------------------------------
-- not recursive
b6956 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6956[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- add((t6, -1))
  t8 <- primUle((t7, t5))
  if t8
    then b6318[t7, t4, t3, t2, t1]
    else b2735[t4, t3, t2, t5, t1]

-----------------------------------------
-- not recursive
b6955 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6955[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t2, t1))
  t7 <- add((t6, -1))
  t8 <- b6201[t7, t5, t2, t3, t0, t4]
  b6715[1]

-----------------------------------------
-- not recursive
b6982 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6982[t0, t1, t2, t3] =
  t4 <- load32((objects))
  t5 <- add((objects, 4))
  t6 <- load32((t5))
  t7 <- add((objects, 16))
  t8 <- load32((t7))
  t9 <- add((t1, t4))
  t10 <- add((t9, -1))
  t11 <- primUle((t10, t2))
  if t11
    then b6955[t10, t6, t0, t8, t1, t3]
    else b6956[t6, t0, t8, t2, t1, t3]

-----------------------------------------
-- not recursive
b6957 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6957[t0, t1, t2, t3] =
  t4 <- primUle((t0, t1))
  if t4
    then b6982[t0, t2, t3, t1]
    else b2504[]

-----------------------------------------
-- not recursive
b6783 :: [Bit 32, Bit 32] >>= [Unit]
b6783[t0, t1] =
  t2 <- add((objects, 12))
  t3 <- load32((t2))
  t4 <- load8((console))
  t5 <- add((console, 2))
  t6 <- load8((t5))
  t7 <- sub((t6, t4))
  t8 <- primUle((t7, 24))
  if t8
    then b6957[t3, t7, t0, t1]
    else b6958[t3, 0, t0, t1]

-----------------------------------------
-- not recursive
b4688 :: [Bit 32] >>= [Unit]
b4688[t0] =
  t1 <- b5219[]
  t2 <- primUle((t0, t1))
  if t2
    then b6783[t0, t1]
    else b2504[]

-----------------------------------------
-- not recursive
b6356 :: [Bit 32, Bit 32] >>= [Unit]
b6356[t0, t1] =
  t2 <- primUle((t0, t1))
  if t2
    then b6783[t0, t1]
    else b2504[]

-----------------------------------------
-- not recursive
b4687 :: [] >>= [Unit]
b4687[] =
  t0 <- add((objects, 8))
  t1 <- load32((t0))
  t2 <- add((console, 1))
  t3 <- load8((t2))
  t4 <- add((console, 3))
  t5 <- load8((t4))
  t6 <- sub((t5, t3))
  t7 <- primUle((t6, 79))
  if t7
    then b6356[t1, t6]
    else b4688[t1]

-----------------------------------------
-- not recursive
b2720 :: [] >>= [Unit]
b2720[] =
  t0 <- add((objects, 20))
  t1 <- load32((t0))
  t2 <- and((t1, 16))
  t3 <- primNeq((t2, 0))
  if t3
    then b4687[]
    else b2504[]

-----------------------------------------
-- recursive
b3707 :: [Bit 32, Bit 32] >>= [Unit]
b3707[t0, t1] =
  t2 <- add((t0, 20))
  t3 <- load32((t2))
  t4 <- and((t3, -17))
  t5 <- store32((t2, t4))
  t6 <- load32((bricksLeft))
  t7 <- add((t6, -1))
  t8 <- store32((bricksLeft, t7))
  b6784[1, t1, 20]
b3706 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3706[t0, t1, t2, t3, t4] =
  t5 <- add((t0, t1))
  t6 <- primUgt((t5, t2))
  if t6
    then b3707[t3, t4]
    else b6784[1, t4, 20]
b3705 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3705[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b3706[t1, t2, t3, t4, t5]
    else b6784[1, t5, 20]
b3704 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3704[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b3705[t3, t4, t5, t6, t7, t8]
    else b6784[1, t8, 20]
b3703 :: [Bit 32, Bit 32] >>= [Unit]
b3703[t0, t1] =
  t2 <- add((t0, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((t0, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((t0))
  t11 <- add((t0, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b3704[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6784[1, t1, 20]
b3701 :: [Bit 32, Bit 32] >>= [Unit]
b3701[t0, t1] =
  t2 <- primEq((t0, ball))
  if t2
    then b6784[1, t1, 20]
    else b3703[t0, t1]
b3230 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3230[t0, t1, t2] =
  t3 <- and((t0, 1))
  t4 <- primNeq((t3, 0))
  if t4
    then b3701[t1, t2]
    else b6784[1, t2, 20]
b6786 :: [Bit 32] >>= [Unit]
b6786[t0] =
  t1 <- mul((t0, 24))
  t2 <- add((objects, t1))
  t3 <- add((t2, 20))
  t4 <- load32((t3))
  t5 <- and((t4, 16))
  t6 <- primNeq((t5, 0))
  if t6
    then b3230[t4, t2, t0]
    else b6784[1, t0, 20]
b6784 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6784[t0, t1, t2] =
  t3 <- add((t1, t0))
  t4 <- primUle((t3, t2))
  if t4
    then b6786[t3]
    else b2720[]

-----------------------------------------
-- not recursive
b3924 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3924[t0, t1, t2] =
  t3 <- add((t0, 20))
  t4 <- load32((t3))
  t5 <- and((t4, -17))
  t6 <- store32((t3, t5))
  t7 <- load32((bricksLeft))
  t8 <- add((t7, -1))
  t9 <- store32((bricksLeft, t8))
  t10 <- b6784[1, t1, 20]
  b3124[t2]

-----------------------------------------
-- recursive
b3923 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3923[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, t1))
  t7 <- primUgt((t6, t2))
  if t7
    then b3924[t3, t4, t5]
    else b6788[1, t4, 20, t5]
b3922 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3922[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t3, t0))
  t8 <- primUlt((t1, t7))
  if t8
    then b3923[t1, t2, t3, t4, t5, t6]
    else b6788[1, t5, 20, t6]
b3921 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3921[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, t1))
  t11 <- primUgt((t10, t2))
  if t11
    then b3922[t3, t4, t5, t6, t7, t8, t9]
    else b6788[1, t8, 20, t9]
b3920 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3920[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 8))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((ball, 12))
  t10 <- load32((t9))
  t11 <- load32((t0))
  t12 <- add((t0, 4))
  t13 <- load32((t12))
  t14 <- load32((ball))
  t15 <- add((ball, 4))
  t16 <- load32((t15))
  t17 <- add((t6, t14))
  t18 <- primUlt((t4, t17))
  if t18
    then b3921[t4, t11, t6, t16, t8, t13, t10, t0, t1, t2]
    else b6788[1, t1, 20, t2]
b3918 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3918[t0, t1, t2] =
  t3 <- primEq((t0, ball))
  if t3
    then b6788[1, t1, 20, t2]
    else b3920[t0, t1, t2]
b3917 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3917[t0, t1, t2, t3] =
  t4 <- and((t0, 1))
  t5 <- primNeq((t4, 0))
  if t5
    then b3918[t1, t2, t3]
    else b6788[1, t2, 20, t3]
b6790 :: [Bit 32, Bit 32] >>= [Unit]
b6790[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- add((t3, 20))
  t5 <- load32((t4))
  t6 <- and((t5, 16))
  t7 <- primNeq((t6, 0))
  if t7
    then b3917[t5, t3, t0, t1]
    else b6788[1, t0, 20, t1]
b6788 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6788[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6790[t4, t3]
    else b3872[t3]

-----------------------------------------
-- not recursive
b4702 :: [Bit 32] >>= [Unit]
b4702[t0] =
  t1 <- add((objects, 20))
  t2 <- load32((t1))
  t3 <- and((t2, -17))
  t4 <- store32((t1, t3))
  t5 <- load32((bricksLeft))
  t6 <- add((t5, -1))
  t7 <- store32((bricksLeft, t6))
  b6790[1, t0]

-----------------------------------------
-- not recursive
b4701 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4701[t0, t1, t2, t3] =
  t4 <- add((t0, t1))
  t5 <- primUgt((t4, t2))
  if t5
    then b4702[t3]
    else b6788[1, 0, 20, t3]

-----------------------------------------
-- not recursive
b4700 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4700[t0, t1, t2, t3, t4] =
  t5 <- add((t3, t0))
  t6 <- primUlt((t1, t5))
  if t6
    then b4701[t1, t2, t3, t4]
    else b6788[1, 0, 20, t4]

-----------------------------------------
-- not recursive
b4699 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4699[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t0, t1))
  t9 <- primUgt((t8, t2))
  if t9
    then b4700[t3, t4, t5, t6, t7]
    else b6788[1, 0, 20, t7]

-----------------------------------------
-- not recursive
b4698 :: [Bit 32] >>= [Unit]
b4698[t0] =
  t1 <- add((objects, 8))
  t2 <- load32((t1))
  t3 <- add((ball, 8))
  t4 <- load32((t3))
  t5 <- add((objects, 12))
  t6 <- load32((t5))
  t7 <- add((ball, 12))
  t8 <- load32((t7))
  t9 <- load32((objects))
  t10 <- add((objects, 4))
  t11 <- load32((t10))
  t12 <- load32((ball))
  t13 <- add((ball, 4))
  t14 <- load32((t13))
  t15 <- add((t4, t12))
  t16 <- primUlt((t2, t15))
  if t16
    then b4699[t2, t9, t4, t14, t6, t11, t8, t0]
    else b6788[1, 0, 20, t0]

-----------------------------------------
-- not recursive
b4697 :: [Bit 32] >>= [Unit]
b4697[t0] =
  t1 <- primEq((objects, ball))
  if t1
    then b6788[1, 0, 20, t0]
    else b4698[t0]

-----------------------------------------
-- not recursive
b4696 :: [Bit 32, Bit 32] >>= [Unit]
b4696[t0, t1] =
  t2 <- and((t0, 1))
  t3 <- primNeq((t2, 0))
  if t3
    then b4697[t1]
    else b6788[1, 0, 20, t1]

-----------------------------------------
-- not recursive
b3339 :: [Bit 32] >>= [Unit]
b3339[t0] =
  t1 <- add((objects, 20))
  t2 <- load32((t1))
  t3 <- and((t2, 16))
  t4 <- primNeq((t3, 0))
  if t4
    then b4696[t2, t0]
    else b6788[1, 0, 20, t0]

-----------------------------------------
-- not recursive
headingLeft :: Bit 32
headingLeft <- area (Stored Bool) aligned 1

-----------------------------------------
-- not recursive
headingTop :: Bit 32
headingTop <- area (Stored Bool) aligned 1

-----------------------------------------
-- not recursive
b3080 :: [] >>= [Unit]
b3080[] =
  b6786[1]

-----------------------------------------
-- not recursive
b4709 :: [] >>= [Unit]
b4709[] =
  t0 <- add((objects, 20))
  t1 <- load32((t0))
  t2 <- and((t1, -17))
  t3 <- store32((t0, t2))
  t4 <- load32((bricksLeft))
  t5 <- add((t4, -1))
  t6 <- store32((bricksLeft, t5))
  b6786[1]

-----------------------------------------
-- not recursive
b4708 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4708[t0, t1, t2] =
  t3 <- add((t0, t1))
  t4 <- primUgt((t3, t2))
  if t4
    then b4709[]
    else b3080[]

-----------------------------------------
-- not recursive
b4707 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4707[t0, t1, t2, t3] =
  t4 <- add((t3, t0))
  t5 <- primUlt((t1, t4))
  if t5
    then b4708[t1, t2, t3]
    else b3080[]

-----------------------------------------
-- not recursive
b4706 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4706[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t0, t1))
  t8 <- primUgt((t7, t2))
  if t8
    then b4707[t3, t4, t5, t6]
    else b3080[]

-----------------------------------------
-- not recursive
b4705 :: [] >>= [Unit]
b4705[] =
  t0 <- add((objects, 8))
  t1 <- load32((t0))
  t2 <- add((ball, 8))
  t3 <- load32((t2))
  t4 <- add((objects, 12))
  t5 <- load32((t4))
  t6 <- add((ball, 12))
  t7 <- load32((t6))
  t8 <- load32((objects))
  t9 <- add((objects, 4))
  t10 <- load32((t9))
  t11 <- load32((ball))
  t12 <- add((ball, 4))
  t13 <- load32((t12))
  t14 <- add((t3, t11))
  t15 <- primUlt((t1, t14))
  if t15
    then b4706[t1, t8, t3, t13, t5, t10, t7]
    else b3080[]

-----------------------------------------
-- not recursive
b4704 :: [] >>= [Unit]
b4704[] =
  t0 <- primEq((objects, ball))
  if t0
    then b3080[]
    else b4705[]

-----------------------------------------
-- not recursive
b4703 :: [Bit 32] >>= [Unit]
b4703[t0] =
  t1 <- and((t0, 1))
  t2 <- primNeq((t1, 0))
  if t2
    then b4704[]
    else b3080[]

-----------------------------------------
-- not recursive
b2208 :: [] >>= [Unit]
b2208[] =
  t0 <- add((objects, 20))
  t1 <- load32((t0))
  t2 <- and((t1, 16))
  t3 <- primNeq((t2, 0))
  if t3
    then b4703[t1]
    else b3080[]

-----------------------------------------
-- recursive
b6804 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6804[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b3311[t3, t4]
    else b2208[]
b3537 :: [Bit 32, Bit 32] >>= [Unit]
b3537[t0, t1] =
  t2 <- store1((headingLeft, flag1))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 20))
  if t4
    then b3311[t0, t3]
    else b2208[]
b3536 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3536[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3535[t2, t3]
    else b3537[t2, t3]
b3539 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3539[t0, t1, t2] =
  t3 <- add((t1, 20))
  t4 <- load32((t3))
  t5 <- and((t4, 16))
  t6 <- primNeq((t5, 0))
  if t6
    then b3669[t4, t0, t1, t2]
    else b6804[1, t2, 20, t0]
b3669 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3669[t0, t1, t2, t3] =
  t4 <- and((t0, 2))
  t5 <- primNeq((t4, 0))
  if t5
    then b3716[t2, t1, t3]
    else b6804[1, t3, 20, t1]
b3716 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3716[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 8))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((ball, 12))
  t10 <- load32((t9))
  t11 <- load32((t0))
  t12 <- add((t0, 4))
  t13 <- load32((t12))
  t14 <- load32((ball))
  t15 <- add((ball, 4))
  t16 <- load32((t15))
  t17 <- add((t6, t14))
  t18 <- primUlt((t4, t17))
  if t18
    then b3731[t4, t11, t6, t16, t8, t13, t10, t1, t0, t2]
    else b6804[1, t2, 20, t1]
b3731 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3731[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, t1))
  t11 <- primUgt((t10, t2))
  if t11
    then b3744[t3, t4, t5, t6, t7, t8, t9]
    else b6804[1, t9, 20, t7]
b3744 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3744[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t3, t0))
  t8 <- primUlt((t1, t7))
  if t8
    then b3752[t1, t2, t3, t4, t5, t6]
    else b6804[1, t6, 20, t4]
b3752 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3752[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, t1))
  t7 <- primUgt((t6, t2))
  if t7
    then b3757[t4, t3, t5]
    else b6804[1, t5, 20, t3]
b3757 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3757[t0, t1, t2] =
  t3 <- add((ball, 4))
  t4 <- load32((t3))
  t5 <- add((t0, 4))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((t1, t4))
  t10 <- add((t8, t6))
  t11 <- primUle((t1, t8))
  if t11
    then b3535[t1, t2]
    else b3536[t9, t10, t1, t2]
b3535 :: [Bit 32, Bit 32] >>= [Unit]
b3535[t0, t1] =
  t2 <- store1((headingTop, flag1))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 20))
  if t4
    then b3311[t0, t3]
    else b2208[]
b3311 :: [Bit 32, Bit 32] >>= [Unit]
b3311[t0, t1] =
  t2 <- mul((t1, 24))
  t3 <- add((objects, t2))
  t4 <- primEq((t3, ball))
  if t4
    then b6804[1, t1, 20, t0]
    else b3539[t0, t3, t1]

-----------------------------------------
-- not recursive
b6810 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6810[t0, t1, t2] =
  t3 <- b3311[t1, t0]
  b3124[t2]

-----------------------------------------
-- not recursive
b6808 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6808[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6810[t5, t3, t4]
    else b3339[t4]

-----------------------------------------
-- recursive
b6984 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6984[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUle((t0, t1))
  if t7
    then b6993[t0, t4, t2, t3, t6, t5]
    else b6813[1, t6, 20, t5]
b6812 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6812[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 12))
  t6 <- load32((t5))
  t7 <- load8((console))
  t8 <- add((console, 2))
  t9 <- load8((t8))
  t10 <- sub((t9, t7))
  t11 <- primUle((t10, 24))
  if t11
    then b6983[t6, t10, t0, t2, t1, t4, t3]
    else b6984[t6, 0, t0, t2, t1, t4, t3]
b6983 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6983[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- primUle((t0, t1))
  if t7
    then b6994[t0, t4, t2, t3, t1, t6, t5]
    else b6813[1, t6, 20, t5]
b4006 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4006[t0, t1, t2, t3] =
  t4 <- b5219[]
  t5 <- primUle((t0, t4))
  if t5
    then b6812[t0, t1, t4, t2, t3]
    else b6813[1, t2, 20, t3]
b4005 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4005[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- add((console, 3))
  t8 <- load8((t7))
  t9 <- sub((t8, t6))
  t10 <- primUle((t9, 79))
  if t10
    then b6384[t4, t9, t0, t2, t1]
    else b4006[t4, t0, t1, t2]
b6384 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6384[t0, t1, t2, t3, t4] =
  t5 <- primUle((t0, t1))
  if t5
    then b6812[t0, t2, t1, t4, t3]
    else b6813[1, t4, 20, t3]
b6815 :: [Bit 32, Bit 32] >>= [Unit]
b6815[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- add((t3, 20))
  t5 <- load32((t4))
  t6 <- and((t5, 16))
  t7 <- primNeq((t6, 0))
  if t7
    then b4005[t3, t0, t1]
    else b6813[1, t0, 20, t1]
b6813 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6813[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6815[t4, t3]
    else b3876[t3]

-----------------------------------------
-- not recursive
b4025 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4025[t0, t1, t2, t3, t4] =
  t5 <- add((console, 1))
  t6 <- load8((t5))
  t7 <- load8((console))
  t8 <- b6700[t6, t0, 79, t1, t2, t3, t7]
  t9 <- b6701[1, t3, 0, t0, t1, t2, t7, t6]
  b6815[1, t4]

-----------------------------------------
-- not recursive
b6388 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6388[t0, t1, t2, t3, t4, t5] =
  t6 <- add((console, 1))
  t7 <- load8((t6))
  t8 <- load8((console))
  t9 <- b6700[t7, t1, 79, t2, t3, t4, t8]
  t10 <- b6709[1, t4, t0, t1, t2, t3, t8, t7]
  b6815[1, t5]

-----------------------------------------
-- not recursive
b6961 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6961[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t1, t0))
  t7 <- add((t6, -1))
  t8 <- primUle((t7, 0))
  if t8
    then b6388[t7, t4, t3, t2, t1, t5]
    else b4025[t4, t3, t2, t1, t5]

-----------------------------------------
-- not recursive
b6960 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6960[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t2, t1))
  t7 <- add((t6, -1))
  t8 <- b6180[t7, 0, t2, t3, t0, t4]
  b6815[1, t5]

-----------------------------------------
-- not recursive
b6985 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6985[t0, t1, t2, t3] =
  t4 <- load32((objects))
  t5 <- add((objects, 4))
  t6 <- load32((t5))
  t7 <- add((objects, 16))
  t8 <- load32((t7))
  t9 <- add((t1, t4))
  t10 <- add((t9, -1))
  t11 <- primUle((t10, t2))
  if t11
    then b6960[t10, t6, t0, t8, t1, t3]
    else b6961[t6, t0, t8, t2, t1, t3]

-----------------------------------------
-- not recursive
b6965 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6965[t0, t1, t2, t3, t4] =
  t5 <- primUle((t0, t1))
  if t5
    then b6985[t0, t2, t3, t4]
    else b6813[1, 0, 20, t4]

-----------------------------------------
-- not recursive
b4031 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4031[t0, t1, t2, t3, t4, t5] =
  t6 <- add((console, 1))
  t7 <- load8((t6))
  t8 <- load8((console))
  t9 <- b6700[t7, t0, 79, t1, t2, t4, t8]
  t10 <- b6709[1, t4, t3, t0, t1, t2, t8, t7]
  b6815[1, t5]

-----------------------------------------
-- not recursive
b6963 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6963[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, t0))
  t8 <- add((t7, -1))
  t9 <- primUle((t8, t5))
  if t9
    then b6388[t8, t4, t3, t2, t1, t6]
    else b4031[t4, t3, t2, t5, t1, t6]

-----------------------------------------
-- not recursive
b6962 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6962[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t2, t1))
  t8 <- add((t7, -1))
  t9 <- b6201[t8, t5, t2, t3, t0, t4]
  b6815[1, t6]

-----------------------------------------
-- not recursive
b6986 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6986[t0, t1, t2, t3, t4] =
  t5 <- load32((objects))
  t6 <- add((objects, 4))
  t7 <- load32((t6))
  t8 <- add((objects, 16))
  t9 <- load32((t8))
  t10 <- add((t1, t5))
  t11 <- add((t10, -1))
  t12 <- primUle((t11, t2))
  if t12
    then b6962[t11, t7, t0, t9, t1, t3, t4]
    else b6963[t7, t0, t9, t2, t1, t3, t4]

-----------------------------------------
-- not recursive
b6964 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6964[t0, t1, t2, t3, t4] =
  t5 <- primUle((t0, t1))
  if t5
    then b6986[t0, t2, t3, t1, t4]
    else b6813[1, 0, 20, t4]

-----------------------------------------
-- not recursive
b6846 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6846[t0, t1, t2] =
  t3 <- add((objects, 12))
  t4 <- load32((t3))
  t5 <- load8((console))
  t6 <- add((console, 2))
  t7 <- load8((t6))
  t8 <- sub((t7, t5))
  t9 <- primUle((t8, 24))
  if t9
    then b6964[t4, t8, t0, t1, t2]
    else b6965[t4, 0, t0, t1, t2]

-----------------------------------------
-- not recursive
b4711 :: [Bit 32, Bit 32] >>= [Unit]
b4711[t0, t1] =
  t2 <- b5219[]
  t3 <- primUle((t0, t2))
  if t3
    then b6846[t0, t2, t1]
    else b6813[1, 0, 20, t1]

-----------------------------------------
-- not recursive
b6426 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6426[t0, t1, t2] =
  t3 <- primUle((t0, t1))
  if t3
    then b6846[t0, t1, t2]
    else b6813[1, 0, 20, t2]

-----------------------------------------
-- not recursive
b4710 :: [Bit 32] >>= [Unit]
b4710[t0] =
  t1 <- add((objects, 8))
  t2 <- load32((t1))
  t3 <- add((console, 1))
  t4 <- load8((t3))
  t5 <- add((console, 3))
  t6 <- load8((t5))
  t7 <- sub((t6, t4))
  t8 <- primUle((t7, 79))
  if t8
    then b6426[t2, t7, t0]
    else b4711[t2, t0]

-----------------------------------------
-- not recursive
b3990 :: [Bit 32] >>= [Unit]
b3990[t0] =
  t1 <- add((objects, 20))
  t2 <- load32((t1))
  t3 <- and((t2, 16))
  t4 <- primNeq((t3, 0))
  if t4
    then b4710[t0]
    else b6813[1, 0, 20, t0]

-----------------------------------------
-- recursive
b4041 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4041[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, t1))
  t7 <- primUgt((t6, t2))
  if t7
    then b3924[t3, t4, t5]
    else b6847[1, t4, 20, t5]
b4040 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4040[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t3, t0))
  t8 <- primUlt((t1, t7))
  if t8
    then b4041[t1, t2, t3, t4, t5, t6]
    else b6847[1, t5, 20, t6]
b4039 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4039[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, t1))
  t11 <- primUgt((t10, t2))
  if t11
    then b4040[t3, t4, t5, t6, t7, t8, t9]
    else b6847[1, t8, 20, t9]
b4038 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4038[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 8))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((ball, 12))
  t10 <- load32((t9))
  t11 <- load32((t0))
  t12 <- add((t0, 4))
  t13 <- load32((t12))
  t14 <- load32((ball))
  t15 <- add((ball, 4))
  t16 <- load32((t15))
  t17 <- add((t6, t14))
  t18 <- primUlt((t4, t17))
  if t18
    then b4039[t4, t11, t6, t16, t8, t13, t10, t0, t1, t2]
    else b6847[1, t1, 20, t2]
b4036 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4036[t0, t1, t2] =
  t3 <- primEq((t0, ball))
  if t3
    then b6847[1, t1, 20, t2]
    else b4038[t0, t1, t2]
b4035 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4035[t0, t1, t2, t3] =
  t4 <- and((t0, 1))
  t5 <- primNeq((t4, 0))
  if t5
    then b4036[t1, t2, t3]
    else b6847[1, t2, 20, t3]
b6849 :: [Bit 32, Bit 32] >>= [Unit]
b6849[t0, t1] =
  t2 <- mul((t0, 24))
  t3 <- add((objects, t2))
  t4 <- add((t3, 20))
  t5 <- load32((t4))
  t6 <- and((t5, 16))
  t7 <- primNeq((t6, 0))
  if t7
    then b4035[t5, t3, t0, t1]
    else b6847[1, t0, 20, t1]
b6847 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6847[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6849[t4, t3]
    else b3990[t3]

-----------------------------------------
-- not recursive
b4724 :: [Bit 32] >>= [Unit]
b4724[t0] =
  t1 <- add((objects, 20))
  t2 <- load32((t1))
  t3 <- and((t2, -17))
  t4 <- store32((t1, t3))
  t5 <- load32((bricksLeft))
  t6 <- add((t5, -1))
  t7 <- store32((bricksLeft, t6))
  b6849[1, t0]

-----------------------------------------
-- not recursive
b4723 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4723[t0, t1, t2, t3] =
  t4 <- add((t0, t1))
  t5 <- primUgt((t4, t2))
  if t5
    then b4724[t3]
    else b6847[1, 0, 20, t3]

-----------------------------------------
-- not recursive
b4722 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4722[t0, t1, t2, t3, t4] =
  t5 <- add((t3, t0))
  t6 <- primUlt((t1, t5))
  if t6
    then b4723[t1, t2, t3, t4]
    else b6847[1, 0, 20, t4]

-----------------------------------------
-- not recursive
b4721 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4721[t0, t1, t2, t3, t4, t5, t6, t7] =
  t8 <- add((t0, t1))
  t9 <- primUgt((t8, t2))
  if t9
    then b4722[t3, t4, t5, t6, t7]
    else b6847[1, 0, 20, t7]

-----------------------------------------
-- not recursive
b4720 :: [Bit 32] >>= [Unit]
b4720[t0] =
  t1 <- add((objects, 8))
  t2 <- load32((t1))
  t3 <- add((ball, 8))
  t4 <- load32((t3))
  t5 <- add((objects, 12))
  t6 <- load32((t5))
  t7 <- add((ball, 12))
  t8 <- load32((t7))
  t9 <- load32((objects))
  t10 <- add((objects, 4))
  t11 <- load32((t10))
  t12 <- load32((ball))
  t13 <- add((ball, 4))
  t14 <- load32((t13))
  t15 <- add((t4, t12))
  t16 <- primUlt((t2, t15))
  if t16
    then b4721[t2, t9, t4, t14, t6, t11, t8, t0]
    else b6847[1, 0, 20, t0]

-----------------------------------------
-- not recursive
b4719 :: [Bit 32] >>= [Unit]
b4719[t0] =
  t1 <- primEq((objects, ball))
  if t1
    then b6847[1, 0, 20, t0]
    else b4720[t0]

-----------------------------------------
-- not recursive
b4718 :: [Bit 32, Bit 32] >>= [Unit]
b4718[t0, t1] =
  t2 <- and((t0, 1))
  t3 <- primNeq((t2, 0))
  if t3
    then b4719[t1]
    else b6847[1, 0, 20, t1]

-----------------------------------------
-- not recursive
b3933 :: [Bit 32] >>= [Unit]
b3933[t0] =
  t1 <- add((objects, 20))
  t2 <- load32((t1))
  t3 <- and((t2, 16))
  t4 <- primNeq((t3, 0))
  if t4
    then b4718[t2, t0]
    else b6847[1, 0, 20, t0]

-----------------------------------------
-- not recursive
b6857 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6857[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6810[t5, t3, t4]
    else b3933[t4]

-----------------------------------------
-- not recursive
b3960 :: [Bit 32, Bit 32] >>= [Unit]
b3960[t0, t1] =
  t2 <- store1((headingLeft, flag1))
  t3 <- b3311[t0, 1]
  b3124[t1]

-----------------------------------------
-- not recursive
b3956 :: [Bit 32, Bit 32] >>= [Unit]
b3956[t0, t1] =
  t2 <- store1((headingTop, flag1))
  t3 <- b3311[t0, 1]
  b3124[t1]

-----------------------------------------
-- not recursive
b3959 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3959[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3956[t2, t3]
    else b3960[t2, t3]

-----------------------------------------
-- not recursive
b4731 :: [Bit 32, Bit 32] >>= [Unit]
b4731[t0, t1] =
  t2 <- add((ball, 4))
  t3 <- load32((t2))
  t4 <- add((objects, 4))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((t0, t3))
  t9 <- add((t7, t5))
  t10 <- primUle((t0, t7))
  if t10
    then b3956[t0, t1]
    else b3959[t8, t9, t0, t1]

-----------------------------------------
-- not recursive
b4730 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4730[t0, t1, t2, t3, t4] =
  t5 <- add((t0, t1))
  t6 <- primUgt((t5, t2))
  if t6
    then b4731[t3, t4]
    else b6857[1, 0, 20, t3, t4]

-----------------------------------------
-- not recursive
b4729 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4729[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b4730[t1, t2, t3, t4, t5]
    else b6808[1, 0, 20, t4, t5]

-----------------------------------------
-- not recursive
b4728 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4728[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b4729[t3, t4, t5, t6, t7, t8]
    else b6808[1, 0, 20, t7, t8]

-----------------------------------------
-- not recursive
b4727 :: [Bit 32, Bit 32] >>= [Unit]
b4727[t0, t1] =
  t2 <- add((objects, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((objects))
  t11 <- add((objects, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b4728[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6808[1, 0, 20, t0, t1]

-----------------------------------------
-- not recursive
b4726 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4726[t0, t1, t2] =
  t3 <- and((t0, 2))
  t4 <- primNeq((t3, 0))
  if t4
    then b4727[t1, t2]
    else b6808[1, 0, 20, t1, t2]

-----------------------------------------
-- not recursive
b4725 :: [Bit 32, Bit 32] >>= [Unit]
b4725[t0, t1] =
  t2 <- add((objects, 20))
  t3 <- load32((t2))
  t4 <- and((t3, 16))
  t5 <- primNeq((t4, 0))
  if t5
    then b4726[t3, t0, t1]
    else b6808[1, 0, 20, t0, t1]

-----------------------------------------
-- not recursive
b3369 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3369[t0, t1, t2] =
  t3 <- add((t0, 1))
  t4 <- add((ball, 8))
  t5 <- store32((t4, t1))
  t6 <- add((ball, 12))
  t7 <- store32((t6, t3))
  t8 <- primEq((objects, ball))
  if t8
    then b6808[1, 0, 20, t0, t2]
    else b4725[t0, t2]

-----------------------------------------
-- recursive
b6866 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6866[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b3292[t3, t4]
    else b2208[]
b3528 :: [Bit 32, Bit 32] >>= [Unit]
b3528[t0, t1] =
  t2 <- store1((headingLeft, flag1))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 20))
  if t4
    then b3292[t0, t3]
    else b2208[]
b3527 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3527[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3526[t2, t3]
    else b3528[t2, t3]
b3530 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3530[t0, t1, t2] =
  t3 <- add((t1, 20))
  t4 <- load32((t3))
  t5 <- and((t4, 16))
  t6 <- primNeq((t5, 0))
  if t6
    then b3667[t4, t0, t1, t2]
    else b6866[1, t2, 20, t0]
b3667 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3667[t0, t1, t2, t3] =
  t4 <- and((t0, 2))
  t5 <- primNeq((t4, 0))
  if t5
    then b3714[t2, t1, t3]
    else b6866[1, t3, 20, t1]
b3714 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3714[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 8))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((ball, 12))
  t10 <- load32((t9))
  t11 <- load32((t0))
  t12 <- add((t0, 4))
  t13 <- load32((t12))
  t14 <- load32((ball))
  t15 <- add((ball, 4))
  t16 <- load32((t15))
  t17 <- add((t6, t14))
  t18 <- primUlt((t4, t17))
  if t18
    then b3729[t4, t11, t6, t16, t8, t13, t10, t1, t0, t2]
    else b6866[1, t2, 20, t1]
b3729 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3729[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, t1))
  t11 <- primUgt((t10, t2))
  if t11
    then b3742[t3, t4, t5, t6, t7, t8, t9]
    else b6866[1, t9, 20, t7]
b3742 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3742[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t3, t0))
  t8 <- primUlt((t1, t7))
  if t8
    then b3750[t1, t2, t3, t4, t5, t6]
    else b6866[1, t6, 20, t4]
b3750 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3750[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, t1))
  t7 <- primUgt((t6, t2))
  if t7
    then b3756[t4, t3, t5]
    else b6866[1, t5, 20, t3]
b3756 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3756[t0, t1, t2] =
  t3 <- add((ball, 4))
  t4 <- load32((t3))
  t5 <- add((t0, 4))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((t1, t4))
  t10 <- add((t8, t6))
  t11 <- primUle((t1, t8))
  if t11
    then b3526[t1, t2]
    else b3527[t9, t10, t1, t2]
b3526 :: [Bit 32, Bit 32] >>= [Unit]
b3526[t0, t1] =
  t2 <- store1((headingTop, flag0))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 20))
  if t4
    then b3292[t0, t3]
    else b2208[]
b3292 :: [Bit 32, Bit 32] >>= [Unit]
b3292[t0, t1] =
  t2 <- mul((t1, 24))
  t3 <- add((objects, t2))
  t4 <- primEq((t3, ball))
  if t4
    then b6866[1, t1, 20, t0]
    else b3530[t0, t3, t1]

-----------------------------------------
-- not recursive
b6872 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6872[t0, t1, t2] =
  t3 <- b3292[t1, t0]
  b3124[t2]

-----------------------------------------
-- not recursive
b6870 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6870[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6872[t5, t3, t4]
    else b3339[t4]

-----------------------------------------
-- not recursive
b6874 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6874[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6872[t5, t3, t4]
    else b3933[t4]

-----------------------------------------
-- not recursive
b3952 :: [Bit 32, Bit 32] >>= [Unit]
b3952[t0, t1] =
  t2 <- store1((headingLeft, flag1))
  t3 <- b3292[t0, 1]
  b3124[t1]

-----------------------------------------
-- not recursive
b3948 :: [Bit 32, Bit 32] >>= [Unit]
b3948[t0, t1] =
  t2 <- store1((headingTop, flag0))
  t3 <- b3292[t0, 1]
  b3124[t1]

-----------------------------------------
-- not recursive
b3951 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3951[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3948[t2, t3]
    else b3952[t2, t3]

-----------------------------------------
-- not recursive
b4738 :: [Bit 32, Bit 32] >>= [Unit]
b4738[t0, t1] =
  t2 <- add((ball, 4))
  t3 <- load32((t2))
  t4 <- add((objects, 4))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((t0, t3))
  t9 <- add((t7, t5))
  t10 <- primUle((t0, t7))
  if t10
    then b3948[t0, t1]
    else b3951[t8, t9, t0, t1]

-----------------------------------------
-- not recursive
b4737 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4737[t0, t1, t2, t3, t4] =
  t5 <- add((t0, t1))
  t6 <- primUgt((t5, t2))
  if t6
    then b4738[t3, t4]
    else b6874[1, 0, 20, t3, t4]

-----------------------------------------
-- not recursive
b4736 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4736[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b4737[t1, t2, t3, t4, t5]
    else b6870[1, 0, 20, t4, t5]

-----------------------------------------
-- not recursive
b4735 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4735[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b4736[t3, t4, t5, t6, t7, t8]
    else b6870[1, 0, 20, t7, t8]

-----------------------------------------
-- not recursive
b4734 :: [Bit 32, Bit 32] >>= [Unit]
b4734[t0, t1] =
  t2 <- add((objects, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((objects))
  t11 <- add((objects, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b4735[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6870[1, 0, 20, t0, t1]

-----------------------------------------
-- not recursive
b4733 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4733[t0, t1, t2] =
  t3 <- and((t0, 2))
  t4 <- primNeq((t3, 0))
  if t4
    then b4734[t1, t2]
    else b6870[1, 0, 20, t1, t2]

-----------------------------------------
-- not recursive
b4732 :: [Bit 32, Bit 32] >>= [Unit]
b4732[t0, t1] =
  t2 <- add((objects, 20))
  t3 <- load32((t2))
  t4 <- and((t3, 16))
  t5 <- primNeq((t4, 0))
  if t5
    then b4733[t3, t0, t1]
    else b6870[1, 0, 20, t0, t1]

-----------------------------------------
-- not recursive
b3359 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3359[t0, t1, t2] =
  t3 <- add((t0, -1))
  t4 <- add((ball, 8))
  t5 <- store32((t4, t1))
  t6 <- add((ball, 12))
  t7 <- store32((t6, t3))
  t8 <- primEq((objects, ball))
  if t8
    then b6870[1, 0, 20, t0, t2]
    else b4732[t0, t2]

-----------------------------------------
-- not recursive
b3358 :: [Bit 32, Bit 32, Bit 1, Bit 32] >>= [Unit]
b3358[t0, t1, t2, t3] =
  t4 <- add((t0, 1))
  if t2
    then b3359[t1, t4, t3]
    else b3369[t1, t4, t3]

-----------------------------------------
-- recursive
b6883 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6883[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b3273[t3, t4]
    else b2208[]
b3519 :: [Bit 32, Bit 32] >>= [Unit]
b3519[t0, t1] =
  t2 <- store1((headingLeft, flag0))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 20))
  if t4
    then b3273[t0, t3]
    else b2208[]
b3518 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3518[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3517[t2, t3]
    else b3519[t2, t3]
b3521 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3521[t0, t1, t2] =
  t3 <- add((t1, 20))
  t4 <- load32((t3))
  t5 <- and((t4, 16))
  t6 <- primNeq((t5, 0))
  if t6
    then b3665[t4, t0, t1, t2]
    else b6883[1, t2, 20, t0]
b3665 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3665[t0, t1, t2, t3] =
  t4 <- and((t0, 2))
  t5 <- primNeq((t4, 0))
  if t5
    then b3712[t2, t1, t3]
    else b6883[1, t3, 20, t1]
b3712 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3712[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 8))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((ball, 12))
  t10 <- load32((t9))
  t11 <- load32((t0))
  t12 <- add((t0, 4))
  t13 <- load32((t12))
  t14 <- load32((ball))
  t15 <- add((ball, 4))
  t16 <- load32((t15))
  t17 <- add((t6, t14))
  t18 <- primUlt((t4, t17))
  if t18
    then b3727[t4, t11, t6, t16, t8, t13, t10, t1, t0, t2]
    else b6883[1, t2, 20, t1]
b3727 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3727[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, t1))
  t11 <- primUgt((t10, t2))
  if t11
    then b3740[t3, t4, t5, t6, t7, t8, t9]
    else b6883[1, t9, 20, t7]
b3740 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3740[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t3, t0))
  t8 <- primUlt((t1, t7))
  if t8
    then b3748[t1, t2, t3, t4, t5, t6]
    else b6883[1, t6, 20, t4]
b3748 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3748[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, t1))
  t7 <- primUgt((t6, t2))
  if t7
    then b3755[t4, t3, t5]
    else b6883[1, t5, 20, t3]
b3755 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3755[t0, t1, t2] =
  t3 <- add((ball, 4))
  t4 <- load32((t3))
  t5 <- add((t0, 4))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((t1, t4))
  t10 <- add((t8, t6))
  t11 <- primUle((t1, t8))
  if t11
    then b3517[t1, t2]
    else b3518[t9, t10, t1, t2]
b3517 :: [Bit 32, Bit 32] >>= [Unit]
b3517[t0, t1] =
  t2 <- store1((headingTop, flag1))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 20))
  if t4
    then b3273[t0, t3]
    else b2208[]
b3273 :: [Bit 32, Bit 32] >>= [Unit]
b3273[t0, t1] =
  t2 <- mul((t1, 24))
  t3 <- add((objects, t2))
  t4 <- primEq((t3, ball))
  if t4
    then b6883[1, t1, 20, t0]
    else b3521[t0, t3, t1]

-----------------------------------------
-- not recursive
b6889 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6889[t0, t1, t2] =
  t3 <- b3273[t1, t0]
  b3124[t2]

-----------------------------------------
-- not recursive
b6887 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6887[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6889[t5, t3, t4]
    else b3339[t4]

-----------------------------------------
-- not recursive
b6891 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6891[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6889[t5, t3, t4]
    else b3933[t4]

-----------------------------------------
-- not recursive
b3944 :: [Bit 32, Bit 32] >>= [Unit]
b3944[t0, t1] =
  t2 <- store1((headingLeft, flag0))
  t3 <- b3273[t0, 1]
  b3124[t1]

-----------------------------------------
-- not recursive
b3940 :: [Bit 32, Bit 32] >>= [Unit]
b3940[t0, t1] =
  t2 <- store1((headingTop, flag1))
  t3 <- b3273[t0, 1]
  b3124[t1]

-----------------------------------------
-- not recursive
b3943 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3943[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3940[t2, t3]
    else b3944[t2, t3]

-----------------------------------------
-- not recursive
b4745 :: [Bit 32, Bit 32] >>= [Unit]
b4745[t0, t1] =
  t2 <- add((ball, 4))
  t3 <- load32((t2))
  t4 <- add((objects, 4))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((t0, t3))
  t9 <- add((t7, t5))
  t10 <- primUle((t0, t7))
  if t10
    then b3940[t0, t1]
    else b3943[t8, t9, t0, t1]

-----------------------------------------
-- not recursive
b4744 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4744[t0, t1, t2, t3, t4] =
  t5 <- add((t0, t1))
  t6 <- primUgt((t5, t2))
  if t6
    then b4745[t3, t4]
    else b6891[1, 0, 20, t3, t4]

-----------------------------------------
-- not recursive
b4743 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4743[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b4744[t1, t2, t3, t4, t5]
    else b6887[1, 0, 20, t4, t5]

-----------------------------------------
-- not recursive
b4742 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4742[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b4743[t3, t4, t5, t6, t7, t8]
    else b6887[1, 0, 20, t7, t8]

-----------------------------------------
-- not recursive
b4741 :: [Bit 32, Bit 32] >>= [Unit]
b4741[t0, t1] =
  t2 <- add((objects, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((objects))
  t11 <- add((objects, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b4742[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6887[1, 0, 20, t0, t1]

-----------------------------------------
-- not recursive
b4740 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4740[t0, t1, t2] =
  t3 <- and((t0, 2))
  t4 <- primNeq((t3, 0))
  if t4
    then b4741[t1, t2]
    else b6887[1, 0, 20, t1, t2]

-----------------------------------------
-- not recursive
b4739 :: [Bit 32, Bit 32] >>= [Unit]
b4739[t0, t1] =
  t2 <- add((objects, 20))
  t3 <- load32((t2))
  t4 <- and((t3, 16))
  t5 <- primNeq((t4, 0))
  if t5
    then b4740[t3, t0, t1]
    else b6887[1, 0, 20, t0, t1]

-----------------------------------------
-- not recursive
b3348 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3348[t0, t1, t2] =
  t3 <- add((t0, 1))
  t4 <- add((ball, 8))
  t5 <- store32((t4, t1))
  t6 <- add((ball, 12))
  t7 <- store32((t6, t3))
  t8 <- primEq((objects, ball))
  if t8
    then b6887[1, 0, 20, t0, t2]
    else b4739[t0, t2]

-----------------------------------------
-- recursive
b6900 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6900[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b3254[t3, t4]
    else b2208[]
b3510 :: [Bit 32, Bit 32] >>= [Unit]
b3510[t0, t1] =
  t2 <- store1((headingLeft, flag0))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 20))
  if t4
    then b3254[t0, t3]
    else b2208[]
b3509 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3509[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3508[t2, t3]
    else b3510[t2, t3]
b3512 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3512[t0, t1, t2] =
  t3 <- add((t1, 20))
  t4 <- load32((t3))
  t5 <- and((t4, 16))
  t6 <- primNeq((t5, 0))
  if t6
    then b3663[t4, t0, t1, t2]
    else b6900[1, t2, 20, t0]
b3663 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3663[t0, t1, t2, t3] =
  t4 <- and((t0, 2))
  t5 <- primNeq((t4, 0))
  if t5
    then b3710[t2, t1, t3]
    else b6900[1, t3, 20, t1]
b3710 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3710[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 8))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((ball, 12))
  t10 <- load32((t9))
  t11 <- load32((t0))
  t12 <- add((t0, 4))
  t13 <- load32((t12))
  t14 <- load32((ball))
  t15 <- add((ball, 4))
  t16 <- load32((t15))
  t17 <- add((t6, t14))
  t18 <- primUlt((t4, t17))
  if t18
    then b3725[t4, t11, t6, t16, t8, t13, t10, t1, t0, t2]
    else b6900[1, t2, 20, t1]
b3725 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3725[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9] =
  t10 <- add((t0, t1))
  t11 <- primUgt((t10, t2))
  if t11
    then b3738[t3, t4, t5, t6, t7, t8, t9]
    else b6900[1, t9, 20, t7]
b3738 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3738[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t3, t0))
  t8 <- primUlt((t1, t7))
  if t8
    then b3746[t1, t2, t3, t4, t5, t6]
    else b6900[1, t6, 20, t4]
b3746 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3746[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t0, t1))
  t7 <- primUgt((t6, t2))
  if t7
    then b3754[t4, t3, t5]
    else b6900[1, t5, 20, t3]
b3754 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3754[t0, t1, t2] =
  t3 <- add((ball, 4))
  t4 <- load32((t3))
  t5 <- add((t0, 4))
  t6 <- load32((t5))
  t7 <- add((t0, 12))
  t8 <- load32((t7))
  t9 <- add((t1, t4))
  t10 <- add((t8, t6))
  t11 <- primUle((t1, t8))
  if t11
    then b3508[t1, t2]
    else b3509[t9, t10, t1, t2]
b3508 :: [Bit 32, Bit 32] >>= [Unit]
b3508[t0, t1] =
  t2 <- store1((headingTop, flag0))
  t3 <- add((t1, 1))
  t4 <- primUle((t3, 20))
  if t4
    then b3254[t0, t3]
    else b2208[]
b3254 :: [Bit 32, Bit 32] >>= [Unit]
b3254[t0, t1] =
  t2 <- mul((t1, 24))
  t3 <- add((objects, t2))
  t4 <- primEq((t3, ball))
  if t4
    then b6900[1, t1, 20, t0]
    else b3512[t0, t3, t1]

-----------------------------------------
-- not recursive
b6906 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6906[t0, t1, t2] =
  t3 <- b3254[t1, t0]
  b3124[t2]

-----------------------------------------
-- not recursive
b6904 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6904[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6906[t5, t3, t4]
    else b3339[t4]

-----------------------------------------
-- not recursive
b6908 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6908[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6906[t5, t3, t4]
    else b3933[t4]

-----------------------------------------
-- not recursive
b3936 :: [Bit 32, Bit 32] >>= [Unit]
b3936[t0, t1] =
  t2 <- store1((headingLeft, flag0))
  t3 <- b3254[t0, 1]
  b3124[t1]

-----------------------------------------
-- not recursive
b3932 :: [Bit 32, Bit 32] >>= [Unit]
b3932[t0, t1] =
  t2 <- store1((headingTop, flag0))
  t3 <- b3254[t0, 1]
  b3124[t1]

-----------------------------------------
-- not recursive
b3935 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b3935[t0, t1, t2, t3] =
  t4 <- primUge((t0, t1))
  if t4
    then b3932[t2, t3]
    else b3936[t2, t3]

-----------------------------------------
-- not recursive
b4752 :: [Bit 32, Bit 32] >>= [Unit]
b4752[t0, t1] =
  t2 <- add((ball, 4))
  t3 <- load32((t2))
  t4 <- add((objects, 4))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((t0, t3))
  t9 <- add((t7, t5))
  t10 <- primUle((t0, t7))
  if t10
    then b3932[t0, t1]
    else b3935[t8, t9, t0, t1]

-----------------------------------------
-- not recursive
b4751 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4751[t0, t1, t2, t3, t4] =
  t5 <- add((t0, t1))
  t6 <- primUgt((t5, t2))
  if t6
    then b4752[t3, t4]
    else b6908[1, 0, 20, t3, t4]

-----------------------------------------
-- not recursive
b4750 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4750[t0, t1, t2, t3, t4, t5] =
  t6 <- add((t3, t0))
  t7 <- primUlt((t1, t6))
  if t7
    then b4751[t1, t2, t3, t4, t5]
    else b6904[1, 0, 20, t4, t5]

-----------------------------------------
-- not recursive
b4749 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4749[t0, t1, t2, t3, t4, t5, t6, t7, t8] =
  t9 <- add((t0, t1))
  t10 <- primUgt((t9, t2))
  if t10
    then b4750[t3, t4, t5, t6, t7, t8]
    else b6904[1, 0, 20, t7, t8]

-----------------------------------------
-- not recursive
b4748 :: [Bit 32, Bit 32] >>= [Unit]
b4748[t0, t1] =
  t2 <- add((objects, 8))
  t3 <- load32((t2))
  t4 <- add((ball, 8))
  t5 <- load32((t4))
  t6 <- add((objects, 12))
  t7 <- load32((t6))
  t8 <- add((ball, 12))
  t9 <- load32((t8))
  t10 <- load32((objects))
  t11 <- add((objects, 4))
  t12 <- load32((t11))
  t13 <- load32((ball))
  t14 <- add((ball, 4))
  t15 <- load32((t14))
  t16 <- add((t5, t13))
  t17 <- primUlt((t3, t16))
  if t17
    then b4749[t3, t10, t5, t15, t7, t12, t9, t0, t1]
    else b6904[1, 0, 20, t0, t1]

-----------------------------------------
-- not recursive
b4747 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b4747[t0, t1, t2] =
  t3 <- and((t0, 2))
  t4 <- primNeq((t3, 0))
  if t4
    then b4748[t1, t2]
    else b6904[1, 0, 20, t1, t2]

-----------------------------------------
-- not recursive
b4746 :: [Bit 32, Bit 32] >>= [Unit]
b4746[t0, t1] =
  t2 <- add((objects, 20))
  t3 <- load32((t2))
  t4 <- and((t3, 16))
  t5 <- primNeq((t4, 0))
  if t5
    then b4747[t3, t0, t1]
    else b6904[1, 0, 20, t0, t1]

-----------------------------------------
-- not recursive
b3337 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3337[t0, t1, t2] =
  t3 <- add((t0, -1))
  t4 <- add((ball, 8))
  t5 <- store32((t4, t1))
  t6 <- add((ball, 12))
  t7 <- store32((t6, t3))
  t8 <- primEq((objects, ball))
  if t8
    then b6904[1, 0, 20, t0, t2]
    else b4746[t0, t2]

-----------------------------------------
-- not recursive
b3336 :: [Bit 32, Bit 32, Bit 1, Bit 32] >>= [Unit]
b3336[t0, t1, t2, t3] =
  t4 <- add((t0, -1))
  if t2
    then b3337[t1, t4, t3]
    else b3348[t1, t4, t3]

-----------------------------------------
-- not recursive
b3335 :: [Bit 32] >>= [Unit]
b3335[t0] =
  t1 <- load1((headingLeft))
  t2 <- load1((headingTop))
  t3 <- add((ball, 8))
  t4 <- load32((t3))
  t5 <- add((ball, 12))
  t6 <- load32((t5))
  if t1
    then b3336[t4, t6, t2, t0]
    else b3358[t4, t6, t2, t0]

-----------------------------------------
-- not recursive
b3672 :: [Bit 32] >>= [Unit]
b3672[t0] =
  t1 <- and((t0, 15))
  t2 <- primEq((t1, 0))
  if t2
    then b3335[t0]
    else b3339[t0]

-----------------------------------------
-- not recursive
b4070 :: [Bit 32] >>= [Unit]
b4070[t0] =
  t1 <- add((objects, 8))
  t2 <- load32((t1))
  t3 <- add((t2, -1))
  t4 <- store32((t1, t3))
  t5 <- and((t0, 15))
  t6 <- primEq((t5, 0))
  if t6
    then b3335[t0]
    else b3339[t0]

-----------------------------------------
-- not recursive
b3671 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3671[t0, t1, t2] =
  t3 <- primNeq((t0, t1))
  if t3
    then b4070[t2]
    else b3672[t2]

-----------------------------------------
-- not recursive
b3598 :: [Bit 32] >>= [Unit]
b3598[t0] =
  t1 <- load8((keyDown))
  t2 <- load8((keyUp))
  t3 <- primEq((52, t1))
  if t3
    then b3671[52, t2, t0]
    else b3672[t0]

-----------------------------------------
-- not recursive
b3681 :: [Bit 32] >>= [Unit]
b3681[t0] =
  t1 <- add((objects, 8))
  t2 <- load32((t1))
  t3 <- add((t2, 1))
  t4 <- store32((t1, t3))
  t5 <- load8((keyDown))
  t6 <- load8((keyUp))
  t7 <- primEq((52, t5))
  if t7
    then b3671[52, t6, t0]
    else b3672[t0]

-----------------------------------------
-- not recursive
b3597 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3597[t0, t1, t2] =
  t3 <- primNeq((t0, t1))
  if t3
    then b3681[t2]
    else b3598[t2]

-----------------------------------------
-- not recursive
b3380 :: [Bit 32] >>= [Unit]
b3380[t0] =
  t1 <- b1244[]
  t2 <- load8((keyDown))
  t3 <- load8((keyUp))
  t4 <- primEq((54, t2))
  if t4
    then b3597[54, t3, t0]
    else b3598[t0]

-----------------------------------------
-- not recursive
entrypoint timerInterrupt :: [] >>= [Unit]
timerInterrupt[] =
  t0 <- inb((33))
  t1 <- or((t0, 1))
  t2 <- outb((33, t1))
  t3 <- outb((32, 96))
  t4 <- inb((33))
  t5 <- and((t4, -2))
  t6 <- outb((33, t5))
  t7 <- load32((ticks))
  t8 <- add((t7, 1))
  t9 <- store32((ticks, t8))
  t10 <- load1((isPlaying))
  if t10
    then b3380[t7]
    else b3124[t7]

-----------------------------------------
-- not recursive
str57 :: Bit 32
str57 <- "Exception 0x"

-----------------------------------------
-- not recursive
itoaBuf :: Bit 32
itoaBuf <- area (Array 32 (Stored (Bit 8))) aligned 1

-----------------------------------------
-- not recursive
b1985 :: [Bit 32] >>= [Unit]
b1985[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  t3 <- b1602[t2, 0, 13]
  t4 <- add((console, 4))
  t5 <- load8((t4))
  t6 <- primEq((t0, 13))
  if t6
    then b1990[t5]
    else b1993[t0, 10, t5]

-----------------------------------------
-- not recursive
b1997 :: [Bit 32] >>= [Unit]
b1997[t0] =
  t1 <- inb((1021))
  t2 <- and((t1, 96))
  t3 <- b1602[t2, 0, t0]
  t4 <- primEq((t0, 10))
  if t4
    then b1985[t0]
    else b1988[t0]

-----------------------------------------
-- not recursive
b3433 :: [] >>= [Unit]
b3433[] =
  t0 <- load8((itoaBuf))
  t1 <- b1997[t0]
  return Unit

-----------------------------------------
-- recursive
b6633 :: [Bit 32, Bit 32] >>= [Unit]
b6633[t0, t1] =
  t2 <- b1997[t1]
  b6631[1, t0, 0, t1]
b6631 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6631[t0, t1, t2, t3] =
  t4 <- add((t1, t0))
  t5 <- primUle((t4, t2))
  if t5
    then b6633[t4, t3]
    else b303[]

-----------------------------------------
-- not recursive
b6640 :: [Bit 32, Bit 32] >>= [Unit]
b6640[t0, t1] =
  t2 <- b1997[t1]
  t3 <- b6631[1, t0, 0, t1]
  t4 <- load8((itoaBuf))
  t5 <- b1997[t4]
  return Unit

-----------------------------------------
-- not recursive
b6638 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6638[t0, t1, t2] =
  t3 <- add((t1, t0))
  t4 <- primUle((t3, t1))
  if t4
    then b6640[t3, t2]
    else b3433[]

-----------------------------------------
-- recursive
b3194 :: [Bit 32] >>= [Unit]
b3194[t0] =
  t1 <- add((itoaBuf, t0))
  t2 <- load8((t1))
  t3 <- b1997[t2]
  t4 <- add((t0, -1))
  t5 <- primSle((0, t4))
  if t5
    then b3194[t4]
    else b303[]

-----------------------------------------
-- not recursive
b3197 :: [Bit 32, Bit 32] >>= [Unit]
b3197[t0, t1] =
  t2 <- b6631[1, t1, 0, t0]
  b3194[t1]

-----------------------------------------
-- recursive
b6644 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6644[t0, t1, t2, t3] =
  t4 <- lshr((t1, 4))
  t5 <- primEq((t4, 0))
  if t5
    then b3197[t3, t2]
    else b3196[t4, t0, t3]
b3196 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3196[t0, t1, t2] =
  t3 <- add((itoaBuf, t1))
  t4 <- and((t0, 15))
  t5 <- b1638[t4, 9]
  t6 <- store8((t3, t5))
  t7 <- add((t1, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b6644[t7, t0, t1, t2]
    else b3197[t2, t1]

-----------------------------------------
-- not recursive
b6649 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6649[t0, t1, t2] =
  t3 <- lshr((t1, 4))
  t4 <- primEq((t3, 0))
  if t4
    then b6638[1, 0, t2]
    else b3196[t3, t0, t2]

-----------------------------------------
-- not recursive
b6647 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6647[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6649[t5, t3, t4]
    else b6638[1, 0, t4]

-----------------------------------------
-- not recursive
str58 :: Bit 32
str58 <- ", frame=0x"

-----------------------------------------
-- not recursive
str59 :: Bit 32
str59 <- "\n"

-----------------------------------------
-- recursive
b6165 :: [Bit 32, Bit 32] >>= [Unit]
b6165[t0, t1] =
  t2 <- b1988[t0]
  b5141[t1]
b6164 :: [Bit 32, Bit 32] >>= [Unit]
b6164[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, 13]
  t5 <- b1988[t0]
  b5141[t1]
b5141 :: [Bit 32] >>= [Unit]
b5141[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b303[]
    else b5143[t1, t0]
b5143 :: [Bit 32, Bit 32] >>= [Unit]
b5143[t0, t1] =
  t2 <- add((t1, 1))
  b5150[t0, t2]
b5150 :: [Bit 32, Bit 32] >>= [Unit]
b5150[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b6164[t0, t1]
    else b6165[t0, t1]

-----------------------------------------
-- not recursive
b5153 :: [Bit 32] >>= [Unit]
b5153[t0] =
  t1 <- add((str59, 1))
  b5150[t0, t1]

-----------------------------------------
-- not recursive
b1838 :: [Bit 32] >>= [Unit]
b1838[t0] =
  t1 <- and((t0, 15))
  t2 <- b1638[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6647[1, 0, 31, t0, 32]
  t5 <- load8((str59))
  t6 <- primEq((t5, 0))
  if t6
    then b303[]
    else b5153[t5]

-----------------------------------------
-- recursive
b5163 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5163[t0, t1, t2] =
  t3 <- b1988[t0]
  b5154[t1, t2]
b5161 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5161[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5154[t1, t2]
b5154 :: [Bit 32, Bit 32] >>= [Unit]
b5154[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1838[t1]
    else b5156[t2, t0, t1]
b5156 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5156[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5158[t0, t3, t2]
b5158 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5158[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5161[t0, t1, t2]
    else b5163[t0, t1, t2]

-----------------------------------------
-- not recursive
b5166 :: [Bit 32, Bit 32] >>= [Unit]
b5166[t0, t1] =
  t2 <- add((str58, 1))
  b5158[t0, t2, t1]

-----------------------------------------
-- not recursive
b1842 :: [Bit 32, Bit 32] >>= [Unit]
b1842[t0, t1] =
  t2 <- and((t0, 15))
  t3 <- b1638[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b6647[1, 0, 31, t0, 32]
  t6 <- load8((str58))
  t7 <- primEq((t6, 0))
  if t7
    then b1838[t1]
    else b5166[t6, t1]

-----------------------------------------
-- recursive
b5176 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5176[t0, t1, t2, t3] =
  t4 <- b1988[t0]
  b5167[t1, t2, t3]
b5174 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5174[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, 13]
  t7 <- b1988[t0]
  b5167[t1, t2, t3]
b5167 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5167[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b1842[t2, t1]
    else b5169[t3, t0, t1, t2]
b5169 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5169[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5171[t0, t4, t3, t2]
b5171 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5171[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5174[t0, t1, t3, t2]
    else b5176[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b5179 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5179[t0, t1, t2] =
  t3 <- add((str57, 1))
  b5171[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
entrypoint unhandled :: [Bit 32, Bit 32] >>= [Unit]
unhandled[t0, t1] =
  t2 <- load8((str57))
  t3 <- primEq((t2, 0))
  if t3
    then b1842[t0, t1]
    else b5179[t2, t1, t0]

-----------------------------------------
-- not recursive
s299 :: Unit
s299 <-
  Unit()

-----------------------------------------
-- not recursive
b4096 :: [] >>= [Unit]
b4096[] =
  return s299

-----------------------------------------
-- not recursive
b4426 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b4426[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12] =
  t13 <- add((t12, t1))
  t14 <- store32((t13, t0))
  t15 <- add((t12, t3))
  t16 <- store32((t15, t2))
  t17 <- add((t12, t5))
  t18 <- store32((t17, t4))
  t19 <- add((t12, t7))
  t20 <- store32((t19, t6))
  t21 <- add((t12, t9))
  t22 <- store32((t21, t8))
  t23 <- add((t12, t11))
  store32((t23, t10))

-----------------------------------------
-- recursive
b7003 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b7003[t0, t1, t2, t3, t4] =
  t5 <- and((t0, 2))
  t6 <- primEq((t5, 2))
  if t6
    then b7002[192, t1, t2, t3, t4]
    else b7002[208, t1, t2, t3, t4]
b7000 :: [Bit 32, Bit 32] >>= [Unit]
b7000[t0, t1] =
  t2 <- add((t0, -6))
  t3 <- div((t2, 5))
  t4 <- nzrem((t2, 5))
  t5 <- shl((t4, 3))
  t6 <- add((t5, 3))
  t7 <- mul((t3, 3))
  t8 <- add((t7, 2))
  t9 <- and((t2, 1))
  t10 <- primEq((t9, 1))
  if t10
    then b7002[80, t8, t6, t1, t0]
    else b7003[t2, t8, t6, t1, t0]
b7002 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b7002[t0, t1, t2, t3, t4] =
  t5 <- b4426[6, 0, 1, 4, t2, 8, t1, 12, t0, 16, 19, 20, t3]
  b5107[t4, t3]
b6995 :: [Bit 32, Bit 32] >>= [Unit]
b6995[t0, t1] =
  t2 <- primEq((t0, 5))
  if t2
    then b6999[t1, t0]
    else b7000[t0, t1]
b6999 :: [Bit 32, Bit 32] >>= [Unit]
b6999[t0, t1] =
  t2 <- b4426[44, 0, 1, 4, 0, 8, 24, 12, 0, 16, 16, 20, t0]
  b5107[t1, t0]
b6987 :: [Bit 32, Bit 32] >>= [Unit]
b6987[t0, t1] =
  t2 <- primEq((t0, 4))
  if t2
    then b6966[44, 0, 1, 4, 0, 8, 0, 12, 112, 16, 20, t1, t0]
    else b6995[t0, t1]
b6967 :: [Bit 32, Bit 32] >>= [Unit]
b6967[t0, t1] =
  t2 <- primEq((t0, 3))
  if t2
    then b6966[1, 0, 25, 4, 44, 8, 0, 12, 112, 16, 20, t1, t0]
    else b6987[t0, t1]
b6918 :: [Bit 32, Bit 32] >>= [Unit]
b6918[t0, t1] =
  t2 <- primEq((t0, 2))
  if t2
    then b6966[1, 0, 25, 4, 0, 8, 0, 12, 112, 16, 20, t1, t0]
    else b6967[t0, t1]
b6966 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6966[t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12] =
  t13 <- add((t11, t1))
  t14 <- store32((t13, t0))
  t15 <- add((t11, t3))
  t16 <- store32((t15, t2))
  t17 <- add((t11, t5))
  t18 <- store32((t17, t4))
  t19 <- add((t11, t7))
  t20 <- store32((t19, t6))
  t21 <- add((t11, t9))
  t22 <- store32((t21, t8))
  t23 <- add((t11, t10))
  t24 <- store32((t23, 18))
  b5107[t12, t11]
b6432 :: [Bit 32, Bit 32] >>= [Unit]
b6432[t0, t1] =
  t2 <- primEq((t0, 1))
  if t2
    then b6917[t1, t0]
    else b6918[t0, t1]
b6917 :: [Bit 32, Bit 32] >>= [Unit]
b6917[t0, t1] =
  t2 <- b4426[1, 0, 1, 4, 18, 8, 20, 12, 224, 16, 26, 20, t0]
  b5107[t1, t0]
b6070 :: [Bit 32, Bit 32] >>= [Unit]
b6070[t0, t1] =
  t2 <- primEq((t0, 0))
  if t2
    then b6431[t1, t0]
    else b6432[t0, t1]
b6431 :: [Bit 32, Bit 32] >>= [Unit]
b6431[t0, t1] =
  t2 <- b4426[8, 0, 1, 4, 18, 8, 21, 12, 48, 16, 22, 20, t0]
  b5107[t1, t0]
b5107 :: [Bit 32, Bit 32] >>= [Unit]
b5107[t0, t1] =
  t2 <- add((t0, 1))
  t3 <- add((t1, 24))
  b4614[t3, t2]
b4614 :: [Bit 32, Bit 32] >>= [Unit]
b4614[t0, t1] =
  t2 <- primUlt((t1, 21))
  if t2
    then b6070[t1, t0]
    else b4096[]

-----------------------------------------
-- recursive
b4622 :: [Bit 32, Bit 32] >>= [Unit]
b4622[t0, t1] =
  t2 <- store8((t0, 0))
  t3 <- add((t1, 1))
  t4 <- add((t0, 1))
  b4621[t4, t3]
b4621 :: [Bit 32, Bit 32] >>= [Unit]
b4621[t0, t1] =
  t2 <- primUlt((t1, 32))
  if t2
    then b4622[t0, t1]
    else b4096[]

-----------------------------------------
-- not recursive
str47 :: Bit 32
str47 <- " Last key pressed:"

-----------------------------------------
-- not recursive
str11 :: Bit 32
str11 <- "Headers:\n"

-----------------------------------------
-- not recursive
str1 :: Bit 32
str1 <- " "

-----------------------------------------
-- not recursive
str12 :: Bit 32
str12 <- "header"

-----------------------------------------
-- not recursive
str2 :: Bit 32
str2 <- "["

-----------------------------------------
-- recursive
b6921 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6921[t0, t1, t2, t3] =
  t4 <- nzdiv((t1, 10))
  t5 <- primEq((t4, 0))
  if t5
    then b3197[t3, t2]
    else b3382[t4, t0, t3]
b3382 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b3382[t0, t1, t2] =
  t3 <- add((itoaBuf, t1))
  t4 <- nzrem((t0, 10))
  t5 <- b1638[t4, 9]
  t6 <- store8((t3, t5))
  t7 <- add((t1, 1))
  t8 <- primUle((t7, 31))
  if t8
    then b6921[t7, t0, t1, t2]
    else b3197[t2, t1]

-----------------------------------------
-- not recursive
b6929 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6929[t0, t1, t2] =
  t3 <- nzdiv((t1, 10))
  t4 <- primEq((t3, 0))
  if t4
    then b6638[1, 0, t2]
    else b3382[t3, t0, t2]

-----------------------------------------
-- not recursive
b6927 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6927[t0, t1, t2, t3, t4] =
  t5 <- add((t1, t0))
  t6 <- primUle((t5, t2))
  if t6
    then b6929[t5, t3, t4]
    else b6638[1, 0, t4]

-----------------------------------------
-- not recursive
str3 :: Bit 32
str3 <- "]: "

-----------------------------------------
-- not recursive
str5 :: Bit 32
str5 <- "[0x"

-----------------------------------------
-- not recursive
str6 :: Bit 32
str6 <- "-0x"

-----------------------------------------
-- not recursive
str7 :: Bit 32
str7 <- "], entry 0x"

-----------------------------------------
-- not recursive
b1918 :: [Bit 32] >>= [Unit]
b1918[t0] =
  t1 <- add((t0, 8))
  t2 <- load32((t1))
  t3 <- and((t2, 15))
  t4 <- b1638[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- lshr((t2, 4))
  t7 <- primEq((t6, 0))
  if t7
    then b6638[1, 0, 32]
    else b3196[t6, 1, 32]

-----------------------------------------
-- recursive
b5247 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5247[t0, t1, t2] =
  t3 <- b1988[t0]
  b5238[t1, t2]
b5245 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5245[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5238[t1, t2]
b5238 :: [Bit 32, Bit 32] >>= [Unit]
b5238[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1918[t1]
    else b5240[t2, t0, t1]
b5240 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5240[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5242[t0, t3, t2]
b5242 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5242[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5245[t0, t1, t2]
    else b5247[t0, t1, t2]

-----------------------------------------
-- not recursive
b5250 :: [Bit 32, Bit 32] >>= [Unit]
b5250[t0, t1] =
  t2 <- add((str7, 1))
  b5242[t0, t2, t1]

-----------------------------------------
-- not recursive
b1920 :: [Bit 32] >>= [Unit]
b1920[t0] =
  t1 <- add((t0, 4))
  t2 <- load32((t1))
  t3 <- and((t2, 15))
  t4 <- b1638[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- b6647[1, 0, 31, t2, 32]
  t7 <- load8((str7))
  t8 <- primEq((t7, 0))
  if t8
    then b1918[t0]
    else b5250[t7, t0]

-----------------------------------------
-- recursive
b5260 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5260[t0, t1, t2] =
  t3 <- b1988[t0]
  b5251[t1, t2]
b5258 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5258[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5251[t1, t2]
b5251 :: [Bit 32, Bit 32] >>= [Unit]
b5251[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1920[t1]
    else b5253[t2, t0, t1]
b5253 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5253[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5255[t0, t3, t2]
b5255 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5255[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5258[t0, t1, t2]
    else b5260[t0, t1, t2]

-----------------------------------------
-- not recursive
b5263 :: [Bit 32, Bit 32] >>= [Unit]
b5263[t0, t1] =
  t2 <- add((str6, 1))
  b5255[t0, t2, t1]

-----------------------------------------
-- not recursive
b1922 :: [Bit 32] >>= [Unit]
b1922[t0] =
  t1 <- load32((t0))
  t2 <- and((t1, 15))
  t3 <- b1638[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b6647[1, 0, 31, t1, 32]
  t6 <- load8((str6))
  t7 <- primEq((t6, 0))
  if t7
    then b1920[t0]
    else b5263[t6, t0]

-----------------------------------------
-- recursive
b5273 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5273[t0, t1, t2] =
  t3 <- b1988[t0]
  b5264[t1, t2]
b5271 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5271[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5264[t1, t2]
b5264 :: [Bit 32, Bit 32] >>= [Unit]
b5264[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1922[t1]
    else b5266[t2, t0, t1]
b5266 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5266[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5268[t0, t3, t2]
b5268 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5268[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5271[t0, t1, t2]
    else b5273[t0, t1, t2]

-----------------------------------------
-- not recursive
b5286 :: [Bit 32, Bit 32] >>= [Unit]
b5286[t0, t1] =
  t2 <- add((str5, 1))
  b5268[t0, t2, t1]

-----------------------------------------
-- not recursive
b5284 :: [Bit 32] >>= [Unit]
b5284[t0] =
  t1 <- load8((str5))
  t2 <- primEq((t1, 0))
  if t2
    then b1922[t0]
    else b5286[t1, t0]

-----------------------------------------
-- not recursive
str4 :: Bit 32
str4 <- "\n"

-----------------------------------------
-- not recursive
b1924 :: [Bit 32] >>= [Bit 32]
b1924[t0] =
  add((t0, 1))

-----------------------------------------
-- recursive
b5283 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5283[t0, t1, t2] =
  t3 <- b1988[t0]
  b5274[t1, t2]
b5281 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5281[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5274[t1, t2]
b5274 :: [Bit 32, Bit 32] >>= [Bit 32]
b5274[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1924[t1]
    else b5276[t2, t0, t1]
b5276 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5276[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5278[t0, t3, t2]
b5278 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5278[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5281[t0, t1, t2]
    else b5283[t0, t1, t2]

-----------------------------------------
-- not recursive
b5289 :: [Bit 32, Bit 32] >>= [Bit 32]
b5289[t0, t1] =
  t2 <- add((str4, 1))
  b5278[t0, t2, t1]

-----------------------------------------
-- not recursive
b2931 :: [Bit 32, Bit 32] >>= [Bit 32]
b2931[t0, t1] =
  t2 <- b5284[t0]
  t3 <- load8((str4))
  t4 <- primEq((t3, 0))
  if t4
    then b1924[t1]
    else b5289[t3, t1]

-----------------------------------------
-- recursive
b5299 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5299[t0, t1, t2, t3] =
  t4 <- b1988[t0]
  b5290[t1, t2, t3]
b5297 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5297[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, 13]
  t7 <- b1988[t0]
  b5290[t1, t2, t3]
b5290 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5290[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b2931[t2, t1]
    else b5292[t3, t0, t1, t2]
b5292 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5292[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5294[t0, t4, t3, t2]
b5294 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5294[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5297[t0, t1, t3, t2]
    else b5299[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b5302 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5302[t0, t1, t2] =
  t3 <- add((str3, 1))
  b5294[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b2930 :: [Bit 32, Bit 32] >>= [Bit 32]
b2930[t0, t1] =
  t2 <- nzrem((t0, 10))
  t3 <- b1638[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b6927[1, 0, 31, t0, 32]
  t6 <- load8((str3))
  t7 <- primEq((t6, 0))
  if t7
    then b2931[t1, t0]
    else b5302[t6, t0, t1]

-----------------------------------------
-- recursive
b5312 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5312[t0, t1, t2, t3] =
  t4 <- b1988[t0]
  b5303[t1, t2, t3]
b5310 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5310[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, 13]
  t7 <- b1988[t0]
  b5303[t1, t2, t3]
b5303 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5303[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b2930[t2, t1]
    else b5305[t3, t0, t1, t2]
b5305 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5305[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5307[t0, t4, t3, t2]
b5307 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5307[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5310[t0, t1, t3, t2]
    else b5312[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b5315 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5315[t0, t1, t2] =
  t3 <- add((str2, 1))
  b5307[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b5313 :: [Bit 32, Bit 32] >>= [Bit 32]
b5313[t0, t1] =
  t2 <- load8((str2))
  t3 <- primEq((t2, 0))
  if t3
    then b2930[t1, t0]
    else b5315[t2, t0, t1]

-----------------------------------------
-- recursive
b5318 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5318[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5320[t0, t4, t3, t2]
b5320 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5320[t0, t1, t2, t3] =
  t4 <- b1997[t0]
  t5 <- load8((t1))
  t6 <- primEq((t5, 0))
  if t6
    then b5313[t2, t3]
    else b5318[t5, t1, t3, t2]

-----------------------------------------
-- not recursive
b5323 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5323[t0, t1, t2] =
  t3 <- add((str12, 1))
  b5320[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b5321 :: [Bit 32, Bit 32] >>= [Bit 32]
b5321[t0, t1] =
  t2 <- load8((str12))
  t3 <- primEq((t2, 0))
  if t3
    then b5313[t1, t0]
    else b5323[t2, t0, t1]

-----------------------------------------
-- recursive
b6434 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6434[t0, t1, t2, t3] =
  t4 <- b1988[t0]
  b5324[t1, t2, t3]
b6433 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6433[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, 13]
  t7 <- b1988[t0]
  b5324[t1, t2, t3]
b5324 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5324[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b5321[t1, t2]
    else b5326[t3, t0, t1, t2]
b5326 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5326[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5333[t0, t4, t2, t3]
b5333 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5333[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b6433[t0, t1, t2, t3]
    else b6434[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
b444 :: [Bit 32] >>= [Bit 32]
b444[t0] =
  return t0

-----------------------------------------
-- recursive
b6438 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6438[t0, t1, t2, t3, t4] =
  t5 <- add((str1, 1))
  t6 <- b5333[t0, t5, t4, t1]
  b5339[t2, t3, 12, t6]
b5341 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5341[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- load8((str1))
  t7 <- primEq((t6, 0))
  if t7
    then b6437[t1, t3, t5, t4]
    else b6438[t6, t1, t5, t4, t3]
b6437 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6437[t0, t1, t2, t3] =
  t4 <- b5321[t1, t0]
  b5339[t2, t3, 12, t4]
b5339 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5339[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b444[t3]
    else b5341[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
str13 :: Bit 32
str13 <- "Memory map:\n"

-----------------------------------------
-- not recursive
str14 :: Bit 32
str14 <- "mmap"

-----------------------------------------
-- not recursive
str8 :: Bit 32
str8 <- "[0x"

-----------------------------------------
-- not recursive
str9 :: Bit 32
str9 <- "-0x"

-----------------------------------------
-- not recursive
str10 :: Bit 32
str10 <- "]"

-----------------------------------------
-- not recursive
b5374 :: [Bit 32] >>= [Unit]
b5374[t0] =
  t1 <- add((str10, 1))
  b5150[t0, t1]

-----------------------------------------
-- not recursive
b1932 :: [Bit 32] >>= [Unit]
b1932[t0] =
  t1 <- add((t0, 4))
  t2 <- load32((t1))
  t3 <- and((t2, 15))
  t4 <- b1638[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- b6647[1, 0, 31, t2, 32]
  t7 <- load8((str10))
  t8 <- primEq((t7, 0))
  if t8
    then b303[]
    else b5374[t7]

-----------------------------------------
-- recursive
b5384 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5384[t0, t1, t2] =
  t3 <- b1988[t0]
  b5375[t1, t2]
b5382 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5382[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5375[t1, t2]
b5375 :: [Bit 32, Bit 32] >>= [Unit]
b5375[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1932[t1]
    else b5377[t2, t0, t1]
b5377 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5377[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5379[t0, t3, t2]
b5379 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5379[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5382[t0, t1, t2]
    else b5384[t0, t1, t2]

-----------------------------------------
-- not recursive
b5402 :: [Bit 32, Bit 32] >>= [Unit]
b5402[t0, t1] =
  t2 <- add((str9, 1))
  b5379[t0, t2, t1]

-----------------------------------------
-- not recursive
b1934 :: [Bit 32] >>= [Unit]
b1934[t0] =
  t1 <- load32((t0))
  t2 <- and((t1, 15))
  t3 <- b1638[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b6647[1, 0, 31, t1, 32]
  t6 <- load8((str9))
  t7 <- primEq((t6, 0))
  if t7
    then b1932[t0]
    else b5402[t6, t0]

-----------------------------------------
-- recursive
b5412 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5412[t0, t1, t2] =
  t3 <- b1988[t0]
  b5403[t1, t2]
b5405 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5405[t0, t1, t2] =
  t3 <- add((t1, 1))
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5410[t0, t3, t2]
    else b5412[t0, t3, t2]
b5410 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5410[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5403[t1, t2]
b5403 :: [Bit 32, Bit 32] >>= [Unit]
b5403[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1934[t1]
    else b5405[t2, t0, t1]

-----------------------------------------
-- recursive
b5360 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5360[t0, t1, t2] =
  t3 <- b1988[t0]
  b5351[t1, t2]
b5358 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5358[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5351[t1, t2]
b5351 :: [Bit 32, Bit 32] >>= [Bit 32]
b5351[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1924[t1]
    else b5353[t2, t0, t1]
b5353 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5353[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5355[t0, t3, t2]
b5355 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5355[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5358[t0, t1, t2]
    else b5360[t0, t1, t2]

-----------------------------------------
-- not recursive
b5415 :: [Bit 32, Bit 32] >>= [Bit 32]
b5415[t0, t1] =
  t2 <- add((str4, 1))
  b5355[t0, t2, t1]

-----------------------------------------
-- not recursive
b5427 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5427[t0, t1, t2, t3] =
  t4 <- b1988[t0]
  t5 <- b5403[t1, t2]
  t6 <- load8((str4))
  t7 <- primEq((t6, 0))
  if t7
    then b1924[t3]
    else b5415[t6, t3]

-----------------------------------------
-- not recursive
b5425 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5425[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, 13]
  t7 <- b1988[t0]
  t8 <- b5403[t1, t2]
  t9 <- load8((str4))
  t10 <- primEq((t9, 0))
  if t10
    then b1924[t3]
    else b5415[t9, t3]

-----------------------------------------
-- not recursive
b5421 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5421[t0, t1, t2] =
  t3 <- add((str8, 1))
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5425[t0, t3, t2, t1]
    else b5427[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b5399 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5399[t0, t1, t2, t3] =
  t4 <- b1988[t0]
  t5 <- b5375[t1, t2]
  t6 <- load8((str4))
  t7 <- primEq((t6, 0))
  if t7
    then b1924[t3]
    else b5415[t6, t3]

-----------------------------------------
-- not recursive
b5397 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5397[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, 13]
  t7 <- b1988[t0]
  t8 <- b5375[t1, t2]
  t9 <- load8((str4))
  t10 <- primEq((t9, 0))
  if t10
    then b1924[t3]
    else b5415[t9, t3]

-----------------------------------------
-- not recursive
b5393 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5393[t0, t1, t2] =
  t3 <- add((str9, 1))
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5397[t0, t3, t2, t1]
    else b5399[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b5369 :: [Bit 32, Bit 32] >>= [Bit 32]
b5369[t0, t1] =
  t2 <- add((str10, 1))
  t3 <- b5150[t0, t2]
  t4 <- load8((str4))
  t5 <- primEq((t4, 0))
  if t5
    then b1924[t1]
    else b5415[t4, t1]

-----------------------------------------
-- not recursive
b5361 :: [Bit 32] >>= [Bit 32]
b5361[t0] =
  t1 <- load8((str4))
  t2 <- primEq((t1, 0))
  if t2
    then b1924[t0]
    else b5415[t1, t0]

-----------------------------------------
-- not recursive
b3605 :: [Bit 32, Bit 32] >>= [Bit 32]
b3605[t0, t1] =
  t2 <- add((t0, 4))
  t3 <- load32((t2))
  t4 <- and((t3, 15))
  t5 <- b1638[t4, 9]
  t6 <- store8((itoaBuf, t5))
  t7 <- b6647[1, 0, 31, t3, 32]
  t8 <- load8((str10))
  t9 <- primEq((t8, 0))
  if t9
    then b5361[t1]
    else b5369[t8, t1]

-----------------------------------------
-- not recursive
b3604 :: [Bit 32, Bit 32] >>= [Bit 32]
b3604[t0, t1] =
  t2 <- load32((t0))
  t3 <- and((t2, 15))
  t4 <- b1638[t3, 9]
  t5 <- store8((itoaBuf, t4))
  t6 <- b6647[1, 0, 31, t2, 32]
  t7 <- load8((str9))
  t8 <- primEq((t7, 0))
  if t8
    then b3605[t0, t1]
    else b5393[t7, t1, t0]

-----------------------------------------
-- not recursive
b5419 :: [Bit 32, Bit 32] >>= [Bit 32]
b5419[t0, t1] =
  t2 <- load8((str8))
  t3 <- primEq((t2, 0))
  if t3
    then b3604[t1, t0]
    else b5421[t2, t0, t1]

-----------------------------------------
-- recursive
b5437 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5437[t0, t1, t2, t3] =
  t4 <- b1988[t0]
  b5428[t1, t2, t3]
b5435 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5435[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, 13]
  t7 <- b1988[t0]
  b5428[t1, t2, t3]
b5428 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5428[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b5419[t1, t2]
    else b5430[t3, t0, t1, t2]
b5430 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5430[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5432[t0, t4, t3, t2]
b5432 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5432[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5435[t0, t1, t3, t2]
    else b5437[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b5440 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5440[t0, t1, t2] =
  t3 <- add((str3, 1))
  b5432[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b2994 :: [Bit 32, Bit 32] >>= [Bit 32]
b2994[t0, t1] =
  t2 <- nzrem((t0, 10))
  t3 <- b1638[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b6927[1, 0, 31, t0, 32]
  t6 <- load8((str3))
  t7 <- primEq((t6, 0))
  if t7
    then b5419[t0, t1]
    else b5440[t6, t0, t1]

-----------------------------------------
-- recursive
b5450 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5450[t0, t1, t2, t3] =
  t4 <- b1988[t0]
  b5441[t1, t2, t3]
b5448 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5448[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, 13]
  t7 <- b1988[t0]
  b5441[t1, t2, t3]
b5441 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5441[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b2994[t2, t1]
    else b5443[t3, t0, t1, t2]
b5443 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5443[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5445[t0, t4, t3, t2]
b5445 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5445[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b5448[t0, t1, t3, t2]
    else b5450[t0, t1, t3, t2]

-----------------------------------------
-- not recursive
b5453 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5453[t0, t1, t2] =
  t3 <- add((str2, 1))
  b5445[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b5451 :: [Bit 32, Bit 32] >>= [Bit 32]
b5451[t0, t1] =
  t2 <- load8((str2))
  t3 <- primEq((t2, 0))
  if t3
    then b2994[t1, t0]
    else b5453[t2, t0, t1]

-----------------------------------------
-- recursive
b5456 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5456[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5458[t0, t4, t3, t2]
b5458 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5458[t0, t1, t2, t3] =
  t4 <- b1997[t0]
  t5 <- load8((t1))
  t6 <- primEq((t5, 0))
  if t6
    then b5451[t2, t3]
    else b5456[t5, t1, t3, t2]

-----------------------------------------
-- not recursive
b5461 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5461[t0, t1, t2] =
  t3 <- add((str14, 1))
  b5458[t0, t3, t2, t1]

-----------------------------------------
-- not recursive
b5459 :: [Bit 32, Bit 32] >>= [Bit 32]
b5459[t0, t1] =
  t2 <- load8((str14))
  t3 <- primEq((t2, 0))
  if t3
    then b5451[t1, t0]
    else b5461[t2, t0, t1]

-----------------------------------------
-- recursive
b6440 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6440[t0, t1, t2, t3] =
  t4 <- b1988[t0]
  b5462[t1, t2, t3]
b6439 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6439[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, 13]
  t7 <- b1988[t0]
  b5462[t1, t2, t3]
b5462 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5462[t0, t1, t2] =
  t3 <- load8((t0))
  t4 <- primEq((t3, 0))
  if t4
    then b5459[t1, t2]
    else b5464[t3, t0, t1, t2]
b5464 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5464[t0, t1, t2, t3] =
  t4 <- add((t1, 1))
  b5471[t0, t4, t2, t3]
b5471 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5471[t0, t1, t2, t3] =
  t4 <- inb((1021))
  t5 <- and((t4, 96))
  t6 <- b1602[t5, 0, t0]
  t7 <- primEq((t0, 10))
  if t7
    then b6439[t0, t1, t2, t3]
    else b6440[t0, t1, t2, t3]

-----------------------------------------
-- recursive
b6444 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6444[t0, t1, t2, t3, t4] =
  t5 <- add((str1, 1))
  t6 <- b5471[t0, t5, t4, t1]
  b5477[t2, t3, 8, t6]
b5479 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5479[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- load8((str1))
  t7 <- primEq((t6, 0))
  if t7
    then b6443[t1, t3, t5, t4]
    else b6444[t6, t1, t5, t4, t3]
b6443 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b6443[t0, t1, t2, t3] =
  t4 <- b5459[t1, t0]
  b5477[t2, t3, 8, t4]
b5477 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
b5477[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b444[t3]
    else b5479[t0, t1, t2, t3]

-----------------------------------------
-- not recursive
str15 :: Bit 32
str15 <- "Strings:\n"

-----------------------------------------
-- not recursive
str18 :: Bit 32
str18 <- " "

-----------------------------------------
-- not recursive
str16 :: Bit 32
str16 <- "cmdline"

-----------------------------------------
-- not recursive
str19 :: Bit 32
str19 <- ": "

-----------------------------------------
-- not recursive
str20 :: Bit 32
str20 <- " ["

-----------------------------------------
-- not recursive
str21 :: Bit 32
str21 <- "]\n"

-----------------------------------------
-- not recursive
b5725 :: [Bit 32] >>= [Unit]
b5725[t0] =
  t1 <- add((str21, 1))
  b5150[t0, t1]

-----------------------------------------
-- not recursive
b1940 :: [Bit 32] >>= [Unit]
b1940[t0] =
  t1 <- and((t0, 15))
  t2 <- b1638[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6647[1, 0, 31, t0, 32]
  t5 <- load8((str21))
  t6 <- primEq((t5, 0))
  if t6
    then b303[]
    else b5725[t5]

-----------------------------------------
-- recursive
b5735 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5735[t0, t1, t2] =
  t3 <- b1988[t0]
  b5726[t1, t2]
b5733 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5733[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5726[t1, t2]
b5726 :: [Bit 32, Bit 32] >>= [Unit]
b5726[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b1940[t1]
    else b5728[t2, t0, t1]
b5728 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5728[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5730[t0, t3, t2]
b5730 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5730[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5733[t0, t1, t2]
    else b5735[t0, t1, t2]

-----------------------------------------
-- not recursive
b5756 :: [Bit 32, Bit 32] >>= [Unit]
b5756[t0, t1] =
  t2 <- add((str20, 1))
  b5730[t0, t2, t1]

-----------------------------------------
-- not recursive
b5754 :: [Bit 32] >>= [Unit]
b5754[t0] =
  t1 <- load8((str20))
  t2 <- primEq((t1, 0))
  if t2
    then b1940[t0]
    else b5756[t1, t0]

-----------------------------------------
-- recursive
b5759 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5759[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5761[t0, t3, t2]
b5761 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5761[t0, t1, t2] =
  t3 <- b1997[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b5754[t2]
    else b5759[t4, t1, t2]

-----------------------------------------
-- not recursive
b6445 :: [Bit 32, Bit 32] >>= [Unit]
b6445[t0, t1] =
  t2 <- add((t1, 1))
  b5761[t0, t2, t1]

-----------------------------------------
-- not recursive
b5765 :: [Bit 32] >>= [Unit]
b5765[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b5754[t0]
    else b6445[t1, t0]

-----------------------------------------
-- recursive
b5775 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5775[t0, t1, t2] =
  t3 <- b1988[t0]
  b5766[t1, t2]
b5773 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5773[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5766[t1, t2]
b5766 :: [Bit 32, Bit 32] >>= [Unit]
b5766[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b5765[t1]
    else b5768[t2, t0, t1]
b5768 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5768[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5770[t0, t3, t2]
b5770 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5770[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5773[t0, t1, t2]
    else b5775[t0, t1, t2]

-----------------------------------------
-- not recursive
b5798 :: [Bit 32, Bit 32] >>= [Unit]
b5798[t0, t1] =
  t2 <- add((str19, 1))
  b5770[t0, t2, t1]

-----------------------------------------
-- not recursive
b5880 :: [Bit 32, Bit 32] >>= [Unit]
b5880[t0, t1] =
  t2 <- add((str16, 1))
  t3 <- b5150[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b5765[t1]
    else b5798[t4, t1]

-----------------------------------------
-- not recursive
b5793 :: [Bit 32] >>= [Unit]
b5793[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b5765[t0]
    else b5798[t1, t0]

-----------------------------------------
-- not recursive
b5878 :: [Bit 32] >>= [Unit]
b5878[t0] =
  t1 <- load8((str16))
  t2 <- primEq((t1, 0))
  if t2
    then b5793[t0]
    else b5880[t1, t0]

-----------------------------------------
-- recursive
b6447 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6447[t0, t1, t2] =
  t3 <- b1988[t0]
  b5881[t1, t2]
b6446 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6446[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5881[t1, t2]
b5881 :: [Bit 32, Bit 32] >>= [Unit]
b5881[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b5878[t1]
    else b5883[t2, t0, t1]
b5883 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5883[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5890[t0, t3, t2]
b5890 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5890[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b6446[t0, t1, t2]
    else b6447[t0, t1, t2]

-----------------------------------------
-- not recursive
str17 :: Bit 32
str17 <- "imgline"

-----------------------------------------
-- not recursive
b5801 :: [Bit 32, Bit 32] >>= [Unit]
b5801[t0, t1] =
  t2 <- add((str17, 1))
  t3 <- b5150[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b5765[t1]
    else b5798[t4, t1]

-----------------------------------------
-- not recursive
b5799 :: [Bit 32] >>= [Unit]
b5799[t0] =
  t1 <- load8((str17))
  t2 <- primEq((t1, 0))
  if t2
    then b5793[t0]
    else b5801[t1, t0]

-----------------------------------------
-- recursive
b5813 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5813[t0, t1, t2] =
  t3 <- b1988[t0]
  b5804[t1, t2]
b5811 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5811[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5804[t1, t2]
b5804 :: [Bit 32, Bit 32] >>= [Unit]
b5804[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b5799[t1]
    else b5806[t2, t0, t1]
b5806 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5806[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5808[t0, t3, t2]
b5808 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5808[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5811[t0, t1, t2]
    else b5813[t0, t1, t2]

-----------------------------------------
-- not recursive
b5959 :: [Bit 32, Bit 32] >>= [Unit]
b5959[t0, t1] =
  t2 <- add((str18, 1))
  b5808[t0, t2, t1]

-----------------------------------------
-- not recursive
b5962 :: [Bit 32, Bit 32] >>= [Unit]
b5962[t0, t1] =
  t2 <- add((str18, 1))
  t3 <- b5890[t0, t2, t1]
  t4 <- load32((4108))
  t5 <- load8((str18))
  t6 <- primEq((t5, 0))
  if t6
    then b5799[t4]
    else b5959[t5, t4]

-----------------------------------------
-- not recursive
b5948 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5948[t0, t1, t2] =
  t3 <- b1988[t0]
  t4 <- b5766[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str18))
  t7 <- primEq((t6, 0))
  if t7
    then b5799[t5]
    else b5959[t6, t5]

-----------------------------------------
-- not recursive
b5946 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5946[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  t7 <- b5766[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str18))
  t10 <- primEq((t9, 0))
  if t10
    then b5799[t8]
    else b5959[t9, t8]

-----------------------------------------
-- not recursive
b5951 :: [Bit 32, Bit 32] >>= [Unit]
b5951[t0, t1] =
  t2 <- add((str19, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5946[t0, t2, t1]
    else b5948[t0, t2, t1]

-----------------------------------------
-- not recursive
b5924 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5924[t0, t1, t2] =
  t3 <- b1988[t0]
  t4 <- b5726[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str18))
  t7 <- primEq((t6, 0))
  if t7
    then b5799[t5]
    else b5959[t6, t5]

-----------------------------------------
-- not recursive
b5922 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5922[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  t7 <- b5726[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str18))
  t10 <- primEq((t9, 0))
  if t10
    then b5799[t8]
    else b5959[t9, t8]

-----------------------------------------
-- not recursive
b5918 :: [Bit 32, Bit 32] >>= [Unit]
b5918[t0, t1] =
  t2 <- add((str20, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5922[t0, t2, t1]
    else b5924[t0, t2, t1]

-----------------------------------------
-- not recursive
b5907 :: [Bit 32] >>= [Unit]
b5907[t0] =
  t1 <- add((str21, 1))
  t2 <- b5150[t0, t1]
  t3 <- load32((4108))
  t4 <- load8((str18))
  t5 <- primEq((t4, 0))
  if t5
    then b5799[t3]
    else b5959[t4, t3]

-----------------------------------------
-- not recursive
b3170 :: [] >>= [Unit]
b3170[] =
  t0 <- load32((4108))
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b5799[t0]
    else b5959[t1, t0]

-----------------------------------------
-- not recursive
b3414 :: [Bit 32] >>= [Unit]
b3414[t0] =
  t1 <- and((t0, 15))
  t2 <- b1638[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6647[1, 0, 31, t0, 32]
  t5 <- load8((str21))
  t6 <- primEq((t5, 0))
  if t6
    then b3170[]
    else b5907[t5]

-----------------------------------------
-- not recursive
b5916 :: [Bit 32] >>= [Unit]
b5916[t0] =
  t1 <- load8((str20))
  t2 <- primEq((t1, 0))
  if t2
    then b3414[t0]
    else b5918[t1, t0]

-----------------------------------------
-- recursive
b5927 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5927[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5929[t0, t3, t2]
b5929 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5929[t0, t1, t2] =
  t3 <- b1997[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b5916[t2]
    else b5927[t4, t1, t2]

-----------------------------------------
-- not recursive
b6448 :: [Bit 32, Bit 32] >>= [Unit]
b6448[t0, t1] =
  t2 <- add((t1, 1))
  b5929[t0, t2, t1]

-----------------------------------------
-- not recursive
b5933 :: [Bit 32] >>= [Unit]
b5933[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b5916[t0]
    else b6448[t1, t0]

-----------------------------------------
-- not recursive
b5954 :: [Bit 32, Bit 32] >>= [Unit]
b5954[t0, t1] =
  t2 <- add((str16, 1))
  t3 <- b5150[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b5933[t1]
    else b5951[t4, t1]

-----------------------------------------
-- not recursive
b5940 :: [Bit 32] >>= [Unit]
b5940[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b5933[t0]
    else b5951[t1, t0]

-----------------------------------------
-- not recursive
b5952 :: [Bit 32] >>= [Unit]
b5952[t0] =
  t1 <- load8((str16))
  t2 <- primEq((t1, 0))
  if t2
    then b5940[t0]
    else b5954[t1, t0]

-----------------------------------------
-- not recursive
b1946 :: [] >>= [Unit]
b1946[] =
  t0 <- load32((4104))
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b5952[t0]
    else b5962[t1, t0]

-----------------------------------------
-- recursive
b6450 :: [Bit 32, Bit 32] >>= [Unit]
b6450[t0, t1] =
  t2 <- b1988[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1946[]
    else b5967[t3, t1]
b6449 :: [Bit 32, Bit 32] >>= [Unit]
b6449[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, 13]
  t5 <- b1988[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1946[]
    else b5967[t6, t1]
b5967 :: [Bit 32, Bit 32] >>= [Unit]
b5967[t0, t1] =
  t2 <- add((t1, 1))
  b5974[t0, t2]
b5974 :: [Bit 32, Bit 32] >>= [Unit]
b5974[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b6449[t0, t1]
    else b6450[t0, t1]

-----------------------------------------
-- not recursive
b5982 :: [Bit 32] >>= [Unit]
b5982[t0] =
  t1 <- add((str15, 1))
  b5974[t0, t1]

-----------------------------------------
-- not recursive
b1948 :: [] >>= [Unit]
b1948[] =
  t0 <- load32((4100))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b5477[t1, t2, 8, 0]
  t4 <- load8((str15))
  t5 <- primEq((t4, 0))
  if t5
    then b1946[]
    else b5982[t4]

-----------------------------------------
-- recursive
b6452 :: [Bit 32, Bit 32] >>= [Unit]
b6452[t0, t1] =
  t2 <- b1988[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1948[]
    else b5985[t3, t1]
b6451 :: [Bit 32, Bit 32] >>= [Unit]
b6451[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, 13]
  t5 <- b1988[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1948[]
    else b5985[t6, t1]
b5985 :: [Bit 32, Bit 32] >>= [Unit]
b5985[t0, t1] =
  t2 <- add((t1, 1))
  b5992[t0, t2]
b5992 :: [Bit 32, Bit 32] >>= [Unit]
b5992[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b6451[t0, t1]
    else b6452[t0, t1]

-----------------------------------------
-- not recursive
b6000 :: [Bit 32] >>= [Unit]
b6000[t0] =
  t1 <- add((str13, 1))
  b5992[t0, t1]

-----------------------------------------
-- not recursive
b1950 :: [] >>= [Unit]
b1950[] =
  t0 <- load32((4096))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b5339[t1, t2, 12, 0]
  t4 <- load8((str13))
  t5 <- primEq((t4, 0))
  if t5
    then b1948[]
    else b6000[t4]

-----------------------------------------
-- recursive
b6454 :: [Bit 32, Bit 32] >>= [Unit]
b6454[t0, t1] =
  t2 <- b1988[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1950[]
    else b6003[t3, t1]
b6453 :: [Bit 32, Bit 32] >>= [Unit]
b6453[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, 13]
  t5 <- b1988[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1950[]
    else b6003[t6, t1]
b6003 :: [Bit 32, Bit 32] >>= [Unit]
b6003[t0, t1] =
  t2 <- add((t1, 1))
  b6010[t0, t2]
b6010 :: [Bit 32, Bit 32] >>= [Unit]
b6010[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b6453[t0, t1]
    else b6454[t0, t1]

-----------------------------------------
-- not recursive
str54 :: Bit 32
str54 <- "Did not find first user program\n"

-----------------------------------------
-- not recursive
str48 :: Bit 32
str48 <- "\nHalting kernel, returning to mimgload\n"

-----------------------------------------
-- not recursive
b5491 :: [Bit 32] >>= [Unit]
b5491[t0] =
  t1 <- add((str48, 1))
  b5150[t0, t1]

-----------------------------------------
-- not recursive
b5489 :: [] >>= [Unit]
b5489[] =
  t0 <- load8((str48))
  t1 <- primEq((t0, 0))
  if t1
    then b303[]
    else b5491[t0]

-----------------------------------------
-- recursive
b5501 :: [Bit 32, Bit 32] >>= [Unit]
b5501[t0, t1] =
  t2 <- b1988[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b5489[]
    else b5494[t3, t1]
b5499 :: [Bit 32, Bit 32] >>= [Unit]
b5499[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, 13]
  t5 <- b1988[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b5489[]
    else b5494[t6, t1]
b5494 :: [Bit 32, Bit 32] >>= [Unit]
b5494[t0, t1] =
  t2 <- add((t1, 1))
  b5496[t0, t2]
b5496 :: [Bit 32, Bit 32] >>= [Unit]
b5496[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b5499[t0, t1]
    else b5501[t0, t1]

-----------------------------------------
-- not recursive
b5504 :: [Bit 32] >>= [Unit]
b5504[t0] =
  t1 <- add((str54, 1))
  b5496[t0, t1]

-----------------------------------------
-- not recursive
b5502 :: [] >>= [Unit]
b5502[] =
  t0 <- load8((str54))
  t1 <- primEq((t0, 0))
  if t1
    then b5489[]
    else b5504[t0]

-----------------------------------------
-- not recursive
str49 :: Bit 32
str49 <- "Found header for first user program:\n"

-----------------------------------------
-- not recursive
str50 :: Bit 32
str50 <- "\n"

-----------------------------------------
-- not recursive
str51 :: Bit 32
str51 <- "Found header for second user program:\n"

-----------------------------------------
-- not recursive
str52 :: Bit 32
str52 <- "\n"

-----------------------------------------
-- not recursive
str55 :: Bit 32
str55 <- "user code is at 0x"

-----------------------------------------
-- not recursive
str56 :: Bit 32
str56 <- "\n"

-----------------------------------------
-- not recursive
b2396 :: [Bit 32] >>= [Unit]
b2396[t0] =
  t1 <- add((users, 52))
  store32((t1, t0))

-----------------------------------------
-- recursive
b5527 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5527[t0, t1, t2] =
  t3 <- b1988[t0]
  b5518[t1, t2]
b5525 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5525[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5518[t1, t2]
b5518 :: [Bit 32, Bit 32] >>= [Unit]
b5518[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b2396[t1]
    else b5520[t2, t0, t1]
b5520 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5520[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5522[t0, t3, t2]
b5522 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5522[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5525[t0, t1, t2]
    else b5527[t0, t1, t2]

-----------------------------------------
-- not recursive
b5556 :: [Bit 32, Bit 32] >>= [Unit]
b5556[t0, t1] =
  t2 <- add((str56, 1))
  b5522[t0, t2, t1]

-----------------------------------------
-- not recursive
b2392 :: [Bit 32] >>= [Unit]
b2392[t0] =
  t1 <- and((t0, 15))
  t2 <- b1638[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6647[1, 0, 31, t0, 32]
  t5 <- load8((str56))
  t6 <- primEq((t5, 0))
  if t6
    then b2396[t0]
    else b5556[t5, t0]

-----------------------------------------
-- recursive
b6456 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6456[t0, t1, t2] =
  t3 <- b1988[t0]
  b5562[t1, t2]
b6455 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6455[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5562[t1, t2]
b5562 :: [Bit 32, Bit 32] >>= [Unit]
b5562[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b2392[t1]
    else b5564[t2, t0, t1]
b5564 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5564[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5571[t0, t3, t2]
b5571 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5571[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b6455[t0, t1, t2]
    else b6456[t0, t1, t2]

-----------------------------------------
-- not recursive
b2407 :: [Bit 32] >>= [Unit]
b2407[t0] =
  t1 <- add((users, 124))
  store32((t1, t0))

-----------------------------------------
-- recursive
b5537 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5537[t0, t1, t2] =
  t3 <- b1988[t0]
  b5528[t1, t2]
b5535 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5535[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5528[t1, t2]
b5528 :: [Bit 32, Bit 32] >>= [Unit]
b5528[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b2407[t1]
    else b5530[t2, t0, t1]
b5530 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5530[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5532[t0, t3, t2]
b5532 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5532[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5535[t0, t1, t2]
    else b5537[t0, t1, t2]

-----------------------------------------
-- not recursive
b5543 :: [Bit 32, Bit 32] >>= [Unit]
b5543[t0, t1] =
  t2 <- add((str56, 1))
  b5532[t0, t2, t1]

-----------------------------------------
-- not recursive
b2403 :: [Bit 32] >>= [Unit]
b2403[t0] =
  t1 <- and((t0, 15))
  t2 <- b1638[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6647[1, 0, 31, t0, 32]
  t5 <- load8((str56))
  t6 <- primEq((t5, 0))
  if t6
    then b2407[t0]
    else b5543[t5, t0]

-----------------------------------------
-- recursive
b6458 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6458[t0, t1, t2] =
  t3 <- b1988[t0]
  b5544[t1, t2]
b6457 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6457[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  b5544[t1, t2]
b5544 :: [Bit 32, Bit 32] >>= [Unit]
b5544[t0, t1] =
  t2 <- load8((t0))
  t3 <- primEq((t2, 0))
  if t3
    then b2403[t1]
    else b5546[t2, t0, t1]
b5546 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5546[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5553[t0, t3, t2]
b5553 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5553[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b6457[t0, t1, t2]
    else b6458[t0, t1, t2]

-----------------------------------------
-- not recursive
b2615 :: [] >>= [Unit]
b2615[] =
  t0 <- store1((current, flag0))
  t1 <- outb((32, 17))
  t2 <- outb((33, 32))
  t3 <- outb((33, 4))
  t4 <- outb((33, 1))
  t5 <- outb((33, 251))
  t6 <- outb((160, 17))
  t7 <- outb((161, 40))
  t8 <- outb((161, 2))
  t9 <- outb((161, 1))
  t10 <- outb((161, 255))
  t11 <- outb((67, 52))
  t12 <- outb((64, 156))
  t13 <- outb((64, 46))
  t14 <- inb((33))
  t15 <- and((t14, -2))
  t16 <- outb((33, t15))
  t17 <- inb((33))
  t18 <- and((t17, -3))
  t19 <- outb((33, t18))
  t20 <- load1((current))
  t21 <- flagToWord((t20))
  t22 <- mul((t21, 72))
  t23 <- add((users, t22))
  t24 <- returnTo((t23))
  t25 <- load8((str48))
  t26 <- primEq((t25, 0))
  if t26
    then b303[]
    else b5491[t25]

-----------------------------------------
-- not recursive
b5574 :: [Bit 32, Bit 32] >>= [Unit]
b5574[t0, t1] =
  t2 <- add((str55, 1))
  t3 <- b5553[t0, t2, t1]
  b2615[]

-----------------------------------------
-- not recursive
b6933 :: [Bit 32, Bit 32] >>= [Unit]
b6933[t0, t1] =
  t2 <- add((str56, 1))
  t3 <- b5532[t0, t2, t1]
  b2615[]

-----------------------------------------
-- not recursive
b6932 :: [Bit 32] >>= [Unit]
b6932[t0] =
  t1 <- add((users, 124))
  t2 <- store32((t1, t0))
  b2615[]

-----------------------------------------
-- not recursive
b2861 :: [Bit 32] >>= [Unit]
b2861[t0] =
  t1 <- and((t0, 15))
  t2 <- b1638[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6647[1, 0, 31, t0, 32]
  t5 <- load8((str56))
  t6 <- primEq((t5, 0))
  if t6
    then b6932[t0]
    else b6933[t5, t0]

-----------------------------------------
-- not recursive
b5577 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5577[t0, t1, t2] =
  t3 <- add((str55, 1))
  t4 <- b5571[t0, t3, t2]
  t5 <- add((t1, 8))
  t6 <- load32((t5))
  t7 <- load8((str55))
  t8 <- primEq((t7, 0))
  if t8
    then b2861[t6]
    else b5574[t7, t6]

-----------------------------------------
-- not recursive
b6936 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6936[t0, t1, t2] =
  t3 <- add((str56, 1))
  t4 <- b5522[t0, t3, t1]
  t5 <- add((t2, 8))
  t6 <- load32((t5))
  t7 <- load8((str55))
  t8 <- primEq((t7, 0))
  if t8
    then b2861[t6]
    else b5574[t7, t6]

-----------------------------------------
-- not recursive
b6935 :: [Bit 32, Bit 32] >>= [Unit]
b6935[t0, t1] =
  t2 <- add((users, 52))
  t3 <- store32((t2, t0))
  t4 <- add((t1, 8))
  t5 <- load32((t4))
  t6 <- load8((str55))
  t7 <- primEq((t6, 0))
  if t7
    then b2861[t5]
    else b5574[t6, t5]

-----------------------------------------
-- not recursive
b2873 :: [Bit 32, Bit 32] >>= [Unit]
b2873[t0, t1] =
  t2 <- and((t0, 15))
  t3 <- b1638[t2, 9]
  t4 <- store8((itoaBuf, t3))
  t5 <- b6647[1, 0, 31, t0, 32]
  t6 <- load8((str56))
  t7 <- primEq((t6, 0))
  if t7
    then b6935[t0, t1]
    else b6936[t6, t0, t1]

-----------------------------------------
-- not recursive
b6969 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b6969[t0, t1, t2] =
  t3 <- add((t0, 8))
  t4 <- load32((t3))
  t5 <- load8((str55))
  t6 <- primEq((t5, 0))
  if t6
    then b2873[t4, t2]
    else b5577[t5, t2, t4]

-----------------------------------------
-- recursive
b6997 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6997[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1602[t6, 0, 13]
  t8 <- b1988[t0]
  t9 <- load8((t1))
  t10 <- primEq((t9, 0))
  if t10
    then b6969[t3, t4, t2]
    else b7001[t9, t1, t2, t3, t4]
b7001 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b7001[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 1))
  t6 <- inb((1021))
  t7 <- and((t6, 96))
  t8 <- b1602[t7, 0, t0]
  t9 <- primEq((t0, 10))
  if t9
    then b6997[t0, t5, t2, t3, t4]
    else b6998[t0, t5, t2, t3, t4]
b6998 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6998[t0, t1, t2, t3, t4] =
  t5 <- b1988[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b6969[t3, t4, t2]
    else b7001[t6, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b6970 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6970[t0, t1, t2, t3] =
  t4 <- add((str52, 1))
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1602[t6, 0, t0]
  t8 <- primEq((t0, 10))
  if t8
    then b6997[t0, t4, t1, t2, t3]
    else b6998[t0, t4, t1, t2, t3]

-----------------------------------------
-- not recursive
b6937 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6937[t0, t1, t2, t3, t4] =
  t5 <- b5284[t0]
  t6 <- load8((str52))
  t7 <- primEq((t6, 0))
  if t7
    then b6969[t3, t4, t0]
    else b6970[t6, t0, t3, t4]

-----------------------------------------
-- recursive
b6988 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6988[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- inb((1021))
  t8 <- and((t7, 96))
  t9 <- b1602[t8, 0, 13]
  t10 <- b1988[t0]
  t11 <- load8((t1))
  t12 <- primEq((t11, 0))
  if t12
    then b6937[t4, t5, t6, t2, t3]
    else b6996[t11, t1, t2, t3, t4, t5, t6]
b6996 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6996[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- add((t1, 1))
  t8 <- inb((1021))
  t9 <- and((t8, 96))
  t10 <- b1602[t9, 0, t0]
  t11 <- primEq((t0, 10))
  if t11
    then b6988[t0, t7, t2, t3, t4, t5, t6]
    else b6989[t0, t7, t2, t3, t4, t5, t6]
b6989 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6989[t0, t1, t2, t3, t4, t5, t6] =
  t7 <- b1988[t0]
  t8 <- load8((t1))
  t9 <- primEq((t8, 0))
  if t9
    then b6937[t4, t5, t6, t2, t3]
    else b6996[t8, t1, t2, t3, t4, t5, t6]

-----------------------------------------
-- not recursive
b6938 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6938[t0, t1, t2, t3, t4, t5] =
  t6 <- add((str51, 1))
  t7 <- inb((1021))
  t8 <- and((t7, 96))
  t9 <- b1602[t8, 0, t0]
  t10 <- primEq((t0, 10))
  if t10
    then b6988[t0, t6, t1, t2, t3, t4, t5]
    else b6989[t0, t6, t1, t2, t3, t4, t5]

-----------------------------------------
-- not recursive
b6467 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b6467[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- load8((str51))
  t7 <- primEq((t6, 0))
  if t7
    then b6937[t1, t5, t4, t3, t0]
    else b6938[t6, t3, t0, t1, t5, t4]

-----------------------------------------
-- not recursive
str53 :: Bit 32
str53 <- "Did not find second user program\n"

-----------------------------------------
-- recursive
b5514 :: [Bit 32, Bit 32] >>= [Unit]
b5514[t0, t1] =
  t2 <- b1988[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b5489[]
    else b5507[t3, t1]
b5512 :: [Bit 32, Bit 32] >>= [Unit]
b5512[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, 13]
  t5 <- b1988[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b5489[]
    else b5507[t6, t1]
b5507 :: [Bit 32, Bit 32] >>= [Unit]
b5507[t0, t1] =
  t2 <- add((t1, 1))
  b5509[t0, t2]
b5509 :: [Bit 32, Bit 32] >>= [Unit]
b5509[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b5512[t0, t1]
    else b5514[t0, t1]

-----------------------------------------
-- not recursive
b5517 :: [Bit 32] >>= [Unit]
b5517[t0] =
  t1 <- add((str53, 1))
  b5509[t0, t1]

-----------------------------------------
-- not recursive
b5515 :: [] >>= [Unit]
b5515[] =
  t0 <- load8((str53))
  t1 <- primEq((t0, 0))
  if t1
    then b5489[]
    else b5517[t0]

-----------------------------------------
-- not recursive
b5694 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5694[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b5515[]
    else b6467[t0, t1, t2, t3]

-----------------------------------------
-- recursive
b5703 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5703[t0, t1, t2, t3, t4] =
  t5 <- b1988[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b5694[t3, t4, 12, t2]
    else b5702[t6, t1, t2, t3, t4]
b5697 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5697[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1602[t6, 0, 13]
  t8 <- b1988[t0]
  t9 <- load8((t1))
  t10 <- primEq((t9, 0))
  if t10
    then b5694[t3, t4, 12, t2]
    else b5702[t9, t1, t2, t3, t4]
b5702 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5702[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 1))
  b5696[t0, t5, t2, t3, t4]
b5696 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5696[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1602[t6, 0, t0]
  t8 <- primEq((t0, 10))
  if t8
    then b5697[t0, t1, t2, t3, t4]
    else b5703[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b5695 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5695[t0, t1, t2, t3] =
  t4 <- add((str50, 1))
  b5696[t0, t4, t1, t2, t3]

-----------------------------------------
-- not recursive
b5658 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5658[t0, t1, t2] =
  t3 <- b5284[t0]
  t4 <- load8((str50))
  t5 <- primEq((t4, 0))
  if t5
    then b5694[t1, t2, 12, t0]
    else b5695[t4, t0, t1, t2]

-----------------------------------------
-- recursive
b5712 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5712[t0, t1, t2, t3, t4] =
  t5 <- b1988[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b5658[t2, t3, t4]
    else b5711[t6, t1, t2, t3, t4]
b5706 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5706[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1602[t6, 0, 13]
  t8 <- b1988[t0]
  t9 <- load8((t1))
  t10 <- primEq((t9, 0))
  if t10
    then b5658[t2, t3, t4]
    else b5711[t9, t1, t2, t3, t4]
b5711 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5711[t0, t1, t2, t3, t4] =
  t5 <- add((t1, 1))
  b5705[t0, t5, t2, t3, t4]
b5705 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5705[t0, t1, t2, t3, t4] =
  t5 <- inb((1021))
  t6 <- and((t5, 96))
  t7 <- b1602[t6, 0, t0]
  t8 <- primEq((t0, 10))
  if t8
    then b5706[t0, t1, t2, t3, t4]
    else b5712[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b5704 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5704[t0, t1, t2, t3] =
  t4 <- add((str49, 1))
  b5705[t0, t4, t1, t2, t3]

-----------------------------------------
-- not recursive
b5652 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5652[t0, t1, t2] =
  t3 <- add((t1, t2))
  t4 <- add((t0, -1))
  t5 <- load8((str49))
  t6 <- primEq((t5, 0))
  if t6
    then b5658[t1, t4, t3]
    else b5704[t5, t1, t4, t3]

-----------------------------------------
-- not recursive
b5650 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5650[t0, t1, t2] =
  t3 <- primEq((t0, 0))
  if t3
    then b5502[]
    else b5652[t0, t1, t2]

-----------------------------------------
-- recursive
b5713 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5713[t0, t1, t2, t3] =
  t4 <- primEq((t0, 0))
  if t4
    then b5502[]
    else b5715[t0, t1, t2, t3]
b5715 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
b5715[t0, t1, t2, t3] =
  t4 <- add((t1, t2))
  t5 <- add((t0, -1))
  t6 <- add((t3, -1))
  t7 <- primEq((t6, 0))
  if t7
    then b5650[t5, t4, 12]
    else b5713[t5, t4, 12, t6]

-----------------------------------------
-- not recursive
b6013 :: [Bit 32] >>= [Unit]
b6013[t0] =
  t1 <- add((str11, 1))
  t2 <- b6010[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b5502[]
    else b5715[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b5995 :: [Bit 32] >>= [Unit]
b5995[t0] =
  t1 <- add((str13, 1))
  t2 <- b5992[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b5502[]
    else b5715[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b5977 :: [Bit 32] >>= [Unit]
b5977[t0] =
  t1 <- add((str15, 1))
  t2 <- b5974[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b5502[]
    else b5715[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b5822 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5822[t0, t1, t2] =
  t3 <- b1988[t0]
  t4 <- b5804[t1, t2]
  t5 <- load32((4096))
  t6 <- load32((t5))
  t7 <- add((t5, 4))
  t8 <- primEq((t6, 0))
  if t8
    then b5502[]
    else b5715[t6, t7, 12, 2]

-----------------------------------------
-- not recursive
b5820 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5820[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  t7 <- b5804[t1, t2]
  t8 <- load32((4096))
  t9 <- load32((t8))
  t10 <- add((t8, 4))
  t11 <- primEq((t9, 0))
  if t11
    then b5502[]
    else b5715[t9, t10, 12, 2]

-----------------------------------------
-- not recursive
b5893 :: [Bit 32, Bit 32] >>= [Unit]
b5893[t0, t1] =
  t2 <- add((str18, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5820[t0, t2, t1]
    else b5822[t0, t2, t1]

-----------------------------------------
-- not recursive
b5784 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5784[t0, t1, t2] =
  t3 <- b1988[t0]
  t4 <- b5766[t1, t2]
  t5 <- load32((4096))
  t6 <- load32((t5))
  t7 <- add((t5, 4))
  t8 <- primEq((t6, 0))
  if t8
    then b5502[]
    else b5715[t6, t7, 12, 2]

-----------------------------------------
-- not recursive
b5782 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5782[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  t7 <- b5766[t1, t2]
  t8 <- load32((4096))
  t9 <- load32((t8))
  t10 <- add((t8, 4))
  t11 <- primEq((t9, 0))
  if t11
    then b5502[]
    else b5715[t9, t10, 12, 2]

-----------------------------------------
-- not recursive
b5787 :: [Bit 32, Bit 32] >>= [Unit]
b5787[t0, t1] =
  t2 <- add((str19, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5782[t0, t2, t1]
    else b5784[t0, t2, t1]

-----------------------------------------
-- not recursive
b5744 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5744[t0, t1, t2] =
  t3 <- b1988[t0]
  t4 <- b5726[t1, t2]
  t5 <- load32((4096))
  t6 <- load32((t5))
  t7 <- add((t5, 4))
  t8 <- primEq((t6, 0))
  if t8
    then b5502[]
    else b5715[t6, t7, 12, 2]

-----------------------------------------
-- not recursive
b5742 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5742[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  t7 <- b5726[t1, t2]
  t8 <- load32((4096))
  t9 <- load32((t8))
  t10 <- add((t8, 4))
  t11 <- primEq((t9, 0))
  if t11
    then b5502[]
    else b5715[t9, t10, 12, 2]

-----------------------------------------
-- not recursive
b5738 :: [Bit 32, Bit 32] >>= [Unit]
b5738[t0, t1] =
  t2 <- add((str20, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5742[t0, t2, t1]
    else b5744[t0, t2, t1]

-----------------------------------------
-- not recursive
b5720 :: [Bit 32] >>= [Unit]
b5720[t0] =
  t1 <- add((str21, 1))
  t2 <- b5150[t0, t1]
  t3 <- load32((4096))
  t4 <- load32((t3))
  t5 <- add((t3, 4))
  t6 <- primEq((t4, 0))
  if t6
    then b5502[]
    else b5715[t4, t5, 12, 2]

-----------------------------------------
-- not recursive
b3459 :: [] >>= [Unit]
b3459[] =
  t0 <- load32((4096))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- primEq((t1, 0))
  if t3
    then b5502[]
    else b5715[t1, t2, 12, 2]

-----------------------------------------
-- not recursive
b3633 :: [Bit 32] >>= [Unit]
b3633[t0] =
  t1 <- and((t0, 15))
  t2 <- b1638[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6647[1, 0, 31, t0, 32]
  t5 <- load8((str21))
  t6 <- primEq((t5, 0))
  if t6
    then b3459[]
    else b5720[t5]

-----------------------------------------
-- not recursive
b5736 :: [Bit 32] >>= [Unit]
b5736[t0] =
  t1 <- load8((str20))
  t2 <- primEq((t1, 0))
  if t2
    then b3633[t0]
    else b5738[t1, t0]

-----------------------------------------
-- recursive
b5747 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5747[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5749[t0, t3, t2]
b5749 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5749[t0, t1, t2] =
  t3 <- b1997[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b5736[t2]
    else b5747[t4, t1, t2]

-----------------------------------------
-- not recursive
b6468 :: [Bit 32, Bit 32] >>= [Unit]
b6468[t0, t1] =
  t2 <- add((t1, 1))
  b5749[t0, t2, t1]

-----------------------------------------
-- not recursive
b5753 :: [Bit 32] >>= [Unit]
b5753[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b5736[t0]
    else b6468[t1, t0]

-----------------------------------------
-- not recursive
b5790 :: [Bit 32, Bit 32] >>= [Unit]
b5790[t0, t1] =
  t2 <- add((str17, 1))
  t3 <- b5150[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b5753[t1]
    else b5787[t4, t1]

-----------------------------------------
-- not recursive
b5776 :: [Bit 32] >>= [Unit]
b5776[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b5753[t0]
    else b5787[t1, t0]

-----------------------------------------
-- not recursive
b5788 :: [Bit 32] >>= [Unit]
b5788[t0] =
  t1 <- load8((str17))
  t2 <- primEq((t1, 0))
  if t2
    then b5776[t0]
    else b5790[t1, t0]

-----------------------------------------
-- not recursive
b5896 :: [Bit 32, Bit 32] >>= [Unit]
b5896[t0, t1] =
  t2 <- add((str18, 1))
  t3 <- b5890[t0, t2, t1]
  t4 <- load32((4108))
  t5 <- load8((str18))
  t6 <- primEq((t5, 0))
  if t6
    then b5788[t4]
    else b5893[t5, t4]

-----------------------------------------
-- not recursive
b5869 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5869[t0, t1, t2] =
  t3 <- b1988[t0]
  t4 <- b5766[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str18))
  t7 <- primEq((t6, 0))
  if t7
    then b5788[t5]
    else b5893[t6, t5]

-----------------------------------------
-- not recursive
b5867 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5867[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  t7 <- b5766[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str18))
  t10 <- primEq((t9, 0))
  if t10
    then b5788[t8]
    else b5893[t9, t8]

-----------------------------------------
-- not recursive
b5872 :: [Bit 32, Bit 32] >>= [Unit]
b5872[t0, t1] =
  t2 <- add((str19, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5867[t0, t2, t1]
    else b5869[t0, t2, t1]

-----------------------------------------
-- not recursive
b5845 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5845[t0, t1, t2] =
  t3 <- b1988[t0]
  t4 <- b5726[t1, t2]
  t5 <- load32((4108))
  t6 <- load8((str18))
  t7 <- primEq((t6, 0))
  if t7
    then b5788[t5]
    else b5893[t6, t5]

-----------------------------------------
-- not recursive
b5843 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5843[t0, t1, t2] =
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, 13]
  t6 <- b1988[t0]
  t7 <- b5726[t1, t2]
  t8 <- load32((4108))
  t9 <- load8((str18))
  t10 <- primEq((t9, 0))
  if t10
    then b5788[t8]
    else b5893[t9, t8]

-----------------------------------------
-- not recursive
b5839 :: [Bit 32, Bit 32] >>= [Unit]
b5839[t0, t1] =
  t2 <- add((str20, 1))
  t3 <- inb((1021))
  t4 <- and((t3, 96))
  t5 <- b1602[t4, 0, t0]
  t6 <- primEq((t0, 10))
  if t6
    then b5843[t0, t2, t1]
    else b5845[t0, t2, t1]

-----------------------------------------
-- not recursive
b5828 :: [Bit 32] >>= [Unit]
b5828[t0] =
  t1 <- add((str21, 1))
  t2 <- b5150[t0, t1]
  t3 <- load32((4108))
  t4 <- load8((str18))
  t5 <- primEq((t4, 0))
  if t5
    then b5788[t3]
    else b5893[t4, t3]

-----------------------------------------
-- not recursive
b3628 :: [] >>= [Unit]
b3628[] =
  t0 <- load32((4108))
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b5788[t0]
    else b5893[t1, t0]

-----------------------------------------
-- not recursive
b3627 :: [Bit 32] >>= [Unit]
b3627[t0] =
  t1 <- and((t0, 15))
  t2 <- b1638[t1, 9]
  t3 <- store8((itoaBuf, t2))
  t4 <- b6647[1, 0, 31, t0, 32]
  t5 <- load8((str21))
  t6 <- primEq((t5, 0))
  if t6
    then b3628[]
    else b5828[t5]

-----------------------------------------
-- not recursive
b5837 :: [Bit 32] >>= [Unit]
b5837[t0] =
  t1 <- load8((str20))
  t2 <- primEq((t1, 0))
  if t2
    then b3627[t0]
    else b5839[t1, t0]

-----------------------------------------
-- recursive
b5848 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5848[t0, t1, t2] =
  t3 <- add((t1, 1))
  b5850[t0, t3, t2]
b5850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
b5850[t0, t1, t2] =
  t3 <- b1997[t0]
  t4 <- load8((t1))
  t5 <- primEq((t4, 0))
  if t5
    then b5837[t2]
    else b5848[t4, t1, t2]

-----------------------------------------
-- not recursive
b6469 :: [Bit 32, Bit 32] >>= [Unit]
b6469[t0, t1] =
  t2 <- add((t1, 1))
  b5850[t0, t2, t1]

-----------------------------------------
-- not recursive
b5854 :: [Bit 32] >>= [Unit]
b5854[t0] =
  t1 <- load8((t0))
  t2 <- primEq((t1, 0))
  if t2
    then b5837[t0]
    else b6469[t1, t0]

-----------------------------------------
-- not recursive
b5875 :: [Bit 32, Bit 32] >>= [Unit]
b5875[t0, t1] =
  t2 <- add((str16, 1))
  t3 <- b5150[t0, t2]
  t4 <- load8((str19))
  t5 <- primEq((t4, 0))
  if t5
    then b5854[t1]
    else b5872[t4, t1]

-----------------------------------------
-- not recursive
b5861 :: [Bit 32] >>= [Unit]
b5861[t0] =
  t1 <- load8((str19))
  t2 <- primEq((t1, 0))
  if t2
    then b5854[t0]
    else b5872[t1, t0]

-----------------------------------------
-- not recursive
b5873 :: [Bit 32] >>= [Unit]
b5873[t0] =
  t1 <- load8((str16))
  t2 <- primEq((t1, 0))
  if t2
    then b5861[t0]
    else b5875[t1, t0]

-----------------------------------------
-- not recursive
b3067 :: [] >>= [Unit]
b3067[] =
  t0 <- load32((4104))
  t1 <- load8((str18))
  t2 <- primEq((t1, 0))
  if t2
    then b5873[t0]
    else b5896[t1, t0]

-----------------------------------------
-- not recursive
b3066 :: [] >>= [Unit]
b3066[] =
  t0 <- load32((4100))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b5477[t1, t2, 8, 0]
  t4 <- load8((str15))
  t5 <- primEq((t4, 0))
  if t5
    then b3067[]
    else b5977[t4]

-----------------------------------------
-- not recursive
b3065 :: [] >>= [Unit]
b3065[] =
  t0 <- load32((4096))
  t1 <- load32((t0))
  t2 <- add((t0, 4))
  t3 <- b5339[t1, t2, 12, 0]
  t4 <- load8((str13))
  t5 <- primEq((t4, 0))
  if t5
    then b3066[]
    else b5995[t4]

-----------------------------------------
-- not recursive
b1968 :: [] >>= [Unit]
b1968[] =
  t0 <- store8((console, 1))
  t1 <- add((console, 1))
  t2 <- store8((t1, 1))
  t3 <- add((console, 2))
  t4 <- store8((t3, 23))
  t5 <- add((console, 3))
  t6 <- store8((t5, 45))
  t7 <- add((console, 4))
  t8 <- store8((t7, 1))
  t9 <- add((console, 5))
  t10 <- store8((t9, 1))
  t11 <- add((console, 6))
  t12 <- store8((t11, 15))
  t13 <- b1244[]
  t14 <- load8((str11))
  t15 <- primEq((t14, 0))
  if t15
    then b3065[]
    else b6013[t14]

-----------------------------------------
-- recursive
b6025 :: [Bit 32, Bit 32] >>= [Unit]
b6025[t0, t1] =
  t2 <- b1988[t0]
  t3 <- load8((t1))
  t4 <- primEq((t3, 0))
  if t4
    then b1968[]
    else b6018[t3, t1]
b6023 :: [Bit 32, Bit 32] >>= [Unit]
b6023[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, 13]
  t5 <- b1988[t0]
  t6 <- load8((t1))
  t7 <- primEq((t6, 0))
  if t7
    then b1968[]
    else b6018[t6, t1]
b6018 :: [Bit 32, Bit 32] >>= [Unit]
b6018[t0, t1] =
  t2 <- add((t1, 1))
  b6020[t0, t2]
b6020 :: [Bit 32, Bit 32] >>= [Unit]
b6020[t0, t1] =
  t2 <- inb((1021))
  t3 <- and((t2, 96))
  t4 <- b1602[t3, 0, t0]
  t5 <- primEq((t0, 10))
  if t5
    then b6023[t0, t1]
    else b6025[t0, t1]

-----------------------------------------
-- not recursive
b6028 :: [Bit 32] >>= [Unit]
b6028[t0] =
  t1 <- add((str47, 1))
  b6020[t0, t1]

-----------------------------------------
-- not recursive
initialize :: [] >>= [Unit]
initialize[] =
  t0 <- store1((current, flag0))
  t1 <- store32((users, 0))
  t2 <- add((users, 4))
  t3 <- store32((t2, 0))
  t4 <- add((users, 8))
  t5 <- store32((t4, 0))
  t6 <- add((users, 12))
  t7 <- store32((t6, 0))
  t8 <- add((users, 16))
  t9 <- store32((t8, 0))
  t10 <- add((users, 20))
  t11 <- store32((t10, 0))
  t12 <- add((users, 24))
  t13 <- store32((t12, 0))
  t14 <- add((users, 28))
  t15 <- store32((t14, 0))
  t16 <- add((users, 32))
  t17 <- store32((t16, 59))
  t18 <- add((users, 36))
  t19 <- store32((t18, 59))
  t20 <- add((users, 40))
  t21 <- store32((t20, 59))
  t22 <- add((users, 44))
  t23 <- store32((t22, 59))
  t24 <- add((users, 48))
  t25 <- store32((t24, 0))
  t26 <- add((users, 52))
  t27 <- store32((t26, 0))
  t28 <- add((users, 56))
  t29 <- store32((t28, 51))
  t30 <- add((users, 60))
  t31 <- store32((t30, 12802))
  t32 <- add((users, 64))
  t33 <- store32((t32, 0))
  t34 <- add((users, 68))
  t35 <- store32((t34, 59))
  t36 <- add((users, 72))
  t37 <- store32((t36, 0))
  t38 <- add((users, 76))
  t39 <- store32((t38, 0))
  t40 <- add((users, 80))
  t41 <- store32((t40, 0))
  t42 <- add((users, 84))
  t43 <- store32((t42, 0))
  t44 <- add((users, 88))
  t45 <- store32((t44, 0))
  t46 <- add((users, 92))
  t47 <- store32((t46, 0))
  t48 <- add((users, 96))
  t49 <- store32((t48, 0))
  t50 <- add((users, 100))
  t51 <- store32((t50, 0))
  t52 <- add((users, 104))
  t53 <- store32((t52, 59))
  t54 <- add((users, 108))
  t55 <- store32((t54, 59))
  t56 <- add((users, 112))
  t57 <- store32((t56, 59))
  t58 <- add((users, 116))
  t59 <- store32((t58, 59))
  t60 <- add((users, 120))
  t61 <- store32((t60, 0))
  t62 <- add((users, 124))
  t63 <- store32((t62, 0))
  t64 <- add((users, 128))
  t65 <- store32((t64, 51))
  t66 <- add((users, 132))
  t67 <- store32((t66, 12802))
  t68 <- add((users, 136))
  t69 <- store32((t68, 0))
  t70 <- add((users, 140))
  t71 <- store32((t70, 59))
  t72 <- store8((console, 0))
  t73 <- add((console, 1))
  t74 <- store8((t73, 0))
  t75 <- add((console, 2))
  t76 <- store8((t75, 24))
  t77 <- add((console, 3))
  t78 <- store8((t77, 79))
  t79 <- add((console, 4))
  t80 <- store8((t79, 0))
  t81 <- add((console, 5))
  t82 <- store8((t81, 0))
  t83 <- add((console, 6))
  t84 <- store8((t83, 10))
  t85 <- store8((keyUp, 0))
  t86 <- store8((keyDown, 0))
  t87 <- store32((ticks, 1))
  t88 <- store1((isPlaying, flag1))
  t89 <- store32((objects, 8))
  t90 <- add((objects, 4))
  t91 <- store32((t90, 1))
  t92 <- add((objects, 8))
  t93 <- store32((t92, 18))
  t94 <- add((objects, 12))
  t95 <- store32((t94, 21))
  t96 <- add((objects, 16))
  t97 <- store32((t96, 48))
  t98 <- add((objects, 20))
  t99 <- store32((t98, 22))
  t100 <- add((objects, 24))
  t101 <- b4614[t100, 1]
  t102 <- store8((spinner, 45))
  t103 <- add((spinner, 1))
  t104 <- store8((t103, 92))
  t105 <- add((spinner, 2))
  t106 <- store8((t105, 124))
  t107 <- add((spinner, 3))
  t108 <- store8((t107, 47))
  t109 <- store8((spinpos, 0))
  t110 <- store8((pos, 55))
  t111 <- store1((dir, flag1))
  t112 <- store32((bricksLeft, 15))
  t113 <- store1((headingLeft, flag1))
  t114 <- store1((headingTop, flag1))
  t115 <- store8((itoaBuf, 0))
  t116 <- add((itoaBuf, 1))
  t117 <- b4621[t116, 1]
  t118 <- store8((t83, 32))
  t119 <- b1244[]
  t120 <- load8((str47))
  t121 <- primEq((t120, 0))
  if t121
    then b1968[]
    else b6028[t120]

-----------------------------------------
-- Entrypoints: yield kputc keyboardInterrupt timerInterrupt unhandled
