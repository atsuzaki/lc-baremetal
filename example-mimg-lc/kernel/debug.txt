Loading source files ...
Loading kernel.llc ...
Searching for "kernel.llc" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Loading cursor.llc ...
Searching for "cursor.llc" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Searching for "cursor.llc" in folder "/home/ayaka/projects/mil-tools/lib"
Searching for "cursor.llc" in folder "../../libs-lc"
Found file in "../../libs-lc/cursor.llc"
Loading core.llc ...
Searching for "core.llc" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Searching for "core.llc" in folder "/home/ayaka/projects/mil-tools/lib"
Found file in "/home/ayaka/projects/mil-tools/lib/core.llc"
Loading mimg.llc ...
Searching for "mimg.llc" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Searching for "mimg.llc" in folder "/home/ayaka/projects/mil-tools/lib"
Searching for "mimg.llc" in folder "../../libs-lc"
Found file in "../../libs-lc/mimg.llc"
Loading wvram.llc ...
Searching for "wvram.llc" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Searching for "wvram.llc" in folder "/home/ayaka/projects/mil-tools/lib"
Searching for "wvram.llc" in folder "../../libs-lc"
Found file in "../../libs-lc/wvram.llc"
Loading put.llc ...
Searching for "put.llc" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Searching for "put.llc" in folder "/home/ayaka/projects/mil-tools/lib"
Found file in "/home/ayaka/projects/mil-tools/lib/put.llc"
Loading nonzero.llc ...
Searching for "nonzero.llc" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Searching for "nonzero.llc" in folder "/home/ayaka/projects/mil-tools/lib"
Found file in "/home/ayaka/projects/mil-tools/lib/nonzero.llc"
Loading bit.llc ...
Searching for "bit.llc" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Searching for "bit.llc" in folder "/home/ayaka/projects/mil-tools/lib"
Found file in "/home/ayaka/projects/mil-tools/lib/bit.llc"
Loading string.llc ...
Searching for "string.llc" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Searching for "string.llc" in folder "/home/ayaka/projects/mil-tools/lib"
Found file in "/home/ayaka/projects/mil-tools/lib/string.llc"
Loading ix.llc ...
Searching for "ix.llc" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Searching for "ix.llc" in folder "/home/ayaka/projects/mil-tools/lib"
Found file in "/home/ayaka/projects/mil-tools/lib/ix.llc"
Loading serial.llc ...
Searching for "serial.llc" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Searching for "serial.llc" in folder "/home/ayaka/projects/mil-tools/lib"
Searching for "serial.llc" in folder "../../libs-lc"
Found file in "../../libs-lc/serial.llc"
Loading portio.llc ...
Searching for "portio.llc" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Searching for "portio.llc" in folder "/home/ayaka/projects/mil-tools/lib"
Searching for "portio.llc" in folder "../../libs-lc"
Found file in "../../libs-lc/portio.llc"
Loading core.mil ...
Searching for "core.mil" with search path "/home/ayaka/projects/mil-tools/lib:../../libs-lc"
Searching for "core.mil" in folder "/home/ayaka/projects/mil-tools/lib"
Found file in "/home/ayaka/projects/mil-tools/lib/core.mil"
Checking core.mil ...
Pair :: * -> * -> *
Maybe :: * -> *
List :: * -> *
BitSize(Bool) = 1
predFalse(x :: Bit 1) = x == 0b0
predTrue(x :: Bit 1) = x == 0b1
False :: {} Bool
Constructor False: width 1, tagbits 0x0 and 0 field(s):
  mask-test predFalse(x :: Bit 1) = x == 0b0
True :: {} Bool
Constructor True: width 1, tagbits 0x1 and 0 field(s):
  mask-test predTrue(x :: Bit 1) = x == 0b1
Pair :: forall (a :: *) (b :: *). {a, b} Pair a b --  num = 0, arity = 2
Nothing :: forall (a :: *). {} Maybe a --  num = 0, arity = 0
Just :: forall (a :: *). {a} Maybe a --  num = 1, arity = 1
Nil :: forall (a :: *). {} List a --  num = 0, arity = 0
Cons :: forall (a :: *). {a, List a} List a --  num = 1, arity = 2
Type checking ...
Inferred loadCharImp1 :: {Addr} [] ->> [Bit 8]
Inferred b66 :: [Addr] >>= [Proc (Bit 8)]
Inferred k45 :: {} [Addr] ->> [Proc (Bit 8)]
Inferred b67 :: [] >>= [Addr -> Proc (Bit 8)]
generics for loadCharImp: [] in type [Addr -> Proc (Bit 8)]
TopLevel group inferred loadCharImp :: [Addr -> Proc (Bit 8)]
Generalizing definition for: loadCharImp with generics []
Inferred loadCharImp :: Addr -> Proc (Bit 8)
Inferred b64 :: forall (a :: *). [a] >>= [a]
Inferred k44 :: forall (a :: *). {} [a] ->> [a]
Inferred b65 :: forall (a :: *). [] >>= [a -> a]
generics for ptrToWordImp: [] in type [Word -> Word]
TopLevel group inferred ptrToWordImp :: [Word -> Word]
Generalizing definition for: ptrToWordImp with generics []
Inferred ptrToWordImp :: Word -> Word
generics for false: [] in type [Bool]
TopLevel group inferred false :: [Bool]
Generalizing definition for: false with generics []
Inferred false :: Bool
Inferred bfalse :: [] >>= [Bool]
generics for true: [] in type [Bool]
TopLevel group inferred true :: [Bool]
Generalizing definition for: true with generics []
Inferred true :: Bool
Inferred btrue :: [] >>= [Bool]
Inferred bconv :: [Flag] >>= [Bool]
Inferred b61 :: [Word, Word] >>= [Bool]
Inferred k42 :: {Word} [Word] ->> [Bool]
Inferred b62 :: [Word] >>= [Word -> Bool]
Inferred k43 :: {} [Word] ->> [Word -> Bool]
Inferred b63 :: [] >>= [Word -> Word -> Bool]
generics for <=: [] in type [Word -> Word -> Bool]
TopLevel group inferred <= :: [Word -> Word -> Bool]
Generalizing definition for: <= with generics []
Inferred <= :: Word -> Word -> Bool
Inferred b58 :: [Word, Word] >>= [Bool]
Inferred k40 :: {Word} [Word] ->> [Bool]
Inferred b59 :: [Word] >>= [Word -> Bool]
Inferred k41 :: {} [Word] ->> [Word -> Bool]
Inferred b60 :: [] >>= [Word -> Word -> Bool]
generics for <: [] in type [Word -> Word -> Bool]
TopLevel group inferred < :: [Word -> Word -> Bool]
Generalizing definition for: < with generics []
Inferred < :: Word -> Word -> Bool
Inferred b55 :: [Word, Word] >>= [Bool]
Inferred k38 :: {Word} [Word] ->> [Bool]
Inferred b56 :: [Word] >>= [Word -> Bool]
Inferred k39 :: {} [Word] ->> [Word -> Bool]
Inferred b57 :: [] >>= [Word -> Word -> Bool]
generics for >=: [] in type [Word -> Word -> Bool]
TopLevel group inferred >= :: [Word -> Word -> Bool]
Generalizing definition for: >= with generics []
Inferred >= :: Word -> Word -> Bool
Inferred b52 :: [Word, Word] >>= [Bool]
Inferred k36 :: {Word} [Word] ->> [Bool]
Inferred b53 :: [Word] >>= [Word -> Bool]
Inferred k37 :: {} [Word] ->> [Word -> Bool]
Inferred b54 :: [] >>= [Word -> Word -> Bool]
generics for >: [] in type [Word -> Word -> Bool]
TopLevel group inferred > :: [Word -> Word -> Bool]
Generalizing definition for: > with generics []
Inferred > :: Word -> Word -> Bool
Inferred b49 :: [Word, Word] >>= [Bool]
Inferred k34 :: {Word} [Word] ->> [Bool]
Inferred b50 :: [Word] >>= [Word -> Bool]
Inferred k35 :: {} [Word] ->> [Word -> Bool]
Inferred b51 :: [] >>= [Word -> Word -> Bool]
generics for <=+: [] in type [Word -> Word -> Bool]
TopLevel group inferred <=+ :: [Word -> Word -> Bool]
Generalizing definition for: <=+ with generics []
Inferred <=+ :: Word -> Word -> Bool
Inferred b46 :: [Word, Word] >>= [Bool]
Inferred k32 :: {Word} [Word] ->> [Bool]
Inferred b47 :: [Word] >>= [Word -> Bool]
Inferred k33 :: {} [Word] ->> [Word -> Bool]
Inferred b48 :: [] >>= [Word -> Word -> Bool]
generics for <+: [] in type [Word -> Word -> Bool]
TopLevel group inferred <+ :: [Word -> Word -> Bool]
Generalizing definition for: <+ with generics []
Inferred <+ :: Word -> Word -> Bool
Inferred b43 :: [Word, Word] >>= [Bool]
Inferred k30 :: {Word} [Word] ->> [Bool]
Inferred b44 :: [Word] >>= [Word -> Bool]
Inferred k31 :: {} [Word] ->> [Word -> Bool]
Inferred b45 :: [] >>= [Word -> Word -> Bool]
generics for >=+: [] in type [Word -> Word -> Bool]
TopLevel group inferred >=+ :: [Word -> Word -> Bool]
Generalizing definition for: >=+ with generics []
Inferred >=+ :: Word -> Word -> Bool
Inferred b40 :: [Word, Word] >>= [Bool]
Inferred k28 :: {Word} [Word] ->> [Bool]
Inferred b41 :: [Word] >>= [Word -> Bool]
Inferred k29 :: {} [Word] ->> [Word -> Bool]
Inferred b42 :: [] >>= [Word -> Word -> Bool]
generics for >+: [] in type [Word -> Word -> Bool]
TopLevel group inferred >+ :: [Word -> Word -> Bool]
Generalizing definition for: >+ with generics []
Inferred >+ :: Word -> Word -> Bool
Inferred b37 :: [Word, Word] >>= [Bool]
Inferred k26 :: {Word} [Word] ->> [Bool]
Inferred b38 :: [Word] >>= [Word -> Bool]
Inferred k27 :: {} [Word] ->> [Word -> Bool]
Inferred b39 :: [] >>= [Word -> Word -> Bool]
generics for /=: [] in type [Word -> Word -> Bool]
TopLevel group inferred /= :: [Word -> Word -> Bool]
Generalizing definition for: /= with generics []
Inferred /= :: Word -> Word -> Bool
Inferred b34 :: [Word, Word] >>= [Bool]
Inferred k24 :: {Word} [Word] ->> [Bool]
Inferred b35 :: [Word] >>= [Word -> Bool]
Inferred k25 :: {} [Word] ->> [Word -> Bool]
Inferred b36 :: [] >>= [Word -> Word -> Bool]
generics for ==: [] in type [Word -> Word -> Bool]
TopLevel group inferred == :: [Word -> Word -> Bool]
Generalizing definition for: == with generics []
Inferred == :: Word -> Word -> Bool
Inferred b31 :: [Word, Word] >>= [Word]
Inferred k22 :: {Word} [Word] ->> [Word]
Inferred b32 :: [Word] >>= [Word -> Word]
Inferred k23 :: {} [Word] ->> [Word -> Word]
Inferred b33 :: [] >>= [Word -> Word -> Word]
generics for ashr: [] in type [Word -> Word -> Word]
TopLevel group inferred ashr :: [Word -> Word -> Word]
Generalizing definition for: ashr with generics []
Inferred ashr :: Word -> Word -> Word
Inferred b28 :: [Word, Word] >>= [Word]
Inferred k20 :: {Word} [Word] ->> [Word]
Inferred b29 :: [Word] >>= [Word -> Word]
Inferred k21 :: {} [Word] ->> [Word -> Word]
Inferred b30 :: [] >>= [Word -> Word -> Word]
generics for lshr: [] in type [Word -> Word -> Word]
TopLevel group inferred lshr :: [Word -> Word -> Word]
Generalizing definition for: lshr with generics []
Inferred lshr :: Word -> Word -> Word
Inferred b25 :: [Word, Word] >>= [Word]
Inferred k18 :: {Word} [Word] ->> [Word]
Inferred b26 :: [Word] >>= [Word -> Word]
Inferred k19 :: {} [Word] ->> [Word -> Word]
Inferred b27 :: [] >>= [Word -> Word -> Word]
generics for shl: [] in type [Word -> Word -> Word]
TopLevel group inferred shl :: [Word -> Word -> Word]
Generalizing definition for: shl with generics []
Inferred shl :: Word -> Word -> Word
Inferred b23 :: [Word] >>= [Word]
Inferred k17 :: {} [Word] ->> [Word]
Inferred b24 :: [] >>= [Word -> Word]
generics for neg: [] in type [Word -> Word]
TopLevel group inferred neg :: [Word -> Word]
Generalizing definition for: neg with generics []
Inferred neg :: Word -> Word
Inferred b20 :: [Word, Word] >>= [Word]
Inferred k15 :: {Word} [Word] ->> [Word]
Inferred b21 :: [Word] >>= [Word -> Word]
Inferred k16 :: {} [Word] ->> [Word -> Word]
Inferred b22 :: [] >>= [Word -> Word -> Word]
generics for /: [] in type [Word -> Word -> Word]
TopLevel group inferred / :: [Word -> Word -> Word]
Generalizing definition for: / with generics []
Inferred / :: Word -> Word -> Word
Inferred b17 :: [Word, Word] >>= [Word]
Inferred k13 :: {Word} [Word] ->> [Word]
Inferred b18 :: [Word] >>= [Word -> Word]
Inferred k14 :: {} [Word] ->> [Word -> Word]
Inferred b19 :: [] >>= [Word -> Word -> Word]
generics for *: [] in type [Word -> Word -> Word]
TopLevel group inferred * :: [Word -> Word -> Word]
Generalizing definition for: * with generics []
Inferred * :: Word -> Word -> Word
Inferred b14 :: [Word, Word] >>= [Word]
Inferred k11 :: {Word} [Word] ->> [Word]
Inferred b15 :: [Word] >>= [Word -> Word]
Inferred k12 :: {} [Word] ->> [Word -> Word]
Inferred b16 :: [] >>= [Word -> Word -> Word]
generics for -: [] in type [Word -> Word -> Word]
TopLevel group inferred - :: [Word -> Word -> Word]
Generalizing definition for: - with generics []
Inferred - :: Word -> Word -> Word
Inferred b11 :: [Word, Word] >>= [Word]
Inferred k9 :: {Word} [Word] ->> [Word]
Inferred b12 :: [Word] >>= [Word -> Word]
Inferred k10 :: {} [Word] ->> [Word -> Word]
Inferred b13 :: [] >>= [Word -> Word -> Word]
generics for +: [] in type [Word -> Word -> Word]
TopLevel group inferred + :: [Word -> Word -> Word]
Generalizing definition for: + with generics []
Inferred + :: Word -> Word -> Word
Inferred ret1 :: forall (a :: *). {a} [] ->> [a]
Inferred b9 :: forall (a :: *). [a] >>= [Proc a]
Inferred k8 :: forall (a :: *). {} [a] ->> [Proc a]
Inferred b10 :: forall (a :: *). [] >>= [a -> Proc a]
generics for primRet: [?350] in type [?350 -> Proc ?350]
TopLevel group inferred primRet :: forall (a :: *). [a -> Proc a]
Generalizing definition for: primRet with generics [?350]
Inferred primRet :: forall (a :: *). a -> Proc a
Compiling core.llc ...
synonym WordSize is at level 2
synonym ByteBits is at level 1
synonym Byte is at level 2
Inferred initArrayAll :: forall (a :: *) (n :: nat). a -> Init (Array n (Stored a))
Inferred nullArray :: forall (n :: nat) (a :: area). Init (Array n (Stored (Ptr a)))
Inferred <-> :: forall (a :: *). Ref (Stored a) -> Ref (Stored a) -> Proc Unit
Inferred update :: forall (a :: *). Ref (Stored a) -> (a -> a) -> Proc Unit
Inferred >>= :: forall (a :: *) (b :: *). Proc a -> (a -> Proc b) -> Proc b
Inferred >-> :: forall (a :: *). Ref (Stored a) -> Ref (Stored a) -> Proc Unit
Inferred return :: forall (a :: *). a -> Proc a
Inferred snd :: forall (a :: *) (b :: *). Pair a b -> b
Inferred fst :: forall (a :: *) (b :: *). Pair a b -> a
Inferred ptrEq :: forall (a :: area). Ptr a -> Ptr a -> Bool
Inferred refEq :: forall (a :: area). Ref a -> Ref a -> Bool
Type of lifted refEq :: forall (a :: area). Ref a -> Ref a -> Bool
Type of lifted ptrEq :: forall (a :: area). Ptr a -> Ptr a -> Bool
Type of lifted fst :: forall (a :: *) (b :: *). Pair a b -> a
Type of lifted snd :: forall (a :: *) (b :: *). Pair a b -> b
Type of lifted >>= :: forall (a :: *) (b :: *). Proc a -> (a -> Proc b) -> Proc b
Type of lifted return :: forall (a :: *). a -> Proc a
Type of lifted >-> :: forall (t :: *). Ref (Stored t) -> Ref (Stored t) -> Proc Unit
Type of lifted update :: forall (t :: *). Ref (Stored t) -> (t -> t) -> Proc Unit
Type of lifted <-> :: forall (t :: *). Ref (Stored t) -> Ref (Stored t) -> Proc Unit
Type of lifted initArrayAll :: forall (a :: *) (n :: nat). a -> Init (Array n (Stored a))
Type of lifted nullArray :: forall (n :: nat) (a :: area). Init (Array n (Stored (Ptr a)))
Compiling bit.llc ...
Inferred bit1 :: forall (n :: nat). Bit n
Inferred bitDec :: forall (n :: nat). Bit n -> Bit n
Inferred bit0 :: forall (n :: nat). Bit n
Type of lifted bit0 :: forall (n :: nat). Bit n
Type of lifted bit1 :: forall (n :: nat). Bit n
Type of lifted bitDec :: forall (n :: nat). Bit n -> Bit n
Compiling portio.llc ...
synonym Port is at level 1
Inferred updatePort :: Port -> (Word -> Word) -> Proc Unit
Inferred portPlus :: Port -> Word -> Port
Type of lifted portPlus :: Port -> Word -> Port
Type of lifted updatePort :: Port -> (Word -> Word) -> Proc Unit
Compiling string.llc ...
Inferred loop :: Ref String -> ?472 -> Proc ?472
Inferred foldString :: forall (a :: *). a -> (a -> Word -> Proc a) -> Ref String -> Proc a
Inferred length :: Ref String -> Proc Word
Inferred nextCharImp :: Ref String -> Proc (Maybe (Pair Word Word))
Type of lifted nextCharImp :: Ref String -> Proc (Maybe (Pair Word Word))
Type of lifted loop0 :: forall (a :: *). (a -> Word -> Proc a) -> Ref String -> a -> Proc a
Type of lifted foldString :: forall (a :: *). a -> (a -> Word -> Proc a) -> Ref String -> Proc a
Type of lifted length :: Ref String -> Proc Word
Compiling nonzero.llc ...
Inferred nz16 :: forall (n :: nat). NZBit n
Inferred nz10 :: forall (n :: nat). NZBit n
Inferred nz8 :: forall (n :: nat). NZBit n
Inferred nz2 :: forall (n :: nat). NZBit n
Type of lifted nz2 :: forall (n :: nat). NZBit n
Type of lifted nz8 :: forall (n :: nat). NZBit n
Type of lifted nz10 :: forall (n :: nat). NZBit n
Type of lifted nz16 :: forall (n :: nat). NZBit n
Compiling ix.llc ...
Inferred ix0 :: forall (n :: nat). Ix n
Inferred ix1 :: forall (n :: nat). Ix n
Inferred ltIncBy :: forall (m :: nat). Ix m -> Ix m -> Ix m -> Maybe (Ix m)
Inferred ltInc :: forall (n :: nat). Ix n -> Ix n -> Maybe (Ix n)
Inferred incIx :: forall (m :: nat). Ix m -> Maybe (Ix m)
Inferred loop :: Ix ?545 -> Proc Unit
Inferred foreach :: forall (n :: nat). (Ix n -> Proc Unit) -> Proc Unit
Inferred ltDecBy :: forall (m :: nat). Ix m -> Ix m -> Ix m -> Maybe (Ix m)
Inferred ltDec :: forall (n :: nat). Ix n -> Ix n -> Maybe (Ix n)
Inferred decIx :: forall (n :: nat). Ix n -> Maybe (Ix n)
Inferred <=? :: forall (m :: nat). Word -> Ix m -> Maybe (Ix m)
Inferred maybeIx :: forall (n :: nat). Word -> Maybe (Ix n)
Inferred ix7 :: forall (n :: nat). Ix n
Inferred ix6 :: forall (n :: nat). Ix n
Inferred ix5 :: forall (n :: nat). Ix n
Inferred ix4 :: forall (n :: nat). Ix n
Inferred ix3 :: forall (n :: nat). Ix n
Inferred ix2 :: forall (n :: nat). Ix n
Type of lifted ix0 :: forall (n :: nat). Ix n
Type of lifted ix1 :: forall (n :: nat). Ix n
Type of lifted ix2 :: forall (n :: nat). Ix n
Type of lifted ix3 :: forall (n :: nat). Ix n
Type of lifted ix4 :: forall (n :: nat). Ix n
Type of lifted ix5 :: forall (n :: nat). Ix n
Type of lifted ix6 :: forall (n :: nat). Ix n
Type of lifted ix7 :: forall (n :: nat). Ix n
Type of lifted maybeIx :: forall (n :: nat). Word -> Maybe (Ix n)
Type of lifted <=? :: forall (m :: nat). Word -> Ix m -> Maybe (Ix m)
Type of lifted ltIncBy :: forall (n :: nat). Ix n -> Ix n -> Ix n -> Maybe (Ix n)
Type of lifted ltDecBy :: forall (n :: nat). Ix n -> Ix n -> Ix n -> Maybe (Ix n)
Type of lifted ltInc :: forall (n :: nat). Ix n -> Ix n -> Maybe (Ix n)
Type of lifted ltDec :: forall (n :: nat). Ix n -> Ix n -> Maybe (Ix n)
Type of lifted incIx :: forall (n :: nat). Ix n -> Maybe (Ix n)
Type of lifted decIx :: forall (n :: nat). Ix n -> Maybe (Ix n)
Type of lifted loop1 :: forall (n :: nat). (Ix n -> Proc Unit) -> Ix n -> Proc Unit
Type of lifted foreach :: forall (n :: nat). (Ix n -> Proc Unit) -> Proc Unit
Compiling put.llc ...
synonym Putchar is at level 3
synonym Putnum is at level 3
synonym MaxWidth is at level 3
area type is Array MaxWidth (Stored Byte), alignment=1
Inferred digitToByte :: Word -> Byte
Inferred output :: Ix MaxWidth -> Proc Unit
Inferred padloop :: Ix MaxWidth -> Proc Unit
Inferred pad :: Ix MaxWidth -> Proc Unit
Inferred q :: Bit WordSize
Inferred loop :: Ix MaxWidth -> Bit WordSize -> Proc Unit
Inferred hputDigitsFmt :: NZBit WordSize -> Ix MaxWidth -> Ix MaxWidth -> Word -> Putchar -> Putnum
Inferred hputDigits :: NZBit WordSize -> Putchar -> Putnum
Inferred hputUnsigned :: Putchar -> Putnum
Inferred ifZero :: Putnum -> Putnum
Inferred multiplier :: Word -> Word -> Putnum -> Putnum
Inferred hputSize :: Putchar -> Putnum
Inferred hputHex :: Putchar -> Putnum
Inferred hputOctal :: Putchar -> Putnum
Inferred hputBin :: Putchar -> Putnum
Inferred hputSigned :: Putchar -> Putnum
Inferred hputs :: Putchar -> Ref String -> Proc Unit
Type of lifted hputs :: Putchar -> Ref String -> Proc Unit
Type of lifted hputUnsigned :: Putchar -> Putnum
Type of lifted hputSigned :: Putchar -> Putnum
Type of lifted hputBin :: Putchar -> Putnum
Type of lifted hputOctal :: Putchar -> Putnum
Type of lifted hputHex :: Putchar -> Putnum
Type of lifted hputDigits :: NZBit WordSize -> Putchar -> Putnum
Type of lifted output2 :: Putchar -> Ix MaxWidth -> Proc Unit
Type of lifted padloop3 :: Ix MaxWidth -> Word -> Putchar -> Ix MaxWidth -> Proc Unit
Type of lifted loop4 :: Ix MaxWidth -> (Ix MaxWidth -> Proc Unit) -> NZBit WordSize -> Ix MaxWidth -> Bit WordSize -> Proc Unit
Type of lifted hputDigitsFmt :: NZBit WordSize -> Ix MaxWidth -> Ix MaxWidth -> Word -> Putchar -> Putnum
Type of lifted digitToByte :: Word -> Byte
Type of lifted hputSize :: Putchar -> Putnum
Compiling serial.llc ...
Inferred com1data :: Port
Inferred com1ctrl :: Port
Inferred put :: Word -> Proc Unit
Inferred sputchar :: Word -> Proc Unit
Inferred sputDigitsFmt :: NZBit WordSize -> Ix MaxWidth -> Ix MaxWidth -> Word -> Putnum
Inferred sputSize :: Putnum
Inferred sputHex :: Putnum
Inferred sputOctal :: Putnum
Inferred sputBin :: Putnum
Inferred sputSigned :: Putnum
Inferred sputUnsigned :: Putnum
Inferred sputs :: Ref String -> Proc Unit
Type of lifted put5 :: Word -> Proc Unit
Type of lifted sputchar :: Word -> Proc Unit
Type of lifted com1data :: Port
Type of lifted com1ctrl :: Port
Type of lifted sputs :: Ref String -> Proc Unit
Type of lifted sputUnsigned :: Putnum
Type of lifted sputSigned :: Putnum
Type of lifted sputBin :: Putnum
Type of lifted sputOctal :: Putnum
Type of lifted sputHex :: Putnum
Type of lifted sputSize :: Putnum
Type of lifted sputDigitsFmt :: NZBit WordSize -> Ix MaxWidth -> Ix MaxWidth -> Word -> Putnum
Compiling wvram.llc ...
BitSize(Char) = 16
predChar(x :: Bit 16) = true
ByteSize(Coord) = 2
Field row: offset=0, alignment=1
Field col: offset=1, alignment=1
Structure Coord alignment=1
ByteSize(Window) = 7
Field topleft: offset=0, alignment=1
Field bottomright: offset=2, alignment=1
Field current: offset=4, alignment=1
Field attr: offset=6, alignment=1
Structure Window alignment=8
synonym NumCols is at level 1
synonym NumRows is at level 1
Char :: {Char.Char} Char
Constructor Char: width 16, tagbits 0x0 and 2 field(s):
  0: attr :: Byte -- offset=8, width=8
  1: char :: Byte -- offset=0, width=8
  mask-test predChar(x :: Bit 16) = true
synonym Screen is at level 2
Struct Coord: size 2, with 2 field(s):
  0: row :: Stored (Ix NumRows) -- offset=0, width=1
  1: col :: Stored (Ix NumCols) -- offset=1, width=1
Struct Window: size 7, with 4 field(s):
  0: topleft :: Coord -- offset=0, width=2
  1: bottomright :: Coord -- offset=2, width=2
  2: current :: Coord -- offset=4, width=2
  3: attr :: Stored Byte -- offset=6, width=1
area type is Window, alignment=8
Inferred loop :: Ix ?757 -> Proc Unit
Inferred for :: forall (n :: nat). Ix n -> Ix n -> (Ix n -> Proc Unit) -> Proc Unit
Inferred pos :: Ix NumRows -> Ix NumCols -> Ref (Stored Char)
Inferred defAttr :: Bit 8
Inferred char :: Word -> Char
Inferred blank :: Char
Inferred copy :: Ix NumRows -> Ix NumRows -> Proc Unit
Inferred clear :: Proc Unit
Inferred loop :: Ix NumRows -> Proc Unit
Inferred scroll :: Ref Window -> Proc Unit
Inferred newline :: Ref Window -> Ix NumRows -> Proc Unit
Inferred wputchar :: Ref Window -> Word -> Proc Unit
Inferred wputDigitsFmt :: Ref Window -> NZBit WordSize -> Ix MaxWidth -> Ix MaxWidth -> Word -> Putnum
Inferred wputSize :: Ref Window -> Putnum
Inferred wputHex :: Ref Window -> Putnum
Inferred wputOctal :: Ref Window -> Putnum
Inferred wputBin :: Ref Window -> Putnum
Inferred wputSigned :: Ref Window -> Putnum
Inferred wputUnsigned :: Ref Window -> Putnum
Inferred wputs :: Ref Window -> Ref String -> Proc Unit
Inferred putchar :: Putchar
Inferred putDigitsFmt :: NZBit WordSize -> Ix MaxWidth -> Ix MaxWidth -> Word -> Putnum
Inferred putSize :: Putnum
Inferred putHex :: Putnum
Inferred putOctal :: Putnum
Inferred putBin :: Putnum
Inferred putSigned :: Putnum
Inferred putUnsigned :: Putnum
Inferred puts :: Ref String -> Proc Unit
Inferred clearWindow :: Ref Window -> Proc Unit
Inferred clearScreen :: Proc Unit
Inferred wputpixel :: Ref Window -> Word -> Byte -> Ix NumRows -> Ix NumCols -> Proc Unit
Inferred wsetAttr :: Ref Window -> Byte -> Proc Unit
Inferred initCoord :: Ix NumRows -> Ix NumCols -> Init Coord
Inferred topleft :: Init Coord
Inferred bottomright :: Init Coord
Inferred window :: Ix NumRows -> Ix NumCols -> Ix NumRows -> Ix NumCols -> Byte -> Init Window
Inferred getheight :: Ref Window -> Proc (Ix NumRows)
Inferred getwidth :: Ref Window -> Proc (Ix NumCols)
Type of lifted char :: Word -> Char
Type of lifted defAttr :: Bit 8
Type of lifted blank :: Char
Type of lifted pos :: Ix NumRows -> Ix NumCols -> Ref (Stored Char)
Type of lifted getwidth :: Ref Window -> Proc (Ix NumCols)
Type of lifted getheight :: Ref Window -> Proc (Ix NumRows)
Type of lifted initCoord :: Ix NumRows -> Ix NumCols -> Init Coord
Type of lifted window :: Ix NumRows -> Ix NumCols -> Ix NumRows -> Ix NumCols -> Byte -> Init Window
Type of lifted loop6 :: forall (n :: nat). Ix n -> (Ix n -> Proc Unit) -> Ix n -> Proc Unit
Type of lifted for :: forall (n :: nat). Ix n -> Ix n -> (Ix n -> Proc Unit) -> Proc Unit
Type of lifted wsetAttr :: Ref Window -> Byte -> Proc Unit
Type of lifted clearWindow :: Ref Window -> Proc Unit
Type of lifted wputchar :: Ref Window -> Word -> Proc Unit
Type of lifted wputpixel :: Ref Window -> Word -> Byte -> Ix NumRows -> Ix NumCols -> Proc Unit
Type of lifted newline :: Ref Window -> Ix NumRows -> Proc Unit
Type of lifted loop7 :: Ix NumRows -> (Ix NumRows -> Ix NumRows -> Proc Unit) -> Proc Unit -> Ix NumRows -> Proc Unit
Type of lifted scroll :: Ref Window -> Proc Unit
Type of lifted clearScreen :: Proc Unit
Type of lifted putchar :: Putchar
Type of lifted puts :: Ref String -> Proc Unit
Type of lifted putUnsigned :: Putnum
Type of lifted putSigned :: Putnum
Type of lifted putBin :: Putnum
Type of lifted putOctal :: Putnum
Type of lifted putHex :: Putnum
Type of lifted putSize :: Putnum
Type of lifted putDigitsFmt :: NZBit WordSize -> Ix MaxWidth -> Ix MaxWidth -> Word -> Putnum
Type of lifted wputs :: Ref Window -> Ref String -> Proc Unit
Type of lifted wputUnsigned :: Ref Window -> Putnum
Type of lifted wputSigned :: Ref Window -> Putnum
Type of lifted wputBin :: Ref Window -> Putnum
Type of lifted wputOctal :: Ref Window -> Putnum
Type of lifted wputHex :: Ref Window -> Putnum
Type of lifted wputSize :: Ref Window -> Putnum
Type of lifted wputDigitsFmt :: Ref Window -> NZBit WordSize -> Ix MaxWidth -> Ix MaxWidth -> Word -> Putnum
Compiling cursor.llc ...
Inferred advance :: forall (b :: *) (v :: *). (b -> Maybe (Pair v b)) -> Word -> b -> Maybe (Pair v b)
Inferred forallDoWith :: forall (b :: *) (a :: *) (s :: *). (b -> Maybe (Pair a b)) -> (s -> a -> Proc s) -> s -> b -> Proc s
Inferred addLabel :: Word -> ?1116 -> Proc Word
Inferred forallDisplay :: forall (a :: *) (b :: *). (a -> Maybe (Pair b a)) -> (b -> Proc Unit) -> Ref String -> a -> Proc Unit
Inferred forallDo :: forall (b :: *) (a :: *). (b -> Maybe (Pair a b)) -> (a -> Proc Unit) -> b -> Proc Unit
Type of lifted forallDo :: forall (c :: *) (a :: *). (c -> Maybe (Pair a c)) -> (a -> Proc Unit) -> c -> Proc Unit
Type of lifted forallDoWith :: forall (c :: *) (a :: *) (s :: *). (c -> Maybe (Pair a c)) -> (s -> a -> Proc s) -> s -> c -> Proc s
Type of lifted forallDisplay :: forall (c :: *) (a :: *). (c -> Maybe (Pair a c)) -> (a -> Proc Unit) -> Ref String -> c -> Proc Unit
Type of lifted advance :: forall (c :: *) (v :: *). (c -> Maybe (Pair v c)) -> Word -> c -> Maybe (Pair v c)
Compiling mimg.llc ...
ByteSize(MimgBootData) = 16
Field headers: offset=0, alignment=4
Field mmap: offset=4, alignment=4
Field cmdline: offset=8, alignment=4
Field imgline: offset=12, alignment=4
Structure MimgBootData alignment=4
ByteSize(MimgHeader) = 12
Field start: offset=0, alignment=4
Field end: offset=4, alignment=4
Field entry: offset=8, alignment=4
Structure MimgHeader alignment=4
ByteSize(MimgMMap) = 8
Field start: offset=0, alignment=4
Field end: offset=4, alignment=4
Structure MimgMMap alignment=4
BitSize(WordCursor) = 64
predWordCursor(x :: Bit 64) = true
BitSize(MimgHeaderCursor) = 64
BitSize(MimgMMapCursor) = 64
Struct MimgBootData: size 16, with 4 field(s):
  0: headers :: Stored (Ref MimgHeaderBlock) -- offset=0, width=4
  1: mmap :: Stored (Ref MimgMMapBlock) -- offset=4, width=4
  2: cmdline :: Stored (Ref String) -- offset=8, width=4
  3: imgline :: Stored (Ref String) -- offset=12, width=4
Struct MimgHeader: size 12, with 3 field(s):
  0: start :: Stored Word -- offset=0, width=4
  1: end :: Stored Word -- offset=4, width=4
  2: entry :: Stored Word -- offset=8, width=4
Struct MimgMMap: size 8, with 2 field(s):
  0: start :: Stored Word -- offset=0, width=4
  1: end :: Stored Word -- offset=4, width=4
WordCursor :: {WordCursor.WordCursor} WordCursor
Constructor WordCursor: width 64, tagbits 0x0 and 2 field(s):
  0: val :: Word -- offset=32, width=32
  1: count :: Word -- offset=0, width=32
  mask-test predWordCursor(x :: Bit 64) = true
Inferred showMimgString :: Ref String -> Ref String -> Proc Unit
Inferred mimgMMap :: Ref MimgBootData -> Proc MimgMMapCursor
Inferred putMMap :: Ref MimgMMap -> Proc Unit
Inferred mimgHeaders :: Ref MimgBootData -> Proc MimgHeaderCursor
Inferred putHeader :: Ref MimgHeader -> Proc Unit
Inferred putMimgBootData :: Ref MimgBootData -> Proc Unit
Inferred count :: Word
Inferred val :: Word
Inferred nextWordCursor :: Word -> WordCursor -> Maybe (Pair Word WordCursor)
Inferred nextMimgMMap_imp :: WordCursor -> Maybe (Pair Word WordCursor)
Inferred nextMimgHeader_imp :: WordCursor -> Maybe (Pair Word WordCursor)
Inferred refToWord_imp :: Word -> Word
Inferred wordCursor :: Ref (Stored Word) -> Proc WordCursor
Type of lifted putHeader :: Ref MimgHeader -> Proc Unit
Type of lifted putMMap :: Ref MimgMMap -> Proc Unit
Type of lifted wordCursor :: Ref (Stored Word) -> Proc WordCursor
Type of lifted refToWord_imp :: Word -> Word
Type of lifted nextWordCursor :: Word -> WordCursor -> Maybe (Pair Word WordCursor)
Type of lifted mimgHeaders :: Ref MimgBootData -> Proc MimgHeaderCursor
Type of lifted mimgMMap :: Ref MimgBootData -> Proc MimgMMapCursor
Type of lifted nextMimgHeader_imp :: WordCursor -> Maybe (Pair Word WordCursor)
Type of lifted nextMimgMMap_imp :: WordCursor -> Maybe (Pair Word WordCursor)
Type of lifted putMimgBootData :: Ref MimgBootData -> Proc Unit
Type of lifted showMimgString :: Ref String -> Ref String -> Proc Unit
Compiling kernel.llc ...
Inferred kernel :: Proc Unit
Type of lifted kernel :: Proc Unit
Running type checker ...
generics for Nothing: [?1319] in type [Maybe ?1319]
TopLevel group inferred Nothing :: forall (a :: *). [Maybe a]
Generalizing definition for: Nothing with generics [?1319]
Inferred Nothing :: forall (a :: *). Maybe a
Inferred k5 :: forall (a :: *). {} [a] ->> [Maybe a]
Inferred b6 :: forall (a :: *). [] >>= [a -> Maybe a]
generics for Just: [?1330] in type [?1330 -> Maybe ?1330]
TopLevel group inferred Just :: forall (a :: *). [a -> Maybe a]
Generalizing definition for: Just with generics [?1330]
Inferred Just :: forall (a :: *). a -> Maybe a
Inferred b158 :: forall (m :: nat). [] >>= [Ix m -> Ix m -> Ix m -> Maybe (Ix m)]
generics for ltIncBy: [?1344] in type [Ix ?1344 -> Ix ?1344 -> Ix ?1344 -> Maybe (Ix ?1344)]
TopLevel group inferred ltIncBy :: forall (n :: nat). [Ix n -> Ix n -> Ix n -> Maybe (Ix n)]
Generalizing definition for: ltIncBy with generics [?1344]
Inferred ltIncBy :: forall (n :: nat). Ix n -> Ix n -> Ix n -> Maybe (Ix n)
generics for Unit: [] in type [Unit]
TopLevel group inferred Unit :: [Unit]
Generalizing definition for: Unit with generics []
Inferred Unit :: Unit
Inferred b149 :: forall (n :: nat). [] >>= [Ix n]
generics for ix1: [?1352] in type [Ix ?1352]
TopLevel group inferred ix1 :: forall (n :: nat). [Ix n]
Generalizing definition for: ix1 with generics [?1352]
Inferred ix1 :: forall (n :: nat). Ix n
Inferred b160 :: forall (n :: nat). [] >>= [Ix n -> Ix n -> Maybe (Ix n)]
generics for ltInc: [?1361] in type [Ix ?1361 -> Ix ?1361 -> Maybe (Ix ?1361)]
TopLevel group inferred ltInc :: forall (n :: nat). [Ix n -> Ix n -> Maybe (Ix n)]
Generalizing definition for: ltInc with generics [?1361]
Inferred ltInc :: forall (n :: nat). Ix n -> Ix n -> Maybe (Ix n)
Inferred ret1 :: forall (a :: *). {a} [] ->> [a]
Inferred b9 :: forall (a :: *). [a] >>= [Proc a]
Inferred k8 :: forall (a :: *). {} [a] ->> [Proc a]
Inferred b10 :: forall (a :: *). [] >>= [a -> Proc a]
generics for primRet: [?1381] in type [?1381 -> Proc ?1381]
TopLevel group inferred primRet :: forall (a :: *). [a -> Proc a]
Generalizing definition for: primRet with generics [?1381]
Inferred primRet :: forall (a :: *). a -> Proc a
generics for return: [?1383] in type [?1383 -> Proc ?1383]
TopLevel group inferred return :: forall (a :: *). [a -> Proc a]
Generalizing definition for: return with generics [?1383]
Inferred return :: forall (a :: *). a -> Proc a
Inferred b293 :: [Unit] >>= [Unit]
Inferred b295 :: [] >>= [Unit]
Inferred b0 :: forall (a :: tuple). [] >>= a
Inferred b301 :: forall (n :: nat). [] >>= [Ix n -> (Ix n -> Proc Unit) -> Ix n -> Proc Unit]
Inferred k139 :: forall (n :: nat). {} [Ix n] ->> [(Ix n -> Proc Unit) -> Ix n -> Proc Unit]
Inferred b300 :: forall (n :: nat). [Ix n] >>= [(Ix n -> Proc Unit) -> Ix n -> Proc Unit]
Inferred k138 :: forall (n :: nat). {Ix n} [Ix n -> Proc Unit] ->> [Ix n -> Proc Unit]
Inferred b299 :: forall (n :: nat). [Ix n -> Proc Unit, Ix n] >>= [Ix n -> Proc Unit]
Inferred b298 :: forall (n :: nat). [Ix n, Ix n -> Proc Unit] >>= [Ix n -> Proc Unit]
Inferred k137 :: forall (n :: nat). {Ix n -> Proc Unit, Ix n} [Ix n] ->> [Proc Unit]
Inferred b297 :: forall (n :: nat). [Ix n, Ix n, Ix n -> Proc Unit] >>= [Proc Unit]
Inferred k136 :: forall (n :: nat). {Ix n -> Proc Unit, Ix n, Ix n} [] ->> [Unit]
Inferred b296 :: forall (n :: nat). [Ix n, Ix n, Ix n -> Proc Unit] >>= [Unit]
Inferred b294 :: forall (n :: nat). [Maybe (Ix n), Ix n, Ix n -> Proc Unit] >>= [Unit]
generics for loop6: [?1435] in type [Ix ?1435 -> (Ix ?1435 -> Proc Unit) -> Ix ?1435 -> Proc Unit]
TopLevel group inferred loop6 :: forall (n :: nat). [Ix n -> (Ix n -> Proc Unit) -> Ix n -> Proc Unit]
Generalizing definition for: loop6 with generics [?1435]
Inferred loop6 :: forall (n :: nat). Ix n -> (Ix n -> Proc Unit) -> Ix n -> Proc Unit
Inferred b340 :: forall (n :: nat). [Ix n, Ix n -> Proc Unit, Ix n] >>= [Proc Unit]
Inferred k160 :: forall (n :: nat). {Ix n, Ix n} [Ix n -> Proc Unit] ->> [Proc Unit]
Inferred b341 :: forall (n :: nat). [Ix n, Ix n] >>= [(Ix n -> Proc Unit) -> Proc Unit]
Inferred k161 :: forall (n :: nat). {Ix n} [Ix n] ->> [(Ix n -> Proc Unit) -> Proc Unit]
Inferred b342 :: forall (n :: nat). [Ix n] >>= [Ix n -> (Ix n -> Proc Unit) -> Proc Unit]
Inferred k162 :: forall (n :: nat). {} [Ix n] ->> [Ix n -> (Ix n -> Proc Unit) -> Proc Unit]
Inferred b343 :: forall (n :: nat). [] >>= [Ix n -> Ix n -> (Ix n -> Proc Unit) -> Proc Unit]
generics for for: [?1556] in type [Ix ?1556 -> Ix ?1556 -> (Ix ?1556 -> Proc Unit) -> Proc Unit]
TopLevel group inferred for :: forall (n :: nat). [Ix n -> Ix n -> (Ix n -> Proc Unit) -> Proc Unit]
Generalizing definition for: for with generics [?1556]
Inferred for :: forall (n :: nat). Ix n -> Ix n -> (Ix n -> Proc Unit) -> Proc Unit
Inferred b315 :: [Ix NumRows, Ix NumCols] >>= [Ref (Stored Char)]
Inferred k146 :: {Ix NumRows} [Ix NumCols] ->> [Ref (Stored Char)]
Inferred b316 :: [Ix NumRows] >>= [Ix NumCols -> Ref (Stored Char)]
Inferred k147 :: {} [Ix NumRows] ->> [Ix NumCols -> Ref (Stored Char)]
Inferred b317 :: [] >>= [Ix NumRows -> Ix NumCols -> Ref (Stored Char)]
generics for pos: [] in type [Ix NumRows -> Ix NumCols -> Ref (Stored Char)]
TopLevel group inferred pos :: [Ix NumRows -> Ix NumCols -> Ref (Stored Char)]
Generalizing definition for: pos with generics []
Inferred pos :: Ix NumRows -> Ix NumCols -> Ref (Stored Char)
generics for defAttr: [] in type [Bit 8]
TopLevel group inferred defAttr :: [Bit 8]
Generalizing definition for: defAttr with generics []
Inferred defAttr :: Bit 8
Inferred b312 :: [Word] >>= [Char]
Inferred k145 :: {} [Word] ->> [Char]
Inferred b313 :: [] >>= [Word -> Char]
generics for char: [] in type [Word -> Char]
TopLevel group inferred char :: [Word -> Char]
Generalizing definition for: char with generics []
Inferred char :: Word -> Char
Inferred b314 :: [] >>= [Char]
generics for blank: [] in type [Char]
TopLevel group inferred blank :: [Char]
Generalizing definition for: blank with generics []
Inferred blank :: Char
Inferred b347 :: [Ix NumRows, Ix NumCols, Byte] >>= [Proc Unit]
Inferred k165 :: {Byte, Ix NumRows} [Ix NumCols] ->> [Proc Unit]
Inferred b348 :: [Ix NumRows, Byte] >>= [Ix NumCols -> Proc Unit]
Inferred b349 :: [Ix NumCols, Ix NumCols, Byte, Ix NumRows] >>= [Proc Unit]
Inferred k166 :: {Byte, Ix NumCols, Ix NumCols} [Ix NumRows] ->> [Proc Unit]
Inferred b350 :: [Ix NumCols, Ix NumCols, Byte] >>= [Ix NumRows -> Proc Unit]
Inferred b351 :: [Ref Window] >>= [Unit]
Inferred k167 :: {Ref Window} [] ->> [Unit]
Inferred b352 :: [Ref Window] >>= [Proc Unit]
Inferred k168 :: {} [Ref Window] ->> [Proc Unit]
Inferred b353 :: [] >>= [Ref Window -> Proc Unit]
generics for clearWindow: [] in type [Ref Window -> Proc Unit]
TopLevel group inferred clearWindow :: [Ref Window -> Proc Unit]
Generalizing definition for: clearWindow with generics []
Inferred clearWindow :: Ref Window -> Proc Unit
Inferred b331 :: [Ix NumRows, Ix NumCols] >>= [Init Coord]
Inferred k153 :: {Ix NumRows} [Ix NumCols] ->> [Init Coord]
Inferred b332 :: [Ix NumRows] >>= [Ix NumCols -> Init Coord]
Inferred k154 :: {} [Ix NumRows] ->> [Ix NumCols -> Init Coord]
Inferred b333 :: [] >>= [Ix NumRows -> Ix NumCols -> Init Coord]
generics for initCoord: [] in type [Ix NumRows -> Ix NumCols -> Init Coord]
TopLevel group inferred initCoord :: [Ix NumRows -> Ix NumCols -> Init Coord]
Generalizing definition for: initCoord with generics []
Inferred initCoord :: Ix NumRows -> Ix NumCols -> Init Coord
Inferred b334 :: [Ix NumRows, Ix NumCols, Ix NumRows, Ix NumCols, Byte] >>= [Init Window]
Inferred k155 :: {Ix NumCols, Ix NumRows, Ix NumCols, Ix NumRows} [Byte] ->> [Init Window]
Inferred b335 :: [Ix NumRows, Ix NumCols, Ix NumRows, Ix NumCols] >>= [Byte -> Init Window]
Inferred k156 :: {Ix NumRows, Ix NumCols, Ix NumRows} [Ix NumCols] ->> [Byte -> Init Window]
Inferred b336 :: [Ix NumRows, Ix NumCols, Ix NumRows] >>= [Ix NumCols -> Byte -> Init Window]
Inferred k157 :: {Ix NumCols, Ix NumRows} [Ix NumRows] ->> [Ix NumCols -> Byte -> Init Window]
Inferred b337 :: [Ix NumRows, Ix NumCols] >>= [Ix NumRows -> Ix NumCols -> Byte -> Init Window]
Inferred k158 :: {Ix NumRows} [Ix NumCols] ->> [Ix NumRows -> Ix NumCols -> Byte -> Init Window]
Inferred b338 :: [Ix NumRows] >>= [Ix NumCols -> Ix NumRows -> Ix NumCols -> Byte -> Init Window]
Inferred k159 :: {} [Ix NumRows] ->> [Ix NumCols -> Ix NumRows -> Ix NumCols -> Byte -> Init Window]
Inferred b339 :: [] >>= [Ix NumRows -> Ix NumCols -> Ix NumRows -> Ix NumCols -> Byte -> Init Window]
generics for window: [] in type [Ix NumRows -> Ix NumCols -> Ix NumRows -> Ix NumCols -> Byte -> Init Window]
TopLevel group inferred window :: [Ix NumRows -> Ix NumCols -> Ix NumRows -> Ix NumCols -> Byte -> Init Window]
Generalizing definition for: window with generics []
Inferred window :: Ix NumRows -> Ix NumCols -> Ix NumRows -> Ix NumCols -> Byte -> Init Window
Inferred b148 :: forall (n :: nat). [] >>= [Ix n]
generics for ix0: [?1925] in type [Ix ?1925]
TopLevel group inferred ix0 :: forall (n :: nat). [Ix n]
Generalizing definition for: ix0 with generics [?1925]
Inferred ix0 :: forall (n :: nat). Ix n
Inferred b425 :: [] >>= [Init Window]
generics for s2: [] in type [Init Window]
TopLevel group inferred s2 :: [Init Window]
Generalizing definition for: s2 with generics []
Inferred s2 :: Init Window
Inferred b391 :: [] >>= [Proc Unit]
generics for clearScreen: [] in type [Proc Unit]
TopLevel group inferred clearScreen :: [Proc Unit]
Generalizing definition for: clearScreen with generics []
Inferred clearScreen :: Proc Unit
Inferred b82 :: forall (a :: *) (b :: *). [Proc a, a -> Proc b] >>= [b]
Inferred k52 :: forall (a :: *) (b :: *). {a -> Proc b, Proc a} [] ->> [b]
Inferred b83 :: forall (a :: *) (b :: *). [Proc a, a -> Proc b] >>= [Proc b]
Inferred k53 :: forall (a :: *) (b :: *). {Proc a} [a -> Proc b] ->> [Proc b]
Inferred b84 :: forall (a :: *) (b :: *). [Proc a] >>= [(a -> Proc b) -> Proc b]
Inferred k54 :: forall (a :: *) (b :: *). {} [Proc a] ->> [(a -> Proc b) -> Proc b]
Inferred b85 :: forall (a :: *) (b :: *). [] >>= [Proc a -> (a -> Proc b) -> Proc b]
generics for >>=: [?2019, ?2020] in type [Proc ?2019 -> (?2019 -> Proc ?2020) -> Proc ?2020]
TopLevel group inferred >>= :: forall (a :: *) (b :: *). [Proc a -> (a -> Proc b) -> Proc b]
Generalizing definition for: >>= with generics [?2019, ?2020]
Inferred >>= :: forall (a :: *) (b :: *). Proc a -> (a -> Proc b) -> Proc b
Inferred b11 :: [Word, Word] >>= [Word]
Inferred k9 :: {Word} [Word] ->> [Word]
Inferred b12 :: [Word] >>= [Word -> Word]
Inferred k10 :: {} [Word] ->> [Word -> Word]
Inferred b13 :: [] >>= [Word -> Word -> Word]
generics for +: [] in type [Word -> Word -> Word]
TopLevel group inferred + :: [Word -> Word -> Word]
Generalizing definition for: + with generics []
Inferred + :: Word -> Word -> Word
Inferred b488 :: [Word] >>= [Word]
Inferred k230 :: {} [Word] ->> [Word]
Inferred b489 :: [] >>= [Word -> Word]
generics for refToWord_imp: [] in type [Word -> Word]
TopLevel group inferred refToWord_imp :: [Word -> Word]
Generalizing definition for: refToWord_imp with generics []
Inferred refToWord_imp :: Word -> Word
Inferred b485 :: [Ref (Stored Word)] >>= [WordCursor]
Inferred k228 :: {Ref (Stored Word)} [] ->> [WordCursor]
Inferred b486 :: [Ref (Stored Word)] >>= [Proc WordCursor]
Inferred k229 :: {} [Ref (Stored Word)] ->> [Proc WordCursor]
Inferred b487 :: [] >>= [Ref (Stored Word) -> Proc WordCursor]
generics for wordCursor: [] in type [Ref (Stored Word) -> Proc WordCursor]
TopLevel group inferred wordCursor :: [Ref (Stored Word) -> Proc WordCursor]
Generalizing definition for: wordCursor with generics []
Inferred wordCursor :: Ref (Stored Word) -> Proc WordCursor
Inferred b496 :: [Ref MimgBootData] >>= [Proc MimgHeaderCursor]
Inferred k233 :: {} [Ref MimgBootData] ->> [Proc MimgHeaderCursor]
Inferred b497 :: [] >>= [Ref MimgBootData -> Proc MimgHeaderCursor]
generics for mimgHeaders: [] in type [Ref MimgBootData -> Proc MimgHeaderCursor]
TopLevel group inferred mimgHeaders :: [Ref MimgBootData -> Proc MimgHeaderCursor]
Generalizing definition for: mimgHeaders with generics []
Inferred mimgHeaders :: Ref MimgBootData -> Proc MimgHeaderCursor
generics for false: [] in type [Bool]
TopLevel group inferred false :: [Bool]
Generalizing definition for: false with generics []
Inferred false :: Bool
Inferred bfalse :: [] >>= [Bool]
generics for true: [] in type [Bool]
TopLevel group inferred true :: [Bool]
Generalizing definition for: true with generics []
Inferred true :: Bool
Inferred btrue :: [] >>= [Bool]
Inferred bconv :: [Flag] >>= [Bool]
Inferred b34 :: [Word, Word] >>= [Bool]
Inferred k24 :: {Word} [Word] ->> [Bool]
Inferred b35 :: [Word] >>= [Word -> Bool]
Inferred k25 :: {} [Word] ->> [Word -> Bool]
Inferred b36 :: [] >>= [Word -> Word -> Bool]
generics for ==: [] in type [Word -> Word -> Bool]
TopLevel group inferred == :: [Word -> Word -> Bool]
Generalizing definition for: == with generics []
Inferred == :: Word -> Word -> Bool
Inferred b490 :: [Maybe (Pair Word WordCursor)] >>= [Maybe (Pair Word WordCursor)]
Inferred b492 :: [] >>= [Maybe (Pair Word WordCursor)]
Inferred k3 :: forall (a :: *) (b :: *). {a} [b] ->> [Pair a b]
Inferred b4 :: forall (a :: *) (b :: *). [a] >>= [b -> Pair a b]
Inferred k4 :: forall (a :: *) (b :: *). {} [a] ->> [b -> Pair a b]
Inferred b5 :: forall (a :: *) (b :: *). [] >>= [a -> b -> Pair a b]
generics for Pair: [?2158, ?2157] in type [?2158 -> ?2157 -> Pair ?2158 ?2157]
TopLevel group inferred Pair :: forall (a :: *) (b :: *). [a -> b -> Pair a b]
Generalizing definition for: Pair with generics [?2158, ?2157]
Inferred Pair :: forall (a :: *) (b :: *). a -> b -> Pair a b
Inferred b14 :: [Word, Word] >>= [Word]
Inferred k11 :: {Word} [Word] ->> [Word]
Inferred b15 :: [Word] >>= [Word -> Word]
Inferred k12 :: {} [Word] ->> [Word -> Word]
Inferred b16 :: [] >>= [Word -> Word -> Word]
generics for -: [] in type [Word -> Word -> Word]
TopLevel group inferred - :: [Word -> Word -> Word]
Generalizing definition for: - with generics []
Inferred - :: Word -> Word -> Word
Inferred b491 :: [WordCursor, Word, Word] >>= [Maybe (Pair Word WordCursor)]
Inferred b493 :: [WordCursor, Word] >>= [Maybe (Pair Word WordCursor)]
Inferred k231 :: {Word} [WordCursor] ->> [Maybe (Pair Word WordCursor)]
Inferred b494 :: [Word] >>= [WordCursor -> Maybe (Pair Word WordCursor)]
Inferred k232 :: {} [Word] ->> [WordCursor -> Maybe (Pair Word WordCursor)]
Inferred b495 :: [] >>= [Word -> WordCursor -> Maybe (Pair Word WordCursor)]
generics for nextWordCursor: [] in type [Word -> WordCursor -> Maybe (Pair Word WordCursor)]
TopLevel group inferred nextWordCursor :: [Word -> WordCursor -> Maybe (Pair Word WordCursor)]
Generalizing definition for: nextWordCursor with generics []
Inferred nextWordCursor :: Word -> WordCursor -> Maybe (Pair Word WordCursor)
Inferred b500 :: [] >>= [WordCursor -> Maybe (Pair Word WordCursor)]
generics for nextMimgHeader_imp: [] in type [WordCursor -> Maybe (Pair Word WordCursor)]
TopLevel group inferred nextMimgHeader_imp :: [WordCursor -> Maybe (Pair Word WordCursor)]
Generalizing definition for: nextMimgHeader_imp with generics []
Inferred nextMimgHeader_imp :: WordCursor -> Maybe (Pair Word WordCursor)
Inferred loadCharImp1 :: {Addr} [] ->> [Bit 8]
Inferred b66 :: [Addr] >>= [Proc (Bit 8)]
Inferred k45 :: {} [Addr] ->> [Proc (Bit 8)]
Inferred b67 :: [] >>= [Addr -> Proc (Bit 8)]
generics for loadCharImp: [] in type [Addr -> Proc (Bit 8)]
TopLevel group inferred loadCharImp :: [Addr -> Proc (Bit 8)]
Generalizing definition for: loadCharImp with generics []
Inferred loadCharImp :: Addr -> Proc (Bit 8)
Inferred b122 :: [Maybe (Pair Word Word)] >>= [Maybe (Pair Word Word)]
Inferred b124 :: [] >>= [Maybe (Pair Word Word)]
Inferred b64 :: forall (a :: *). [a] >>= [a]
Inferred k44 :: forall (a :: *). {} [a] ->> [a]
Inferred b65 :: forall (a :: *). [] >>= [a -> a]
generics for ptrToWordImp: [] in type [Word -> Word]
TopLevel group inferred ptrToWordImp :: [Word -> Word]
Generalizing definition for: ptrToWordImp with generics []
Inferred ptrToWordImp :: Word -> Word
Inferred b123 :: [Word, Ref String] >>= [Maybe (Pair Word Word)]
Inferred b125 :: [Ref String] >>= [Maybe (Pair Word Word)]
Inferred k75 :: {Ref String} [] ->> [Maybe (Pair Word Word)]
Inferred b126 :: [Ref String] >>= [Proc (Maybe (Pair Word Word))]
Inferred k76 :: {} [Ref String] ->> [Proc (Maybe (Pair Word Word))]
Inferred b127 :: [] >>= [Ref String -> Proc (Maybe (Pair Word Word))]
generics for nextCharImp: [] in type [Ref String -> Proc (Maybe (Pair Word Word))]
TopLevel group inferred nextCharImp :: [Ref String -> Proc (Maybe (Pair Word Word))]
Generalizing definition for: nextCharImp with generics []
Inferred nextCharImp :: Ref String -> Proc (Maybe (Pair Word Word))
Inferred b200 :: [Unit] >>= [Unit]
Inferred b202 :: [] >>= [Unit]
Inferred b74 :: forall (a :: *). [a] >>= [a]
Inferred b75 :: forall (a :: *) (b :: *). [Pair a b] >>= [a]
Inferred b76 :: forall (a :: *) (b :: *). [Pair a b] >>= [a]
Inferred k50 :: forall (a :: *) (b :: *). {} [Pair a b] ->> [a]
Inferred b77 :: forall (a :: *) (b :: *). [] >>= [Pair a b -> a]
generics for fst: [?2411, ?2410] in type [Pair ?2411 ?2410 -> ?2411]
TopLevel group inferred fst :: forall (a :: *) (b :: *). [Pair a b -> a]
Generalizing definition for: fst with generics [?2411, ?2410]
Inferred fst :: forall (a :: *) (b :: *). Pair a b -> a
Inferred b78 :: forall (a :: *). [a] >>= [a]
Inferred b79 :: forall (a :: *) (b :: *). [Pair a b] >>= [b]
Inferred b80 :: forall (a :: *) (b :: *). [Pair a b] >>= [b]
Inferred k51 :: forall (a :: *) (b :: *). {} [Pair a b] ->> [b]
Inferred b81 :: forall (a :: *) (b :: *). [] >>= [Pair a b -> b]
generics for snd: [?2450, ?2449] in type [Pair ?2450 ?2449 -> ?2449]
TopLevel group inferred snd :: forall (a :: *) (b :: *). [Pair a b -> b]
Generalizing definition for: snd with generics [?2450, ?2449]
Inferred snd :: forall (a :: *) (b :: *). Pair a b -> b
Inferred b206 :: [] >>= [Putchar -> Ref String -> Proc Unit]
Inferred k104 :: {} [Putchar] ->> [Ref String -> Proc Unit]
Inferred b205 :: [Putchar] >>= [Ref String -> Proc Unit]
Inferred k103 :: {Putchar} [Ref String] ->> [Proc Unit]
Inferred b204 :: [Ref String, Putchar] >>= [Proc Unit]
Inferred k102 :: {Putchar, Ref String} [] ->> [Unit]
Inferred b203 :: [Ref String, Putchar] >>= [Unit]
Inferred b201 :: [Maybe (Pair Word (Ref String)), Putchar] >>= [Unit]
generics for hputs: [] in type [Putchar -> Ref String -> Proc Unit]
TopLevel group inferred hputs :: [Putchar -> Ref String -> Proc Unit]
Generalizing definition for: hputs with generics []
Inferred hputs :: Putchar -> Ref String -> Proc Unit
Inferred b106 :: [Port, Word] >>= [Port]
Inferred k66 :: {Port} [Word] ->> [Port]
Inferred b107 :: [Port] >>= [Word -> Port]
Inferred k67 :: {} [Port] ->> [Word -> Port]
Inferred b108 :: [] >>= [Port -> Word -> Port]
generics for portPlus: [] in type [Port -> Word -> Port]
TopLevel group inferred portPlus :: [Port -> Word -> Port]
Generalizing definition for: portPlus with generics []
Inferred portPlus :: Port -> Word -> Port
Inferred b267 :: [] >>= [Port]
generics for com1data: [] in type [Port]
TopLevel group inferred com1data :: [Port]
Generalizing definition for: com1data with generics []
Inferred com1data :: Port
Inferred b268 :: [] >>= [Port]
generics for com1ctrl: [] in type [Port]
TopLevel group inferred com1ctrl :: [Port]
Generalizing definition for: com1ctrl with generics []
Inferred com1ctrl :: Port
Inferred b255 :: [Unit] >>= [Unit]
Inferred b256 :: [Word] >>= [Unit]
Inferred b260 :: [] >>= [Word -> Proc Unit]
Inferred k128 :: {} [Word] ->> [Proc Unit]
Inferred b259 :: [Word] >>= [Proc Unit]
Inferred k127 :: {Word} [] ->> [Unit]
Inferred b258 :: [Word] >>= [Unit]
Inferred b257 :: [Word] >>= [Unit]
generics for put5: [] in type [Word -> Proc Unit]
TopLevel group inferred put5 :: [Word -> Proc Unit]
Generalizing definition for: put5 with generics []
Inferred put5 :: Word -> Proc Unit
Inferred b261 :: [Unit] >>= [Unit]
Inferred b263 :: [] >>= [Unit]
Inferred b262 :: [] >>= [Unit]
Inferred b264 :: [Word] >>= [Unit]
Inferred k129 :: {Word} [] ->> [Unit]
Inferred b265 :: [Word] >>= [Proc Unit]
Inferred k130 :: {} [Word] ->> [Proc Unit]
Inferred b266 :: [] >>= [Word -> Proc Unit]
generics for sputchar: [] in type [Word -> Proc Unit]
TopLevel group inferred sputchar :: [Word -> Proc Unit]
Generalizing definition for: sputchar with generics []
Inferred sputchar :: Word -> Proc Unit
generics for True: [] in type [Bool]
TopLevel group inferred True :: [Bool]
Generalizing definition for: True with generics []
Inferred True :: Bool
Inferred b86 :: forall (a :: *). [Ref (Stored a), Ref (Stored a)] >>= [Proc Unit]
Inferred k55 :: forall (a :: *). {Ref (Stored a)} [Ref (Stored a)] ->> [Proc Unit]
Inferred b87 :: forall (a :: *). [Ref (Stored a)] >>= [Ref (Stored a) -> Proc Unit]
Inferred k56 :: forall (a :: *). {} [Ref (Stored a)] ->> [Ref (Stored a) -> Proc Unit]
Inferred b88 :: forall (a :: *). [] >>= [Ref (Stored a) -> Ref (Stored a) -> Proc Unit]
generics for >->: [?2737] in type [Ref (Stored ?2737) -> Ref (Stored ?2737) -> Proc Unit]
TopLevel group inferred >-> :: forall (a :: *). [Ref (Stored a) -> Ref (Stored a) -> Proc Unit]
Generalizing definition for: >-> with generics [?2737]
Inferred >-> :: forall (a :: *). Ref (Stored a) -> Ref (Stored a) -> Proc Unit
Inferred b374 :: [Unit] >>= [Unit]
Inferred b376 :: [Maybe (Ix NumRows), Ref Window] >>= [Unit]
Inferred b383 :: [Ix NumRows, Ix NumRows, Ix NumCols] >>= [Proc Unit]
Inferred k182 :: {Ix NumRows, Ix NumRows} [Ix NumCols] ->> [Proc Unit]
Inferred b384 :: [Ix NumRows, Ix NumRows] >>= [Ix NumCols -> Proc Unit]
Inferred b385 :: [Ix NumCols, Ix NumCols, Ix NumRows, Ix NumRows] >>= [Proc Unit]
Inferred k183 :: {Ix NumRows, Ix NumCols, Ix NumCols} [Ix NumRows] ->> [Proc Unit]
Inferred b386 :: [Ix NumCols, Ix NumCols, Ix NumRows] >>= [Ix NumRows -> Proc Unit]
Inferred k184 :: {Ix NumCols, Ix NumCols} [Ix NumRows] ->> [Ix NumRows -> Proc Unit]
Inferred b387 :: [Ix NumCols, Ix NumCols] >>= [Ix NumRows -> Ix NumRows -> Proc Unit]
Inferred b381 :: [Ix NumRows, Ix NumCols, Byte] >>= [Proc Unit]
Inferred k181 :: {Byte, Ix NumRows} [Ix NumCols] ->> [Proc Unit]
Inferred b382 :: [Ix NumRows, Byte] >>= [Ix NumCols -> Proc Unit]
Inferred b302 :: [Proc Unit] >>= [Proc Unit]
Inferred b303 :: [Proc Unit] >>= [Proc Unit]
Inferred b311 :: [] >>= [Ix NumRows -> (Ix NumRows -> Ix NumRows -> Proc Unit) -> Proc Unit -> Ix NumRows -> Proc Unit]
Inferred k144 :: {} [Ix NumRows] ->> [(Ix NumRows -> Ix NumRows -> Proc Unit) -> Proc Unit -> Ix NumRows -> Proc Unit]
Inferred b310 :: [Ix NumRows] >>= [(Ix NumRows -> Ix NumRows -> Proc Unit) -> Proc Unit -> Ix NumRows -> Proc Unit]
Inferred k143 :: {Ix NumRows} [Ix NumRows -> Ix NumRows -> Proc Unit] ->> [Proc Unit -> Ix NumRows -> Proc Unit]
Inferred b309 :: [Ix NumRows -> Ix NumRows -> Proc Unit, Ix NumRows] >>= [Proc Unit -> Ix NumRows -> Proc Unit]
Inferred k142 :: {Ix NumRows, Ix NumRows -> Ix NumRows -> Proc Unit} [Proc Unit] ->> [Ix NumRows -> Proc Unit]
Inferred b308 :: [Proc Unit, Ix NumRows -> Ix NumRows -> Proc Unit, Ix NumRows] >>= [Ix NumRows -> Proc Unit]
Inferred b307 :: [Ix NumRows, Ix NumRows -> Ix NumRows -> Proc Unit, Proc Unit] >>= [Ix NumRows -> Proc Unit]
Inferred k141 :: {Proc Unit, Ix NumRows -> Ix NumRows -> Proc Unit, Ix NumRows} [Ix NumRows] ->> [Proc Unit]
Inferred b306 :: [Ix NumRows, Ix NumRows, Ix NumRows -> Ix NumRows -> Proc Unit, Proc Unit] >>= [Proc Unit]
Inferred b305 :: [Maybe (Ix NumRows), Ix NumRows, Ix NumRows, Ix NumRows -> Ix NumRows -> Proc Unit, Proc Unit] >>= [Proc Unit]
Inferred k140 :: {Ix NumRows, Proc Unit, Ix NumRows -> Ix NumRows -> Proc Unit, Ix NumRows, Ix NumRows} [] ->> [Unit]
Inferred b304 :: [Ix NumRows, Ix NumRows, Ix NumRows -> Ix NumRows -> Proc Unit, Proc Unit, Ix NumRows] >>= [Unit]
generics for loop7: [] in type [Ix NumRows -> (Ix NumRows -> Ix NumRows -> Proc Unit) -> Proc Unit -> Ix NumRows -> Proc Unit]
TopLevel group inferred loop7 :: [Ix NumRows -> (Ix NumRows -> Ix NumRows -> Proc Unit) -> Proc Unit -> Ix NumRows -> Proc Unit]
Generalizing definition for: loop7 with generics []
Inferred loop7 :: Ix NumRows -> (Ix NumRows -> Ix NumRows -> Proc Unit) -> Proc Unit -> Ix NumRows -> Proc Unit
Inferred b388 :: [Ref Window] >>= [Unit]
Inferred k185 :: {Ref Window} [] ->> [Unit]
Inferred b389 :: [Ref Window] >>= [Proc Unit]
Inferred k186 :: {} [Ref Window] ->> [Proc Unit]
Inferred b390 :: [] >>= [Ref Window -> Proc Unit]
generics for scroll: [] in type [Ref Window -> Proc Unit]
TopLevel group inferred scroll :: [Ref Window -> Proc Unit]
Generalizing definition for: scroll with generics []
Inferred scroll :: Ref Window -> Proc Unit
Inferred b375 :: [Ref Window] >>= [Unit]
Inferred b377 :: [Ix NumRows, Ref Window] >>= [Unit]
Inferred k178 :: {Ref Window, Ix NumRows} [] ->> [Unit]
Inferred b378 :: [Ix NumRows, Ref Window] >>= [Proc Unit]
Inferred k179 :: {Ref Window} [Ix NumRows] ->> [Proc Unit]
Inferred b379 :: [Ref Window] >>= [Ix NumRows -> Proc Unit]
Inferred k180 :: {} [Ref Window] ->> [Ix NumRows -> Proc Unit]
Inferred b380 :: [] >>= [Ref Window -> Ix NumRows -> Proc Unit]
generics for newline: [] in type [Ref Window -> Ix NumRows -> Proc Unit]
TopLevel group inferred newline :: [Ref Window -> Ix NumRows -> Proc Unit]
Generalizing definition for: newline with generics []
Inferred newline :: Ref Window -> Ix NumRows -> Proc Unit
Inferred b354 :: [Unit] >>= [Unit]
Inferred b359 :: [Ref Window, Ix NumRows] >>= [Unit]
Inferred b355 :: [Unit] >>= [Unit]
Inferred b357 :: [Maybe (Ix NumCols), Ref Window] >>= [Unit]
Inferred b356 :: [Ref Window, Ix NumRows] >>= [Unit]
Inferred b358 :: [Word, Ref Window, Ix NumRows] >>= [Unit]
Inferred b360 :: [Bool, Word, Ref Window, Ix NumRows] >>= [Unit]
Inferred b362 :: [Ix NumRows, Ref Window, Word] >>= [Unit]
Inferred b361 :: [Ix NumRows, Ref Window, Word] >>= [Unit]
Inferred b363 :: [Ref Window, Word] >>= [Unit]
Inferred k169 :: {Word, Ref Window} [] ->> [Unit]
Inferred b364 :: [Ref Window, Word] >>= [Proc Unit]
Inferred k170 :: {Ref Window} [Word] ->> [Proc Unit]
Inferred b365 :: [Ref Window] >>= [Word -> Proc Unit]
Inferred k171 :: {} [Ref Window] ->> [Word -> Proc Unit]
Inferred b366 :: [] >>= [Ref Window -> Word -> Proc Unit]
generics for wputchar: [] in type [Ref Window -> Word -> Proc Unit]
TopLevel group inferred wputchar :: [Ref Window -> Word -> Proc Unit]
Generalizing definition for: wputchar with generics []
Inferred wputchar :: Ref Window -> Word -> Proc Unit
Inferred b392 :: [] >>= [Putchar]
generics for putchar: [] in type [Putchar]
TopLevel group inferred putchar :: [Putchar]
Generalizing definition for: putchar with generics []
Inferred putchar :: Putchar
Inferred b393 :: [] >>= [Ref String -> Proc Unit]
generics for puts: [] in type [Ref String -> Proc Unit]
TopLevel group inferred puts :: [Ref String -> Proc Unit]
Generalizing definition for: puts with generics []
Inferred puts :: Ref String -> Proc Unit
Inferred b176 :: [Unit] >>= [Unit]
Inferred b178 :: [] >>= [Unit]
Inferred b185 :: [] >>= [Ix MaxWidth -> Word -> Putchar -> Ix MaxWidth -> Proc Unit]
Inferred k95 :: {} [Ix MaxWidth] ->> [Word -> Putchar -> Ix MaxWidth -> Proc Unit]
Inferred b184 :: [Ix MaxWidth] >>= [Word -> Putchar -> Ix MaxWidth -> Proc Unit]
Inferred k94 :: {Ix MaxWidth} [Word] ->> [Putchar -> Ix MaxWidth -> Proc Unit]
Inferred b183 :: [Word, Ix MaxWidth] >>= [Putchar -> Ix MaxWidth -> Proc Unit]
Inferred k93 :: {Ix MaxWidth, Word} [Putchar] ->> [Ix MaxWidth -> Proc Unit]
Inferred b182 :: [Putchar, Word, Ix MaxWidth] >>= [Ix MaxWidth -> Proc Unit]
Inferred b181 :: [Ix MaxWidth, Word, Putchar] >>= [Ix MaxWidth -> Proc Unit]
Inferred k92 :: {Putchar, Word, Ix MaxWidth} [Ix MaxWidth] ->> [Proc Unit]
Inferred b180 :: [Ix MaxWidth, Ix MaxWidth, Word, Putchar] >>= [Proc Unit]
Inferred k91 :: {Putchar, Word, Ix MaxWidth, Ix MaxWidth} [] ->> [Unit]
Inferred b179 :: [Ix MaxWidth, Ix MaxWidth, Word, Putchar] >>= [Unit]
Inferred b177 :: [Maybe (Ix MaxWidth), Ix MaxWidth, Word, Putchar] >>= [Unit]
generics for padloop3: [] in type [Ix MaxWidth -> Word -> Putchar -> Ix MaxWidth -> Proc Unit]
TopLevel group inferred padloop3 :: [Ix MaxWidth -> Word -> Putchar -> Ix MaxWidth -> Proc Unit]
Generalizing definition for: padloop3 with generics []
Inferred padloop3 :: Ix MaxWidth -> Word -> Putchar -> Ix MaxWidth -> Proc Unit
Inferred b102 :: forall (n :: nat). [] >>= [Bit n]
generics for bit0: [?3530] in type [Bit ?3530]
TopLevel group inferred bit0 :: forall (n :: nat). [Bit n]
Generalizing definition for: bit0 with generics [?3530]
Inferred bit0 :: forall (n :: nat). Bit n
Inferred b252 :: [] >>= [Init (Stored (Bit ByteBits))]
Inferred k126 :: {} [Ix MaxWidth] ->> [Init (Stored (Bit ByteBits))]
Inferred b253 :: [] >>= [Ix MaxWidth -> Init (Stored (Bit ByteBits))]
Inferred b254 :: [] >>= [Init (Array MaxWidth (Stored Byte))]
generics for s1: [] in type [Init (Array MaxWidth (Stored Byte))]
TopLevel group inferred s1 :: [Init (Array MaxWidth (Stored Byte))]
Generalizing definition for: s1 with generics []
Inferred s1 :: Init (Array MaxWidth (Stored Byte))
Inferred b159 :: forall (m :: nat). [] >>= [Ix m -> Ix m -> Ix m -> Maybe (Ix m)]
generics for ltDecBy: [?3564] in type [Ix ?3564 -> Ix ?3564 -> Ix ?3564 -> Maybe (Ix ?3564)]
TopLevel group inferred ltDecBy :: forall (n :: nat). [Ix n -> Ix n -> Ix n -> Maybe (Ix n)]
Generalizing definition for: ltDecBy with generics [?3564]
Inferred ltDecBy :: forall (n :: nat). Ix n -> Ix n -> Ix n -> Maybe (Ix n)
Inferred b161 :: forall (n :: nat). [] >>= [Ix n -> Ix n -> Maybe (Ix n)]
generics for ltDec: [?3573] in type [Ix ?3573 -> Ix ?3573 -> Maybe (Ix ?3573)]
TopLevel group inferred ltDec :: forall (n :: nat). [Ix n -> Ix n -> Maybe (Ix n)]
Generalizing definition for: ltDec with generics [?3573]
Inferred ltDec :: forall (n :: nat). Ix n -> Ix n -> Maybe (Ix n)
Inferred b164 :: forall (n :: nat). [Ix n] >>= [Maybe (Ix n)]
Inferred k86 :: forall (n :: nat). {} [Ix n] ->> [Maybe (Ix n)]
Inferred b165 :: forall (n :: nat). [] >>= [Ix n -> Maybe (Ix n)]
generics for decIx: [?3597] in type [Ix ?3597 -> Maybe (Ix ?3597)]
TopLevel group inferred decIx :: forall (n :: nat). [Ix n -> Maybe (Ix n)]
Generalizing definition for: decIx with generics [?3597]
Inferred decIx :: forall (n :: nat). Ix n -> Maybe (Ix n)
Inferred b168 :: [Unit] >>= [Unit]
Inferred b170 :: [] >>= [Unit]
Inferred b175 :: [] >>= [Putchar -> Ix MaxWidth -> Proc Unit]
Inferred k90 :: {} [Putchar] ->> [Ix MaxWidth -> Proc Unit]
Inferred b174 :: [Putchar] >>= [Ix MaxWidth -> Proc Unit]
Inferred b173 :: [Putchar] >>= [Ix MaxWidth -> Proc Unit]
Inferred k89 :: {Putchar} [Ix MaxWidth] ->> [Proc Unit]
Inferred b172 :: [Ix MaxWidth, Putchar] >>= [Proc Unit]
Inferred k88 :: {Putchar, Ix MaxWidth} [] ->> [Unit]
Inferred b171 :: [Ix MaxWidth, Putchar] >>= [Unit]
Inferred b169 :: [Maybe (Ix MaxWidth), Putchar] >>= [Unit]
generics for output2: [] in type [Putchar -> Ix MaxWidth -> Proc Unit]
TopLevel group inferred output2 :: [Putchar -> Ix MaxWidth -> Proc Unit]
Generalizing definition for: output2 with generics []
Inferred output2 :: Putchar -> Ix MaxWidth -> Proc Unit
Inferred b220 :: [Ix MaxWidth, Word, Putchar, Ix MaxWidth] >>= [Unit]
Inferred k109 :: {Ix MaxWidth, Putchar, Word, Ix MaxWidth} [] ->> [Unit]
Inferred b221 :: [Ix MaxWidth, Word, Putchar, Ix MaxWidth] >>= [Proc Unit]
Inferred k110 :: {Putchar, Word, Ix MaxWidth} [Ix MaxWidth] ->> [Proc Unit]
Inferred b222 :: [Ix MaxWidth, Word, Putchar] >>= [Ix MaxWidth -> Proc Unit]
Inferred b61 :: [Word, Word] >>= [Bool]
Inferred k42 :: {Word} [Word] ->> [Bool]
Inferred b62 :: [Word] >>= [Word -> Bool]
Inferred k43 :: {} [Word] ->> [Word -> Bool]
Inferred b63 :: [] >>= [Word -> Word -> Bool]
generics for <=: [] in type [Word -> Word -> Bool]
TopLevel group inferred <= :: [Word -> Word -> Bool]
Generalizing definition for: <= with generics []
Inferred <= :: Word -> Word -> Bool
Inferred b229 :: [Word, [Word] ->> [Byte]] >>= [Byte]
Inferred b231 :: [Word, [Word] ->> [Byte]] >>= [Byte]
Inferred b230 :: [Word, [Word] ->> [Byte]] >>= [Byte]
Inferred b232 :: [Word] >>= [Byte]
Inferred k116 :: {} [Word] ->> [Byte]
Inferred b233 :: [] >>= [Word -> Byte]
generics for digitToByte: [] in type [Word -> Byte]
TopLevel group inferred digitToByte :: [Word -> Byte]
Generalizing definition for: digitToByte with generics []
Inferred digitToByte :: Word -> Byte
Inferred b186 :: [Unit] >>= [Unit]
Inferred b191 :: [Ix MaxWidth -> Proc Unit, Ix MaxWidth] >>= [Unit]
Inferred b187 :: [Unit] >>= [Unit]
Inferred b189 :: [Ix MaxWidth -> Proc Unit, Ix MaxWidth] >>= [Unit]
Inferred b199 :: [] >>= [Ix MaxWidth -> (Ix MaxWidth -> Proc Unit) -> NZBit WordSize -> Ix MaxWidth -> Bit WordSize -> Proc Unit]
Inferred k101 :: {} [Ix MaxWidth] ->> [(Ix MaxWidth -> Proc Unit) -> NZBit WordSize -> Ix MaxWidth -> Bit WordSize -> Proc Unit]
Inferred b198 :: [Ix MaxWidth] >>= [(Ix MaxWidth -> Proc Unit) -> NZBit WordSize -> Ix MaxWidth -> Bit WordSize -> Proc Unit]
Inferred k100 :: {Ix MaxWidth} [Ix MaxWidth -> Proc Unit] ->> [NZBit WordSize -> Ix MaxWidth -> Bit WordSize -> Proc Unit]
Inferred b197 :: [Ix MaxWidth -> Proc Unit, Ix MaxWidth] >>= [NZBit WordSize -> Ix MaxWidth -> Bit WordSize -> Proc Unit]
Inferred k99 :: {Ix MaxWidth, Ix MaxWidth -> Proc Unit} [NZBit WordSize] ->> [Ix MaxWidth -> Bit WordSize -> Proc Unit]
Inferred b196 :: [NZBit WordSize, Ix MaxWidth -> Proc Unit, Ix MaxWidth] >>= [Ix MaxWidth -> Bit WordSize -> Proc Unit]
Inferred b195 :: [Ix MaxWidth, Ix MaxWidth -> Proc Unit, NZBit WordSize] >>= [Ix MaxWidth -> Bit WordSize -> Proc Unit]
Inferred k98 :: {NZBit WordSize, Ix MaxWidth -> Proc Unit, Ix MaxWidth} [Ix MaxWidth] ->> [Bit WordSize -> Proc Unit]
Inferred b194 :: [Ix MaxWidth, Ix MaxWidth, Ix MaxWidth -> Proc Unit, NZBit WordSize] >>= [Bit WordSize -> Proc Unit]
Inferred k97 :: {NZBit WordSize, Ix MaxWidth -> Proc Unit, Ix MaxWidth, Ix MaxWidth} [Bit WordSize] ->> [Proc Unit]
Inferred b193 :: [Bit WordSize, Ix MaxWidth, Ix MaxWidth, Ix MaxWidth -> Proc Unit, NZBit WordSize] >>= [Proc Unit]
Inferred k96 :: {NZBit WordSize, Ix MaxWidth -> Proc Unit, Ix MaxWidth, Ix MaxWidth, Bit WordSize} [] ->> [Unit]
Inferred b192 :: [Bit WordSize, Ix MaxWidth, Ix MaxWidth, Ix MaxWidth -> Proc Unit, NZBit WordSize] >>= [Unit]
Inferred b190 :: [Maybe (Ix MaxWidth), Bit WordSize, Ix MaxWidth, Ix MaxWidth, Ix MaxWidth -> Proc Unit, NZBit WordSize] >>= [Unit]
Inferred b188 :: [Ix MaxWidth, Ix MaxWidth -> Proc Unit, NZBit WordSize, Ix MaxWidth, Bit WordSize] >>= [Unit]
generics for loop4: [] in type [Ix MaxWidth -> (Ix MaxWidth -> Proc Unit) -> NZBit WordSize -> Ix MaxWidth -> Bit WordSize -> Proc Unit]
TopLevel group inferred loop4 :: [Ix MaxWidth -> (Ix MaxWidth -> Proc Unit) -> NZBit WordSize -> Ix MaxWidth -> Bit WordSize -> Proc Unit]
Generalizing definition for: loop4 with generics []
Inferred loop4 :: Ix MaxWidth -> (Ix MaxWidth -> Proc Unit) -> NZBit WordSize -> Ix MaxWidth -> Bit WordSize -> Proc Unit
Inferred b223 :: [Putchar, Word, Ix MaxWidth, Ix MaxWidth, NZBit WordSize] >>= [Putnum]
Inferred k111 :: {NZBit WordSize, Ix MaxWidth, Ix MaxWidth, Word} [Putchar] ->> [Putnum]
Inferred b224 :: [Word, Ix MaxWidth, Ix MaxWidth, NZBit WordSize] >>= [Putchar -> Putnum]
Inferred k112 :: {NZBit WordSize, Ix MaxWidth, Ix MaxWidth} [Word] ->> [Putchar -> Putnum]
Inferred b225 :: [Ix MaxWidth, Ix MaxWidth, NZBit WordSize] >>= [Word -> Putchar -> Putnum]
Inferred k113 :: {NZBit WordSize, Ix MaxWidth} [Ix MaxWidth] ->> [Word -> Putchar -> Putnum]
Inferred b226 :: [Ix MaxWidth, NZBit WordSize] >>= [Ix MaxWidth -> Word -> Putchar -> Putnum]
Inferred k114 :: {NZBit WordSize} [Ix MaxWidth] ->> [Ix MaxWidth -> Word -> Putchar -> Putnum]
Inferred b227 :: [NZBit WordSize] >>= [Ix MaxWidth -> Ix MaxWidth -> Word -> Putchar -> Putnum]
Inferred k115 :: {} [NZBit WordSize] ->> [Ix MaxWidth -> Ix MaxWidth -> Word -> Putchar -> Putnum]
Inferred b228 :: [] >>= [NZBit WordSize -> Ix MaxWidth -> Ix MaxWidth -> Word -> Putchar -> Putnum]
generics for hputDigitsFmt: [] in type [NZBit WordSize -> Ix MaxWidth -> Ix MaxWidth -> Word -> Putchar -> Putnum]
TopLevel group inferred hputDigitsFmt :: [NZBit WordSize -> Ix MaxWidth -> Ix MaxWidth -> Word -> Putchar -> Putnum]
Generalizing definition for: hputDigitsFmt with generics []
Inferred hputDigitsFmt :: NZBit WordSize -> Ix MaxWidth -> Ix MaxWidth -> Word -> Putchar -> Putnum
Inferred b218 :: [NZBit WordSize] >>= [Putchar -> Putnum]
Inferred k108 :: {} [NZBit WordSize] ->> [Putchar -> Putnum]
Inferred b219 :: [] >>= [NZBit WordSize -> Putchar -> Putnum]
generics for hputDigits: [] in type [NZBit WordSize -> Putchar -> Putnum]
TopLevel group inferred hputDigits :: [NZBit WordSize -> Putchar -> Putnum]
Generalizing definition for: hputDigits with generics []
Inferred hputDigits :: NZBit WordSize -> Putchar -> Putnum
Inferred b139 :: forall (n :: nat). [] >>= [NZBit n]
generics for nz16: [?4152] in type [NZBit ?4152]
TopLevel group inferred nz16 :: forall (n :: nat). [NZBit n]
Generalizing definition for: nz16 with generics [?4152]
Inferred nz16 :: forall (n :: nat). NZBit n
Inferred b217 :: [] >>= [Putchar -> Putnum]
generics for hputHex: [] in type [Putchar -> Putnum]
TopLevel group inferred hputHex :: [Putchar -> Putnum]
Generalizing definition for: hputHex with generics []
Inferred hputHex :: Putchar -> Putnum
Inferred b398 :: [] >>= [Putnum]
generics for putHex: [] in type [Putnum]
TopLevel group inferred putHex :: [Putnum]
Generalizing definition for: putHex with generics []
Inferred putHex :: Putnum
Inferred b479 :: [Ref MimgHeader] >>= [Unit]
Inferred k224 :: {Ref MimgHeader} [] ->> [Unit]
Inferred b480 :: [Ref MimgHeader] >>= [Proc Unit]
Inferred k225 :: {} [Ref MimgHeader] ->> [Proc Unit]
Inferred b481 :: [] >>= [Ref MimgHeader -> Proc Unit]
generics for putHeader: [] in type [Ref MimgHeader -> Proc Unit]
TopLevel group inferred putHeader :: [Ref MimgHeader -> Proc Unit]
Generalizing definition for: putHeader with generics []
Inferred putHeader :: Ref MimgHeader -> Proc Unit
Inferred b498 :: [Ref MimgBootData] >>= [Proc MimgMMapCursor]
Inferred k234 :: {} [Ref MimgBootData] ->> [Proc MimgMMapCursor]
Inferred b499 :: [] >>= [Ref MimgBootData -> Proc MimgMMapCursor]
generics for mimgMMap: [] in type [Ref MimgBootData -> Proc MimgMMapCursor]
TopLevel group inferred mimgMMap :: [Ref MimgBootData -> Proc MimgMMapCursor]
Generalizing definition for: mimgMMap with generics []
Inferred mimgMMap :: Ref MimgBootData -> Proc MimgMMapCursor
Inferred b138 :: forall (n :: nat). [] >>= [NZBit n]
generics for nz10: [?4299] in type [NZBit ?4299]
TopLevel group inferred nz10 :: forall (n :: nat). [NZBit n]
Generalizing definition for: nz10 with generics [?4299]
Inferred nz10 :: forall (n :: nat). NZBit n
Inferred b207 :: [] >>= [Putchar -> Putnum]
generics for hputUnsigned: [] in type [Putchar -> Putnum]
TopLevel group inferred hputUnsigned :: [Putchar -> Putnum]
Generalizing definition for: hputUnsigned with generics []
Inferred hputUnsigned :: Putchar -> Putnum
Inferred b394 :: [] >>= [Putnum]
generics for putUnsigned: [] in type [Putnum]
TopLevel group inferred putUnsigned :: [Putnum]
Generalizing definition for: putUnsigned with generics []
Inferred putUnsigned :: Putnum
Inferred b444 :: forall (a :: *). [Ref String, a -> Proc Unit, a, Word] >>= [Word]
Inferred k213 :: forall (a :: *). {Word, a, a -> Proc Unit, Ref String} [] ->> [Word]
Inferred b445 :: forall (a :: *). [Ref String, a -> Proc Unit, a, Word] >>= [Proc Word]
Inferred k214 :: forall (a :: *). {Word, a -> Proc Unit, Ref String} [a] ->> [Proc Word]
Inferred b446 :: forall (a :: *). [Ref String, a -> Proc Unit, Word] >>= [a -> Proc Word]
Inferred k215 :: forall (a :: *). {a -> Proc Unit, Ref String} [Word] ->> [a -> Proc Word]
Inferred b447 :: forall (a :: *). [Ref String, a -> Proc Unit] >>= [Word -> a -> Proc Word]
Inferred b434 :: forall (s :: *). [s] >>= [s]
Inferred b436 :: forall (s :: *). [s] >>= [s]
Inferred b442 :: forall (b :: *) (a :: *) (s :: *). [] >>= [(b -> Maybe (Pair a b)) -> (s -> a -> Proc s) -> s -> b -> Proc s]
Inferred k211 :: forall (b :: *) (a :: *) (s :: *). {} [b -> Maybe (Pair a b)] ->> [(s -> a -> Proc s) -> s -> b -> Proc s]
Inferred b441 :: forall (b :: *) (a :: *) (s :: *). [b -> Maybe (Pair a b)] >>= [(s -> a -> Proc s) -> s -> b -> Proc s]
Inferred k210 :: forall (b :: *) (a :: *) (s :: *). {b -> Maybe (Pair a b)} [s -> a -> Proc s] ->> [s -> b -> Proc s]
Inferred b440 :: forall (b :: *) (a :: *) (c :: *). [b -> Maybe (Pair a b), c -> a -> Proc c] >>= [c -> b -> Proc c]
Inferred k209 :: forall (s :: *) (a :: *) (b :: *). {s -> a -> Proc s, b -> Maybe (Pair a b)} [s] ->> [b -> Proc s]
Inferred b439 :: forall (s :: *) (a :: *) (a0 :: *). [s, a -> Maybe (Pair a0 a), s -> a0 -> Proc s] >>= [a -> Proc s]
Inferred k208 :: forall (s :: *) (a :: *) (b :: *). {s -> a -> Proc s, b -> Maybe (Pair a b), s} [b] ->> [Proc s]
Inferred b438 :: forall (a :: *) (s :: *) (a0 :: *). [a, s, a -> Maybe (Pair a0 a), s -> a0 -> Proc s] >>= [Proc s]
Inferred k207 :: forall (s :: *) (a :: *) (b :: *). {s -> a -> Proc s, b -> Maybe (Pair a b), s, b} [] ->> [s]
Inferred b437 :: forall (a :: *) (s :: *) (a0 :: *). [a, s, a -> Maybe (Pair a0 a), s -> a0 -> Proc s] >>= [s]
Inferred b435 :: forall (a :: *) (b :: *) (s :: *). [Maybe (Pair a b), s, b -> Maybe (Pair a b), s -> a -> Proc s] >>= [s]
generics for forallDoWith: [?4646, ?4647, ?4530] in type [(?4646 -> Maybe (Pair ?4647 ?4646)) -> (?4530 -> ?4647 -> Proc ?4530) -> ?4530 -> ?4646 -> Proc ?4530]
TopLevel group inferred forallDoWith :: forall (b :: *) (a :: *) (s :: *). [(b -> Maybe (Pair a b)) -> (s -> a -> Proc s) -> s -> b -> Proc s]
Generalizing definition for: forallDoWith with generics [?4646, ?4647, ?4530]
Inferred forallDoWith :: forall (b :: *) (a :: *) (s :: *). (b -> Maybe (Pair a b)) -> (s -> a -> Proc s) -> s -> b -> Proc s
Inferred b443 :: forall (a :: *) (b :: *). [a -> Maybe (Pair b a), Word -> b -> Proc Word, a] >>= [Unit]
Inferred k212 :: forall (a :: *) (b :: *). {a, Word -> b -> Proc Word, a -> Maybe (Pair b a)} [] ->> [Unit]
Inferred b448 :: forall (a :: *) (b :: *). [a -> Proc Unit, Ref String, b -> Maybe (Pair a b), b] >>= [Proc Unit]
Inferred k216 :: forall (a :: *) (b :: *). {a -> Maybe (Pair b a), Ref String, b -> Proc Unit} [a] ->> [Proc Unit]
Inferred b449 :: forall (a :: *) (b :: *). [a -> Proc Unit, Ref String, b -> Maybe (Pair a b)] >>= [b -> Proc Unit]
Inferred k217 :: forall (a :: *) (b :: *). {a -> Maybe (Pair b a), b -> Proc Unit} [Ref String] ->> [a -> Proc Unit]
Inferred b450 :: forall (a :: *) (b :: *). [a -> Proc Unit, b -> Maybe (Pair a b)] >>= [Ref String -> b -> Proc Unit]
Inferred k218 :: forall (a :: *) (b :: *). {a -> Maybe (Pair b a)} [b -> Proc Unit] ->> [Ref String -> a -> Proc Unit]
Inferred b451 :: forall (a :: *) (b :: *). [a -> Maybe (Pair b a)] >>= [(b -> Proc Unit) -> Ref String -> a -> Proc Unit]
Inferred k219 :: forall (a :: *) (b :: *). {} [a -> Maybe (Pair b a)] ->> [(b -> Proc Unit) -> Ref String -> a -> Proc Unit]
Inferred b452 :: forall (a :: *) (b :: *). [] >>= [(a -> Maybe (Pair b a)) -> (b -> Proc Unit) -> Ref String -> a -> Proc Unit]
generics for forallDisplay: [?4776, ?4777] in type [(?4776 -> Maybe (Pair ?4777 ?4776)) -> (?4777 -> Proc Unit) -> Ref String -> ?4776 -> Proc Unit]
TopLevel group inferred forallDisplay :: forall (a :: *) (b :: *). [(a -> Maybe (Pair b a)) -> (b -> Proc Unit) -> Ref String -> a -> Proc Unit]
Generalizing definition for: forallDisplay with generics [?4776, ?4777]
Inferred forallDisplay :: forall (a :: *) (b :: *). (a -> Maybe (Pair b a)) -> (b -> Proc Unit) -> Ref String -> a -> Proc Unit
Inferred b501 :: [] >>= [WordCursor -> Maybe (Pair Word WordCursor)]
generics for nextMimgMMap_imp: [] in type [WordCursor -> Maybe (Pair Word WordCursor)]
TopLevel group inferred nextMimgMMap_imp :: [WordCursor -> Maybe (Pair Word WordCursor)]
Generalizing definition for: nextMimgMMap_imp with generics []
Inferred nextMimgMMap_imp :: WordCursor -> Maybe (Pair Word WordCursor)
Inferred b482 :: [Ref MimgMMap] >>= [Unit]
Inferred k226 :: {Ref MimgMMap} [] ->> [Unit]
Inferred b483 :: [Ref MimgMMap] >>= [Proc Unit]
Inferred k227 :: {} [Ref MimgMMap] ->> [Proc Unit]
Inferred b484 :: [] >>= [Ref MimgMMap -> Proc Unit]
generics for putMMap: [] in type [Ref MimgMMap -> Proc Unit]
TopLevel group inferred putMMap :: [Ref MimgMMap -> Proc Unit]
Generalizing definition for: putMMap with generics []
Inferred putMMap :: Ref MimgMMap -> Proc Unit
Inferred b505 :: [Ref String, Ref String] >>= [Unit]
Inferred k237 :: {Ref String, Ref String} [] ->> [Unit]
Inferred b506 :: [Ref String, Ref String] >>= [Proc Unit]
Inferred k238 :: {Ref String} [Ref String] ->> [Proc Unit]
Inferred b507 :: [Ref String] >>= [Ref String -> Proc Unit]
Inferred k239 :: {} [Ref String] ->> [Ref String -> Proc Unit]
Inferred b508 :: [] >>= [Ref String -> Ref String -> Proc Unit]
generics for showMimgString: [] in type [Ref String -> Ref String -> Proc Unit]
TopLevel group inferred showMimgString :: [Ref String -> Ref String -> Proc Unit]
Generalizing definition for: showMimgString with generics []
Inferred showMimgString :: Ref String -> Ref String -> Proc Unit
Inferred b502 :: [Ref MimgBootData] >>= [Unit]
Inferred k235 :: {Ref MimgBootData} [] ->> [Unit]
Inferred b503 :: [Ref MimgBootData] >>= [Proc Unit]
Inferred k236 :: {} [Ref MimgBootData] ->> [Proc Unit]
Inferred b504 :: [] >>= [Ref MimgBootData -> Proc Unit]
generics for putMimgBootData: [] in type [Ref MimgBootData -> Proc Unit]
TopLevel group inferred putMimgBootData :: [Ref MimgBootData -> Proc Unit]
Generalizing definition for: putMimgBootData with generics []
Inferred putMimgBootData :: Ref MimgBootData -> Proc Unit
Inferred b509 :: [] >>= [Unit]
Inferred k240 :: {} [] ->> [Unit]
Inferred b510 :: [] >>= [Proc Unit]
generics for kernel: [] in type [Proc Unit]
TopLevel group inferred kernel :: [Proc Unit]
Generalizing definition for: kernel with generics []
Inferred kernel :: Proc Unit
Running constructor function rewrite ...
new version of DataType Maybe is Maybe
    orig: Nothing :: forall (a :: *). {} Maybe a
    new:  Nothing :: forall (a :: *). {} Maybe a
    orig: Just :: forall (a :: *). {a} Maybe a
    new:  Just :: forall (a :: *). {a} Maybe a
new version of DataType -> is ->
    orig: Func :: forall (a :: *) (b :: *). {[a] ->> [b]} a -> b
    new:  Func :: forall (a :: *) (b :: *). {[a] ->> [b]} [a] ->> [b]
new version of DataType Proc is Proc
    orig: Proc :: forall (a :: *). {[] ->> [a]} Proc a
    new:  Proc :: forall (a :: *). {[] ->> [a]} [] ->> [a]
new version of BitdataType Char is Char
    orig: Char :: {Char.Char} Char
    new:  Char :: {Char.Char} Char
new version of primitive update_attr :: [Char.Char, Bit 8] >>= [Char.Char]
         old version was update_attr :: [Char.Char, Byte] >>= [Char.Char]
new version of primitive update_char :: [Char.Char, Bit 8] >>= [Char.Char]
         old version was update_char :: [Char.Char, Byte] >>= [Char.Char]
making new version of structure type Window
new version of StructType Window is Window
making new version of structure type Coord
new version of StructType Coord is Coord
new version of primitive select_row :: [Ref Coord] >>= [Ref (Stored (Ix 25))]
         old version was select_row :: [Ref Coord] >>= [Ref (Stored (Ix NumRows))]
new version of primitive select_col :: [Ref Coord] >>= [Ref (Stored (Ix 80))]
         old version was select_col :: [Ref Coord] >>= [Ref (Stored (Ix NumCols))]
new version of primitive select_topleft :: [Ref Window] >>= [Ref Coord]
         old version was select_topleft :: [Ref Window] >>= [Ref Coord]
new version of primitive select_bottomright :: [Ref Window] >>= [Ref Coord]
         old version was select_bottomright :: [Ref Window] >>= [Ref Coord]
new version of primitive select_current :: [Ref Window] >>= [Ref Coord]
         old version was select_current :: [Ref Window] >>= [Ref Coord]
new version of primitive select_attr :: [Ref Window] >>= [Ref (Stored (Bit 8))]
         old version was select_attr :: [Ref Window] >>= [Ref (Stored Byte)]
new version of primitive init_row :: [Init (Stored (Ix 25))] >>= [Init Coord]
         old version was init_row :: [Init (Stored (Ix NumRows))] >>= [Init Coord]
new version of primitive init_col :: [Init (Stored (Ix 80))] >>= [Init Coord]
         old version was init_col :: [Init (Stored (Ix NumCols))] >>= [Init Coord]
new version of primitive init_topleft :: [Init Coord] >>= [Init Window]
         old version was init_topleft :: [Init Coord] >>= [Init Window]
new version of primitive init_bottomright :: [Init Coord] >>= [Init Window]
         old version was init_bottomright :: [Init Coord] >>= [Init Window]
new version of primitive init_current :: [Init Coord] >>= [Init Window]
         old version was init_current :: [Init Coord] >>= [Init Window]
new version of primitive init_attr :: [Init (Stored (Bit 8))] >>= [Init Window]
         old version was init_attr :: [Init (Stored Byte)] >>= [Init Window]
new version of BitdataType WordCursor is WordCursor
    orig: WordCursor :: {WordCursor.WordCursor} WordCursor
    new:  WordCursor :: {WordCursor.WordCursor} WordCursor
new version of primitive update_val :: [WordCursor.WordCursor, Bit 32] >>= [WordCursor.WordCursor]
         old version was update_val :: [WordCursor.WordCursor, Word] >>= [WordCursor.WordCursor]
new version of primitive update_count :: [WordCursor.WordCursor, Bit 32] >>= [WordCursor.WordCursor]
         old version was update_count :: [WordCursor.WordCursor, Word] >>= [WordCursor.WordCursor]
making new version of structure type MimgBootData
new version of StructType MimgBootData is MimgBootData
new version of primitive select_headers :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgHeaderBlock))]
         old version was select_headers :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgHeaderBlock))]
new version of primitive select_mmap :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgMMapBlock))]
         old version was select_mmap :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgMMapBlock))]
new version of primitive select_cmdline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
         old version was select_cmdline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
new version of primitive select_imgline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
         old version was select_imgline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
new version of DataType Pair is Pair
    orig: Pair :: forall (a :: *) (b :: *). {a, b} Pair a b
    new:  Pair :: forall (a :: *) (b :: *). {a, b} Pair a b
making new version of structure type MimgHeader
new version of StructType MimgHeader is MimgHeader
new version of primitive select_start :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
         old version was select_start :: [Ref MimgHeader] >>= [Ref (Stored Word)]
new version of primitive select_end :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
         old version was select_end :: [Ref MimgHeader] >>= [Ref (Stored Word)]
new version of primitive select_entry :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
         old version was select_entry :: [Ref MimgHeader] >>= [Ref (Stored Word)]
making new version of structure type MimgMMap
new version of StructType MimgMMap is MimgMMap
new version of primitive select_start :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
         old version was select_start :: [Ref MimgMMap] >>= [Ref (Stored Word)]
new version of primitive select_end :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
         old version was select_end :: [Ref MimgMMap] >>= [Ref (Stored Word)]
eliminating case on single constructor type
eliminating case on single constructor type
Running type checker ...
generics for Nothing: [?5369] in type [Maybe ?5369]
TopLevel group inferred Nothing :: forall (a :: *). [Maybe a]
Generalizing definition for: Nothing with generics [?5369]
Inferred Nothing :: forall (a :: *). Maybe a
Inferred k5 :: forall (a :: *). {} [a] ->> [Maybe a]
Inferred b6 :: forall (a :: *). [] >>= [[a] ->> [Maybe a]]
generics for Just: [?5378] in type [[?5378] ->> [Maybe ?5378]]
TopLevel group inferred Just :: forall (a :: *). [[a] ->> [Maybe a]]
Generalizing definition for: Just with generics [?5378]
Inferred Just :: forall (a :: *). [a] ->> [Maybe a]
Inferred b158 :: forall (m :: nat). [] >>= [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]
generics for ltIncBy: [?5390] in type [[Ix ?5390] ->> [[Ix ?5390] ->> [[Ix ?5390] ->> [Maybe (Ix ?5390)]]]]
TopLevel group inferred ltIncBy :: forall (m :: nat). [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]
Generalizing definition for: ltIncBy with generics [?5390]
Inferred ltIncBy :: forall (m :: nat). [Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]
generics for Unit: [] in type [Unit]
TopLevel group inferred Unit :: [Unit]
Generalizing definition for: Unit with generics []
Inferred Unit :: Unit
Inferred b149 :: forall (n :: nat). [] >>= [Ix n]
generics for ix1: [?5395] in type [Ix ?5395]
TopLevel group inferred ix1 :: forall (n :: nat). [Ix n]
Generalizing definition for: ix1 with generics [?5395]
Inferred ix1 :: forall (n :: nat). Ix n
Inferred b160 :: forall (m :: nat). [] >>= [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]
generics for ltInc: [?5403] in type [[Ix ?5403] ->> [[Ix ?5403] ->> [Maybe (Ix ?5403)]]]
TopLevel group inferred ltInc :: forall (m :: nat). [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]
Generalizing definition for: ltInc with generics [?5403]
Inferred ltInc :: forall (m :: nat). [Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]
Inferred ret1 :: forall (a :: *). {a} [] ->> [a]
Inferred b9 :: forall (a :: *). [a] >>= [[] ->> [a]]
Inferred k8 :: forall (a :: *). {} [a] ->> [[] ->> [a]]
Inferred b10 :: forall (a :: *). [] >>= [[a] ->> [[] ->> [a]]]
generics for primRet: [?5418] in type [[?5418] ->> [[] ->> [?5418]]]
TopLevel group inferred primRet :: forall (a :: *). [[a] ->> [[] ->> [a]]]
Generalizing definition for: primRet with generics [?5418]
Inferred primRet :: forall (a :: *). [a] ->> [[] ->> [a]]
generics for return: [?5420] in type [[?5420] ->> [[] ->> [?5420]]]
TopLevel group inferred return :: forall (a :: *). [[a] ->> [[] ->> [a]]]
Generalizing definition for: return with generics [?5420]
Inferred return :: forall (a :: *). [a] ->> [[] ->> [a]]
Inferred b293 :: [Unit] >>= [Unit]
Inferred b295 :: [] >>= [Unit]
Inferred b301 :: forall (n :: nat). [] >>= [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]]
Inferred k139 :: forall (n :: nat). {} [Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]
Inferred b300 :: forall (n :: nat). [Ix n] >>= [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]
Inferred k138 :: forall (n :: nat). {Ix n} [[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]
Inferred b299 :: forall (n :: nat). [[Ix n] ->> [[] ->> [Unit]], Ix n] >>= [[Ix n] ->> [[] ->> [Unit]]]
Inferred b298 :: forall (n :: nat). [Ix n, [Ix n] ->> [[] ->> [Unit]]] >>= [[Ix n] ->> [[] ->> [Unit]]]
Inferred k137 :: forall (n :: nat). {[Ix n] ->> [[] ->> [Unit]], Ix n} [Ix n] ->> [[] ->> [Unit]]
Inferred b297 :: forall (n :: nat). [Ix n, Ix n, [Ix n] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k136 :: forall (n :: nat). {[Ix n] ->> [[] ->> [Unit]], Ix n, Ix n} [] ->> [Unit]
Inferred b296 :: forall (n :: nat). [Ix n, Ix n, [Ix n] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred b294 :: forall (n :: nat). [Maybe (Ix n), Ix n, [Ix n] ->> [[] ->> [Unit]]] >>= [Unit]
generics for loop6: [?5514] in type [[Ix ?5514] ->> [[[Ix ?5514] ->> [[] ->> [Unit]]] ->> [[Ix ?5514] ->> [[] ->> [Unit]]]]]
TopLevel group inferred loop6 :: forall (n :: nat). [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]]
Generalizing definition for: loop6 with generics [?5514]
Inferred loop6 :: forall (n :: nat). [Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]
Inferred b340 :: forall (n :: nat). [Ix n, [Ix n] ->> [[] ->> [Unit]], Ix n] >>= [[] ->> [Unit]]
Inferred k160 :: forall (n :: nat). {Ix n, Ix n} [[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
Inferred b341 :: forall (n :: nat). [Ix n, Ix n] >>= [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred k161 :: forall (n :: nat). {Ix n} [Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b342 :: forall (n :: nat). [Ix n] >>= [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Inferred k162 :: forall (n :: nat). {} [Ix n] ->> [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Inferred b343 :: forall (n :: nat). [] >>= [[Ix n] ->> [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
generics for for: [?5556] in type [[Ix ?5556] ->> [[Ix ?5556] ->> [[[Ix ?5556] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
TopLevel group inferred for :: forall (n :: nat). [[Ix n] ->> [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
Generalizing definition for: for with generics [?5556]
Inferred for :: forall (n :: nat). [Ix n] ->> [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Inferred b315 :: [Ix 25, Ix 80] >>= [Ref (Stored Char)]
Inferred k146 :: {Ix 25} [Ix 80] ->> [Ref (Stored Char)]
Inferred b316 :: [Ix 25] >>= [[Ix 80] ->> [Ref (Stored Char)]]
Inferred k147 :: {} [Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]
Inferred b317 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]
generics for pos: [] in type [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]
TopLevel group inferred pos :: [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]
Generalizing definition for: pos with generics []
Inferred pos :: [Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]
generics for defAttr: [] in type [Bit 8]
TopLevel group inferred defAttr :: [Bit 8]
Generalizing definition for: defAttr with generics []
Inferred defAttr :: Bit 8
Inferred b312 :: [Bit 32] >>= [Char]
Inferred k145 :: {} [Bit 32] ->> [Char]
Inferred b313 :: [] >>= [[Bit 32] ->> [Char]]
generics for char: [] in type [[Bit 32] ->> [Char]]
TopLevel group inferred char :: [[Bit 32] ->> [Char]]
Generalizing definition for: char with generics []
Inferred char :: [Bit 32] ->> [Char]
Inferred b314 :: [] >>= [Char]
generics for blank: [] in type [Char]
TopLevel group inferred blank :: [Char]
Generalizing definition for: blank with generics []
Inferred blank :: Char
Inferred b347 :: [Ix 25, Ix 80, Bit 8] >>= [[] ->> [Unit]]
Inferred k165 :: {Bit 8, Ix 25} [Ix 80] ->> [[] ->> [Unit]]
Inferred b348 :: [Ix 25, Bit 8] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Inferred b349 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [[] ->> [Unit]]
Inferred k166 :: {Bit 8, Ix 80, Ix 80} [Ix 25] ->> [[] ->> [Unit]]
Inferred b350 :: [Ix 80, Ix 80, Bit 8] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b351 :: [Ref Window] >>= [Unit]
Inferred k167 :: {Ref Window} [] ->> [Unit]
Inferred b352 :: [Ref Window] >>= [[] ->> [Unit]]
Inferred k168 :: {} [Ref Window] ->> [[] ->> [Unit]]
Inferred b353 :: [] >>= [[Ref Window] ->> [[] ->> [Unit]]]
generics for clearWindow: [] in type [[Ref Window] ->> [[] ->> [Unit]]]
TopLevel group inferred clearWindow :: [[Ref Window] ->> [[] ->> [Unit]]]
Generalizing definition for: clearWindow with generics []
Inferred clearWindow :: [Ref Window] ->> [[] ->> [Unit]]
Inferred b331 :: [Ix 25, Ix 80] >>= [Init Coord]
Inferred k153 :: {Ix 25} [Ix 80] ->> [Init Coord]
Inferred b332 :: [Ix 25] >>= [[Ix 80] ->> [Init Coord]]
Inferred k154 :: {} [Ix 25] ->> [[Ix 80] ->> [Init Coord]]
Inferred b333 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]]
generics for initCoord: [] in type [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]]
TopLevel group inferred initCoord :: [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]]
Generalizing definition for: initCoord with generics []
Inferred initCoord :: [Ix 25] ->> [[Ix 80] ->> [Init Coord]]
Inferred b334 :: [Ix 25, Ix 80, Ix 25, Ix 80, Bit 8] >>= [Init Window]
Inferred k155 :: {Ix 80, Ix 25, Ix 80, Ix 25} [Bit 8] ->> [Init Window]
Inferred b335 :: [Ix 25, Ix 80, Ix 25, Ix 80] >>= [[Bit 8] ->> [Init Window]]
Inferred k156 :: {Ix 25, Ix 80, Ix 25} [Ix 80] ->> [[Bit 8] ->> [Init Window]]
Inferred b336 :: [Ix 25, Ix 80, Ix 25] >>= [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]
Inferred k157 :: {Ix 80, Ix 25} [Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]
Inferred b337 :: [Ix 25, Ix 80] >>= [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]
Inferred k158 :: {Ix 25} [Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]
Inferred b338 :: [Ix 25] >>= [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]
Inferred k159 :: {} [Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]
Inferred b339 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]]
generics for window: [] in type [[Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]]
TopLevel group inferred window :: [[Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]]
Generalizing definition for: window with generics []
Inferred window :: [Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]
Inferred b148 :: forall (n :: nat). [] >>= [Ix n]
generics for ix0: [?5823] in type [Ix ?5823]
TopLevel group inferred ix0 :: forall (n :: nat). [Ix n]
Generalizing definition for: ix0 with generics [?5823]
Inferred ix0 :: forall (n :: nat). Ix n
Inferred b425 :: [] >>= [Init Window]
generics for s2: [] in type [Init Window]
TopLevel group inferred s2 :: [Init Window]
Generalizing definition for: s2 with generics []
Inferred s2 :: Init Window
Inferred b391 :: [] >>= [[] ->> [Unit]]
generics for clearScreen: [] in type [[] ->> [Unit]]
TopLevel group inferred clearScreen :: [[] ->> [Unit]]
Generalizing definition for: clearScreen with generics []
Inferred clearScreen :: [] ->> [Unit]
Inferred b82 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [b]
Inferred k52 :: forall (a :: *) (b :: *). {[a] ->> [[] ->> [b]], [] ->> [a]} [] ->> [b]
Inferred b83 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [[] ->> [b]]
Inferred k53 :: forall (a :: *) (b :: *). {[] ->> [a]} [[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]
Inferred b84 :: forall (a :: *) (b :: *). [[] ->> [a]] >>= [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]
Inferred k54 :: forall (a :: *) (b :: *). {} [[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]
Inferred b85 :: forall (a :: *) (b :: *). [] >>= [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]
generics for >>=: [?5895, ?5896] in type [[[] ->> [?5895]] ->> [[[?5895] ->> [[] ->> [?5896]]] ->> [[] ->> [?5896]]]]
TopLevel group inferred >>= :: forall (a :: *) (b :: *). [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]
Generalizing definition for: >>= with generics [?5895, ?5896]
Inferred >>= :: forall (a :: *) (b :: *). [[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]
Inferred b11 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred k9 :: {Bit 32} [Bit 32] ->> [Bit 32]
Inferred b12 :: [Bit 32] >>= [[Bit 32] ->> [Bit 32]]
Inferred k10 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred b13 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
generics for +: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred + :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: + with generics []
Inferred + :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred b488 :: [Bit 32] >>= [Bit 32]
Inferred k230 :: {} [Bit 32] ->> [Bit 32]
Inferred b489 :: [] >>= [[Bit 32] ->> [Bit 32]]
generics for refToWord_imp: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred refToWord_imp :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: refToWord_imp with generics []
Inferred refToWord_imp :: [Bit 32] ->> [Bit 32]
Inferred b485 :: [Ref (Stored (Bit 32))] >>= [WordCursor]
Inferred k228 :: {Ref (Stored (Bit 32))} [] ->> [WordCursor]
Inferred b486 :: [Ref (Stored (Bit 32))] >>= [[] ->> [WordCursor]]
Inferred k229 :: {} [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]
Inferred b487 :: [] >>= [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
generics for wordCursor: [] in type [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
TopLevel group inferred wordCursor :: [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
Generalizing definition for: wordCursor with generics []
Inferred wordCursor :: [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]
Inferred b496 :: [Ref MimgBootData] >>= [[] ->> [MimgHeaderCursor]]
Inferred k233 :: {} [Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]
Inferred b497 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]]
generics for mimgHeaders: [] in type [[Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]]
TopLevel group inferred mimgHeaders :: [[Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]]
Generalizing definition for: mimgHeaders with generics []
Inferred mimgHeaders :: [Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]
generics for false: [] in type [Bool]
TopLevel group inferred false :: [Bool]
Generalizing definition for: false with generics []
Inferred false :: Bool
Inferred bfalse :: [] >>= [Bool]
generics for true: [] in type [Bool]
TopLevel group inferred true :: [Bool]
Generalizing definition for: true with generics []
Inferred true :: Bool
Inferred btrue :: [] >>= [Bool]
Inferred bconv :: [Bit 1] >>= [Bool]
Inferred b34 :: [Bit 32, Bit 32] >>= [Bool]
Inferred k24 :: {Bit 32} [Bit 32] ->> [Bool]
Inferred b35 :: [Bit 32] >>= [[Bit 32] ->> [Bool]]
Inferred k25 :: {} [Bit 32] ->> [[Bit 32] ->> [Bool]]
Inferred b36 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
generics for ==: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
TopLevel group inferred == :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Generalizing definition for: == with generics []
Inferred == :: [Bit 32] ->> [[Bit 32] ->> [Bool]]
Inferred b490 :: [Maybe (Pair (Bit 32) WordCursor)] >>= [Maybe (Pair (Bit 32) WordCursor)]
Inferred b492 :: [] >>= [Maybe (Pair (Bit 32) WordCursor)]
Inferred k3 :: forall (a :: *) (b :: *). {a} [b] ->> [Pair a b]
Inferred b4 :: forall (a :: *) (b :: *). [a] >>= [[b] ->> [Pair a b]]
Inferred k4 :: forall (a :: *) (b :: *). {} [a] ->> [[b] ->> [Pair a b]]
Inferred b5 :: forall (a :: *) (b :: *). [] >>= [[a] ->> [[b] ->> [Pair a b]]]
generics for Pair: [?6001, ?6002] in type [[?6001] ->> [[?6002] ->> [Pair ?6001 ?6002]]]
TopLevel group inferred Pair :: forall (a :: *) (b :: *). [[a] ->> [[b] ->> [Pair a b]]]
Generalizing definition for: Pair with generics [?6001, ?6002]
Inferred Pair :: forall (a :: *) (b :: *). [a] ->> [[b] ->> [Pair a b]]
Inferred b14 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred k11 :: {Bit 32} [Bit 32] ->> [Bit 32]
Inferred b15 :: [Bit 32] >>= [[Bit 32] ->> [Bit 32]]
Inferred k12 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred b16 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
generics for -: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred - :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: - with generics []
Inferred - :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred b491 :: [WordCursor, Bit 32, Bit 32] >>= [Maybe (Pair (Bit 32) WordCursor)]
Inferred b493 :: [WordCursor, Bit 32] >>= [Maybe (Pair (Bit 32) WordCursor)]
Inferred k231 :: {Bit 32} [WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]
Inferred b494 :: [Bit 32] >>= [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
Inferred k232 :: {} [Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
Inferred b495 :: [] >>= [[Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]]
generics for nextWordCursor: [] in type [[Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]]
TopLevel group inferred nextWordCursor :: [[Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]]
Generalizing definition for: nextWordCursor with generics []
Inferred nextWordCursor :: [Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
Inferred b500 :: [] >>= [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
generics for nextMimgHeader_imp: [] in type [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
TopLevel group inferred nextMimgHeader_imp :: [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
Generalizing definition for: nextMimgHeader_imp with generics []
Inferred nextMimgHeader_imp :: [WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]
Inferred loadCharImp1 :: {Addr} [] ->> [Bit 8]
Inferred b66 :: [Addr] >>= [[] ->> [Bit 8]]
Inferred k45 :: {} [Addr] ->> [[] ->> [Bit 8]]
Inferred b67 :: [] >>= [[Addr] ->> [[] ->> [Bit 8]]]
generics for loadCharImp: [] in type [[Addr] ->> [[] ->> [Bit 8]]]
TopLevel group inferred loadCharImp :: [[Addr] ->> [[] ->> [Bit 8]]]
Generalizing definition for: loadCharImp with generics []
Inferred loadCharImp :: [Addr] ->> [[] ->> [Bit 8]]
Inferred b122 :: [Maybe (Pair (Bit 32) (Bit 32))] >>= [Maybe (Pair (Bit 32) (Bit 32))]
Inferred b124 :: [] >>= [Maybe (Pair (Bit 32) (Bit 32))]
Inferred b64 :: forall (a :: *). [a] >>= [a]
Inferred k44 :: forall (a :: *). {} [a] ->> [a]
Inferred b65 :: forall (a :: *). [] >>= [[a] ->> [a]]
generics for ptrToWordImp: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred ptrToWordImp :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: ptrToWordImp with generics []
Inferred ptrToWordImp :: [Bit 32] ->> [Bit 32]
Inferred b123 :: [Bit 32, Ref String] >>= [Maybe (Pair (Bit 32) (Bit 32))]
Inferred b125 :: [Ref String] >>= [Maybe (Pair (Bit 32) (Bit 32))]
Inferred k75 :: {Ref String} [] ->> [Maybe (Pair (Bit 32) (Bit 32))]
Inferred b126 :: [Ref String] >>= [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]
Inferred k76 :: {} [Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]
Inferred b127 :: [] >>= [[Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]]
generics for nextCharImp: [] in type [[Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]]
TopLevel group inferred nextCharImp :: [[Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]]
Generalizing definition for: nextCharImp with generics []
Inferred nextCharImp :: [Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]
Inferred b200 :: [Unit] >>= [Unit]
Inferred b202 :: [] >>= [Unit]
Inferred b74 :: forall (a :: *). [a] >>= [a]
Inferred b75 :: forall (a :: *) (b :: *). [Pair a b] >>= [a]
Inferred b76 :: forall (a :: *) (b :: *). [Pair a b] >>= [a]
Inferred k50 :: forall (a :: *) (b :: *). {} [Pair a b] ->> [a]
Inferred b77 :: forall (a :: *) (b :: *). [] >>= [[Pair a b] ->> [a]]
generics for fst: [?6182, ?6185] in type [[Pair ?6182 ?6185] ->> [?6182]]
TopLevel group inferred fst :: forall (a :: *) (b :: *). [[Pair a b] ->> [a]]
Generalizing definition for: fst with generics [?6182, ?6185]
Inferred fst :: forall (a :: *) (b :: *). [Pair a b] ->> [a]
Inferred b78 :: forall (a :: *). [a] >>= [a]
Inferred b79 :: forall (a :: *) (b :: *). [Pair a b] >>= [b]
Inferred b80 :: forall (a :: *) (b :: *). [Pair a b] >>= [b]
Inferred k51 :: forall (a :: *) (b :: *). {} [Pair a b] ->> [b]
Inferred b81 :: forall (a :: *) (b :: *). [] >>= [[Pair a b] ->> [b]]
generics for snd: [?6215, ?6218] in type [[Pair ?6215 ?6218] ->> [?6218]]
TopLevel group inferred snd :: forall (a :: *) (b :: *). [[Pair a b] ->> [b]]
Generalizing definition for: snd with generics [?6215, ?6218]
Inferred snd :: forall (a :: *) (b :: *). [Pair a b] ->> [b]
Inferred b206 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]]
Inferred k104 :: {} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]
Inferred b205 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ref String] ->> [[] ->> [Unit]]]
Inferred k103 :: {[Bit 32] ->> [[] ->> [Unit]]} [Ref String] ->> [[] ->> [Unit]]
Inferred b204 :: [Ref String, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k102 :: {[Bit 32] ->> [[] ->> [Unit]], Ref String} [] ->> [Unit]
Inferred b203 :: [Ref String, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred b201 :: [Maybe (Pair (Bit 32) (Ref String)), [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
generics for hputs: [] in type [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]]
TopLevel group inferred hputs :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]]
Generalizing definition for: hputs with generics []
Inferred hputs :: [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]
Inferred b106 :: [Bit 16, Bit 32] >>= [Bit 16]
Inferred k66 :: {Bit 16} [Bit 32] ->> [Bit 16]
Inferred b107 :: [Bit 16] >>= [[Bit 32] ->> [Bit 16]]
Inferred k67 :: {} [Bit 16] ->> [[Bit 32] ->> [Bit 16]]
Inferred b108 :: [] >>= [[Bit 16] ->> [[Bit 32] ->> [Bit 16]]]
generics for portPlus: [] in type [[Bit 16] ->> [[Bit 32] ->> [Bit 16]]]
TopLevel group inferred portPlus :: [[Bit 16] ->> [[Bit 32] ->> [Bit 16]]]
Generalizing definition for: portPlus with generics []
Inferred portPlus :: [Bit 16] ->> [[Bit 32] ->> [Bit 16]]
Inferred b267 :: [] >>= [Bit 16]
generics for com1data: [] in type [Bit 16]
TopLevel group inferred com1data :: [Bit 16]
Generalizing definition for: com1data with generics []
Inferred com1data :: Bit 16
Inferred b268 :: [] >>= [Bit 16]
generics for com1ctrl: [] in type [Bit 16]
TopLevel group inferred com1ctrl :: [Bit 16]
Generalizing definition for: com1ctrl with generics []
Inferred com1ctrl :: Bit 16
Inferred b255 :: [Unit] >>= [Unit]
Inferred b256 :: [Bit 32] >>= [Unit]
Inferred b260 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k128 :: {} [Bit 32] ->> [[] ->> [Unit]]
Inferred b259 :: [Bit 32] >>= [[] ->> [Unit]]
Inferred k127 :: {Bit 32} [] ->> [Unit]
Inferred b258 :: [Bit 32] >>= [Unit]
Inferred b257 :: [Bit 32] >>= [Unit]
generics for put5: [] in type [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel group inferred put5 :: [[Bit 32] ->> [[] ->> [Unit]]]
Generalizing definition for: put5 with generics []
Inferred put5 :: [Bit 32] ->> [[] ->> [Unit]]
Inferred b261 :: [Unit] >>= [Unit]
Inferred b263 :: [] >>= [Unit]
Inferred b262 :: [] >>= [Unit]
Inferred b264 :: [Bit 32] >>= [Unit]
Inferred k129 :: {Bit 32} [] ->> [Unit]
Inferred b265 :: [Bit 32] >>= [[] ->> [Unit]]
Inferred k130 :: {} [Bit 32] ->> [[] ->> [Unit]]
Inferred b266 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
generics for sputchar: [] in type [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel group inferred sputchar :: [[Bit 32] ->> [[] ->> [Unit]]]
Generalizing definition for: sputchar with generics []
Inferred sputchar :: [Bit 32] ->> [[] ->> [Unit]]
generics for True: [] in type [Bool]
TopLevel group inferred True :: [Bool]
Generalizing definition for: True with generics []
Inferred True :: Bool
Inferred b86 :: forall (a :: *). [Ref (Stored a), Ref (Stored a)] >>= [[] ->> [Unit]]
Inferred k55 :: forall (a :: *). {Ref (Stored a)} [Ref (Stored a)] ->> [[] ->> [Unit]]
Inferred b87 :: forall (a :: *). [Ref (Stored a)] >>= [[Ref (Stored a)] ->> [[] ->> [Unit]]]
Inferred k56 :: forall (a :: *). {} [Ref (Stored a)] ->> [[Ref (Stored a)] ->> [[] ->> [Unit]]]
Inferred b88 :: forall (a :: *). [] >>= [[Ref (Stored a)] ->> [[Ref (Stored a)] ->> [[] ->> [Unit]]]]
generics for >->: [?6414] in type [[Ref (Stored ?6414)] ->> [[Ref (Stored ?6414)] ->> [[] ->> [Unit]]]]
TopLevel group inferred >-> :: forall (a :: *). [[Ref (Stored a)] ->> [[Ref (Stored a)] ->> [[] ->> [Unit]]]]
Generalizing definition for: >-> with generics [?6414]
Inferred >-> :: forall (a :: *). [Ref (Stored a)] ->> [[Ref (Stored a)] ->> [[] ->> [Unit]]]
Inferred b374 :: [Unit] >>= [Unit]
Inferred b376 :: [Maybe (Ix 25), Ref Window] >>= [Unit]
Inferred b383 :: [Ix 25, Ix 25, Ix 80] >>= [[] ->> [Unit]]
Inferred k182 :: {Ix 25, Ix 25} [Ix 80] ->> [[] ->> [Unit]]
Inferred b384 :: [Ix 25, Ix 25] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Inferred b385 :: [Ix 80, Ix 80, Ix 25, Ix 25] >>= [[] ->> [Unit]]
Inferred k183 :: {Ix 25, Ix 80, Ix 80} [Ix 25] ->> [[] ->> [Unit]]
Inferred b386 :: [Ix 80, Ix 80, Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Inferred k184 :: {Ix 80, Ix 80} [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b387 :: [Ix 80, Ix 80] >>= [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Inferred b381 :: [Ix 25, Ix 80, Bit 8] >>= [[] ->> [Unit]]
Inferred k181 :: {Bit 8, Ix 25} [Ix 80] ->> [[] ->> [Unit]]
Inferred b382 :: [Ix 25, Bit 8] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Inferred b302 :: [[] ->> [Unit]] >>= [[] ->> [Unit]]
Inferred b303 :: [[] ->> [Unit]] >>= [[] ->> [Unit]]
Inferred b311 :: [] >>= [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]]
Inferred k144 :: {} [Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
Inferred b310 :: [Ix 25] >>= [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
Inferred k143 :: {Ix 25} [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Inferred b309 :: [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25] >>= [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Inferred k142 :: {Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]} [[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b308 :: [[] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b307 :: [Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Inferred k141 :: {[] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25} [Ix 25] ->> [[] ->> [Unit]]
Inferred b306 :: [Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[] ->> [Unit]]
Inferred b305 :: [Maybe (Ix 25), Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[] ->> [Unit]]
Inferred k140 :: {Ix 25, [] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25, Ix 25} [] ->> [Unit]
Inferred b304 :: [Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit], Ix 25] >>= [Unit]
generics for loop7: [] in type [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]]
TopLevel group inferred loop7 :: [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]]
Generalizing definition for: loop7 with generics []
Inferred loop7 :: [Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
Inferred b388 :: [Ref Window] >>= [Unit]
Inferred k185 :: {Ref Window} [] ->> [Unit]
Inferred b389 :: [Ref Window] >>= [[] ->> [Unit]]
Inferred k186 :: {} [Ref Window] ->> [[] ->> [Unit]]
Inferred b390 :: [] >>= [[Ref Window] ->> [[] ->> [Unit]]]
generics for scroll: [] in type [[Ref Window] ->> [[] ->> [Unit]]]
TopLevel group inferred scroll :: [[Ref Window] ->> [[] ->> [Unit]]]
Generalizing definition for: scroll with generics []
Inferred scroll :: [Ref Window] ->> [[] ->> [Unit]]
Inferred b375 :: [Ref Window] >>= [Unit]
Inferred b377 :: [Ix 25, Ref Window] >>= [Unit]
Inferred k178 :: {Ref Window, Ix 25} [] ->> [Unit]
Inferred b378 :: [Ix 25, Ref Window] >>= [[] ->> [Unit]]
Inferred k179 :: {Ref Window} [Ix 25] ->> [[] ->> [Unit]]
Inferred b379 :: [Ref Window] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Inferred k180 :: {} [Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b380 :: [] >>= [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
generics for newline: [] in type [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
TopLevel group inferred newline :: [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Generalizing definition for: newline with generics []
Inferred newline :: [Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b354 :: [Unit] >>= [Unit]
Inferred b359 :: [Ref Window, Ix 25] >>= [Unit]
Inferred b355 :: [Unit] >>= [Unit]
Inferred b357 :: [Maybe (Ix 80), Ref Window] >>= [Unit]
Inferred b356 :: [Ref Window, Ix 25] >>= [Unit]
Inferred b358 :: [Bit 32, Ref Window, Ix 25] >>= [Unit]
Inferred b360 :: [Bool, Bit 32, Ref Window, Ix 25] >>= [Unit]
Inferred b362 :: [Ix 25, Ref Window, Bit 32] >>= [Unit]
Inferred b361 :: [Ix 25, Ref Window, Bit 32] >>= [Unit]
Inferred b363 :: [Ref Window, Bit 32] >>= [Unit]
Inferred k169 :: {Bit 32, Ref Window} [] ->> [Unit]
Inferred b364 :: [Ref Window, Bit 32] >>= [[] ->> [Unit]]
Inferred k170 :: {Ref Window} [Bit 32] ->> [[] ->> [Unit]]
Inferred b365 :: [Ref Window] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k171 :: {} [Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b366 :: [] >>= [[Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
generics for wputchar: [] in type [[Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred wputchar :: [[Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: wputchar with generics []
Inferred wputchar :: [Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b392 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
generics for putchar: [] in type [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel group inferred putchar :: [[Bit 32] ->> [[] ->> [Unit]]]
Generalizing definition for: putchar with generics []
Inferred putchar :: [Bit 32] ->> [[] ->> [Unit]]
Inferred b393 :: [] >>= [[Ref String] ->> [[] ->> [Unit]]]
generics for puts: [] in type [[Ref String] ->> [[] ->> [Unit]]]
TopLevel group inferred puts :: [[Ref String] ->> [[] ->> [Unit]]]
Generalizing definition for: puts with generics []
Inferred puts :: [Ref String] ->> [[] ->> [Unit]]
Inferred b176 :: [Unit] >>= [Unit]
Inferred b178 :: [] >>= [Unit]
Inferred b185 :: [] >>= [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]]
Inferred k95 :: {} [Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]
Inferred b184 :: [Ix 32] >>= [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]
Inferred k94 :: {Ix 32} [Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
Inferred b183 :: [Bit 32, Ix 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
Inferred k93 :: {Ix 32, Bit 32} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]
Inferred b182 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Inferred b181 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Inferred k92 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [Ix 32] ->> [[] ->> [Unit]]
Inferred b180 :: [Ix 32, Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k91 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32, Ix 32} [] ->> [Unit]
Inferred b179 :: [Ix 32, Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred b177 :: [Maybe (Ix 32), Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
generics for padloop3: [] in type [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]]
TopLevel group inferred padloop3 :: [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]]
Generalizing definition for: padloop3 with generics []
Inferred padloop3 :: [Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]
Inferred b102 :: forall (n :: nat). [] >>= [Bit n]
generics for bit0: [?6991] in type [Bit ?6991]
TopLevel group inferred bit0 :: forall (n :: nat). [Bit n]
Generalizing definition for: bit0 with generics [?6991]
Inferred bit0 :: forall (n :: nat). Bit n
Inferred b252 :: [] >>= [Init (Stored (Bit 8))]
Inferred k126 :: {} [Ix 32] ->> [Init (Stored (Bit 8))]
Inferred b253 :: [] >>= [[Ix 32] ->> [Init (Stored (Bit 8))]]
Inferred b254 :: [] >>= [Init (Array 32 (Stored (Bit 8)))]
generics for s1: [] in type [Init (Array 32 (Stored (Bit 8)))]
TopLevel group inferred s1 :: [Init (Array 32 (Stored (Bit 8)))]
Generalizing definition for: s1 with generics []
Inferred s1 :: Init (Array 32 (Stored (Bit 8)))
Inferred b159 :: forall (m :: nat). [] >>= [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]
generics for ltDecBy: [?7015] in type [[Ix ?7015] ->> [[Ix ?7015] ->> [[Ix ?7015] ->> [Maybe (Ix ?7015)]]]]
TopLevel group inferred ltDecBy :: forall (m :: nat). [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]
Generalizing definition for: ltDecBy with generics [?7015]
Inferred ltDecBy :: forall (m :: nat). [Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]
Inferred b161 :: forall (m :: nat). [] >>= [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]
generics for ltDec: [?7022] in type [[Ix ?7022] ->> [[Ix ?7022] ->> [Maybe (Ix ?7022)]]]
TopLevel group inferred ltDec :: forall (m :: nat). [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]
Generalizing definition for: ltDec with generics [?7022]
Inferred ltDec :: forall (m :: nat). [Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]
Inferred b164 :: forall (m :: nat). [Ix m] >>= [Maybe (Ix m)]
Inferred k86 :: forall (n :: nat). {} [Ix n] ->> [Maybe (Ix n)]
Inferred b165 :: forall (n :: nat). [] >>= [[Ix n] ->> [Maybe (Ix n)]]
generics for decIx: [?7040] in type [[Ix ?7040] ->> [Maybe (Ix ?7040)]]
TopLevel group inferred decIx :: forall (n :: nat). [[Ix n] ->> [Maybe (Ix n)]]
Generalizing definition for: decIx with generics [?7040]
Inferred decIx :: forall (n :: nat). [Ix n] ->> [Maybe (Ix n)]
Inferred b168 :: [Unit] >>= [Unit]
Inferred b170 :: [] >>= [Unit]
Inferred b175 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
Inferred k90 :: {} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]
Inferred b174 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Inferred b173 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Inferred k89 :: {[Bit 32] ->> [[] ->> [Unit]]} [Ix 32] ->> [[] ->> [Unit]]
Inferred b172 :: [Ix 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k88 :: {[Bit 32] ->> [[] ->> [Unit]], Ix 32} [] ->> [Unit]
Inferred b171 :: [Ix 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred b169 :: [Maybe (Ix 32), [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
generics for output2: [] in type [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred output2 :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: output2 with generics []
Inferred output2 :: [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]
Inferred b220 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit]
Inferred k109 :: {Ix 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [] ->> [Unit]
Inferred b221 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]], Ix 32] >>= [[] ->> [Unit]]
Inferred k110 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [Ix 32] ->> [[] ->> [Unit]]
Inferred b222 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Inferred b61 :: [Bit 32, Bit 32] >>= [Bool]
Inferred k42 :: {Bit 32} [Bit 32] ->> [Bool]
Inferred b62 :: [Bit 32] >>= [[Bit 32] ->> [Bool]]
Inferred k43 :: {} [Bit 32] ->> [[Bit 32] ->> [Bool]]
Inferred b63 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
generics for <=: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
TopLevel group inferred <= :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Generalizing definition for: <= with generics []
Inferred <= :: [Bit 32] ->> [[Bit 32] ->> [Bool]]
Inferred b229 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]
Inferred b231 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]
Inferred b230 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]
Inferred b232 :: [Bit 32] >>= [Bit 8]
Inferred k116 :: {} [Bit 32] ->> [Bit 8]
Inferred b233 :: [] >>= [[Bit 32] ->> [Bit 8]]
generics for digitToByte: [] in type [[Bit 32] ->> [Bit 8]]
TopLevel group inferred digitToByte :: [[Bit 32] ->> [Bit 8]]
Generalizing definition for: digitToByte with generics []
Inferred digitToByte :: [Bit 32] ->> [Bit 8]
Inferred b186 :: [Unit] >>= [Unit]
Inferred b191 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit]
Inferred b187 :: [Unit] >>= [Unit]
Inferred b189 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit]
Inferred b199 :: [] >>= [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Inferred k101 :: {} [Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
Inferred b198 :: [Ix 32] >>= [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
Inferred k100 :: {Ix 32} [[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Inferred b197 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Inferred k99 :: {Ix 32, [Ix 32] ->> [[] ->> [Unit]]} [NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred b196 :: [NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred b195 :: [Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred k98 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32} [Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b194 :: [Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k97 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32, Ix 32} [Bit 32] ->> [[] ->> [Unit]]
Inferred b193 :: [Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[] ->> [Unit]]
Inferred k96 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32, Ix 32, Bit 32} [] ->> [Unit]
Inferred b192 :: [Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [Unit]
Inferred b190 :: [Maybe (Ix 32), Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [Unit]
Inferred b188 :: [Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32, Ix 32, Bit 32] >>= [Unit]
generics for loop4: [] in type [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
TopLevel group inferred loop4 :: [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Generalizing definition for: loop4 with generics []
Inferred loop4 :: [Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
Inferred b223 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32, Ix 32, NZBit 32] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k111 :: {NZBit 32, Ix 32, Ix 32, Bit 32} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b224 :: [Bit 32, Ix 32, Ix 32, NZBit 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred k112 :: {NZBit 32, Ix 32, Ix 32} [Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred b225 :: [Ix 32, Ix 32, NZBit 32] >>= [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Inferred k113 :: {NZBit 32, Ix 32} [Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Inferred b226 :: [Ix 32, NZBit 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
Inferred k114 :: {NZBit 32} [Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
Inferred b227 :: [NZBit 32] >>= [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Inferred k115 :: {} [NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Inferred b228 :: [] >>= [[NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]]
generics for hputDigitsFmt: [] in type [[NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]]
TopLevel group inferred hputDigitsFmt :: [[NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]]
Generalizing definition for: hputDigitsFmt with generics []
Inferred hputDigitsFmt :: [NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Inferred b218 :: [NZBit 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred k108 :: {} [NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred b219 :: [] >>= [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
generics for hputDigits: [] in type [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
TopLevel group inferred hputDigits :: [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Generalizing definition for: hputDigits with generics []
Inferred hputDigits :: [NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred b139 :: forall (n :: nat). [] >>= [NZBit n]
generics for nz16: [?7437] in type [NZBit ?7437]
TopLevel group inferred nz16 :: forall (n :: nat). [NZBit n]
Generalizing definition for: nz16 with generics [?7437]
Inferred nz16 :: forall (n :: nat). NZBit n
Inferred b217 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
generics for hputHex: [] in type [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred hputHex :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: hputHex with generics []
Inferred hputHex :: [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b398 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
generics for putHex: [] in type [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel group inferred putHex :: [[Bit 32] ->> [[] ->> [Unit]]]
Generalizing definition for: putHex with generics []
Inferred putHex :: [Bit 32] ->> [[] ->> [Unit]]
Inferred b479 :: [Ref MimgHeader] >>= [Unit]
Inferred k224 :: {Ref MimgHeader} [] ->> [Unit]
Inferred b480 :: [Ref MimgHeader] >>= [[] ->> [Unit]]
Inferred k225 :: {} [Ref MimgHeader] ->> [[] ->> [Unit]]
Inferred b481 :: [] >>= [[Ref MimgHeader] ->> [[] ->> [Unit]]]
generics for putHeader: [] in type [[Ref MimgHeader] ->> [[] ->> [Unit]]]
TopLevel group inferred putHeader :: [[Ref MimgHeader] ->> [[] ->> [Unit]]]
Generalizing definition for: putHeader with generics []
Inferred putHeader :: [Ref MimgHeader] ->> [[] ->> [Unit]]
Inferred b498 :: [Ref MimgBootData] >>= [[] ->> [MimgMMapCursor]]
Inferred k234 :: {} [Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]
Inferred b499 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]]
generics for mimgMMap: [] in type [[Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]]
TopLevel group inferred mimgMMap :: [[Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]]
Generalizing definition for: mimgMMap with generics []
Inferred mimgMMap :: [Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]
Inferred b138 :: forall (n :: nat). [] >>= [NZBit n]
generics for nz10: [?7537] in type [NZBit ?7537]
TopLevel group inferred nz10 :: forall (n :: nat). [NZBit n]
Generalizing definition for: nz10 with generics [?7537]
Inferred nz10 :: forall (n :: nat). NZBit n
Inferred b207 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
generics for hputUnsigned: [] in type [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred hputUnsigned :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: hputUnsigned with generics []
Inferred hputUnsigned :: [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b394 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
generics for putUnsigned: [] in type [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel group inferred putUnsigned :: [[Bit 32] ->> [[] ->> [Unit]]]
Generalizing definition for: putUnsigned with generics []
Inferred putUnsigned :: [Bit 32] ->> [[] ->> [Unit]]
Inferred b444 :: forall (a :: *). [Ref String, [a] ->> [[] ->> [Unit]], a, Bit 32] >>= [Bit 32]
Inferred k213 :: forall (a :: *). {Bit 32, a, [a] ->> [[] ->> [Unit]], Ref String} [] ->> [Bit 32]
Inferred b445 :: forall (a :: *). [Ref String, [a] ->> [[] ->> [Unit]], a, Bit 32] >>= [[] ->> [Bit 32]]
Inferred k214 :: forall (a :: *). {Bit 32, [a] ->> [[] ->> [Unit]], Ref String} [a] ->> [[] ->> [Bit 32]]
Inferred b446 :: forall (a :: *). [Ref String, [a] ->> [[] ->> [Unit]], Bit 32] >>= [[a] ->> [[] ->> [Bit 32]]]
Inferred k215 :: forall (a :: *). {[a] ->> [[] ->> [Unit]], Ref String} [Bit 32] ->> [[a] ->> [[] ->> [Bit 32]]]
Inferred b447 :: forall (a :: *). [Ref String, [a] ->> [[] ->> [Unit]]] >>= [[Bit 32] ->> [[a] ->> [[] ->> [Bit 32]]]]
Inferred b434 :: forall (s :: *). [s] >>= [s]
Inferred b436 :: forall (s :: *). [s] >>= [s]
Inferred b442 :: forall (b :: *) (a :: *) (s :: *). [] >>= [[[b] ->> [Maybe (Pair a b)]] ->> [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]]
Inferred k211 :: forall (b :: *) (a :: *) (s :: *). {} [[b] ->> [Maybe (Pair a b)]] ->> [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]
Inferred b441 :: forall (b :: *) (a :: *) (s :: *). [[b] ->> [Maybe (Pair a b)]] >>= [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]
Inferred k210 :: forall (b :: *) (a :: *) (s :: *). {[b] ->> [Maybe (Pair a b)]} [[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]
Inferred b440 :: forall (b :: *) (a :: *) (s :: *). [[b] ->> [Maybe (Pair a b)], [s] ->> [[a] ->> [[] ->> [s]]]] >>= [[s] ->> [[b] ->> [[] ->> [s]]]]
Inferred k209 :: forall (s :: *) (a :: *) (b :: *). {[s] ->> [[a] ->> [[] ->> [s]]], [b] ->> [Maybe (Pair a b)]} [s] ->> [[b] ->> [[] ->> [s]]]
Inferred b439 :: forall (s :: *) (b :: *) (a :: *). [s, [b] ->> [Maybe (Pair a b)], [s] ->> [[a] ->> [[] ->> [s]]]] >>= [[b] ->> [[] ->> [s]]]
Inferred k208 :: forall (s :: *) (a :: *) (b :: *). {[s] ->> [[a] ->> [[] ->> [s]]], [b] ->> [Maybe (Pair a b)], s} [b] ->> [[] ->> [s]]
Inferred b438 :: forall (a :: *) (s :: *) (a0 :: *). [a, s, [a] ->> [Maybe (Pair a0 a)], [s] ->> [[a0] ->> [[] ->> [s]]]] >>= [[] ->> [s]]
Inferred k207 :: forall (s :: *) (a :: *) (b :: *). {[s] ->> [[a] ->> [[] ->> [s]]], [b] ->> [Maybe (Pair a b)], s, b} [] ->> [s]
Inferred b437 :: forall (a :: *) (s :: *) (a0 :: *). [a, s, [a] ->> [Maybe (Pair a0 a)], [s] ->> [[a0] ->> [[] ->> [s]]]] >>= [s]
Inferred b435 :: forall (a :: *) (b :: *) (s :: *). [Maybe (Pair a b), s, [b] ->> [Maybe (Pair a b)], [s] ->> [[a] ->> [[] ->> [s]]]] >>= [s]
generics for forallDoWith: [?7814, ?7815, ?7816] in type [[[?7814] ->> [Maybe (Pair ?7815 ?7814)]] ->> [[[?7816] ->> [[?7815] ->> [[] ->> [?7816]]]] ->> [[?7816] ->> [[?7814] ->> [[] ->> [?7816]]]]]]
TopLevel group inferred forallDoWith :: forall (b :: *) (a :: *) (s :: *). [[[b] ->> [Maybe (Pair a b)]] ->> [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]]
Generalizing definition for: forallDoWith with generics [?7814, ?7815, ?7816]
Inferred forallDoWith :: forall (b :: *) (a :: *) (s :: *). [[b] ->> [Maybe (Pair a b)]] ->> [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]
Inferred b443 :: forall (b :: *) (a :: *). [[b] ->> [Maybe (Pair a b)], [Bit 32] ->> [[a] ->> [[] ->> [Bit 32]]], b] >>= [Unit]
Inferred k212 :: forall (a :: *) (b :: *). {a, [Bit 32] ->> [[b] ->> [[] ->> [Bit 32]]], [a] ->> [Maybe (Pair b a)]} [] ->> [Unit]
Inferred b448 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [Unit]], Ref String, [b] ->> [Maybe (Pair a b)], b] >>= [[] ->> [Unit]]
Inferred k216 :: forall (a :: *) (b :: *). {[a] ->> [Maybe (Pair b a)], Ref String, [b] ->> [[] ->> [Unit]]} [a] ->> [[] ->> [Unit]]
Inferred b449 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [Unit]], Ref String, [b] ->> [Maybe (Pair a b)]] >>= [[b] ->> [[] ->> [Unit]]]
Inferred k217 :: forall (a :: *) (b :: *). {[a] ->> [Maybe (Pair b a)], [b] ->> [[] ->> [Unit]]} [Ref String] ->> [[a] ->> [[] ->> [Unit]]]
Inferred b450 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [Unit]], [b] ->> [Maybe (Pair a b)]] >>= [[Ref String] ->> [[b] ->> [[] ->> [Unit]]]]
Inferred k218 :: forall (a :: *) (b :: *). {[a] ->> [Maybe (Pair b a)]} [[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]
Inferred b451 :: forall (a :: *) (b :: *). [[a] ->> [Maybe (Pair b a)]] >>= [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]
Inferred k219 :: forall (a :: *) (b :: *). {} [[a] ->> [Maybe (Pair b a)]] ->> [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]
Inferred b452 :: forall (a :: *) (b :: *). [] >>= [[[a] ->> [Maybe (Pair b a)]] ->> [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]]
generics for forallDisplay: [?7923, ?7924] in type [[[?7923] ->> [Maybe (Pair ?7924 ?7923)]] ->> [[[?7924] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[?7923] ->> [[] ->> [Unit]]]]]]
TopLevel group inferred forallDisplay :: forall (a :: *) (b :: *). [[[a] ->> [Maybe (Pair b a)]] ->> [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]]
Generalizing definition for: forallDisplay with generics [?7923, ?7924]
Inferred forallDisplay :: forall (a :: *) (b :: *). [[a] ->> [Maybe (Pair b a)]] ->> [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]
Inferred b501 :: [] >>= [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
generics for nextMimgMMap_imp: [] in type [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
TopLevel group inferred nextMimgMMap_imp :: [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
Generalizing definition for: nextMimgMMap_imp with generics []
Inferred nextMimgMMap_imp :: [WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]
Inferred b482 :: [Ref MimgMMap] >>= [Unit]
Inferred k226 :: {Ref MimgMMap} [] ->> [Unit]
Inferred b483 :: [Ref MimgMMap] >>= [[] ->> [Unit]]
Inferred k227 :: {} [Ref MimgMMap] ->> [[] ->> [Unit]]
Inferred b484 :: [] >>= [[Ref MimgMMap] ->> [[] ->> [Unit]]]
generics for putMMap: [] in type [[Ref MimgMMap] ->> [[] ->> [Unit]]]
TopLevel group inferred putMMap :: [[Ref MimgMMap] ->> [[] ->> [Unit]]]
Generalizing definition for: putMMap with generics []
Inferred putMMap :: [Ref MimgMMap] ->> [[] ->> [Unit]]
Inferred b505 :: [Ref String, Ref String] >>= [Unit]
Inferred k237 :: {Ref String, Ref String} [] ->> [Unit]
Inferred b506 :: [Ref String, Ref String] >>= [[] ->> [Unit]]
Inferred k238 :: {Ref String} [Ref String] ->> [[] ->> [Unit]]
Inferred b507 :: [Ref String] >>= [[Ref String] ->> [[] ->> [Unit]]]
Inferred k239 :: {} [Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]
Inferred b508 :: [] >>= [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]]
generics for showMimgString: [] in type [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]]
TopLevel group inferred showMimgString :: [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]]
Generalizing definition for: showMimgString with generics []
Inferred showMimgString :: [Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]
Inferred b502 :: [Ref MimgBootData] >>= [Unit]
Inferred k235 :: {Ref MimgBootData} [] ->> [Unit]
Inferred b503 :: [Ref MimgBootData] >>= [[] ->> [Unit]]
Inferred k236 :: {} [Ref MimgBootData] ->> [[] ->> [Unit]]
Inferred b504 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [Unit]]]
generics for putMimgBootData: [] in type [[Ref MimgBootData] ->> [[] ->> [Unit]]]
TopLevel group inferred putMimgBootData :: [[Ref MimgBootData] ->> [[] ->> [Unit]]]
Generalizing definition for: putMimgBootData with generics []
Inferred putMimgBootData :: [Ref MimgBootData] ->> [[] ->> [Unit]]
Inferred b509 :: [] >>= [Unit]
Inferred k240 :: {} [] ->> [Unit]
Inferred b510 :: [] >>= [[] ->> [Unit]]
generics for kernel: [] in type [[] ->> [Unit]]
TopLevel group inferred kernel :: [[] ->> [Unit]]
Generalizing definition for: kernel with generics []
Inferred kernel :: [] ->> [Unit]
Running specializer ...
Requesting specialization of kernel :: [[] ->> [Unit]]
TopLevel specialize: kernel :: [[] ->> [Unit]]  ~~>  kernel :: [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b510 :: [] >>= [[] ->> [Unit]]
Block specialize: b510 :: [] >>= [[] ->> [Unit]]  ~~>  b510 :: [] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k240 :: {} [] ->> [Unit]
ClosureDefn specialize: k240 :: {} [] ->> [Unit]  ~~>  k240 :: {} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b509 :: [] >>= [Unit]
Block specialize: b509 :: [] >>= [Unit]  ~~>  b509 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of clearScreen :: [[] ->> [Unit]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of putMimgBootData :: [[Ref MimgBootData] ->> [[] ->> [Unit]]]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
External specialize: bootdata :: Ref MimgBootData  ~~>  bootdata :: Ref MimgBootData
TopLevel specialize: putMimgBootData :: [[Ref MimgBootData] ->> [[] ->> [Unit]]]  ~~>  putMimgBootData :: [[Ref MimgBootData] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b504 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [Unit]]]
Block specialize: b504 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [Unit]]]  ~~>  b504 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k236 :: {} [Ref MimgBootData] ->> [[] ->> [Unit]]
ClosureDefn specialize: k236 :: {} [Ref MimgBootData] ->> [[] ->> [Unit]]  ~~>  k236 :: {} [Ref MimgBootData] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b503 :: [Ref MimgBootData] >>= [[] ->> [Unit]]
Block specialize: b503 :: [Ref MimgBootData] >>= [[] ->> [Unit]]  ~~>  b503 :: [Ref MimgBootData] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k235 :: {Ref MimgBootData} [] ->> [Unit]
ClosureDefn specialize: k235 :: {Ref MimgBootData} [] ->> [Unit]  ~~>  k235 :: {Ref MimgBootData} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b502 :: [Ref MimgBootData] >>= [Unit]
Block specialize: b502 :: [Ref MimgBootData] >>= [Unit]  ~~>  b502 :: [Ref MimgBootData] >>= [Unit], generics=[], substitution=null
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of >>= :: [[[] ->> [MimgHeaderCursor]] ->> [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Requesting specialization of mimgHeaders :: [[Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]]
Requesting specialization of forallDisplay :: [[[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]]]
Requesting specialization of nextMimgHeader :: [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]
Requesting specialization of putHeader :: [[Ref MimgHeader] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of >>= :: [[[] ->> [MimgMMapCursor]] ->> [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Requesting specialization of mimgMMap :: [[Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]]
Requesting specialization of forallDisplay :: [[[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]]]
Requesting specialization of nextMimgMMap :: [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]
Requesting specialization of putMMap :: [[Ref MimgMMap] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of >>= :: [[[] ->> [Ref String]] ->> [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
making new version of structure type MimgBootData
new version of StructType MimgBootData is MimgBootData
new version of primitive select_headers :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgHeaderBlock))]
         old version was select_headers :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgHeaderBlock))]
new version of primitive select_mmap :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgMMapBlock))]
         old version was select_mmap :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgMMapBlock))]
new version of primitive select_cmdline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
         old version was select_cmdline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
new version of primitive select_imgline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
         old version was select_imgline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
specialized version of primitive select_cmdline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
            original version was select_cmdline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
Requesting specialization of showMimgString :: [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]]
Requesting specialization of >>= :: [[[] ->> [Ref String]] ->> [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
specialized version of primitive select_imgline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
            original version was select_imgline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
Requesting specialization of showMimgString :: [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]]
TopLevel specialize: showMimgString :: [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]]  ~~>  showMimgString :: [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b508 :: [] >>= [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]]
Block specialize: b508 :: [] >>= [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]]  ~~>  b508 :: [] >>= [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k239 :: {} [Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k239 :: {} [Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]  ~~>  k239 :: {} [Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b507 :: [Ref String] >>= [[Ref String] ->> [[] ->> [Unit]]]
Block specialize: b507 :: [Ref String] >>= [[Ref String] ->> [[] ->> [Unit]]]  ~~>  b507 :: [Ref String] >>= [[Ref String] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k238 :: {Ref String} [Ref String] ->> [[] ->> [Unit]]
ClosureDefn specialize: k238 :: {Ref String} [Ref String] ->> [[] ->> [Unit]]  ~~>  k238 :: {Ref String} [Ref String] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b506 :: [Ref String, Ref String] >>= [[] ->> [Unit]]
Block specialize: b506 :: [Ref String, Ref String] >>= [[] ->> [Unit]]  ~~>  b506 :: [Ref String, Ref String] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k237 :: {Ref String, Ref String} [] ->> [Unit]
ClosureDefn specialize: k237 :: {Ref String, Ref String} [] ->> [Unit]  ~~>  k237 :: {Ref String, Ref String} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b505 :: [Ref String, Ref String] >>= [Unit]
Block specialize: b505 :: [Ref String, Ref String] >>= [Unit]  ~~>  b505 :: [Ref String, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of putHex :: [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of refToWord :: [Ref String] ->> [Bit 32]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
External specialize: refToWord :: forall (a :: area). [Ref a] ->> [Bit 32]  ~~>  refToWord :: [Ref String] ->> [Bit 32]
Requesting specialization of refToWord_imp :: [[Bit 32] ->> [Bit 32]]
TopLevel specialize: refToWord_imp :: [[Bit 32] ->> [Bit 32]]  ~~>  refToWord_imp :: [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of b489 :: [] >>= [[Bit 32] ->> [Bit 32]]
Block specialize: b489 :: [] >>= [[Bit 32] ->> [Bit 32]]  ~~>  b489 :: [] >>= [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k230 :: {} [Bit 32] ->> [Bit 32]
ClosureDefn specialize: k230 :: {} [Bit 32] ->> [Bit 32]  ~~>  k230 :: {} [Bit 32] ->> [Bit 32], generics=[], substitution=null
Requesting specialization of b488 :: [Bit 32] >>= [Bit 32]
Block specialize: b488 :: [Bit 32] >>= [Bit 32]  ~~>  b488 :: [Bit 32] >>= [Bit 32], generics=[], substitution=null
TopLevel specialize: putHex :: [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  putHex :: [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b398 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Block specialize: b398 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  b398 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of hputHex :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of putchar :: [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel specialize: putchar :: [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  putchar :: [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b392 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Block specialize: b392 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  b392 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of wputchar :: [[Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of console :: Ref Window
MemArea specialize: console :: Ref Window  ~~>  console :: Ref Window
Requesting specialization of s2 :: [Init Window]
TopLevel specialize: s2 :: [Init Window]  ~~>  s2 :: [Init Window], generics=[], substitution=null
Requesting specialization of b425 :: [] >>= [Init Window]
Block specialize: b425 :: [] >>= [Init Window]  ~~>  b425 :: [] >>= [Init Window], generics=[], substitution=null
Requesting specialization of window :: [[Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]]
Requesting specialization of ix0 :: [Ix 25]
Requesting specialization of ix0 :: [Ix 80]
Requesting specialization of maxBound :: Ix 25
Requesting specialization of maxBound :: Ix 80
Requesting specialization of defAttr :: [Bit 8]
TopLevel specialize: defAttr :: [Bit 8]  ~~>  defAttr :: [Bit 8], generics=[], substitution=null
External specialize: maxBound :: forall (m :: nat). Ix m  ~~>  maxBound1 :: Ix 80
External specialize: maxBound :: forall (m :: nat). Ix m  ~~>  maxBound :: Ix 25
TopLevel specialize: ix0 :: forall (n :: nat). [Ix n]  ~~>  s6 :: [Ix 80], generics=[?5823], substitution=[?5823 --> 80]
Requesting specialization of b148 :: [] >>= [Ix 80]
Block specialize: b148 :: forall (n :: nat). [] >>= [Ix n]  ~~>  b148 :: [] >>= [Ix 80], generics=[?5819], substitution=[?5819 --> 80]
Requesting specialization of ix0u :: [Unit] ->> [Ix 80]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: Unit :: [Unit]  ~~>  Unit :: [Unit], generics=[], substitution=null
External specialize: ix0u :: forall (n :: nat). [Unit] ->> [Ix n]  ~~>  ix0u :: [Unit] ->> [Ix 80]
TopLevel specialize: ix0 :: forall (n :: nat). [Ix n]  ~~>  ix0 :: [Ix 25], generics=[?5823], substitution=[?5823 --> 25]
Requesting specialization of b148 :: [] >>= [Ix 25]
Block specialize: b148 :: forall (n :: nat). [] >>= [Ix n]  ~~>  b1481 :: [] >>= [Ix 25], generics=[?5819], substitution=[?5819 --> 25]
Requesting specialization of ix0u :: [Unit] ->> [Ix 25]
Requesting specialization of Unit :: [Unit]
External specialize: ix0u :: forall (n :: nat). [Unit] ->> [Ix n]  ~~>  ix0u1 :: [Unit] ->> [Ix 25]
TopLevel specialize: window :: [[Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]]  ~~>  window :: [[Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]], generics=[], substitution=null
Requesting specialization of b339 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]]
Block specialize: b339 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]]  ~~>  b339 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]], generics=[], substitution=null
Requesting specialization of k159 :: {} [Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]
ClosureDefn specialize: k159 :: {} [Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]  ~~>  k159 :: {} [Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]], generics=[], substitution=null
Requesting specialization of b338 :: [Ix 25] >>= [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]
Block specialize: b338 :: [Ix 25] >>= [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]  ~~>  b338 :: [Ix 25] >>= [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]], generics=[], substitution=null
Requesting specialization of k158 :: {Ix 25} [Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]
ClosureDefn specialize: k158 :: {Ix 25} [Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]  ~~>  k158 :: {Ix 25} [Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]], generics=[], substitution=null
Requesting specialization of b337 :: [Ix 25, Ix 80] >>= [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]
Block specialize: b337 :: [Ix 25, Ix 80] >>= [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]  ~~>  b337 :: [Ix 25, Ix 80] >>= [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]], generics=[], substitution=null
Requesting specialization of k157 :: {Ix 80, Ix 25} [Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]
ClosureDefn specialize: k157 :: {Ix 80, Ix 25} [Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]  ~~>  k157 :: {Ix 80, Ix 25} [Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]], generics=[], substitution=null
Requesting specialization of b336 :: [Ix 25, Ix 80, Ix 25] >>= [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]
Block specialize: b336 :: [Ix 25, Ix 80, Ix 25] >>= [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]  ~~>  b336 :: [Ix 25, Ix 80, Ix 25] >>= [[Ix 80] ->> [[Bit 8] ->> [Init Window]]], generics=[], substitution=null
Requesting specialization of k156 :: {Ix 25, Ix 80, Ix 25} [Ix 80] ->> [[Bit 8] ->> [Init Window]]
ClosureDefn specialize: k156 :: {Ix 25, Ix 80, Ix 25} [Ix 80] ->> [[Bit 8] ->> [Init Window]]  ~~>  k156 :: {Ix 25, Ix 80, Ix 25} [Ix 80] ->> [[Bit 8] ->> [Init Window]], generics=[], substitution=null
Requesting specialization of b335 :: [Ix 25, Ix 80, Ix 25, Ix 80] >>= [[Bit 8] ->> [Init Window]]
Block specialize: b335 :: [Ix 25, Ix 80, Ix 25, Ix 80] >>= [[Bit 8] ->> [Init Window]]  ~~>  b335 :: [Ix 25, Ix 80, Ix 25, Ix 80] >>= [[Bit 8] ->> [Init Window]], generics=[], substitution=null
Requesting specialization of k155 :: {Ix 80, Ix 25, Ix 80, Ix 25} [Bit 8] ->> [Init Window]
ClosureDefn specialize: k155 :: {Ix 80, Ix 25, Ix 80, Ix 25} [Bit 8] ->> [Init Window]  ~~>  k155 :: {Ix 80, Ix 25, Ix 80, Ix 25} [Bit 8] ->> [Init Window], generics=[], substitution=null
Requesting specialization of b334 :: [Ix 25, Ix 80, Ix 25, Ix 80, Bit 8] >>= [Init Window]
Block specialize: b334 :: [Ix 25, Ix 80, Ix 25, Ix 80, Bit 8] >>= [Init Window]  ~~>  b334 :: [Ix 25, Ix 80, Ix 25, Ix 80, Bit 8] >>= [Init Window], generics=[], substitution=null
Requesting specialization of initCoord :: [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]]
Requesting specialization of initCoord :: [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]]
making new version of structure type Coord
new version of StructType Coord is Coord
new version of primitive select_row :: [Ref Coord] >>= [Ref (Stored (Ix 25))]
         old version was select_row :: [Ref Coord] >>= [Ref (Stored (Ix 25))]
new version of primitive select_col :: [Ref Coord] >>= [Ref (Stored (Ix 80))]
         old version was select_col :: [Ref Coord] >>= [Ref (Stored (Ix 80))]
making new version of structure type Window
new version of StructType Window is Window
new version of primitive select_topleft :: [Ref Window] >>= [Ref Coord]
         old version was select_topleft :: [Ref Window] >>= [Ref Coord]
new version of primitive select_bottomright :: [Ref Window] >>= [Ref Coord]
         old version was select_bottomright :: [Ref Window] >>= [Ref Coord]
new version of primitive select_current :: [Ref Window] >>= [Ref Coord]
         old version was select_current :: [Ref Window] >>= [Ref Coord]
new version of primitive select_attr :: [Ref Window] >>= [Ref (Stored (Bit 8))]
         old version was select_attr :: [Ref Window] >>= [Ref (Stored (Bit 8))]
specialized version of primitive init_topleft :: [Init Coord] >>= [Init Window]
            original version was init_topleft :: [Init Coord] >>= [Init Window]
specialized version of primitive init_bottomright :: [Init Coord] >>= [Init Window]
            original version was init_bottomright :: [Init Coord] >>= [Init Window]
specialized version of primitive primInitSeq :: [Init Window, Init Window] >>= [Init Window]
            original version was primInitSeq :: forall (a :: area). [Init a, Init a] >>= [Init a]
specialized version of primitive init_current :: [Init Coord] >>= [Init Window]
            original version was init_current :: [Init Coord] >>= [Init Window]
Requesting specialization of initStored :: [Bit 8] ->> [Init (Stored (Bit 8))]
specialized version of primitive init_attr :: [Init (Stored (Bit 8))] >>= [Init Window]
            original version was init_attr :: [Init (Stored (Bit 8))] >>= [Init Window]
External specialize: initStored :: forall (t :: *). [t] ->> [Init (Stored t)]  ~~>  initStored :: [Bit 8] ->> [Init (Stored (Bit 8))]
TopLevel specialize: initCoord :: [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]]  ~~>  initCoord :: [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]], generics=[], substitution=null
Requesting specialization of b333 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]]
Block specialize: b333 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]]  ~~>  b333 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]], generics=[], substitution=null
Requesting specialization of k154 :: {} [Ix 25] ->> [[Ix 80] ->> [Init Coord]]
ClosureDefn specialize: k154 :: {} [Ix 25] ->> [[Ix 80] ->> [Init Coord]]  ~~>  k154 :: {} [Ix 25] ->> [[Ix 80] ->> [Init Coord]], generics=[], substitution=null
Requesting specialization of b332 :: [Ix 25] >>= [[Ix 80] ->> [Init Coord]]
Block specialize: b332 :: [Ix 25] >>= [[Ix 80] ->> [Init Coord]]  ~~>  b332 :: [Ix 25] >>= [[Ix 80] ->> [Init Coord]], generics=[], substitution=null
Requesting specialization of k153 :: {Ix 25} [Ix 80] ->> [Init Coord]
ClosureDefn specialize: k153 :: {Ix 25} [Ix 80] ->> [Init Coord]  ~~>  k153 :: {Ix 25} [Ix 80] ->> [Init Coord], generics=[], substitution=null
Requesting specialization of b331 :: [Ix 25, Ix 80] >>= [Init Coord]
Block specialize: b331 :: [Ix 25, Ix 80] >>= [Init Coord]  ~~>  b331 :: [Ix 25, Ix 80] >>= [Init Coord], generics=[], substitution=null
Requesting specialization of initStored :: [Ix 25] ->> [Init (Stored (Ix 25))]
specialized version of primitive init_row :: [Init (Stored (Ix 25))] >>= [Init Coord]
            original version was init_row :: [Init (Stored (Ix 25))] >>= [Init Coord]
Requesting specialization of initStored :: [Ix 80] ->> [Init (Stored (Ix 80))]
specialized version of primitive init_col :: [Init (Stored (Ix 80))] >>= [Init Coord]
            original version was init_col :: [Init (Stored (Ix 80))] >>= [Init Coord]
specialized version of primitive primInitSeq :: [Init Coord, Init Coord] >>= [Init Coord]
            original version was primInitSeq :: forall (a :: area). [Init a, Init a] >>= [Init a]
External specialize: initStored :: forall (t :: *). [t] ->> [Init (Stored t)]  ~~>  initStored2 :: [Ix 80] ->> [Init (Stored (Ix 80))]
External specialize: initStored :: forall (t :: *). [t] ->> [Init (Stored t)]  ~~>  initStored1 :: [Ix 25] ->> [Init (Stored (Ix 25))]
TopLevel specialize: wputchar :: [[Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  wputchar :: [[Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b366 :: [] >>= [[Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Block specialize: b366 :: [] >>= [[Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  b366 :: [] >>= [[Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k171 :: {} [Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k171 :: {} [Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  k171 :: {} [Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b365 :: [Ref Window] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Block specialize: b365 :: [Ref Window] >>= [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  b365 :: [Ref Window] >>= [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k170 :: {Ref Window} [Bit 32] ->> [[] ->> [Unit]]
ClosureDefn specialize: k170 :: {Ref Window} [Bit 32] ->> [[] ->> [Unit]]  ~~>  k170 :: {Ref Window} [Bit 32] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b364 :: [Ref Window, Bit 32] >>= [[] ->> [Unit]]
Block specialize: b364 :: [Ref Window, Bit 32] >>= [[] ->> [Unit]]  ~~>  b364 :: [Ref Window, Bit 32] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k169 :: {Bit 32, Ref Window} [] ->> [Unit]
ClosureDefn specialize: k169 :: {Bit 32, Ref Window} [] ->> [Unit]  ~~>  k169 :: {Bit 32, Ref Window} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b363 :: [Ref Window, Bit 32] >>= [Unit]
Block specialize: b363 :: [Ref Window, Bit 32] >>= [Unit]  ~~>  b363 :: [Ref Window, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of sputchar :: [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of get :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
specialized version of primitive select_current :: [Ref Window] >>= [Ref Coord]
            original version was select_current :: [Ref Window] >>= [Ref Coord]
specialized version of primitive select_row :: [Ref Coord] >>= [Ref (Stored (Ix 25))]
            original version was select_row :: [Ref Coord] >>= [Ref (Stored (Ix 25))]
Requesting specialization of == :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Requesting specialization of b362 :: [Ix 25, Ref Window, Bit 32] >>= [Unit]
Requesting specialization of b361 :: [Ix 25, Ref Window, Bit 32] >>= [Unit]
Block specialize: b361 :: [Ix 25, Ref Window, Bit 32] >>= [Unit]  ~~>  b361 :: [Ix 25, Ref Window, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of == :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Requesting specialization of b360 :: [Bool, Bit 32, Ref Window, Ix 25] >>= [Unit]
Block specialize: b360 :: [Bool, Bit 32, Ref Window, Ix 25] >>= [Unit]  ~~>  b360 :: [Bool, Bit 32, Ref Window, Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of b359 :: [Ref Window, Ix 25] >>= [Unit]
Requesting specialization of b358 :: [Bit 32, Ref Window, Ix 25] >>= [Unit]
Block specialize: b358 :: [Bit 32, Ref Window, Ix 25] >>= [Unit]  ~~>  b358 :: [Bit 32, Ref Window, Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of get :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
specialized version of primitive select_col :: [Ref Coord] >>= [Ref (Stored (Ix 80))]
            original version was select_col :: [Ref Coord] >>= [Ref (Stored (Ix 80))]
Requesting specialization of get :: [Ref (Stored (Bit 8))] ->> [[] ->> [Bit 8]]
specialized version of primitive select_attr :: [Ref Window] >>= [Ref (Stored (Bit 8))]
            original version was select_attr :: [Ref Window] >>= [Ref (Stored (Bit 8))]
Requesting specialization of set :: [Ref (Stored Char)] ->> [[Char] ->> [[] ->> [Unit]]]
Requesting specialization of pos :: [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]
Requesting specialization of char :: [[Bit 32] ->> [Char]]
new version of BitdataType Char is Char
    orig: Char :: {Char.Char} Char
    new:  Char :: {Char.Char} Char
new version of primitive update_attr :: [Char.Char, Bit 8] >>= [Char.Char]
         old version was update_attr :: [Char.Char, Bit 8] >>= [Char.Char]
new version of primitive update_char :: [Char.Char, Bit 8] >>= [Char.Char]
         old version was update_char :: [Char.Char, Bit 8] >>= [Char.Char]
specialized version of primitive update_attr :: [Char.Char, Bit 8] >>= [Char.Char]
            original version was update_attr :: [Char.Char, Bit 8] >>= [Char.Char]
Requesting specialization of get :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
specialized version of primitive select_bottomright :: [Ref Window] >>= [Ref Coord]
            original version was select_bottomright :: [Ref Window] >>= [Ref Coord]
Requesting specialization of ltInc :: [[Ix 80] ->> [[Ix 80] ->> [Maybe (Ix 80)]]]
Maybe0 is a specialized DataType for Maybe (Ix 80)
Requesting specialization of b357 :: [Maybe (Ix 80), Ref Window] >>= [Unit]
Requesting specialization of b356 :: [Ref Window, Ix 25] >>= [Unit]
Block specialize: b356 :: [Ref Window, Ix 25] >>= [Unit]  ~~>  b356 :: [Ref Window, Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of newline :: [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Requesting specialization of b355 :: [Unit] >>= [Unit]
Block specialize: b355 :: [Unit] >>= [Unit]  ~~>  b355 :: [Unit] >>= [Unit], generics=[], substitution=null
Requesting specialization of b354 :: [Unit] >>= [Unit]
Block specialize: b354 :: [Unit] >>= [Unit]  ~~>  b354 :: [Unit] >>= [Unit], generics=[], substitution=null
TopLevel specialize: newline :: [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]]  ~~>  newline :: [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b380 :: [] >>= [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Block specialize: b380 :: [] >>= [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]]  ~~>  b380 :: [] >>= [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k180 :: {} [Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k180 :: {} [Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]  ~~>  k180 :: {} [Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b379 :: [Ref Window] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Block specialize: b379 :: [Ref Window] >>= [[Ix 25] ->> [[] ->> [Unit]]]  ~~>  b379 :: [Ref Window] >>= [[Ix 25] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k179 :: {Ref Window} [Ix 25] ->> [[] ->> [Unit]]
ClosureDefn specialize: k179 :: {Ref Window} [Ix 25] ->> [[] ->> [Unit]]  ~~>  k179 :: {Ref Window} [Ix 25] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b378 :: [Ix 25, Ref Window] >>= [[] ->> [Unit]]
Block specialize: b378 :: [Ix 25, Ref Window] >>= [[] ->> [Unit]]  ~~>  b378 :: [Ix 25, Ref Window] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k178 :: {Ref Window, Ix 25} [] ->> [Unit]
ClosureDefn specialize: k178 :: {Ref Window, Ix 25} [] ->> [Unit]  ~~>  k178 :: {Ref Window, Ix 25} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b377 :: [Ix 25, Ref Window] >>= [Unit]
Block specialize: b377 :: [Ix 25, Ref Window] >>= [Unit]  ~~>  b377 :: [Ix 25, Ref Window] >>= [Unit], generics=[], substitution=null
Requesting specialization of >-> :: [[Ref (Stored (Ix 80))] ->> [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]]]
specialized version of primitive select_topleft :: [Ref Window] >>= [Ref Coord]
            original version was select_topleft :: [Ref Window] >>= [Ref Coord]
Requesting specialization of get :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
Requesting specialization of ltInc :: [[Ix 25] ->> [[Ix 25] ->> [Maybe (Ix 25)]]]
Maybe1 is a specialized DataType for Maybe (Ix 25)
Requesting specialization of b376 :: [Maybe (Ix 25), Ref Window] >>= [Unit]
Requesting specialization of b375 :: [Ref Window] >>= [Unit]
Block specialize: b375 :: [Ref Window] >>= [Unit]  ~~>  b375 :: [Ref Window] >>= [Unit], generics=[], substitution=null
Requesting specialization of scroll :: [[Ref Window] ->> [[] ->> [Unit]]]
Requesting specialization of b374 :: [Unit] >>= [Unit]
Block specialize: b374 :: [Unit] >>= [Unit]  ~~>  b374 :: [Unit] >>= [Unit], generics=[], substitution=null
TopLevel specialize: scroll :: [[Ref Window] ->> [[] ->> [Unit]]]  ~~>  scroll :: [[Ref Window] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b390 :: [] >>= [[Ref Window] ->> [[] ->> [Unit]]]
Block specialize: b390 :: [] >>= [[Ref Window] ->> [[] ->> [Unit]]]  ~~>  b390 :: [] >>= [[Ref Window] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k186 :: {} [Ref Window] ->> [[] ->> [Unit]]
ClosureDefn specialize: k186 :: {} [Ref Window] ->> [[] ->> [Unit]]  ~~>  k186 :: {} [Ref Window] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b389 :: [Ref Window] >>= [[] ->> [Unit]]
Block specialize: b389 :: [Ref Window] >>= [[] ->> [Unit]]  ~~>  b389 :: [Ref Window] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k185 :: {Ref Window} [] ->> [Unit]
ClosureDefn specialize: k185 :: {Ref Window} [] ->> [Unit]  ~~>  k185 :: {Ref Window} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b388 :: [Ref Window] >>= [Unit]
Block specialize: b388 :: [Ref Window] >>= [Unit]  ~~>  b388 :: [Ref Window] >>= [Unit], generics=[], substitution=null
Requesting specialization of get :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
Requesting specialization of get :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
Requesting specialization of get :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
Requesting specialization of get :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
Requesting specialization of get :: [Ref (Stored (Bit 8))] ->> [[] ->> [Bit 8]]
Requesting specialization of b387 :: [Ix 80, Ix 80] >>= [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Requesting specialization of for :: [[Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
Requesting specialization of b382 :: [Ix 25, Bit 8] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Requesting specialization of loop7 :: [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]]
TopLevel specialize: loop7 :: [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]]  ~~>  loop7 :: [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]], generics=[], substitution=null
Requesting specialization of b311 :: [] >>= [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]]
Block specialize: b311 :: [] >>= [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]]  ~~>  b311 :: [] >>= [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]], generics=[], substitution=null
Requesting specialization of k144 :: {} [Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
ClosureDefn specialize: k144 :: {} [Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]  ~~>  k144 :: {} [Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]], generics=[], substitution=null
Requesting specialization of b310 :: [Ix 25] >>= [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
Block specialize: b310 :: [Ix 25] >>= [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]  ~~>  b310 :: [Ix 25] >>= [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]], generics=[], substitution=null
Requesting specialization of k143 :: {Ix 25} [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
ClosureDefn specialize: k143 :: {Ix 25} [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]  ~~>  k143 :: {Ix 25} [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b309 :: [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25] >>= [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Block specialize: b309 :: [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25] >>= [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]  ~~>  b309 :: [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25] >>= [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k142 :: {Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]} [[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k142 :: {Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]} [[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]  ~~>  k142 :: {Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]} [[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b308 :: [[] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Block specialize: b308 :: [[] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]]  ~~>  b308 :: [[] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b307 :: [Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Block specialize: b307 :: [Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[Ix 25] ->> [[] ->> [Unit]]]  ~~>  b307 :: [Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[Ix 25] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k141 :: {[] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25} [Ix 25] ->> [[] ->> [Unit]]
ClosureDefn specialize: k141 :: {[] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25} [Ix 25] ->> [[] ->> [Unit]]  ~~>  k141 :: {[] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25} [Ix 25] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b306 :: [Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[] ->> [Unit]]
Block specialize: b306 :: [Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[] ->> [Unit]]  ~~>  b306 :: [Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of ltInc :: [[Ix 25] ->> [[Ix 25] ->> [Maybe (Ix 25)]]]
Requesting specialization of b305 :: [Maybe (Ix 25), Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[] ->> [Unit]]
Requesting specialization of b303 :: [[] ->> [Unit]] >>= [[] ->> [Unit]]
Block specialize: b303 :: [[] ->> [Unit]] >>= [[] ->> [Unit]]  ~~>  b303 :: [[] ->> [Unit]] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b302 :: [[] ->> [Unit]] >>= [[] ->> [Unit]]
Block specialize: b302 :: [[] ->> [Unit]] >>= [[] ->> [Unit]]  ~~>  b302 :: [[] ->> [Unit]] >>= [[] ->> [Unit]], generics=[], substitution=null
Block specialize: b305 :: [Maybe (Ix 25), Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[] ->> [Unit]]  ~~>  b305 :: [Maybe (Ix 25), Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k140 :: {Ix 25, [] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25, Ix 25} [] ->> [Unit]
Requesting specialization of b302 :: [[] ->> [Unit]] >>= [[] ->> [Unit]]
ClosureDefn specialize: k140 :: {Ix 25, [] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25, Ix 25} [] ->> [Unit]  ~~>  k140 :: {Ix 25, [] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25, Ix 25} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b304 :: [Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit], Ix 25] >>= [Unit]
Block specialize: b304 :: [Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit], Ix 25] >>= [Unit]  ~~>  b304 :: [Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit], Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of loop7 :: [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]]
Block specialize: b382 :: [Ix 25, Bit 8] >>= [[Ix 80] ->> [[] ->> [Unit]]]  ~~>  b382 :: [Ix 25, Bit 8] >>= [[Ix 80] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k181 :: {Bit 8, Ix 25} [Ix 80] ->> [[] ->> [Unit]]
ClosureDefn specialize: k181 :: {Bit 8, Ix 25} [Ix 80] ->> [[] ->> [Unit]]  ~~>  k181 :: {Bit 8, Ix 25} [Ix 80] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b381 :: [Ix 25, Ix 80, Bit 8] >>= [[] ->> [Unit]]
Block specialize: b381 :: [Ix 25, Ix 80, Bit 8] >>= [[] ->> [Unit]]  ~~>  b381 :: [Ix 25, Ix 80, Bit 8] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of set :: [Ref (Stored Char)] ->> [[Char] ->> [[] ->> [Unit]]]
Requesting specialization of pos :: [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]
Requesting specialization of blank :: [Char]
TopLevel specialize: blank :: [Char]  ~~>  blank :: [Char], generics=[], substitution=null
Requesting specialization of b314 :: [] >>= [Char]
Block specialize: b314 :: [] >>= [Char]  ~~>  b314 :: [] >>= [Char], generics=[], substitution=null
Requesting specialization of char :: [[Bit 32] ->> [Char]]
TopLevel specialize: for :: forall (n :: nat). [[Ix n] ->> [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]  ~~>  for :: [[Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]], generics=[?5556], substitution=[?5556 --> 80]
Requesting specialization of b343 :: [] >>= [[Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
Block specialize: b343 :: forall (n :: nat). [] >>= [[Ix n] ->> [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]  ~~>  b343 :: [] >>= [[Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]], generics=[?5553], substitution=[?5553 --> 80]
Requesting specialization of k162 :: {} [Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
ClosureDefn specialize: k162 :: forall (n :: nat). {} [Ix n] ->> [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]  ~~>  k162 :: {} [Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5550], substitution=[?5550 --> 80]
Requesting specialization of b342 :: [Ix 80] >>= [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Block specialize: b342 :: forall (n :: nat). [Ix n] >>= [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]  ~~>  b342 :: [Ix 80] >>= [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5546], substitution=[?5546 --> 80]
Requesting specialization of k161 :: {Ix 80} [Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k161 :: forall (n :: nat). {Ix n} [Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]  ~~>  k161 :: {Ix 80} [Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5543], substitution=[?5543 --> 80]
Requesting specialization of b341 :: [Ix 80, Ix 80] >>= [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Block specialize: b341 :: forall (n :: nat). [Ix n, Ix n] >>= [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]  ~~>  b341 :: [Ix 80, Ix 80] >>= [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5537], substitution=[?5537 --> 80]
Requesting specialization of k160 :: {Ix 80, Ix 80} [[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
ClosureDefn specialize: k160 :: forall (n :: nat). {Ix n, Ix n} [[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]  ~~>  k160 :: {Ix 80, Ix 80} [[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]], generics=[?5532], substitution=[?5532 --> 80]
Requesting specialization of b340 :: [Ix 80, [Ix 80] ->> [[] ->> [Unit]], Ix 80] >>= [[] ->> [Unit]]
Block specialize: b340 :: forall (n :: nat). [Ix n, [Ix n] ->> [[] ->> [Unit]], Ix n] >>= [[] ->> [Unit]]  ~~>  b340 :: [Ix 80, [Ix 80] ->> [[] ->> [Unit]], Ix 80] >>= [[] ->> [Unit]], generics=[?5519], substitution=[?5519 --> 80]
Requesting specialization of loop6 :: [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]]
TopLevel specialize: loop6 :: forall (n :: nat). [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]]  ~~>  loop6 :: [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]], generics=[?5514], substitution=[?5514 --> 80]
Requesting specialization of b301 :: [] >>= [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]]
Block specialize: b301 :: forall (n :: nat). [] >>= [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]]  ~~>  b301 :: [] >>= [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]], generics=[?5469], substitution=[?5469 --> 80]
Requesting specialization of k139 :: {} [Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]
ClosureDefn specialize: k139 :: forall (n :: nat). {} [Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]  ~~>  k139 :: {} [Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]], generics=[?5433], substitution=[?5433 --> 80]
Requesting specialization of b300 :: [Ix 80] >>= [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]
Block specialize: b300 :: forall (n :: nat). [Ix n] >>= [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]  ~~>  b300 :: [Ix 80] >>= [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]], generics=[?5472], substitution=[?5472 --> 80]
Requesting specialization of k138 :: {Ix 80} [[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k138 :: forall (n :: nat). {Ix n} [[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]  ~~>  k138 :: {Ix 80} [[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]], generics=[?5439], substitution=[?5439 --> 80]
Requesting specialization of b299 :: [[Ix 80] ->> [[] ->> [Unit]], Ix 80] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Block specialize: b299 :: forall (n :: nat). [[Ix n] ->> [[] ->> [Unit]], Ix n] >>= [[Ix n] ->> [[] ->> [Unit]]]  ~~>  b299 :: [[Ix 80] ->> [[] ->> [Unit]], Ix 80] >>= [[Ix 80] ->> [[] ->> [Unit]]], generics=[?5475], substitution=[?5475 --> 80]
Requesting specialization of b298 :: [Ix 80, [Ix 80] ->> [[] ->> [Unit]]] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Block specialize: b298 :: forall (n :: nat). [Ix n, [Ix n] ->> [[] ->> [Unit]]] >>= [[Ix n] ->> [[] ->> [Unit]]]  ~~>  b298 :: [Ix 80, [Ix 80] ->> [[] ->> [Unit]]] >>= [[Ix 80] ->> [[] ->> [Unit]]], generics=[?5445], substitution=[?5445 --> 80]
Requesting specialization of k137 :: {[Ix 80] ->> [[] ->> [Unit]], Ix 80} [Ix 80] ->> [[] ->> [Unit]]
ClosureDefn specialize: k137 :: forall (n :: nat). {[Ix n] ->> [[] ->> [Unit]], Ix n} [Ix n] ->> [[] ->> [Unit]]  ~~>  k137 :: {[Ix 80] ->> [[] ->> [Unit]], Ix 80} [Ix 80] ->> [[] ->> [Unit]], generics=[?5450], substitution=[?5450 --> 80]
Requesting specialization of b297 :: [Ix 80, Ix 80, [Ix 80] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Block specialize: b297 :: forall (n :: nat). [Ix n, Ix n, [Ix n] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]  ~~>  b297 :: [Ix 80, Ix 80, [Ix 80] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]], generics=[?5454], substitution=[?5454 --> 80]
Requesting specialization of k136 :: {[Ix 80] ->> [[] ->> [Unit]], Ix 80, Ix 80} [] ->> [Unit]
ClosureDefn specialize: k136 :: forall (n :: nat). {[Ix n] ->> [[] ->> [Unit]], Ix n, Ix n} [] ->> [Unit]  ~~>  k136 :: {[Ix 80] ->> [[] ->> [Unit]], Ix 80, Ix 80} [] ->> [Unit], generics=[?5459], substitution=[?5459 --> 80]
Requesting specialization of b296 :: [Ix 80, Ix 80, [Ix 80] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b296 :: forall (n :: nat). [Ix n, Ix n, [Ix n] ->> [[] ->> [Unit]]] >>= [Unit]  ~~>  b296 :: [Ix 80, Ix 80, [Ix 80] ->> [[] ->> [Unit]]] >>= [Unit], generics=[?5498], substitution=[?5498 --> 80]
Requesting specialization of ltInc :: [[Ix 80] ->> [[Ix 80] ->> [Maybe (Ix 80)]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b294 :: [Maybe (Ix 80), Ix 80, [Ix 80] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b294 :: forall (n :: nat). [Maybe (Ix n), Ix n, [Ix n] ->> [[] ->> [Unit]]] >>= [Unit]  ~~>  b294 :: [Maybe (Ix 80), Ix 80, [Ix 80] ->> [[] ->> [Unit]]] >>= [Unit], generics=[?5501], substitution=[?5501 --> 80]
Requesting specialization of loop6 :: [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]]
Requesting specialization of b293 :: [Unit] >>= [Unit]
Block specialize: b293 :: [Unit] >>= [Unit]  ~~>  b293 :: [Unit] >>= [Unit], generics=[], substitution=null
Block specialize: b295 :: [] >>= [Unit]  ~~>  b295 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of return :: [[Unit] ->> [[] ->> [Unit]]]
Requesting specialization of Unit :: [Unit]
Requesting specialization of b293 :: [Unit] >>= [Unit]
TopLevel specialize: return :: forall (a :: *). [[a] ->> [[] ->> [a]]]  ~~>  return :: [[Unit] ->> [[] ->> [Unit]]], generics=[?5420], substitution=[?5420 --> Unit]
Requesting specialization of primRet :: [[Unit] ->> [[] ->> [Unit]]]
TopLevel specialize: primRet :: forall (a :: *). [[a] ->> [[] ->> [a]]]  ~~>  primRet :: [[Unit] ->> [[] ->> [Unit]]], generics=[?5418], substitution=[?5418 --> Unit]
Requesting specialization of b10 :: [] >>= [[Unit] ->> [[] ->> [Unit]]]
Block specialize: b10 :: forall (a :: *). [] >>= [[a] ->> [[] ->> [a]]]  ~~>  b10 :: [] >>= [[Unit] ->> [[] ->> [Unit]]], generics=[?5415], substitution=[?5415 --> Unit]
Requesting specialization of k8 :: {} [Unit] ->> [[] ->> [Unit]]
ClosureDefn specialize: k8 :: forall (a :: *). {} [a] ->> [[] ->> [a]]  ~~>  k8 :: {} [Unit] ->> [[] ->> [Unit]], generics=[?5414], substitution=[?5414 --> Unit]
Requesting specialization of b9 :: [Unit] >>= [[] ->> [Unit]]
Block specialize: b9 :: forall (a :: *). [a] >>= [[] ->> [a]]  ~~>  b9 :: [Unit] >>= [[] ->> [Unit]], generics=[?5408], substitution=[?5408 --> Unit]
Requesting specialization of ret1 :: {Unit} [] ->> [Unit]
ClosureDefn specialize: ret1 :: forall (a :: *). {a} [] ->> [a]  ~~>  ret1 :: {Unit} [] ->> [Unit], generics=[?5404], substitution=[?5404 --> Unit]
Block specialize: b387 :: [Ix 80, Ix 80] >>= [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]]  ~~>  b387 :: [Ix 80, Ix 80] >>= [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k184 :: {Ix 80, Ix 80} [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k184 :: {Ix 80, Ix 80} [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]  ~~>  k184 :: {Ix 80, Ix 80} [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b386 :: [Ix 80, Ix 80, Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Block specialize: b386 :: [Ix 80, Ix 80, Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]]  ~~>  b386 :: [Ix 80, Ix 80, Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k183 :: {Ix 25, Ix 80, Ix 80} [Ix 25] ->> [[] ->> [Unit]]
ClosureDefn specialize: k183 :: {Ix 25, Ix 80, Ix 80} [Ix 25] ->> [[] ->> [Unit]]  ~~>  k183 :: {Ix 25, Ix 80, Ix 80} [Ix 25] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b385 :: [Ix 80, Ix 80, Ix 25, Ix 25] >>= [[] ->> [Unit]]
Block specialize: b385 :: [Ix 80, Ix 80, Ix 25, Ix 25] >>= [[] ->> [Unit]]  ~~>  b385 :: [Ix 80, Ix 80, Ix 25, Ix 25] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of for :: [[Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
Requesting specialization of b384 :: [Ix 25, Ix 25] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Block specialize: b384 :: [Ix 25, Ix 25] >>= [[Ix 80] ->> [[] ->> [Unit]]]  ~~>  b384 :: [Ix 25, Ix 25] >>= [[Ix 80] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k182 :: {Ix 25, Ix 25} [Ix 80] ->> [[] ->> [Unit]]
ClosureDefn specialize: k182 :: {Ix 25, Ix 25} [Ix 80] ->> [[] ->> [Unit]]  ~~>  k182 :: {Ix 25, Ix 25} [Ix 80] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b383 :: [Ix 25, Ix 25, Ix 80] >>= [[] ->> [Unit]]
Block specialize: b383 :: [Ix 25, Ix 25, Ix 80] >>= [[] ->> [Unit]]  ~~>  b383 :: [Ix 25, Ix 25, Ix 80] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of >-> :: [[Ref (Stored Char)] ->> [[Ref (Stored Char)] ->> [[] ->> [Unit]]]]
Requesting specialization of pos :: [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]
Requesting specialization of pos :: [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]
TopLevel specialize: >-> :: forall (a :: *). [[Ref (Stored a)] ->> [[Ref (Stored a)] ->> [[] ->> [Unit]]]]  ~~>  s8 :: [[Ref (Stored Char)] ->> [[Ref (Stored Char)] ->> [[] ->> [Unit]]]], generics=[?6414], substitution=[?6414 --> Char]
Requesting specialization of b88 :: [] >>= [[Ref (Stored Char)] ->> [[Ref (Stored Char)] ->> [[] ->> [Unit]]]]
Block specialize: b88 :: forall (a :: *). [] >>= [[Ref (Stored a)] ->> [[Ref (Stored a)] ->> [[] ->> [Unit]]]]  ~~>  b88 :: [] >>= [[Ref (Stored Char)] ->> [[Ref (Stored Char)] ->> [[] ->> [Unit]]]], generics=[?6411], substitution=[?6411 --> Char]
Requesting specialization of k56 :: {} [Ref (Stored Char)] ->> [[Ref (Stored Char)] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k56 :: forall (a :: *). {} [Ref (Stored a)] ->> [[Ref (Stored a)] ->> [[] ->> [Unit]]]  ~~>  k56 :: {} [Ref (Stored Char)] ->> [[Ref (Stored Char)] ->> [[] ->> [Unit]]], generics=[?6410], substitution=[?6410 --> Char]
Requesting specialization of b87 :: [Ref (Stored Char)] >>= [[Ref (Stored Char)] ->> [[] ->> [Unit]]]
Block specialize: b87 :: forall (a :: *). [Ref (Stored a)] >>= [[Ref (Stored a)] ->> [[] ->> [Unit]]]  ~~>  b87 :: [Ref (Stored Char)] >>= [[Ref (Stored Char)] ->> [[] ->> [Unit]]], generics=[?6404], substitution=[?6404 --> Char]
Requesting specialization of k55 :: {Ref (Stored Char)} [Ref (Stored Char)] ->> [[] ->> [Unit]]
ClosureDefn specialize: k55 :: forall (a :: *). {Ref (Stored a)} [Ref (Stored a)] ->> [[] ->> [Unit]]  ~~>  k55 :: {Ref (Stored Char)} [Ref (Stored Char)] ->> [[] ->> [Unit]], generics=[?6401], substitution=[?6401 --> Char]
Requesting specialization of b86 :: [Ref (Stored Char), Ref (Stored Char)] >>= [[] ->> [Unit]]
Block specialize: b86 :: forall (a :: *). [Ref (Stored a), Ref (Stored a)] >>= [[] ->> [Unit]]  ~~>  b86 :: [Ref (Stored Char), Ref (Stored Char)] >>= [[] ->> [Unit]], generics=[?6382], substitution=[?6382 --> Char]
Requesting specialization of >>= :: [[[] ->> [Char]] ->> [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Requesting specialization of get :: [Ref (Stored Char)] ->> [[] ->> [Char]]
Requesting specialization of set :: [Ref (Stored Char)] ->> [[Char] ->> [[] ->> [Unit]]]
External specialize: get :: forall (t :: *). [Ref (Stored t)] ->> [[] ->> [t]]  ~~>  get4 :: [Ref (Stored Char)] ->> [[] ->> [Char]]
TopLevel specialize: >>= :: forall (a :: *) (b :: *). [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  s9 :: [[[] ->> [Char]] ->> [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5895, ?5896], substitution=[?5895 --> Char, ?5896 --> Unit]
Requesting specialization of b85 :: [] >>= [[[] ->> [Char]] ->> [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Block specialize: b85 :: forall (a :: *) (b :: *). [] >>= [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  b85 :: [] >>= [[[] ->> [Char]] ->> [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5890, ?5891], substitution=[?5890 --> Char, ?5891 --> Unit]
Requesting specialization of k54 :: {} [[] ->> [Char]] ->> [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k54 :: forall (a :: *) (b :: *). {} [[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  k54 :: {} [[] ->> [Char]] ->> [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5888, ?5887], substitution=[?5888 --> Char, ?5887 --> Unit]
Requesting specialization of b84 :: [[] ->> [Char]] >>= [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Block specialize: b84 :: forall (a :: *) (b :: *). [[] ->> [a]] >>= [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  b84 :: [[] ->> [Char]] >>= [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5879, ?5880], substitution=[?5879 --> Char, ?5880 --> Unit]
Requesting specialization of k53 :: {[] ->> [Char]} [[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
ClosureDefn specialize: k53 :: forall (a :: *) (b :: *). {[] ->> [a]} [[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]  ~~>  k53 :: {[] ->> [Char]} [[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]], generics=[?5874, ?5877], substitution=[?5874 --> Char, ?5877 --> Unit]
Requesting specialization of b83 :: [[] ->> [Char], [Char] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Block specialize: b83 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [[] ->> [b]]  ~~>  b83 :: [[] ->> [Char], [Char] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]], generics=[?5868, ?5867], substitution=[?5868 --> Char, ?5867 --> Unit]
Requesting specialization of k52 :: {[Char] ->> [[] ->> [Unit]], [] ->> [Char]} [] ->> [Unit]
ClosureDefn specialize: k52 :: forall (a :: *) (b :: *). {[a] ->> [[] ->> [b]], [] ->> [a]} [] ->> [b]  ~~>  k52 :: {[Char] ->> [[] ->> [Unit]], [] ->> [Char]} [] ->> [Unit], generics=[?5860, ?5863], substitution=[?5860 --> Char, ?5863 --> Unit]
Requesting specialization of b82 :: [[] ->> [Char], [Char] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b82 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [b]  ~~>  b82 :: [[] ->> [Char], [Char] ->> [[] ->> [Unit]]] >>= [Unit], generics=[?5847, ?5848], substitution=[?5847 --> Char, ?5848 --> Unit]
Block specialize: b376 :: [Maybe (Ix 25), Ref Window] >>= [Unit]  ~~>  b376 :: [Maybe (Ix 25), Ref Window] >>= [Unit], generics=[], substitution=null
Requesting specialization of set :: [Ref (Stored (Ix 25))] ->> [[Ix 25] ->> [[] ->> [Unit]]]
Requesting specialization of b374 :: [Unit] >>= [Unit]
External specialize: set :: forall (t :: *). [Ref (Stored t)] ->> [[t] ->> [[] ->> [Unit]]]  ~~>  set1 :: [Ref (Stored (Ix 25))] ->> [[Ix 25] ->> [[] ->> [Unit]]]
TopLevel specialize: ltInc :: forall (m :: nat). [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]  ~~>  s7 :: [[Ix 25] ->> [[Ix 25] ->> [Maybe (Ix 25)]]], generics=[?5403], substitution=[?5403 --> 25]
Requesting specialization of b160 :: [] >>= [[Ix 25] ->> [[Ix 25] ->> [Maybe (Ix 25)]]]
Block specialize: b160 :: forall (m :: nat). [] >>= [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]  ~~>  b160 :: [] >>= [[Ix 25] ->> [[Ix 25] ->> [Maybe (Ix 25)]]], generics=[?5398], substitution=[?5398 --> 25]
Requesting specialization of ltIncBy :: [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe (Ix 25)]]]]
Requesting specialization of ix1 :: [Ix 25]
TopLevel specialize: ix1 :: forall (n :: nat). [Ix n]  ~~>  ix1 :: [Ix 25], generics=[?5395], substitution=[?5395 --> 25]
Requesting specialization of b149 :: [] >>= [Ix 25]
Block specialize: b149 :: forall (n :: nat). [] >>= [Ix n]  ~~>  b149 :: [] >>= [Ix 25], generics=[?5391], substitution=[?5391 --> 25]
Requesting specialization of ix1u :: [Unit] ->> [Ix 25]
Requesting specialization of Unit :: [Unit]
External specialize: ix1u :: forall (n :: nat). [Unit] ->> [Ix n]  ~~>  ix1u :: [Unit] ->> [Ix 25]
TopLevel specialize: ltIncBy :: forall (m :: nat). [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]  ~~>  ltIncBy :: [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe (Ix 25)]]]], generics=[?5390], substitution=[?5390 --> 25]
Requesting specialization of b158 :: [] >>= [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe (Ix 25)]]]]
Block specialize: b158 :: forall (m :: nat). [] >>= [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]  ~~>  b158 :: [] >>= [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe (Ix 25)]]]], generics=[?5381], substitution=[?5381 --> 25]
Requesting specialization of genLtInc :: [Maybe (Ix 25)] ->> [[[Ix 25] ->> [Maybe (Ix 25)]] ->> [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe (Ix 25)]]]]]
Requesting specialization of Nothing :: [Maybe (Ix 25)]
Requesting specialization of Just :: [[Ix 25] ->> [Maybe (Ix 25)]]
TopLevel specialize: Just :: forall (a :: *). [[a] ->> [Maybe a]]  ~~>  Just :: [[Ix 25] ->> [Maybe (Ix 25)]], generics=[?5378], substitution=[?5378 --> Ix 25]
Requesting specialization of b6 :: [] >>= [[Ix 25] ->> [Maybe (Ix 25)]]
Block specialize: b6 :: forall (a :: *). [] >>= [[a] ->> [Maybe a]]  ~~>  b6 :: [] >>= [[Ix 25] ->> [Maybe (Ix 25)]], generics=[?5375], substitution=[?5375 --> Ix 25]
Requesting specialization of k5 :: {} [Ix 25] ->> [Maybe (Ix 25)]
ClosureDefn specialize: k5 :: forall (a :: *). {} [a] ->> [Maybe a]  ~~>  k5 :: {} [Ix 25] ->> [Maybe (Ix 25)], generics=[?5373], substitution=[?5373 --> Ix 25]
TopLevel specialize: Nothing :: forall (a :: *). [Maybe a]  ~~>  Nothing :: [Maybe (Ix 25)], generics=[?5369], substitution=[?5369 --> Ix 25]
External specialize: genLtInc :: forall (m :: nat). [Maybe (Ix m)] ->> [[[Ix m] ->> [Maybe (Ix m)]] ->> [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]]  ~~>  genLtInc :: [Maybe (Ix 25)] ->> [[[Ix 25] ->> [Maybe (Ix 25)]] ->> [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe (Ix 25)]]]]]
TopLevel specialize: >-> :: forall (a :: *). [[Ref (Stored a)] ->> [[Ref (Stored a)] ->> [[] ->> [Unit]]]]  ~~>  >-> :: [[Ref (Stored (Ix 80))] ->> [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]]], generics=[?6414], substitution=[?6414 --> Ix 80]
Requesting specialization of b88 :: [] >>= [[Ref (Stored (Ix 80))] ->> [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]]]
Block specialize: b88 :: forall (a :: *). [] >>= [[Ref (Stored a)] ->> [[Ref (Stored a)] ->> [[] ->> [Unit]]]]  ~~>  b881 :: [] >>= [[Ref (Stored (Ix 80))] ->> [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]]], generics=[?6411], substitution=[?6411 --> Ix 80]
Requesting specialization of k56 :: {} [Ref (Stored (Ix 80))] ->> [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k56 :: forall (a :: *). {} [Ref (Stored a)] ->> [[Ref (Stored a)] ->> [[] ->> [Unit]]]  ~~>  k561 :: {} [Ref (Stored (Ix 80))] ->> [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]], generics=[?6410], substitution=[?6410 --> Ix 80]
Requesting specialization of b87 :: [Ref (Stored (Ix 80))] >>= [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]]
Block specialize: b87 :: forall (a :: *). [Ref (Stored a)] >>= [[Ref (Stored a)] ->> [[] ->> [Unit]]]  ~~>  b871 :: [Ref (Stored (Ix 80))] >>= [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]], generics=[?6404], substitution=[?6404 --> Ix 80]
Requesting specialization of k55 :: {Ref (Stored (Ix 80))} [Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]
ClosureDefn specialize: k55 :: forall (a :: *). {Ref (Stored a)} [Ref (Stored a)] ->> [[] ->> [Unit]]  ~~>  k551 :: {Ref (Stored (Ix 80))} [Ref (Stored (Ix 80))] ->> [[] ->> [Unit]], generics=[?6401], substitution=[?6401 --> Ix 80]
Requesting specialization of b86 :: [Ref (Stored (Ix 80)), Ref (Stored (Ix 80))] >>= [[] ->> [Unit]]
Block specialize: b86 :: forall (a :: *). [Ref (Stored a), Ref (Stored a)] >>= [[] ->> [Unit]]  ~~>  b861 :: [Ref (Stored (Ix 80)), Ref (Stored (Ix 80))] >>= [[] ->> [Unit]], generics=[?6382], substitution=[?6382 --> Ix 80]
Requesting specialization of >>= :: [[[] ->> [Ix 80]] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Requesting specialization of get :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
Requesting specialization of set :: [Ref (Stored (Ix 80))] ->> [[Ix 80] ->> [[] ->> [Unit]]]
External specialize: set :: forall (t :: *). [Ref (Stored t)] ->> [[t] ->> [[] ->> [Unit]]]  ~~>  set2 :: [Ref (Stored (Ix 80))] ->> [[Ix 80] ->> [[] ->> [Unit]]]
TopLevel specialize: >>= :: forall (a :: *) (b :: *). [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  s10 :: [[[] ->> [Ix 80]] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5895, ?5896], substitution=[?5895 --> Ix 80, ?5896 --> Unit]
Requesting specialization of b85 :: [] >>= [[[] ->> [Ix 80]] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Block specialize: b85 :: forall (a :: *) (b :: *). [] >>= [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  b851 :: [] >>= [[[] ->> [Ix 80]] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5890, ?5891], substitution=[?5890 --> Ix 80, ?5891 --> Unit]
Requesting specialization of k54 :: {} [[] ->> [Ix 80]] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k54 :: forall (a :: *) (b :: *). {} [[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  k541 :: {} [[] ->> [Ix 80]] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5888, ?5887], substitution=[?5888 --> Ix 80, ?5887 --> Unit]
Requesting specialization of b84 :: [[] ->> [Ix 80]] >>= [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Block specialize: b84 :: forall (a :: *) (b :: *). [[] ->> [a]] >>= [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  b841 :: [[] ->> [Ix 80]] >>= [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5879, ?5880], substitution=[?5879 --> Ix 80, ?5880 --> Unit]
Requesting specialization of k53 :: {[] ->> [Ix 80]} [[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
ClosureDefn specialize: k53 :: forall (a :: *) (b :: *). {[] ->> [a]} [[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]  ~~>  k531 :: {[] ->> [Ix 80]} [[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]], generics=[?5874, ?5877], substitution=[?5874 --> Ix 80, ?5877 --> Unit]
Requesting specialization of b83 :: [[] ->> [Ix 80], [Ix 80] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Block specialize: b83 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [[] ->> [b]]  ~~>  b831 :: [[] ->> [Ix 80], [Ix 80] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]], generics=[?5868, ?5867], substitution=[?5868 --> Ix 80, ?5867 --> Unit]
Requesting specialization of k52 :: {[Ix 80] ->> [[] ->> [Unit]], [] ->> [Ix 80]} [] ->> [Unit]
ClosureDefn specialize: k52 :: forall (a :: *) (b :: *). {[a] ->> [[] ->> [b]], [] ->> [a]} [] ->> [b]  ~~>  k521 :: {[Ix 80] ->> [[] ->> [Unit]], [] ->> [Ix 80]} [] ->> [Unit], generics=[?5860, ?5863], substitution=[?5860 --> Ix 80, ?5863 --> Unit]
Requesting specialization of b82 :: [[] ->> [Ix 80], [Ix 80] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b82 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [b]  ~~>  b821 :: [[] ->> [Ix 80], [Ix 80] ->> [[] ->> [Unit]]] >>= [Unit], generics=[?5847, ?5848], substitution=[?5847 --> Ix 80, ?5848 --> Unit]
Block specialize: b357 :: [Maybe (Ix 80), Ref Window] >>= [Unit]  ~~>  b357 :: [Maybe (Ix 80), Ref Window] >>= [Unit], generics=[], substitution=null
Requesting specialization of set :: [Ref (Stored (Ix 80))] ->> [[Ix 80] ->> [[] ->> [Unit]]]
Requesting specialization of b355 :: [Unit] >>= [Unit]
TopLevel specialize: ltInc :: forall (m :: nat). [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]  ~~>  ltInc :: [[Ix 80] ->> [[Ix 80] ->> [Maybe (Ix 80)]]], generics=[?5403], substitution=[?5403 --> 80]
Requesting specialization of b160 :: [] >>= [[Ix 80] ->> [[Ix 80] ->> [Maybe (Ix 80)]]]
Block specialize: b160 :: forall (m :: nat). [] >>= [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]  ~~>  b1601 :: [] >>= [[Ix 80] ->> [[Ix 80] ->> [Maybe (Ix 80)]]], generics=[?5398], substitution=[?5398 --> 80]
Requesting specialization of ltIncBy :: [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe (Ix 80)]]]]
Requesting specialization of ix1 :: [Ix 80]
TopLevel specialize: ix1 :: forall (n :: nat). [Ix n]  ~~>  s12 :: [Ix 80], generics=[?5395], substitution=[?5395 --> 80]
Requesting specialization of b149 :: [] >>= [Ix 80]
Block specialize: b149 :: forall (n :: nat). [] >>= [Ix n]  ~~>  b1491 :: [] >>= [Ix 80], generics=[?5391], substitution=[?5391 --> 80]
Requesting specialization of ix1u :: [Unit] ->> [Ix 80]
Requesting specialization of Unit :: [Unit]
External specialize: ix1u :: forall (n :: nat). [Unit] ->> [Ix n]  ~~>  ix1u1 :: [Unit] ->> [Ix 80]
TopLevel specialize: ltIncBy :: forall (m :: nat). [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]  ~~>  s11 :: [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe (Ix 80)]]]], generics=[?5390], substitution=[?5390 --> 80]
Requesting specialization of b158 :: [] >>= [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe (Ix 80)]]]]
Block specialize: b158 :: forall (m :: nat). [] >>= [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]  ~~>  b1581 :: [] >>= [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe (Ix 80)]]]], generics=[?5381], substitution=[?5381 --> 80]
Requesting specialization of genLtInc :: [Maybe (Ix 80)] ->> [[[Ix 80] ->> [Maybe (Ix 80)]] ->> [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe (Ix 80)]]]]]
Requesting specialization of Nothing :: [Maybe (Ix 80)]
Requesting specialization of Just :: [[Ix 80] ->> [Maybe (Ix 80)]]
TopLevel specialize: Just :: forall (a :: *). [[a] ->> [Maybe a]]  ~~>  s14 :: [[Ix 80] ->> [Maybe (Ix 80)]], generics=[?5378], substitution=[?5378 --> Ix 80]
Requesting specialization of b6 :: [] >>= [[Ix 80] ->> [Maybe (Ix 80)]]
Block specialize: b6 :: forall (a :: *). [] >>= [[a] ->> [Maybe a]]  ~~>  b61 :: [] >>= [[Ix 80] ->> [Maybe (Ix 80)]], generics=[?5375], substitution=[?5375 --> Ix 80]
Requesting specialization of k5 :: {} [Ix 80] ->> [Maybe (Ix 80)]
ClosureDefn specialize: k5 :: forall (a :: *). {} [a] ->> [Maybe a]  ~~>  k51 :: {} [Ix 80] ->> [Maybe (Ix 80)], generics=[?5373], substitution=[?5373 --> Ix 80]
TopLevel specialize: Nothing :: forall (a :: *). [Maybe a]  ~~>  s13 :: [Maybe (Ix 80)], generics=[?5369], substitution=[?5369 --> Ix 80]
External specialize: genLtInc :: forall (m :: nat). [Maybe (Ix m)] ->> [[[Ix m] ->> [Maybe (Ix m)]] ->> [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]]  ~~>  genLtInc1 :: [Maybe (Ix 80)] ->> [[[Ix 80] ->> [Maybe (Ix 80)]] ->> [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe (Ix 80)]]]]]
TopLevel specialize: char :: [[Bit 32] ->> [Char]]  ~~>  char :: [[Bit 32] ->> [Char]], generics=[], substitution=null
Requesting specialization of b313 :: [] >>= [[Bit 32] ->> [Char]]
Block specialize: b313 :: [] >>= [[Bit 32] ->> [Char]]  ~~>  b313 :: [] >>= [[Bit 32] ->> [Char]], generics=[], substitution=null
Requesting specialization of k145 :: {} [Bit 32] ->> [Char]
ClosureDefn specialize: k145 :: {} [Bit 32] ->> [Char]  ~~>  k145 :: {} [Bit 32] ->> [Char], generics=[], substitution=null
Requesting specialization of b312 :: [Bit 32] >>= [Char]
Block specialize: b312 :: [Bit 32] >>= [Char]  ~~>  b312 :: [Bit 32] >>= [Char], generics=[], substitution=null
Requesting specialization of wordToByte :: [Bit 32] ->> [Bit 8]
Requesting specialization of defAttr :: [Bit 8]
External specialize: wordToByte :: [Bit 32] ->> [Bit 8]  ~~>  wordToByte :: [Bit 32] ->> [Bit 8]
TopLevel specialize: pos :: [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]  ~~>  pos :: [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]], generics=[], substitution=null
Requesting specialization of b317 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]
Block specialize: b317 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]  ~~>  b317 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]], generics=[], substitution=null
Requesting specialization of k147 :: {} [Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]
ClosureDefn specialize: k147 :: {} [Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]  ~~>  k147 :: {} [Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]], generics=[], substitution=null
Requesting specialization of b316 :: [Ix 25] >>= [[Ix 80] ->> [Ref (Stored Char)]]
Block specialize: b316 :: [Ix 25] >>= [[Ix 80] ->> [Ref (Stored Char)]]  ~~>  b316 :: [Ix 25] >>= [[Ix 80] ->> [Ref (Stored Char)]], generics=[], substitution=null
Requesting specialization of k146 :: {Ix 25} [Ix 80] ->> [Ref (Stored Char)]
ClosureDefn specialize: k146 :: {Ix 25} [Ix 80] ->> [Ref (Stored Char)]  ~~>  k146 :: {Ix 25} [Ix 80] ->> [Ref (Stored Char)], generics=[], substitution=null
Requesting specialization of b315 :: [Ix 25, Ix 80] >>= [Ref (Stored Char)]
Block specialize: b315 :: [Ix 25, Ix 80] >>= [Ref (Stored Char)]  ~~>  b315 :: [Ix 25, Ix 80] >>= [Ref (Stored Char)], generics=[], substitution=null
Requesting specialization of @ :: [Ref (Array 80 (Stored Char))] ->> [[Ix 80] ->> [Ref (Stored Char)]]
Requesting specialization of @ :: [Ref (Array 25 (Array 80 (Stored Char)))] ->> [[Ix 25] ->> [Ref (Array 80 (Stored Char))]]
Requesting specialization of vram :: Ref (Array 25 (Array 80 (Stored Char)))
External specialize: vram :: Ref (Array 25 (Array 80 (Stored Char)))  ~~>  vram :: Ref (Array 25 (Array 80 (Stored Char)))
External specialize: @ :: forall (n :: nat) (a :: area). [Ref (Array n a)] ->> [[Ix n] ->> [Ref a]]  ~~>  @1 :: [Ref (Array 25 (Array 80 (Stored Char)))] ->> [[Ix 25] ->> [Ref (Array 80 (Stored Char))]]
External specialize: @ :: forall (n :: nat) (a :: area). [Ref (Array n a)] ->> [[Ix n] ->> [Ref a]]  ~~>  @ :: [Ref (Array 80 (Stored Char))] ->> [[Ix 80] ->> [Ref (Stored Char)]]
External specialize: set :: forall (t :: *). [Ref (Stored t)] ->> [[t] ->> [[] ->> [Unit]]]  ~~>  set :: [Ref (Stored Char)] ->> [[Char] ->> [[] ->> [Unit]]]
External specialize: get :: forall (t :: *). [Ref (Stored t)] ->> [[] ->> [t]]  ~~>  get3 :: [Ref (Stored (Bit 8))] ->> [[] ->> [Bit 8]]
External specialize: get :: forall (t :: *). [Ref (Stored t)] ->> [[] ->> [t]]  ~~>  get2 :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
Block specialize: b359 :: [Ref Window, Ix 25] >>= [Unit]  ~~>  b359 :: [Ref Window, Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of newline :: [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Requesting specialization of b354 :: [Unit] >>= [Unit]
Block specialize: b362 :: [Ix 25, Ref Window, Bit 32] >>= [Unit]  ~~>  b362 :: [Ix 25, Ref Window, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of True :: [Bool]
Requesting specialization of b360 :: [Bool, Bit 32, Ref Window, Ix 25] >>= [Unit]
TopLevel specialize: True :: [Bool]  ~~>  True :: [Bool], generics=[], substitution=null
TopLevel specialize: == :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]  ~~>  == :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]], generics=[], substitution=null
Requesting specialization of b36 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Block specialize: b36 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bool]]]  ~~>  b36 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bool]]], generics=[], substitution=null
Requesting specialization of k25 :: {} [Bit 32] ->> [[Bit 32] ->> [Bool]]
ClosureDefn specialize: k25 :: {} [Bit 32] ->> [[Bit 32] ->> [Bool]]  ~~>  k25 :: {} [Bit 32] ->> [[Bit 32] ->> [Bool]], generics=[], substitution=null
Requesting specialization of b35 :: [Bit 32] >>= [[Bit 32] ->> [Bool]]
Block specialize: b35 :: [Bit 32] >>= [[Bit 32] ->> [Bool]]  ~~>  b35 :: [Bit 32] >>= [[Bit 32] ->> [Bool]], generics=[], substitution=null
Requesting specialization of k24 :: {Bit 32} [Bit 32] ->> [Bool]
ClosureDefn specialize: k24 :: {Bit 32} [Bit 32] ->> [Bool]  ~~>  k24 :: {Bit 32} [Bit 32] ->> [Bool], generics=[], substitution=null
Requesting specialization of b34 :: [Bit 32, Bit 32] >>= [Bool]
Block specialize: b34 :: [Bit 32, Bit 32] >>= [Bool]  ~~>  b34 :: [Bit 32, Bit 32] >>= [Bool], generics=[], substitution=null
Requesting specialization of bconv :: [Bit 1] >>= [Bool]
Block specialize: bconv :: [Bit 1] >>= [Bool]  ~~>  bconv :: [Bit 1] >>= [Bool], generics=[], substitution=null
Requesting specialization of btrue :: [] >>= [Bool]
Requesting specialization of bfalse :: [] >>= [Bool]
Block specialize: bfalse :: [] >>= [Bool]  ~~>  bfalse :: [] >>= [Bool], generics=[], substitution=null
Requesting specialization of false :: [Bool]
TopLevel specialize: false :: [Bool]  ~~>  false :: [Bool], generics=[], substitution=null
Block specialize: btrue :: [] >>= [Bool]  ~~>  btrue :: [] >>= [Bool], generics=[], substitution=null
Requesting specialization of true :: [Bool]
TopLevel specialize: true :: [Bool]  ~~>  true :: [Bool], generics=[], substitution=null
External specialize: get :: forall (t :: *). [Ref (Stored t)] ->> [[] ->> [t]]  ~~>  get1 :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
TopLevel specialize: sputchar :: [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  sputchar :: [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b266 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Block specialize: b266 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  b266 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k130 :: {} [Bit 32] ->> [[] ->> [Unit]]
ClosureDefn specialize: k130 :: {} [Bit 32] ->> [[] ->> [Unit]]  ~~>  k130 :: {} [Bit 32] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b265 :: [Bit 32] >>= [[] ->> [Unit]]
Block specialize: b265 :: [Bit 32] >>= [[] ->> [Unit]]  ~~>  b265 :: [Bit 32] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k129 :: {Bit 32} [] ->> [Unit]
ClosureDefn specialize: k129 :: {Bit 32} [] ->> [Unit]  ~~>  k129 :: {Bit 32} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b264 :: [Bit 32] >>= [Unit]
Block specialize: b264 :: [Bit 32] >>= [Unit]  ~~>  b264 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of put5 :: [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of == :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Requesting specialization of b263 :: [] >>= [Unit]
Requesting specialization of b262 :: [] >>= [Unit]
Block specialize: b262 :: [] >>= [Unit]  ~~>  b262 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of return :: [[Unit] ->> [[] ->> [Unit]]]
Requesting specialization of Unit :: [Unit]
Requesting specialization of b261 :: [Unit] >>= [Unit]
Block specialize: b261 :: [Unit] >>= [Unit]  ~~>  b261 :: [Unit] >>= [Unit], generics=[], substitution=null
Block specialize: b263 :: [] >>= [Unit]  ~~>  b263 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of put5 :: [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of b261 :: [Unit] >>= [Unit]
TopLevel specialize: put5 :: [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  put5 :: [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b260 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Block specialize: b260 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  b260 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k128 :: {} [Bit 32] ->> [[] ->> [Unit]]
ClosureDefn specialize: k128 :: {} [Bit 32] ->> [[] ->> [Unit]]  ~~>  k128 :: {} [Bit 32] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b259 :: [Bit 32] >>= [[] ->> [Unit]]
Block specialize: b259 :: [Bit 32] >>= [[] ->> [Unit]]  ~~>  b259 :: [Bit 32] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k127 :: {Bit 32} [] ->> [Unit]
ClosureDefn specialize: k127 :: {Bit 32} [] ->> [Unit]  ~~>  k127 :: {Bit 32} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b258 :: [Bit 32] >>= [Unit]
Block specialize: b258 :: [Bit 32] >>= [Unit]  ~~>  b258 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of == :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b257 :: [Bit 32] >>= [Unit]
Requesting specialization of b256 :: [Bit 32] >>= [Unit]
Block specialize: b256 :: [Bit 32] >>= [Unit]  ~~>  b256 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of outb :: [Bit 16] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of com1data :: [Bit 16]
Requesting specialization of b255 :: [Unit] >>= [Unit]
Block specialize: b255 :: [Unit] >>= [Unit]  ~~>  b255 :: [Unit] >>= [Unit], generics=[], substitution=null
TopLevel specialize: com1data :: [Bit 16]  ~~>  com1data :: [Bit 16], generics=[], substitution=null
Requesting specialization of b267 :: [] >>= [Bit 16]
Block specialize: b267 :: [] >>= [Bit 16]  ~~>  b267 :: [] >>= [Bit 16], generics=[], substitution=null
Requesting specialization of port :: [Bit 32] ->> [Bit 16]
External specialize: port :: [Bit 32] ->> [Bit 16]  ~~>  port :: [Bit 32] ->> [Bit 16]
External specialize: outb :: [Bit 16] ->> [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  outb :: [Bit 16] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Block specialize: b257 :: [Bit 32] >>= [Unit]  ~~>  b257 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of put5 :: [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of b255 :: [Unit] >>= [Unit]
External specialize: and :: forall (n :: nat). [Bit n] ->> [[Bit n] ->> [Bit n]]  ~~>  and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
TopLevel specialize: com1ctrl :: [Bit 16]  ~~>  com1ctrl :: [Bit 16], generics=[], substitution=null
Requesting specialization of b268 :: [] >>= [Bit 16]
Block specialize: b268 :: [] >>= [Bit 16]  ~~>  b268 :: [] >>= [Bit 16], generics=[], substitution=null
Requesting specialization of portPlus :: [[Bit 16] ->> [[Bit 32] ->> [Bit 16]]]
Requesting specialization of com1data :: [Bit 16]
TopLevel specialize: portPlus :: [[Bit 16] ->> [[Bit 32] ->> [Bit 16]]]  ~~>  portPlus :: [[Bit 16] ->> [[Bit 32] ->> [Bit 16]]], generics=[], substitution=null
Requesting specialization of b108 :: [] >>= [[Bit 16] ->> [[Bit 32] ->> [Bit 16]]]
Block specialize: b108 :: [] >>= [[Bit 16] ->> [[Bit 32] ->> [Bit 16]]]  ~~>  b108 :: [] >>= [[Bit 16] ->> [[Bit 32] ->> [Bit 16]]], generics=[], substitution=null
Requesting specialization of k67 :: {} [Bit 16] ->> [[Bit 32] ->> [Bit 16]]
ClosureDefn specialize: k67 :: {} [Bit 16] ->> [[Bit 32] ->> [Bit 16]]  ~~>  k67 :: {} [Bit 16] ->> [[Bit 32] ->> [Bit 16]], generics=[], substitution=null
Requesting specialization of b107 :: [Bit 16] >>= [[Bit 32] ->> [Bit 16]]
Block specialize: b107 :: [Bit 16] >>= [[Bit 32] ->> [Bit 16]]  ~~>  b107 :: [Bit 16] >>= [[Bit 32] ->> [Bit 16]], generics=[], substitution=null
Requesting specialization of k66 :: {Bit 16} [Bit 32] ->> [Bit 16]
ClosureDefn specialize: k66 :: {Bit 16} [Bit 32] ->> [Bit 16]  ~~>  k66 :: {Bit 16} [Bit 32] ->> [Bit 16], generics=[], substitution=null
Requesting specialization of b106 :: [Bit 16, Bit 32] >>= [Bit 16]
Block specialize: b106 :: [Bit 16, Bit 32] >>= [Bit 16]  ~~>  b106 :: [Bit 16, Bit 32] >>= [Bit 16], generics=[], substitution=null
Requesting specialization of bitAdd :: [Bit 16] ->> [[Bit 16] ->> [Bit 16]]
Requesting specialization of port :: [Bit 32] ->> [Bit 16]
External specialize: bitAdd :: forall (n :: nat). [Bit n] ->> [[Bit n] ->> [Bit n]]  ~~>  bitAdd :: [Bit 16] ->> [[Bit 16] ->> [Bit 16]]
External specialize: inb :: [Bit 16] ->> [[] ->> [Bit 32]]  ~~>  inb :: [Bit 16] ->> [[] ->> [Bit 32]]
TopLevel specialize: hputHex :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  hputHex :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b217 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Block specialize: b217 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  b217 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of hputDigits :: [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Requesting specialization of nz16 :: [NZBit 32]
TopLevel specialize: nz16 :: forall (n :: nat). [NZBit n]  ~~>  nz16 :: [NZBit 32], generics=[?7437], substitution=[?7437 --> 32]
Requesting specialization of b139 :: [] >>= [NZBit 32]
Block specialize: b139 :: forall (n :: nat). [] >>= [NZBit n]  ~~>  b139 :: [] >>= [NZBit 32], generics=[?7433], substitution=[?7433 --> 32]
Requesting specialization of nz16u :: [Unit] ->> [NZBit 32]
Requesting specialization of Unit :: [Unit]
External specialize: nz16u :: forall (n :: nat). [Unit] ->> [NZBit n]  ~~>  nz16u :: [Unit] ->> [NZBit 32]
TopLevel specialize: hputDigits :: [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]  ~~>  hputDigits :: [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]], generics=[], substitution=null
Requesting specialization of b219 :: [] >>= [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Block specialize: b219 :: [] >>= [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]  ~~>  b219 :: [] >>= [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]], generics=[], substitution=null
Requesting specialization of k108 :: {} [NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
ClosureDefn specialize: k108 :: {} [NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  k108 :: {} [NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b218 :: [NZBit 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Block specialize: b218 :: [NZBit 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  b218 :: [NZBit 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of hputDigitsFmt :: [[NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]]
Requesting specialization of maxBound :: Ix 32
Requesting specialization of ix0 :: [Ix 32]
TopLevel specialize: ix0 :: forall (n :: nat). [Ix n]  ~~>  s15 :: [Ix 32], generics=[?5823], substitution=[?5823 --> 32]
Requesting specialization of b148 :: [] >>= [Ix 32]
Block specialize: b148 :: forall (n :: nat). [] >>= [Ix n]  ~~>  b1482 :: [] >>= [Ix 32], generics=[?5819], substitution=[?5819 --> 32]
Requesting specialization of ix0u :: [Unit] ->> [Ix 32]
Requesting specialization of Unit :: [Unit]
External specialize: ix0u :: forall (n :: nat). [Unit] ->> [Ix n]  ~~>  ix0u2 :: [Unit] ->> [Ix 32]
External specialize: maxBound :: forall (m :: nat). Ix m  ~~>  maxBound2 :: Ix 32
TopLevel specialize: hputDigitsFmt :: [[NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]]  ~~>  hputDigitsFmt :: [[NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]], generics=[], substitution=null
Requesting specialization of b228 :: [] >>= [[NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]]
Block specialize: b228 :: [] >>= [[NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]]  ~~>  b228 :: [] >>= [[NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]], generics=[], substitution=null
Requesting specialization of k115 :: {} [NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
ClosureDefn specialize: k115 :: {} [NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]  ~~>  k115 :: {} [NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]], generics=[], substitution=null
Requesting specialization of b227 :: [NZBit 32] >>= [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Block specialize: b227 :: [NZBit 32] >>= [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]  ~~>  b227 :: [NZBit 32] >>= [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]], generics=[], substitution=null
Requesting specialization of k114 :: {NZBit 32} [Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
ClosureDefn specialize: k114 :: {NZBit 32} [Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]  ~~>  k114 :: {NZBit 32} [Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]], generics=[], substitution=null
Requesting specialization of b226 :: [Ix 32, NZBit 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
Block specialize: b226 :: [Ix 32, NZBit 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]  ~~>  b226 :: [Ix 32, NZBit 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]], generics=[], substitution=null
Requesting specialization of k113 :: {NZBit 32, Ix 32} [Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
ClosureDefn specialize: k113 :: {NZBit 32, Ix 32} [Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]  ~~>  k113 :: {NZBit 32, Ix 32} [Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]], generics=[], substitution=null
Requesting specialization of b225 :: [Ix 32, Ix 32, NZBit 32] >>= [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Block specialize: b225 :: [Ix 32, Ix 32, NZBit 32] >>= [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]  ~~>  b225 :: [Ix 32, Ix 32, NZBit 32] >>= [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]], generics=[], substitution=null
Requesting specialization of k112 :: {NZBit 32, Ix 32, Ix 32} [Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
ClosureDefn specialize: k112 :: {NZBit 32, Ix 32, Ix 32} [Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  k112 :: {NZBit 32, Ix 32, Ix 32} [Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b224 :: [Bit 32, Ix 32, Ix 32, NZBit 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Block specialize: b224 :: [Bit 32, Ix 32, Ix 32, NZBit 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  b224 :: [Bit 32, Ix 32, Ix 32, NZBit 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k111 :: {NZBit 32, Ix 32, Ix 32, Bit 32} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k111 :: {NZBit 32, Ix 32, Ix 32, Bit 32} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  k111 :: {NZBit 32, Ix 32, Ix 32, Bit 32} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b223 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32, Ix 32, NZBit 32] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Block specialize: b223 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32, Ix 32, NZBit 32] >>= [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  b223 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32, Ix 32, NZBit 32] >>= [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b222 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Requesting specialization of loop4 :: [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Requesting specialization of ix0 :: [Ix 32]
TopLevel specialize: loop4 :: [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]  ~~>  loop4 :: [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]], generics=[], substitution=null
Requesting specialization of b199 :: [] >>= [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Block specialize: b199 :: [] >>= [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]  ~~>  b199 :: [] >>= [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]], generics=[], substitution=null
Requesting specialization of k101 :: {} [Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
ClosureDefn specialize: k101 :: {} [Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]  ~~>  k101 :: {} [Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]], generics=[], substitution=null
Requesting specialization of b198 :: [Ix 32] >>= [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
Block specialize: b198 :: [Ix 32] >>= [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]  ~~>  b198 :: [Ix 32] >>= [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]], generics=[], substitution=null
Requesting specialization of k100 :: {Ix 32} [[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
ClosureDefn specialize: k100 :: {Ix 32} [[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]  ~~>  k100 :: {Ix 32} [[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]], generics=[], substitution=null
Requesting specialization of b197 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Block specialize: b197 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]  ~~>  b197 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]], generics=[], substitution=null
Requesting specialization of k99 :: {Ix 32, [Ix 32] ->> [[] ->> [Unit]]} [NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
ClosureDefn specialize: k99 :: {Ix 32, [Ix 32] ->> [[] ->> [Unit]]} [NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  k99 :: {Ix 32, [Ix 32] ->> [[] ->> [Unit]]} [NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b196 :: [NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Block specialize: b196 :: [NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  b196 :: [NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b195 :: [Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Block specialize: b195 :: [Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  b195 :: [Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k98 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32} [Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k98 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32} [Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  k98 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32} [Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b194 :: [Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Block specialize: b194 :: [Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  b194 :: [Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k97 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32, Ix 32} [Bit 32] ->> [[] ->> [Unit]]
ClosureDefn specialize: k97 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32, Ix 32} [Bit 32] ->> [[] ->> [Unit]]  ~~>  k97 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32, Ix 32} [Bit 32] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b193 :: [Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[] ->> [Unit]]
Block specialize: b193 :: [Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[] ->> [Unit]]  ~~>  b193 :: [Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k96 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32, Ix 32, Bit 32} [] ->> [Unit]
ClosureDefn specialize: k96 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32, Ix 32, Bit 32} [] ->> [Unit]  ~~>  k96 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32, Ix 32, Bit 32} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b192 :: [Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [Unit]
Block specialize: b192 :: [Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [Unit]  ~~>  b192 :: [Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of set :: [Ref (Stored (Bit 8))] ->> [[Bit 8] ->> [[] ->> [Unit]]]
Requesting specialization of @ :: [Ref (Array 32 (Stored (Bit 8)))] ->> [[Ix 32] ->> [Ref (Stored (Bit 8))]]
Requesting specialization of itoaBuf :: Ref (Array 32 (Stored (Bit 8)))
Requesting specialization of digitToByte :: [[Bit 32] ->> [Bit 8]]
Requesting specialization of nzrem :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
Requesting specialization of ltInc :: [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]
Maybe2 is a specialized DataType for Maybe (Ix 32)
Requesting specialization of b191 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit]
Requesting specialization of b190 :: [Maybe (Ix 32), Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [Unit]
Block specialize: b190 :: [Maybe (Ix 32), Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [Unit]  ~~>  b190 :: [Maybe (Ix 32), Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nzdiv :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
Requesting specialization of == :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Requesting specialization of b189 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit]
Requesting specialization of b188 :: [Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32, Ix 32, Bit 32] >>= [Unit]
Block specialize: b188 :: [Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32, Ix 32, Bit 32] >>= [Unit]  ~~>  b188 :: [Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32, Ix 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of loop4 :: [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Requesting specialization of b187 :: [Unit] >>= [Unit]
Block specialize: b187 :: [Unit] >>= [Unit]  ~~>  b187 :: [Unit] >>= [Unit], generics=[], substitution=null
Requesting specialization of b186 :: [Unit] >>= [Unit]
Block specialize: b186 :: [Unit] >>= [Unit]  ~~>  b186 :: [Unit] >>= [Unit], generics=[], substitution=null
Block specialize: b189 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit]  ~~>  b189 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b187 :: [Unit] >>= [Unit]
External specialize: nzdiv :: forall (n :: nat). [Bit n] ->> [[NZBit n] ->> [Bit n]]  ~~>  nzdiv :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
Block specialize: b191 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit]  ~~>  b191 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b186 :: [Unit] >>= [Unit]
TopLevel specialize: ltInc :: forall (m :: nat). [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]  ~~>  s16 :: [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]], generics=[?5403], substitution=[?5403 --> 32]
Requesting specialization of b160 :: [] >>= [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]
Block specialize: b160 :: forall (m :: nat). [] >>= [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]  ~~>  b1602 :: [] >>= [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]], generics=[?5398], substitution=[?5398 --> 32]
Requesting specialization of ltIncBy :: [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]]
Requesting specialization of ix1 :: [Ix 32]
TopLevel specialize: ix1 :: forall (n :: nat). [Ix n]  ~~>  s18 :: [Ix 32], generics=[?5395], substitution=[?5395 --> 32]
Requesting specialization of b149 :: [] >>= [Ix 32]
Block specialize: b149 :: forall (n :: nat). [] >>= [Ix n]  ~~>  b1492 :: [] >>= [Ix 32], generics=[?5391], substitution=[?5391 --> 32]
Requesting specialization of ix1u :: [Unit] ->> [Ix 32]
Requesting specialization of Unit :: [Unit]
External specialize: ix1u :: forall (n :: nat). [Unit] ->> [Ix n]  ~~>  ix1u2 :: [Unit] ->> [Ix 32]
TopLevel specialize: ltIncBy :: forall (m :: nat). [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]  ~~>  s17 :: [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]], generics=[?5390], substitution=[?5390 --> 32]
Requesting specialization of b158 :: [] >>= [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]]
Block specialize: b158 :: forall (m :: nat). [] >>= [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]  ~~>  b1582 :: [] >>= [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]], generics=[?5381], substitution=[?5381 --> 32]
Requesting specialization of genLtInc :: [Maybe (Ix 32)] ->> [[[Ix 32] ->> [Maybe (Ix 32)]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]]]
Requesting specialization of Nothing :: [Maybe (Ix 32)]
Requesting specialization of Just :: [[Ix 32] ->> [Maybe (Ix 32)]]
TopLevel specialize: Just :: forall (a :: *). [[a] ->> [Maybe a]]  ~~>  s20 :: [[Ix 32] ->> [Maybe (Ix 32)]], generics=[?5378], substitution=[?5378 --> Ix 32]
Requesting specialization of b6 :: [] >>= [[Ix 32] ->> [Maybe (Ix 32)]]
Block specialize: b6 :: forall (a :: *). [] >>= [[a] ->> [Maybe a]]  ~~>  b62 :: [] >>= [[Ix 32] ->> [Maybe (Ix 32)]], generics=[?5375], substitution=[?5375 --> Ix 32]
Requesting specialization of k5 :: {} [Ix 32] ->> [Maybe (Ix 32)]
ClosureDefn specialize: k5 :: forall (a :: *). {} [a] ->> [Maybe a]  ~~>  k52 :: {} [Ix 32] ->> [Maybe (Ix 32)], generics=[?5373], substitution=[?5373 --> Ix 32]
TopLevel specialize: Nothing :: forall (a :: *). [Maybe a]  ~~>  s19 :: [Maybe (Ix 32)], generics=[?5369], substitution=[?5369 --> Ix 32]
External specialize: genLtInc :: forall (m :: nat). [Maybe (Ix m)] ->> [[[Ix m] ->> [Maybe (Ix m)]] ->> [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]]  ~~>  genLtInc2 :: [Maybe (Ix 32)] ->> [[[Ix 32] ->> [Maybe (Ix 32)]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]]]
External specialize: nzrem :: forall (n :: nat). [Bit n] ->> [[NZBit n] ->> [Bit n]]  ~~>  nzrem :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
TopLevel specialize: digitToByte :: [[Bit 32] ->> [Bit 8]]  ~~>  digitToByte :: [[Bit 32] ->> [Bit 8]], generics=[], substitution=null
Requesting specialization of b233 :: [] >>= [[Bit 32] ->> [Bit 8]]
Block specialize: b233 :: [] >>= [[Bit 32] ->> [Bit 8]]  ~~>  b233 :: [] >>= [[Bit 32] ->> [Bit 8]], generics=[], substitution=null
Requesting specialization of k116 :: {} [Bit 32] ->> [Bit 8]
ClosureDefn specialize: k116 :: {} [Bit 32] ->> [Bit 8]  ~~>  k116 :: {} [Bit 32] ->> [Bit 8], generics=[], substitution=null
Requesting specialization of b232 :: [Bit 32] >>= [Bit 8]
Block specialize: b232 :: [Bit 32] >>= [Bit 8]  ~~>  b232 :: [Bit 32] >>= [Bit 8], generics=[], substitution=null
Requesting specialization of wordToByte :: [Bit 32] ->> [Bit 8]
Requesting specialization of <= :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Requesting specialization of b231 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]
Requesting specialization of b230 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]
Block specialize: b230 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]  ~~>  b230 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8], generics=[], substitution=null
Requesting specialization of + :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of - :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b229 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]
Block specialize: b229 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]  ~~>  b229 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8], generics=[], substitution=null
TopLevel specialize: - :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]  ~~>  - :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of b16 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Block specialize: b16 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]  ~~>  b16 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k12 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
ClosureDefn specialize: k12 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]  ~~>  k12 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of b15 :: [Bit 32] >>= [[Bit 32] ->> [Bit 32]]
Block specialize: b15 :: [Bit 32] >>= [[Bit 32] ->> [Bit 32]]  ~~>  b15 :: [Bit 32] >>= [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k11 :: {Bit 32} [Bit 32] ->> [Bit 32]
ClosureDefn specialize: k11 :: {Bit 32} [Bit 32] ->> [Bit 32]  ~~>  k11 :: {Bit 32} [Bit 32] ->> [Bit 32], generics=[], substitution=null
Requesting specialization of b14 :: [Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b14 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b14 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
TopLevel specialize: + :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]  ~~>  + :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of b13 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Block specialize: b13 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]  ~~>  b13 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k10 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
ClosureDefn specialize: k10 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]  ~~>  k10 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of b12 :: [Bit 32] >>= [[Bit 32] ->> [Bit 32]]
Block specialize: b12 :: [Bit 32] >>= [[Bit 32] ->> [Bit 32]]  ~~>  b12 :: [Bit 32] >>= [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k9 :: {Bit 32} [Bit 32] ->> [Bit 32]
ClosureDefn specialize: k9 :: {Bit 32} [Bit 32] ->> [Bit 32]  ~~>  k9 :: {Bit 32} [Bit 32] ->> [Bit 32], generics=[], substitution=null
Requesting specialization of b11 :: [Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b11 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b11 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Block specialize: b231 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]  ~~>  b231 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8], generics=[], substitution=null
Requesting specialization of + :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b229 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]
TopLevel specialize: <= :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]  ~~>  <= :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]], generics=[], substitution=null
Requesting specialization of b63 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Block specialize: b63 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bool]]]  ~~>  b63 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bool]]], generics=[], substitution=null
Requesting specialization of k43 :: {} [Bit 32] ->> [[Bit 32] ->> [Bool]]
ClosureDefn specialize: k43 :: {} [Bit 32] ->> [[Bit 32] ->> [Bool]]  ~~>  k43 :: {} [Bit 32] ->> [[Bit 32] ->> [Bool]], generics=[], substitution=null
Requesting specialization of b62 :: [Bit 32] >>= [[Bit 32] ->> [Bool]]
Block specialize: b62 :: [Bit 32] >>= [[Bit 32] ->> [Bool]]  ~~>  b62 :: [Bit 32] >>= [[Bit 32] ->> [Bool]], generics=[], substitution=null
Requesting specialization of k42 :: {Bit 32} [Bit 32] ->> [Bool]
ClosureDefn specialize: k42 :: {Bit 32} [Bit 32] ->> [Bool]  ~~>  k42 :: {Bit 32} [Bit 32] ->> [Bool], generics=[], substitution=null
Requesting specialization of b61 :: [Bit 32, Bit 32] >>= [Bool]
Block specialize: b61 :: [Bit 32, Bit 32] >>= [Bool]  ~~>  b61 :: [Bit 32, Bit 32] >>= [Bool], generics=[], substitution=null
Requesting specialization of bconv :: [Bit 1] >>= [Bool]
MemArea specialize: itoaBuf :: Ref (Array 32 (Stored (Bit 8)))  ~~>  itoaBuf :: Ref (Array 32 (Stored (Bit 8)))
Requesting specialization of s1 :: [Init (Array 32 (Stored (Bit 8)))]
TopLevel specialize: s1 :: [Init (Array 32 (Stored (Bit 8)))]  ~~>  s1 :: [Init (Array 32 (Stored (Bit 8)))], generics=[], substitution=null
Requesting specialization of b254 :: [] >>= [Init (Array 32 (Stored (Bit 8)))]
Block specialize: b254 :: [] >>= [Init (Array 32 (Stored (Bit 8)))]  ~~>  b254 :: [] >>= [Init (Array 32 (Stored (Bit 8)))], generics=[], substitution=null
Requesting specialization of initArray :: [[Ix 32] ->> [Init (Stored (Bit 8))]] ->> [Init (Array 32 (Stored (Bit 8)))]
Requesting specialization of b253 :: [] >>= [[Ix 32] ->> [Init (Stored (Bit 8))]]
Block specialize: b253 :: [] >>= [[Ix 32] ->> [Init (Stored (Bit 8))]]  ~~>  b253 :: [] >>= [[Ix 32] ->> [Init (Stored (Bit 8))]], generics=[], substitution=null
Requesting specialization of k126 :: {} [Ix 32] ->> [Init (Stored (Bit 8))]
ClosureDefn specialize: k126 :: {} [Ix 32] ->> [Init (Stored (Bit 8))]  ~~>  k126 :: {} [Ix 32] ->> [Init (Stored (Bit 8))], generics=[], substitution=null
Requesting specialization of b252 :: [] >>= [Init (Stored (Bit 8))]
Block specialize: b252 :: [] >>= [Init (Stored (Bit 8))]  ~~>  b252 :: [] >>= [Init (Stored (Bit 8))], generics=[], substitution=null
Requesting specialization of initStored :: [Bit 8] ->> [Init (Stored (Bit 8))]
Requesting specialization of bit0 :: [Bit 8]
TopLevel specialize: bit0 :: forall (n :: nat). [Bit n]  ~~>  bit0 :: [Bit 8], generics=[?6991], substitution=[?6991 --> 8]
Requesting specialization of b102 :: [] >>= [Bit 8]
Block specialize: b102 :: forall (n :: nat). [] >>= [Bit n]  ~~>  b102 :: [] >>= [Bit 8], generics=[?6987], substitution=[?6987 --> 8]
Requesting specialization of bit0u :: [Unit] ->> [Bit 8]
Requesting specialization of Unit :: [Unit]
External specialize: bit0u :: forall (n :: nat). [Unit] ->> [Bit n]  ~~>  bit0u :: [Unit] ->> [Bit 8]
External specialize: initArray :: forall (n :: nat) (a :: area). [[Ix n] ->> [Init a]] ->> [Init (Array n a)]  ~~>  initArray :: [[Ix 32] ->> [Init (Stored (Bit 8))]] ->> [Init (Array 32 (Stored (Bit 8)))]
External specialize: @ :: forall (n :: nat) (a :: area). [Ref (Array n a)] ->> [[Ix n] ->> [Ref a]]  ~~>  @2 :: [Ref (Array 32 (Stored (Bit 8)))] ->> [[Ix 32] ->> [Ref (Stored (Bit 8))]]
External specialize: set :: forall (t :: *). [Ref (Stored t)] ->> [[t] ->> [[] ->> [Unit]]]  ~~>  set3 :: [Ref (Stored (Bit 8))] ->> [[Bit 8] ->> [[] ->> [Unit]]]
Block specialize: b222 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]  ~~>  b222 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k110 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [Ix 32] ->> [[] ->> [Unit]]
ClosureDefn specialize: k110 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [Ix 32] ->> [[] ->> [Unit]]  ~~>  k110 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [Ix 32] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b221 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]], Ix 32] >>= [[] ->> [Unit]]
Block specialize: b221 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]], Ix 32] >>= [[] ->> [Unit]]  ~~>  b221 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]], Ix 32] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k109 :: {Ix 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [] ->> [Unit]
ClosureDefn specialize: k109 :: {Ix 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [] ->> [Unit]  ~~>  k109 :: {Ix 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b220 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit]
Block specialize: b220 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit]  ~~>  b220 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of padloop3 :: [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]]
Requesting specialization of output2 :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
TopLevel specialize: output2 :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]  ~~>  output2 :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b175 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
Block specialize: b175 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]  ~~>  b175 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k90 :: {} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k90 :: {} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]  ~~>  k90 :: {} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b174 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Block specialize: b174 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]  ~~>  b174 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b173 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Block specialize: b173 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]  ~~>  b173 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k89 :: {[Bit 32] ->> [[] ->> [Unit]]} [Ix 32] ->> [[] ->> [Unit]]
ClosureDefn specialize: k89 :: {[Bit 32] ->> [[] ->> [Unit]]} [Ix 32] ->> [[] ->> [Unit]]  ~~>  k89 :: {[Bit 32] ->> [[] ->> [Unit]]} [Ix 32] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b172 :: [Ix 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Block specialize: b172 :: [Ix 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]  ~~>  b172 :: [Ix 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k88 :: {[Bit 32] ->> [[] ->> [Unit]], Ix 32} [] ->> [Unit]
ClosureDefn specialize: k88 :: {[Bit 32] ->> [[] ->> [Unit]], Ix 32} [] ->> [Unit]  ~~>  k88 :: {[Bit 32] ->> [[] ->> [Unit]], Ix 32} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b171 :: [Ix 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b171 :: [Ix 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]  ~~>  b171 :: [Ix 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit], generics=[], substitution=null
Requesting specialization of get :: [Ref (Stored (Bit 8))] ->> [[] ->> [Bit 8]]
Requesting specialization of @ :: [Ref (Array 32 (Stored (Bit 8)))] ->> [[Ix 32] ->> [Ref (Stored (Bit 8))]]
Requesting specialization of itoaBuf :: Ref (Array 32 (Stored (Bit 8)))
Requesting specialization of bitsToWord :: [Bit 8] ->> [Bit 32]
Requesting specialization of decIx :: [[Ix 32] ->> [Maybe (Ix 32)]]
Requesting specialization of b170 :: [] >>= [Unit]
Requesting specialization of b169 :: [Maybe (Ix 32), [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b169 :: [Maybe (Ix 32), [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]  ~~>  b169 :: [Maybe (Ix 32), [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit], generics=[], substitution=null
Requesting specialization of output2 :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
Requesting specialization of b168 :: [Unit] >>= [Unit]
Block specialize: b168 :: [Unit] >>= [Unit]  ~~>  b168 :: [Unit] >>= [Unit], generics=[], substitution=null
Block specialize: b170 :: [] >>= [Unit]  ~~>  b170 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of return :: [[Unit] ->> [[] ->> [Unit]]]
Requesting specialization of Unit :: [Unit]
Requesting specialization of b168 :: [Unit] >>= [Unit]
TopLevel specialize: decIx :: forall (n :: nat). [[Ix n] ->> [Maybe (Ix n)]]  ~~>  decIx :: [[Ix 32] ->> [Maybe (Ix 32)]], generics=[?7040], substitution=[?7040 --> 32]
Requesting specialization of b165 :: [] >>= [[Ix 32] ->> [Maybe (Ix 32)]]
Block specialize: b165 :: forall (n :: nat). [] >>= [[Ix n] ->> [Maybe (Ix n)]]  ~~>  b165 :: [] >>= [[Ix 32] ->> [Maybe (Ix 32)]], generics=[?7037], substitution=[?7037 --> 32]
Requesting specialization of k86 :: {} [Ix 32] ->> [Maybe (Ix 32)]
ClosureDefn specialize: k86 :: forall (n :: nat). {} [Ix n] ->> [Maybe (Ix n)]  ~~>  k86 :: {} [Ix 32] ->> [Maybe (Ix 32)], generics=[?7034], substitution=[?7034 --> 32]
Requesting specialization of b164 :: [Ix 32] >>= [Maybe (Ix 32)]
Block specialize: b164 :: forall (m :: nat). [Ix m] >>= [Maybe (Ix m)]  ~~>  b164 :: [Ix 32] >>= [Maybe (Ix 32)], generics=[?7025], substitution=[?7025 --> 32]
Requesting specialization of ltDec :: [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]
Requesting specialization of ix0 :: [Ix 32]
TopLevel specialize: ltDec :: forall (m :: nat). [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]  ~~>  ltDec :: [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]], generics=[?7022], substitution=[?7022 --> 32]
Requesting specialization of b161 :: [] >>= [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]
Block specialize: b161 :: forall (m :: nat). [] >>= [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]  ~~>  b161 :: [] >>= [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]], generics=[?7017], substitution=[?7017 --> 32]
Requesting specialization of ltDecBy :: [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]]
Requesting specialization of ix1 :: [Ix 32]
TopLevel specialize: ltDecBy :: forall (m :: nat). [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]  ~~>  ltDecBy :: [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]], generics=[?7015], substitution=[?7015 --> 32]
Requesting specialization of b159 :: [] >>= [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]]
Block specialize: b159 :: forall (m :: nat). [] >>= [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]  ~~>  b159 :: [] >>= [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]], generics=[?7006], substitution=[?7006 --> 32]
Requesting specialization of genLtDec :: [Maybe (Ix 32)] ->> [[[Ix 32] ->> [Maybe (Ix 32)]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]]]
Requesting specialization of Nothing :: [Maybe (Ix 32)]
Requesting specialization of Just :: [[Ix 32] ->> [Maybe (Ix 32)]]
External specialize: genLtDec :: forall (m :: nat). [Maybe (Ix m)] ->> [[[Ix m] ->> [Maybe (Ix m)]] ->> [[Ix m] ->> [[Ix m] ->> [[Ix m] ->> [Maybe (Ix m)]]]]]  ~~>  genLtDec :: [Maybe (Ix 32)] ->> [[[Ix 32] ->> [Maybe (Ix 32)]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]]]
External specialize: bitsToWord :: forall (n :: nat). [Bit n] ->> [Bit 32]  ~~>  bitsToWord :: [Bit 8] ->> [Bit 32]
TopLevel specialize: padloop3 :: [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]]  ~~>  padloop3 :: [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]], generics=[], substitution=null
Requesting specialization of b185 :: [] >>= [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]]
Block specialize: b185 :: [] >>= [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]]  ~~>  b185 :: [] >>= [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]], generics=[], substitution=null
Requesting specialization of k95 :: {} [Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]
ClosureDefn specialize: k95 :: {} [Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]  ~~>  k95 :: {} [Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]], generics=[], substitution=null
Requesting specialization of b184 :: [Ix 32] >>= [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]
Block specialize: b184 :: [Ix 32] >>= [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]  ~~>  b184 :: [Ix 32] >>= [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]], generics=[], substitution=null
Requesting specialization of k94 :: {Ix 32} [Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
ClosureDefn specialize: k94 :: {Ix 32} [Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]  ~~>  k94 :: {Ix 32} [Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b183 :: [Bit 32, Ix 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
Block specialize: b183 :: [Bit 32, Ix 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]  ~~>  b183 :: [Bit 32, Ix 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k93 :: {Ix 32, Bit 32} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k93 :: {Ix 32, Bit 32} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]  ~~>  k93 :: {Ix 32, Bit 32} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b182 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Block specialize: b182 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32] >>= [[Ix 32] ->> [[] ->> [Unit]]]  ~~>  b182 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32] >>= [[Ix 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b181 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Block specialize: b181 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]  ~~>  b181 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k92 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [Ix 32] ->> [[] ->> [Unit]]
ClosureDefn specialize: k92 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [Ix 32] ->> [[] ->> [Unit]]  ~~>  k92 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [Ix 32] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b180 :: [Ix 32, Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Block specialize: b180 :: [Ix 32, Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]  ~~>  b180 :: [Ix 32, Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k91 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32, Ix 32} [] ->> [Unit]
ClosureDefn specialize: k91 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32, Ix 32} [] ->> [Unit]  ~~>  k91 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32, Ix 32} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b179 :: [Ix 32, Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b179 :: [Ix 32, Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]  ~~>  b179 :: [Ix 32, Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit], generics=[], substitution=null
Requesting specialization of ltInc :: [[Ix 32] ->> [[Ix 32] ->> [Maybe (Ix 32)]]]
Requesting specialization of b178 :: [] >>= [Unit]
Requesting specialization of b177 :: [Maybe (Ix 32), Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b177 :: [Maybe (Ix 32), Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]  ~~>  b177 :: [Maybe (Ix 32), Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit], generics=[], substitution=null
Requesting specialization of padloop3 :: [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]]
Requesting specialization of b176 :: [Unit] >>= [Unit]
Block specialize: b176 :: [Unit] >>= [Unit]  ~~>  b176 :: [Unit] >>= [Unit], generics=[], substitution=null
Block specialize: b178 :: [] >>= [Unit]  ~~>  b178 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of return :: [[Unit] ->> [[] ->> [Unit]]]
Requesting specialization of Unit :: [Unit]
Requesting specialization of b176 :: [Unit] >>= [Unit]
External specialize: get :: forall (t :: *). [Ref (Stored t)] ->> [[] ->> [t]]  ~~>  get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
TopLevel specialize: >>= :: forall (a :: *) (b :: *). [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  s5 :: [[[] ->> [Ref String]] ->> [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5895, ?5896], substitution=[?5895 --> Ref String, ?5896 --> Unit]
Requesting specialization of b85 :: [] >>= [[[] ->> [Ref String]] ->> [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Block specialize: b85 :: forall (a :: *) (b :: *). [] >>= [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  b852 :: [] >>= [[[] ->> [Ref String]] ->> [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5890, ?5891], substitution=[?5890 --> Ref String, ?5891 --> Unit]
Requesting specialization of k54 :: {} [[] ->> [Ref String]] ->> [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k54 :: forall (a :: *) (b :: *). {} [[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  k542 :: {} [[] ->> [Ref String]] ->> [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5888, ?5887], substitution=[?5888 --> Ref String, ?5887 --> Unit]
Requesting specialization of b84 :: [[] ->> [Ref String]] >>= [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Block specialize: b84 :: forall (a :: *) (b :: *). [[] ->> [a]] >>= [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  b842 :: [[] ->> [Ref String]] >>= [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5879, ?5880], substitution=[?5879 --> Ref String, ?5880 --> Unit]
Requesting specialization of k53 :: {[] ->> [Ref String]} [[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
ClosureDefn specialize: k53 :: forall (a :: *) (b :: *). {[] ->> [a]} [[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]  ~~>  k532 :: {[] ->> [Ref String]} [[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]], generics=[?5874, ?5877], substitution=[?5874 --> Ref String, ?5877 --> Unit]
Requesting specialization of b83 :: [[] ->> [Ref String], [Ref String] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Block specialize: b83 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [[] ->> [b]]  ~~>  b832 :: [[] ->> [Ref String], [Ref String] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]], generics=[?5868, ?5867], substitution=[?5868 --> Ref String, ?5867 --> Unit]
Requesting specialization of k52 :: {[Ref String] ->> [[] ->> [Unit]], [] ->> [Ref String]} [] ->> [Unit]
ClosureDefn specialize: k52 :: forall (a :: *) (b :: *). {[a] ->> [[] ->> [b]], [] ->> [a]} [] ->> [b]  ~~>  k522 :: {[Ref String] ->> [[] ->> [Unit]], [] ->> [Ref String]} [] ->> [Unit], generics=[?5860, ?5863], substitution=[?5860 --> Ref String, ?5863 --> Unit]
Requesting specialization of b82 :: [[] ->> [Ref String], [Ref String] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b82 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [b]  ~~>  b822 :: [[] ->> [Ref String], [Ref String] ->> [[] ->> [Unit]]] >>= [Unit], generics=[?5847, ?5848], substitution=[?5847 --> Ref String, ?5848 --> Unit]
TopLevel specialize: putMMap :: [[Ref MimgMMap] ->> [[] ->> [Unit]]]  ~~>  putMMap :: [[Ref MimgMMap] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b484 :: [] >>= [[Ref MimgMMap] ->> [[] ->> [Unit]]]
Block specialize: b484 :: [] >>= [[Ref MimgMMap] ->> [[] ->> [Unit]]]  ~~>  b484 :: [] >>= [[Ref MimgMMap] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k227 :: {} [Ref MimgMMap] ->> [[] ->> [Unit]]
ClosureDefn specialize: k227 :: {} [Ref MimgMMap] ->> [[] ->> [Unit]]  ~~>  k227 :: {} [Ref MimgMMap] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b483 :: [Ref MimgMMap] >>= [[] ->> [Unit]]
Block specialize: b483 :: [Ref MimgMMap] >>= [[] ->> [Unit]]  ~~>  b483 :: [Ref MimgMMap] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k226 :: {Ref MimgMMap} [] ->> [Unit]
ClosureDefn specialize: k226 :: {Ref MimgMMap} [] ->> [Unit]  ~~>  k226 :: {Ref MimgMMap} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b482 :: [Ref MimgMMap] >>= [Unit]
Block specialize: b482 :: [Ref MimgMMap] >>= [Unit]  ~~>  b482 :: [Ref MimgMMap] >>= [Unit], generics=[], substitution=null
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of >>= :: [[[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Requesting specialization of get :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
making new version of structure type MimgMMap
new version of StructType MimgMMap is MimgMMap
new version of primitive select_start :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
         old version was select_start :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
new version of primitive select_end :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
         old version was select_end :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
specialized version of primitive select_start :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
            original version was select_start :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
Requesting specialization of putHex :: [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of >>= :: [[[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Requesting specialization of get :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
specialized version of primitive select_end :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
            original version was select_end :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
Requesting specialization of putHex :: [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
External specialize: get :: forall (t :: *). [Ref (Stored t)] ->> [[] ->> [t]]  ~~>  get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
TopLevel specialize: >>= :: forall (a :: *) (b :: *). [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  s21 :: [[[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5895, ?5896], substitution=[?5895 --> Bit 32, ?5896 --> Unit]
Requesting specialization of b85 :: [] >>= [[[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Block specialize: b85 :: forall (a :: *) (b :: *). [] >>= [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  b853 :: [] >>= [[[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5890, ?5891], substitution=[?5890 --> Bit 32, ?5891 --> Unit]
Requesting specialization of k54 :: {} [[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k54 :: forall (a :: *) (b :: *). {} [[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  k543 :: {} [[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5888, ?5887], substitution=[?5888 --> Bit 32, ?5887 --> Unit]
Requesting specialization of b84 :: [[] ->> [Bit 32]] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Block specialize: b84 :: forall (a :: *) (b :: *). [[] ->> [a]] >>= [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  b843 :: [[] ->> [Bit 32]] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5879, ?5880], substitution=[?5879 --> Bit 32, ?5880 --> Unit]
Requesting specialization of k53 :: {[] ->> [Bit 32]} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
ClosureDefn specialize: k53 :: forall (a :: *) (b :: *). {[] ->> [a]} [[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]  ~~>  k533 :: {[] ->> [Bit 32]} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]], generics=[?5874, ?5877], substitution=[?5874 --> Bit 32, ?5877 --> Unit]
Requesting specialization of b83 :: [[] ->> [Bit 32], [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Block specialize: b83 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [[] ->> [b]]  ~~>  b833 :: [[] ->> [Bit 32], [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]], generics=[?5868, ?5867], substitution=[?5868 --> Bit 32, ?5867 --> Unit]
Requesting specialization of k52 :: {[Bit 32] ->> [[] ->> [Unit]], [] ->> [Bit 32]} [] ->> [Unit]
ClosureDefn specialize: k52 :: forall (a :: *) (b :: *). {[a] ->> [[] ->> [b]], [] ->> [a]} [] ->> [b]  ~~>  k523 :: {[Bit 32] ->> [[] ->> [Unit]], [] ->> [Bit 32]} [] ->> [Unit], generics=[?5860, ?5863], substitution=[?5860 --> Bit 32, ?5863 --> Unit]
Requesting specialization of b82 :: [[] ->> [Bit 32], [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b82 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [b]  ~~>  b823 :: [[] ->> [Bit 32], [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit], generics=[?5847, ?5848], substitution=[?5847 --> Bit 32, ?5848 --> Unit]
External specialize: nextMimgMMap :: [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]  ~~>  nextMimgMMap :: [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]
Requesting specialization of nextMimgMMap_imp :: [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
TopLevel specialize: nextMimgMMap_imp :: [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]  ~~>  nextMimgMMap_imp :: [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]], generics=[], substitution=null
Requesting specialization of b501 :: [] >>= [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
Block specialize: b501 :: [] >>= [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]  ~~>  b501 :: [] >>= [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]], generics=[], substitution=null
Requesting specialization of nextWordCursor :: [[Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]]
TopLevel specialize: nextWordCursor :: [[Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]]  ~~>  nextWordCursor :: [[Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]], generics=[], substitution=null
Requesting specialization of b495 :: [] >>= [[Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]]
Block specialize: b495 :: [] >>= [[Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]]  ~~>  b495 :: [] >>= [[Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]], generics=[], substitution=null
Requesting specialization of k232 :: {} [Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
ClosureDefn specialize: k232 :: {} [Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]  ~~>  k232 :: {} [Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]], generics=[], substitution=null
Requesting specialization of b494 :: [Bit 32] >>= [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
Block specialize: b494 :: [Bit 32] >>= [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]  ~~>  b494 :: [Bit 32] >>= [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]], generics=[], substitution=null
Requesting specialization of k231 :: {Bit 32} [WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]
ClosureDefn specialize: k231 :: {Bit 32} [WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]  ~~>  k231 :: {Bit 32} [WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)], generics=[], substitution=null
Requesting specialization of b493 :: [WordCursor, Bit 32] >>= [Maybe (Pair (Bit 32) WordCursor)]
Block specialize: b493 :: [WordCursor, Bit 32] >>= [Maybe (Pair (Bit 32) WordCursor)]  ~~>  b493 :: [WordCursor, Bit 32] >>= [Maybe (Pair (Bit 32) WordCursor)], generics=[], substitution=null
new version of BitdataType WordCursor is WordCursor
    orig: WordCursor :: {WordCursor.WordCursor} WordCursor
    new:  WordCursor :: {WordCursor.WordCursor} WordCursor
new version of primitive update_val :: [WordCursor.WordCursor, Bit 32] >>= [WordCursor.WordCursor]
         old version was update_val :: [WordCursor.WordCursor, Bit 32] >>= [WordCursor.WordCursor]
new version of primitive update_count :: [WordCursor.WordCursor, Bit 32] >>= [WordCursor.WordCursor]
         old version was update_count :: [WordCursor.WordCursor, Bit 32] >>= [WordCursor.WordCursor]
Requesting specialization of == :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Requesting specialization of b492 :: [] >>= [Maybe (Pair (Bit 32) WordCursor)]
Requesting specialization of b491 :: [WordCursor, Bit 32, Bit 32] >>= [Maybe (Pair (Bit 32) WordCursor)]
Block specialize: b491 :: [WordCursor, Bit 32, Bit 32] >>= [Maybe (Pair (Bit 32) WordCursor)]  ~~>  b491 :: [WordCursor, Bit 32, Bit 32] >>= [Maybe (Pair (Bit 32) WordCursor)], generics=[], substitution=null
Requesting specialization of Just :: [[Pair (Bit 32) WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
Requesting specialization of Pair :: [[Bit 32] ->> [[WordCursor] ->> [Pair (Bit 32) WordCursor]]]
Requesting specialization of + :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of - :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b490 :: [Maybe (Pair (Bit 32) WordCursor)] >>= [Maybe (Pair (Bit 32) WordCursor)]
Block specialize: b490 :: [Maybe (Pair (Bit 32) WordCursor)] >>= [Maybe (Pair (Bit 32) WordCursor)]  ~~>  b490 :: [Maybe (Pair (Bit 32) WordCursor)] >>= [Maybe (Pair (Bit 32) WordCursor)], generics=[], substitution=null
TopLevel specialize: Pair :: forall (a :: *) (b :: *). [[a] ->> [[b] ->> [Pair a b]]]  ~~>  Pair :: [[Bit 32] ->> [[WordCursor] ->> [Pair (Bit 32) WordCursor]]], generics=[?6001, ?6002], substitution=[?6001 --> Bit 32, ?6002 --> WordCursor]
Requesting specialization of b5 :: [] >>= [[Bit 32] ->> [[WordCursor] ->> [Pair (Bit 32) WordCursor]]]
Block specialize: b5 :: forall (a :: *) (b :: *). [] >>= [[a] ->> [[b] ->> [Pair a b]]]  ~~>  b5 :: [] >>= [[Bit 32] ->> [[WordCursor] ->> [Pair (Bit 32) WordCursor]]], generics=[?5996, ?5997], substitution=[?5996 --> Bit 32, ?5997 --> WordCursor]
Requesting specialization of k4 :: {} [Bit 32] ->> [[WordCursor] ->> [Pair (Bit 32) WordCursor]]
ClosureDefn specialize: k4 :: forall (a :: *) (b :: *). {} [a] ->> [[b] ->> [Pair a b]]  ~~>  k4 :: {} [Bit 32] ->> [[WordCursor] ->> [Pair (Bit 32) WordCursor]], generics=[?5994, ?5993], substitution=[?5994 --> Bit 32, ?5993 --> WordCursor]
Requesting specialization of b4 :: [Bit 32] >>= [[WordCursor] ->> [Pair (Bit 32) WordCursor]]
Block specialize: b4 :: forall (a :: *) (b :: *). [a] >>= [[b] ->> [Pair a b]]  ~~>  b4 :: [Bit 32] >>= [[WordCursor] ->> [Pair (Bit 32) WordCursor]], generics=[?5985, ?5986], substitution=[?5985 --> Bit 32, ?5986 --> WordCursor]
Requesting specialization of k3 :: {Bit 32} [WordCursor] ->> [Pair (Bit 32) WordCursor]
ClosureDefn specialize: k3 :: forall (a :: *) (b :: *). {a} [b] ->> [Pair a b]  ~~>  k3 :: {Bit 32} [WordCursor] ->> [Pair (Bit 32) WordCursor], generics=[?5977, ?5981], substitution=[?5977 --> Bit 32, ?5981 --> WordCursor]
Pair3 is a specialized DataType for Pair (Bit 32) WordCursor
TopLevel specialize: Just :: forall (a :: *). [[a] ->> [Maybe a]]  ~~>  s22 :: [[Pair (Bit 32) WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]], generics=[?5378], substitution=[?5378 --> Pair (Bit 32) WordCursor]
Requesting specialization of b6 :: [] >>= [[Pair (Bit 32) WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
Block specialize: b6 :: forall (a :: *). [] >>= [[a] ->> [Maybe a]]  ~~>  b63 :: [] >>= [[Pair (Bit 32) WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]], generics=[?5375], substitution=[?5375 --> Pair (Bit 32) WordCursor]
Requesting specialization of k5 :: {} [Pair (Bit 32) WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]
ClosureDefn specialize: k5 :: forall (a :: *). {} [a] ->> [Maybe a]  ~~>  k53 :: {} [Pair (Bit 32) WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)], generics=[?5373], substitution=[?5373 --> Pair (Bit 32) WordCursor]
Maybe4 is a specialized DataType for Maybe Pair3
Block specialize: b492 :: [] >>= [Maybe (Pair (Bit 32) WordCursor)]  ~~>  b492 :: [] >>= [Maybe (Pair (Bit 32) WordCursor)], generics=[], substitution=null
Requesting specialization of Nothing :: [Maybe (Pair (Bit 32) WordCursor)]
Requesting specialization of b490 :: [Maybe (Pair (Bit 32) WordCursor)] >>= [Maybe (Pair (Bit 32) WordCursor)]
TopLevel specialize: Nothing :: forall (a :: *). [Maybe a]  ~~>  s23 :: [Maybe (Pair (Bit 32) WordCursor)], generics=[?5369], substitution=[?5369 --> Pair (Bit 32) WordCursor]
TopLevel specialize: forallDisplay :: forall (a :: *) (b :: *). [[[a] ->> [Maybe (Pair b a)]] ->> [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]]  ~~>  s4 :: [[[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]]], generics=[?7923, ?7924], substitution=[?7923 --> MimgMMapCursor, ?7924 --> Ref MimgMMap]
Requesting specialization of b452 :: [] >>= [[[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]]]
Block specialize: b452 :: forall (a :: *) (b :: *). [] >>= [[[a] ->> [Maybe (Pair b a)]] ->> [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]]  ~~>  b452 :: [] >>= [[[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]]], generics=[?7918, ?7919], substitution=[?7918 --> MimgMMapCursor, ?7919 --> Ref MimgMMap]
Requesting specialization of k219 :: {} [[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]]
ClosureDefn specialize: k219 :: forall (a :: *) (b :: *). {} [[a] ->> [Maybe (Pair b a)]] ->> [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]  ~~>  k219 :: {} [[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]], generics=[?7912, ?7913], substitution=[?7912 --> MimgMMapCursor, ?7913 --> Ref MimgMMap]
Requesting specialization of b451 :: [[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] >>= [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]]
Block specialize: b451 :: forall (a :: *) (b :: *). [[a] ->> [Maybe (Pair b a)]] >>= [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]  ~~>  b451 :: [[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] >>= [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]], generics=[?7907, ?7908], substitution=[?7907 --> MimgMMapCursor, ?7908 --> Ref MimgMMap]
Requesting specialization of k218 :: {[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]} [[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]
ClosureDefn specialize: k218 :: forall (a :: *) (b :: *). {[a] ->> [Maybe (Pair b a)]} [[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]  ~~>  k218 :: {[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]} [[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]], generics=[?7900, ?7902], substitution=[?7900 --> MimgMMapCursor, ?7902 --> Ref MimgMMap]
Requesting specialization of b450 :: [[Ref MimgMMap] ->> [[] ->> [Unit]], [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] >>= [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]
Block specialize: b450 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [Unit]], [b] ->> [Maybe (Pair a b)]] >>= [[Ref String] ->> [[b] ->> [[] ->> [Unit]]]]  ~~>  b450 :: [[Ref MimgMMap] ->> [[] ->> [Unit]], [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] >>= [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]], generics=[?7895, ?7894], substitution=[?7895 --> Ref MimgMMap, ?7894 --> MimgMMapCursor]
Requesting specialization of k217 :: {[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Ref MimgMMap] ->> [[] ->> [Unit]]} [Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k217 :: forall (a :: *) (b :: *). {[a] ->> [Maybe (Pair b a)], [b] ->> [[] ->> [Unit]]} [Ref String] ->> [[a] ->> [[] ->> [Unit]]]  ~~>  k217 :: {[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Ref MimgMMap] ->> [[] ->> [Unit]]} [Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]], generics=[?7886, ?7887], substitution=[?7886 --> MimgMMapCursor, ?7887 --> Ref MimgMMap]
Requesting specialization of b449 :: [[Ref MimgMMap] ->> [[] ->> [Unit]], Ref String, [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] >>= [[MimgMMapCursor] ->> [[] ->> [Unit]]]
Block specialize: b449 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [Unit]], Ref String, [b] ->> [Maybe (Pair a b)]] >>= [[b] ->> [[] ->> [Unit]]]  ~~>  b449 :: [[Ref MimgMMap] ->> [[] ->> [Unit]], Ref String, [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] >>= [[MimgMMapCursor] ->> [[] ->> [Unit]]], generics=[?7880, ?7879], substitution=[?7880 --> Ref MimgMMap, ?7879 --> MimgMMapCursor]
Requesting specialization of k216 :: {[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]]} [MimgMMapCursor] ->> [[] ->> [Unit]]
ClosureDefn specialize: k216 :: forall (a :: *) (b :: *). {[a] ->> [Maybe (Pair b a)], Ref String, [b] ->> [[] ->> [Unit]]} [a] ->> [[] ->> [Unit]]  ~~>  k216 :: {[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]]} [MimgMMapCursor] ->> [[] ->> [Unit]], generics=[?7873, ?7872], substitution=[?7873 --> MimgMMapCursor, ?7872 --> Ref MimgMMap]
Requesting specialization of b448 :: [[Ref MimgMMap] ->> [[] ->> [Unit]], Ref String, [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], MimgMMapCursor] >>= [[] ->> [Unit]]
Block specialize: b448 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [Unit]], Ref String, [b] ->> [Maybe (Pair a b)], b] >>= [[] ->> [Unit]]  ~~>  b448 :: [[Ref MimgMMap] ->> [[] ->> [Unit]], Ref String, [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], MimgMMapCursor] >>= [[] ->> [Unit]], generics=[?7863, ?7859], substitution=[?7863 --> Ref MimgMMap, ?7859 --> MimgMMapCursor]
Requesting specialization of b447 :: [Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]]] >>= [[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]]
Requesting specialization of k212 :: {MimgMMapCursor, [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]} [] ->> [Unit]
ClosureDefn specialize: k212 :: forall (a :: *) (b :: *). {a, [Bit 32] ->> [[b] ->> [[] ->> [Bit 32]]], [a] ->> [Maybe (Pair b a)]} [] ->> [Unit]  ~~>  k212 :: {MimgMMapCursor, [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]} [] ->> [Unit], generics=[?7846, ?7851], substitution=[?7846 --> MimgMMapCursor, ?7851 --> Ref MimgMMap]
Requesting specialization of b443 :: [[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], MimgMMapCursor] >>= [Unit]
Block specialize: b443 :: forall (b :: *) (a :: *). [[b] ->> [Maybe (Pair a b)], [Bit 32] ->> [[a] ->> [[] ->> [Bit 32]]], b] >>= [Unit]  ~~>  b443 :: [[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], MimgMMapCursor] >>= [Unit], generics=[?7822, ?7823], substitution=[?7822 --> MimgMMapCursor, ?7823 --> Ref MimgMMap]
Requesting specialization of forallDoWith :: [[[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]]
Requesting specialization of return :: [[Unit] ->> [[] ->> [Unit]]]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: forallDoWith :: forall (b :: *) (a :: *) (s :: *). [[[b] ->> [Maybe (Pair a b)]] ->> [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]]  ~~>  forallDoWith :: [[[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]], generics=[?7814, ?7815, ?7816], substitution=[?7814 --> MimgMMapCursor, ?7815 --> Ref MimgMMap, ?7816 --> Bit 32]
Requesting specialization of b442 :: [] >>= [[[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]]
Block specialize: b442 :: forall (b :: *) (a :: *) (s :: *). [] >>= [[[b] ->> [Maybe (Pair a b)]] ->> [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]]  ~~>  b442 :: [] >>= [[[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]], generics=[?7729, ?7730, ?7731], substitution=[?7729 --> MimgMMapCursor, ?7730 --> Ref MimgMMap, ?7731 --> Bit 32]
Requesting specialization of k211 :: {} [[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]
ClosureDefn specialize: k211 :: forall (b :: *) (a :: *) (s :: *). {} [[b] ->> [Maybe (Pair a b)]] ->> [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]  ~~>  k211 :: {} [[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]], generics=[?7658, ?7659, ?7735], substitution=[?7658 --> MimgMMapCursor, ?7659 --> Ref MimgMMap, ?7735 --> Bit 32]
Requesting specialization of b441 :: [[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] >>= [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]
Block specialize: b441 :: forall (b :: *) (a :: *) (s :: *). [[b] ->> [Maybe (Pair a b)]] >>= [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]  ~~>  b441 :: [[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] >>= [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]], generics=[?7736, ?7737, ?7738], substitution=[?7736 --> MimgMMapCursor, ?7737 --> Ref MimgMMap, ?7738 --> Bit 32]
Requesting specialization of k210 :: {[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]} [[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]
ClosureDefn specialize: k210 :: forall (b :: *) (a :: *) (s :: *). {[b] ->> [Maybe (Pair a b)]} [[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]  ~~>  k210 :: {[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]} [[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]], generics=[?7740, ?7741, ?7670], substitution=[?7740 --> MimgMMapCursor, ?7741 --> Ref MimgMMap, ?7670 --> Bit 32]
Requesting specialization of b440 :: [[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]
Block specialize: b440 :: forall (b :: *) (a :: *) (s :: *). [[b] ->> [Maybe (Pair a b)], [s] ->> [[a] ->> [[] ->> [s]]]] >>= [[s] ->> [[b] ->> [[] ->> [s]]]]  ~~>  b440 :: [[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]], generics=[?7745, ?7744, ?7743], substitution=[?7745 --> MimgMMapCursor, ?7744 --> Ref MimgMMap, ?7743 --> Bit 32]
Requesting specialization of k209 :: {[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]} [Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]
ClosureDefn specialize: k209 :: forall (s :: *) (a :: *) (b :: *). {[s] ->> [[a] ->> [[] ->> [s]]], [b] ->> [Maybe (Pair a b)]} [s] ->> [[b] ->> [[] ->> [s]]]  ~~>  k209 :: {[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]} [Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]], generics=[?7747, ?7749, ?7748], substitution=[?7747 --> Bit 32, ?7749 --> Ref MimgMMap, ?7748 --> MimgMMapCursor]
Requesting specialization of b439 :: [Bit 32, [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]
Block specialize: b439 :: forall (s :: *) (b :: *) (a :: *). [s, [b] ->> [Maybe (Pair a b)], [s] ->> [[a] ->> [[] ->> [s]]]] >>= [[b] ->> [[] ->> [s]]]  ~~>  b439 :: [Bit 32, [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [[MimgMMapCursor] ->> [[] ->> [Bit 32]]], generics=[?7750, ?7752, ?7751], substitution=[?7750 --> Bit 32, ?7752 --> MimgMMapCursor, ?7751 --> Ref MimgMMap]
Requesting specialization of k208 :: {[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], Bit 32} [MimgMMapCursor] ->> [[] ->> [Bit 32]]
ClosureDefn specialize: k208 :: forall (s :: *) (a :: *) (b :: *). {[s] ->> [[a] ->> [[] ->> [s]]], [b] ->> [Maybe (Pair a b)], s} [b] ->> [[] ->> [s]]  ~~>  k208 :: {[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], Bit 32} [MimgMMapCursor] ->> [[] ->> [Bit 32]], generics=[?7755, ?7756, ?7696], substitution=[?7755 --> Bit 32, ?7756 --> Ref MimgMMap, ?7696 --> MimgMMapCursor]
Requesting specialization of b438 :: [MimgMMapCursor, Bit 32, [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [[] ->> [Bit 32]]
Block specialize: b438 :: forall (a :: *) (s :: *) (a0 :: *). [a, s, [a] ->> [Maybe (Pair a0 a)], [s] ->> [[a0] ->> [[] ->> [s]]]] >>= [[] ->> [s]]  ~~>  b438 :: [MimgMMapCursor, Bit 32, [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [[] ->> [Bit 32]], generics=[?7759, ?7757, ?7758], substitution=[?7759 --> MimgMMapCursor, ?7757 --> Bit 32, ?7758 --> Ref MimgMMap]
Requesting specialization of k207 :: {[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], Bit 32, MimgMMapCursor} [] ->> [Bit 32]
ClosureDefn specialize: k207 :: forall (s :: *) (a :: *) (b :: *). {[s] ->> [[a] ->> [[] ->> [s]]], [b] ->> [Maybe (Pair a b)], s, b} [] ->> [s]  ~~>  k207 :: {[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], Bit 32, MimgMMapCursor} [] ->> [Bit 32], generics=[?7762, ?7763, ?7707], substitution=[?7762 --> Bit 32, ?7763 --> Ref MimgMMap, ?7707 --> MimgMMapCursor]
Requesting specialization of b437 :: [MimgMMapCursor, Bit 32, [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [Bit 32]
Block specialize: b437 :: forall (a :: *) (s :: *) (a0 :: *). [a, s, [a] ->> [Maybe (Pair a0 a)], [s] ->> [[a0] ->> [[] ->> [s]]]] >>= [s]  ~~>  b437 :: [MimgMMapCursor, Bit 32, [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [Bit 32], generics=[?7712, ?7773, ?7771], substitution=[?7712 --> MimgMMapCursor, ?7773 --> Bit 32, ?7771 --> Ref MimgMMap]
Pair5 is a specialized DataType for Pair (Ref MimgMMap) MimgMMapCursor
Maybe6 is a specialized DataType for Maybe Pair5
Requesting specialization of b436 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b435 :: [Maybe (Pair (Ref MimgMMap) MimgMMapCursor), Bit 32, [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [Bit 32]
Block specialize: b435 :: forall (a :: *) (b :: *) (s :: *). [Maybe (Pair a b), s, [b] ->> [Maybe (Pair a b)], [s] ->> [[a] ->> [[] ->> [s]]]] >>= [s]  ~~>  b435 :: [Maybe (Pair (Ref MimgMMap) MimgMMapCursor), Bit 32, [MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [Bit 32], generics=[?7791, ?7804, ?7813], substitution=[?7791 --> Ref MimgMMap, ?7804 --> MimgMMapCursor, ?7813 --> Bit 32]
Requesting specialization of fst :: [[Pair (Ref MimgMMap) MimgMMapCursor] ->> [Ref MimgMMap]]
Requesting specialization of forallDoWith :: [[[MimgMMapCursor] ->> [Maybe (Pair (Ref MimgMMap) MimgMMapCursor)]] ->> [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]]
Requesting specialization of snd :: [[Pair (Ref MimgMMap) MimgMMapCursor] ->> [MimgMMapCursor]]
Requesting specialization of b434 :: [Bit 32] >>= [Bit 32]
Block specialize: b434 :: forall (s :: *). [s] >>= [s]  ~~>  b434 :: [Bit 32] >>= [Bit 32], generics=[?7642], substitution=[?7642 --> Bit 32]
TopLevel specialize: snd :: forall (a :: *) (b :: *). [[Pair a b] ->> [b]]  ~~>  snd :: [[Pair (Ref MimgMMap) MimgMMapCursor] ->> [MimgMMapCursor]], generics=[?6215, ?6218], substitution=[?6215 --> Ref MimgMMap, ?6218 --> MimgMMapCursor]
Requesting specialization of b81 :: [] >>= [[Pair (Ref MimgMMap) MimgMMapCursor] ->> [MimgMMapCursor]]
Block specialize: b81 :: forall (a :: *) (b :: *). [] >>= [[Pair a b] ->> [b]]  ~~>  b81 :: [] >>= [[Pair (Ref MimgMMap) MimgMMapCursor] ->> [MimgMMapCursor]], generics=[?6210, ?6213], substitution=[?6210 --> Ref MimgMMap, ?6213 --> MimgMMapCursor]
Requesting specialization of k51 :: {} [Pair (Ref MimgMMap) MimgMMapCursor] ->> [MimgMMapCursor]
ClosureDefn specialize: k51 :: forall (a :: *) (b :: *). {} [Pair a b] ->> [b]  ~~>  k51 :: {} [Pair (Ref MimgMMap) MimgMMapCursor] ->> [MimgMMapCursor], generics=[?6208, ?6207], substitution=[?6208 --> Ref MimgMMap, ?6207 --> MimgMMapCursor]
Requesting specialization of b80 :: [Pair (Ref MimgMMap) MimgMMapCursor] >>= [MimgMMapCursor]
Block specialize: b80 :: forall (a :: *) (b :: *). [Pair a b] >>= [b]  ~~>  b80 :: [Pair (Ref MimgMMap) MimgMMapCursor] >>= [MimgMMapCursor], generics=[?6202, ?6201], substitution=[?6202 --> Ref MimgMMap, ?6201 --> MimgMMapCursor]
Requesting specialization of b79 :: [Pair (Ref MimgMMap) MimgMMapCursor] >>= [MimgMMapCursor]
Block specialize: b79 :: forall (a :: *) (b :: *). [Pair a b] >>= [b]  ~~>  b79 :: [Pair (Ref MimgMMap) MimgMMapCursor] >>= [MimgMMapCursor], generics=[?6189, ?6198], substitution=[?6189 --> Ref MimgMMap, ?6198 --> MimgMMapCursor]
Requesting specialization of b78 :: [MimgMMapCursor] >>= [MimgMMapCursor]
Block specialize: b78 :: forall (a :: *). [a] >>= [a]  ~~>  b78 :: [MimgMMapCursor] >>= [MimgMMapCursor], generics=[?6187], substitution=[?6187 --> MimgMMapCursor]
TopLevel specialize: fst :: forall (a :: *) (b :: *). [[Pair a b] ->> [a]]  ~~>  fst :: [[Pair (Ref MimgMMap) MimgMMapCursor] ->> [Ref MimgMMap]], generics=[?6182, ?6185], substitution=[?6182 --> Ref MimgMMap, ?6185 --> MimgMMapCursor]
Requesting specialization of b77 :: [] >>= [[Pair (Ref MimgMMap) MimgMMapCursor] ->> [Ref MimgMMap]]
Block specialize: b77 :: forall (a :: *) (b :: *). [] >>= [[Pair a b] ->> [a]]  ~~>  b77 :: [] >>= [[Pair (Ref MimgMMap) MimgMMapCursor] ->> [Ref MimgMMap]], generics=[?6177, ?6180], substitution=[?6177 --> Ref MimgMMap, ?6180 --> MimgMMapCursor]
Requesting specialization of k50 :: {} [Pair (Ref MimgMMap) MimgMMapCursor] ->> [Ref MimgMMap]
ClosureDefn specialize: k50 :: forall (a :: *) (b :: *). {} [Pair a b] ->> [a]  ~~>  k50 :: {} [Pair (Ref MimgMMap) MimgMMapCursor] ->> [Ref MimgMMap], generics=[?6175, ?6174], substitution=[?6175 --> Ref MimgMMap, ?6174 --> MimgMMapCursor]
Requesting specialization of b76 :: [Pair (Ref MimgMMap) MimgMMapCursor] >>= [Ref MimgMMap]
Block specialize: b76 :: forall (a :: *) (b :: *). [Pair a b] >>= [a]  ~~>  b76 :: [Pair (Ref MimgMMap) MimgMMapCursor] >>= [Ref MimgMMap], generics=[?6169, ?6168], substitution=[?6169 --> Ref MimgMMap, ?6168 --> MimgMMapCursor]
Requesting specialization of b75 :: [Pair (Ref MimgMMap) MimgMMapCursor] >>= [Ref MimgMMap]
Block specialize: b75 :: forall (a :: *) (b :: *). [Pair a b] >>= [a]  ~~>  b75 :: [Pair (Ref MimgMMap) MimgMMapCursor] >>= [Ref MimgMMap], generics=[?6165, ?6162], substitution=[?6165 --> Ref MimgMMap, ?6162 --> MimgMMapCursor]
Requesting specialization of b74 :: [Ref MimgMMap] >>= [Ref MimgMMap]
Block specialize: b74 :: forall (a :: *). [a] >>= [a]  ~~>  b74 :: [Ref MimgMMap] >>= [Ref MimgMMap], generics=[?6154], substitution=[?6154 --> Ref MimgMMap]
Block specialize: b436 :: forall (s :: *). [s] >>= [s]  ~~>  b436 :: [Bit 32] >>= [Bit 32], generics=[?7652], substitution=[?7652 --> Bit 32]
Requesting specialization of return :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b434 :: [Bit 32] >>= [Bit 32]
TopLevel specialize: return :: forall (a :: *). [[a] ->> [[] ->> [a]]]  ~~>  s24 :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[?5420], substitution=[?5420 --> Bit 32]
Requesting specialization of primRet :: [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel specialize: primRet :: forall (a :: *). [[a] ->> [[] ->> [a]]]  ~~>  s25 :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[?5418], substitution=[?5418 --> Bit 32]
Requesting specialization of b10 :: [] >>= [[Bit 32] ->> [[] ->> [Bit 32]]]
Block specialize: b10 :: forall (a :: *). [] >>= [[a] ->> [[] ->> [a]]]  ~~>  b101 :: [] >>= [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[?5415], substitution=[?5415 --> Bit 32]
Requesting specialization of k8 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
ClosureDefn specialize: k8 :: forall (a :: *). {} [a] ->> [[] ->> [a]]  ~~>  k81 :: {} [Bit 32] ->> [[] ->> [Bit 32]], generics=[?5414], substitution=[?5414 --> Bit 32]
Requesting specialization of b9 :: [Bit 32] >>= [[] ->> [Bit 32]]
Block specialize: b9 :: forall (a :: *). [a] >>= [[] ->> [a]]  ~~>  b91 :: [Bit 32] >>= [[] ->> [Bit 32]], generics=[?5408], substitution=[?5408 --> Bit 32]
Requesting specialization of ret1 :: {Bit 32} [] ->> [Bit 32]
ClosureDefn specialize: ret1 :: forall (a :: *). {a} [] ->> [a]  ~~>  ret11 :: {Bit 32} [] ->> [Bit 32], generics=[?5404], substitution=[?5404 --> Bit 32]
Block specialize: b447 :: forall (a :: *). [Ref String, [a] ->> [[] ->> [Unit]]] >>= [[Bit 32] ->> [[a] ->> [[] ->> [Bit 32]]]]  ~~>  b447 :: [Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]]] >>= [[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]], generics=[?7639], substitution=[?7639 --> Ref MimgMMap]
Requesting specialization of k215 :: {[Ref MimgMMap] ->> [[] ->> [Unit]], Ref String} [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]
ClosureDefn specialize: k215 :: forall (a :: *). {[a] ->> [[] ->> [Unit]], Ref String} [Bit 32] ->> [[a] ->> [[] ->> [Bit 32]]]  ~~>  k215 :: {[Ref MimgMMap] ->> [[] ->> [Unit]], Ref String} [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], generics=[?7635], substitution=[?7635 --> Ref MimgMMap]
Requesting specialization of b446 :: [Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]], Bit 32] >>= [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]
Block specialize: b446 :: forall (a :: *). [Ref String, [a] ->> [[] ->> [Unit]], Bit 32] >>= [[a] ->> [[] ->> [Bit 32]]]  ~~>  b446 :: [Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]], Bit 32] >>= [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], generics=[?7628], substitution=[?7628 --> Ref MimgMMap]
Requesting specialization of k214 :: {Bit 32, [Ref MimgMMap] ->> [[] ->> [Unit]], Ref String} [Ref MimgMMap] ->> [[] ->> [Bit 32]]
ClosureDefn specialize: k214 :: forall (a :: *). {Bit 32, [a] ->> [[] ->> [Unit]], Ref String} [a] ->> [[] ->> [Bit 32]]  ~~>  k214 :: {Bit 32, [Ref MimgMMap] ->> [[] ->> [Unit]], Ref String} [Ref MimgMMap] ->> [[] ->> [Bit 32]], generics=[?7622], substitution=[?7622 --> Ref MimgMMap]
Requesting specialization of b445 :: [Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]], Ref MimgMMap, Bit 32] >>= [[] ->> [Bit 32]]
Block specialize: b445 :: forall (a :: *). [Ref String, [a] ->> [[] ->> [Unit]], a, Bit 32] >>= [[] ->> [Bit 32]]  ~~>  b445 :: [Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]], Ref MimgMMap, Bit 32] >>= [[] ->> [Bit 32]], generics=[?7612], substitution=[?7612 --> Ref MimgMMap]
Requesting specialization of k213 :: {Bit 32, Ref MimgMMap, [Ref MimgMMap] ->> [[] ->> [Unit]], Ref String} [] ->> [Bit 32]
ClosureDefn specialize: k213 :: forall (a :: *). {Bit 32, a, [a] ->> [[] ->> [Unit]], Ref String} [] ->> [Bit 32]  ~~>  k213 :: {Bit 32, Ref MimgMMap, [Ref MimgMMap] ->> [[] ->> [Unit]], Ref String} [] ->> [Bit 32], generics=[?7604], substitution=[?7604 --> Ref MimgMMap]
Requesting specialization of b444 :: [Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]], Ref MimgMMap, Bit 32] >>= [Bit 32]
Block specialize: b444 :: forall (a :: *). [Ref String, [a] ->> [[] ->> [Unit]], a, Bit 32] >>= [Bit 32]  ~~>  b444 :: [Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]], Ref MimgMMap, Bit 32] >>= [Bit 32], generics=[?7546], substitution=[?7546 --> Ref MimgMMap]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of putUnsigned :: [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of return :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of + :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel specialize: putUnsigned :: [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  putUnsigned :: [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b394 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Block specialize: b394 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  b394 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of hputUnsigned :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of putchar :: [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel specialize: hputUnsigned :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  hputUnsigned :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b207 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Block specialize: b207 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  b207 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of hputDigits :: [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Requesting specialization of nz10 :: [NZBit 32]
TopLevel specialize: nz10 :: forall (n :: nat). [NZBit n]  ~~>  nz10 :: [NZBit 32], generics=[?7537], substitution=[?7537 --> 32]
Requesting specialization of b138 :: [] >>= [NZBit 32]
Block specialize: b138 :: forall (n :: nat). [] >>= [NZBit n]  ~~>  b138 :: [] >>= [NZBit 32], generics=[?7533], substitution=[?7533 --> 32]
Requesting specialization of nz10u :: [Unit] ->> [NZBit 32]
Requesting specialization of Unit :: [Unit]
External specialize: nz10u :: forall (n :: nat). [Unit] ->> [NZBit n]  ~~>  nz10u :: [Unit] ->> [NZBit 32]
TopLevel specialize: mimgMMap :: [[Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]]  ~~>  mimgMMap :: [[Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]], generics=[], substitution=null
Requesting specialization of b499 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]]
Block specialize: b499 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]]  ~~>  b499 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]], generics=[], substitution=null
Requesting specialization of k234 :: {} [Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]
ClosureDefn specialize: k234 :: {} [Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]  ~~>  k234 :: {} [Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]], generics=[], substitution=null
Requesting specialization of b498 :: [Ref MimgBootData] >>= [[] ->> [MimgMMapCursor]]
Block specialize: b498 :: [Ref MimgBootData] >>= [[] ->> [MimgMMapCursor]]  ~~>  b498 :: [Ref MimgBootData] >>= [[] ->> [MimgMMapCursor]], generics=[], substitution=null
Requesting specialization of >>= :: [[[] ->> [Ref MimgMMapBlock]] ->> [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]]]
Requesting specialization of get :: [Ref (Stored (Ref MimgMMapBlock))] ->> [[] ->> [Ref MimgMMapBlock]]
specialized version of primitive select_mmap :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgMMapBlock))]
            original version was select_mmap :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgMMapBlock))]
Requesting specialization of mimgMMapCursor :: [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]
External specialize: mimgMMapCursor :: [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]  ~~>  mimgMMapCursor :: [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]
Requesting specialization of wordCursor :: [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
TopLevel specialize: wordCursor :: [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]  ~~>  wordCursor :: [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]], generics=[], substitution=null
Requesting specialization of b487 :: [] >>= [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
Block specialize: b487 :: [] >>= [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]  ~~>  b487 :: [] >>= [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]], generics=[], substitution=null
Requesting specialization of k229 :: {} [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]
ClosureDefn specialize: k229 :: {} [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]  ~~>  k229 :: {} [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]], generics=[], substitution=null
Requesting specialization of b486 :: [Ref (Stored (Bit 32))] >>= [[] ->> [WordCursor]]
Block specialize: b486 :: [Ref (Stored (Bit 32))] >>= [[] ->> [WordCursor]]  ~~>  b486 :: [Ref (Stored (Bit 32))] >>= [[] ->> [WordCursor]], generics=[], substitution=null
Requesting specialization of k228 :: {Ref (Stored (Bit 32))} [] ->> [WordCursor]
ClosureDefn specialize: k228 :: {Ref (Stored (Bit 32))} [] ->> [WordCursor]  ~~>  k228 :: {Ref (Stored (Bit 32))} [] ->> [WordCursor], generics=[], substitution=null
Requesting specialization of b485 :: [Ref (Stored (Bit 32))] >>= [WordCursor]
Block specialize: b485 :: [Ref (Stored (Bit 32))] >>= [WordCursor]  ~~>  b485 :: [Ref (Stored (Bit 32))] >>= [WordCursor], generics=[], substitution=null
Requesting specialization of get :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Requesting specialization of return :: [[WordCursor] ->> [[] ->> [WordCursor]]]
Requesting specialization of + :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of refToWord :: [Ref (Stored (Bit 32))] ->> [Bit 32]
External specialize: refToWord :: forall (a :: area). [Ref a] ->> [Bit 32]  ~~>  refToWord1 :: [Ref (Stored (Bit 32))] ->> [Bit 32]
Requesting specialization of refToWord_imp :: [[Bit 32] ->> [Bit 32]]
TopLevel specialize: return :: forall (a :: *). [[a] ->> [[] ->> [a]]]  ~~>  s27 :: [[WordCursor] ->> [[] ->> [WordCursor]]], generics=[?5420], substitution=[?5420 --> WordCursor]
Requesting specialization of primRet :: [[WordCursor] ->> [[] ->> [WordCursor]]]
TopLevel specialize: primRet :: forall (a :: *). [[a] ->> [[] ->> [a]]]  ~~>  s28 :: [[WordCursor] ->> [[] ->> [WordCursor]]], generics=[?5418], substitution=[?5418 --> WordCursor]
Requesting specialization of b10 :: [] >>= [[WordCursor] ->> [[] ->> [WordCursor]]]
Block specialize: b10 :: forall (a :: *). [] >>= [[a] ->> [[] ->> [a]]]  ~~>  b102 :: [] >>= [[WordCursor] ->> [[] ->> [WordCursor]]], generics=[?5415], substitution=[?5415 --> WordCursor]
Requesting specialization of k8 :: {} [WordCursor] ->> [[] ->> [WordCursor]]
ClosureDefn specialize: k8 :: forall (a :: *). {} [a] ->> [[] ->> [a]]  ~~>  k82 :: {} [WordCursor] ->> [[] ->> [WordCursor]], generics=[?5414], substitution=[?5414 --> WordCursor]
Requesting specialization of b9 :: [WordCursor] >>= [[] ->> [WordCursor]]
Block specialize: b9 :: forall (a :: *). [a] >>= [[] ->> [a]]  ~~>  b92 :: [WordCursor] >>= [[] ->> [WordCursor]], generics=[?5408], substitution=[?5408 --> WordCursor]
Requesting specialization of ret1 :: {WordCursor} [] ->> [WordCursor]
ClosureDefn specialize: ret1 :: forall (a :: *). {a} [] ->> [a]  ~~>  ret12 :: {WordCursor} [] ->> [WordCursor], generics=[?5404], substitution=[?5404 --> WordCursor]
External specialize: get :: forall (t :: *). [Ref (Stored t)] ->> [[] ->> [t]]  ~~>  get6 :: [Ref (Stored (Ref MimgMMapBlock))] ->> [[] ->> [Ref MimgMMapBlock]]
TopLevel specialize: >>= :: forall (a :: *) (b :: *). [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  s26 :: [[[] ->> [Ref MimgMMapBlock]] ->> [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]]], generics=[?5895, ?5896], substitution=[?5895 --> Ref MimgMMapBlock, ?5896 --> MimgMMapCursor]
Requesting specialization of b85 :: [] >>= [[[] ->> [Ref MimgMMapBlock]] ->> [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]]]
Block specialize: b85 :: forall (a :: *) (b :: *). [] >>= [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  b854 :: [] >>= [[[] ->> [Ref MimgMMapBlock]] ->> [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]]], generics=[?5890, ?5891], substitution=[?5890 --> Ref MimgMMapBlock, ?5891 --> MimgMMapCursor]
Requesting specialization of k54 :: {} [[] ->> [Ref MimgMMapBlock]] ->> [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]]
ClosureDefn specialize: k54 :: forall (a :: *) (b :: *). {} [[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  k544 :: {} [[] ->> [Ref MimgMMapBlock]] ->> [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]], generics=[?5888, ?5887], substitution=[?5888 --> Ref MimgMMapBlock, ?5887 --> MimgMMapCursor]
Requesting specialization of b84 :: [[] ->> [Ref MimgMMapBlock]] >>= [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]]
Block specialize: b84 :: forall (a :: *) (b :: *). [[] ->> [a]] >>= [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  b844 :: [[] ->> [Ref MimgMMapBlock]] >>= [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]], generics=[?5879, ?5880], substitution=[?5879 --> Ref MimgMMapBlock, ?5880 --> MimgMMapCursor]
Requesting specialization of k53 :: {[] ->> [Ref MimgMMapBlock]} [[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]
ClosureDefn specialize: k53 :: forall (a :: *) (b :: *). {[] ->> [a]} [[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]  ~~>  k534 :: {[] ->> [Ref MimgMMapBlock]} [[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]], generics=[?5874, ?5877], substitution=[?5874 --> Ref MimgMMapBlock, ?5877 --> MimgMMapCursor]
Requesting specialization of b83 :: [[] ->> [Ref MimgMMapBlock], [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] >>= [[] ->> [MimgMMapCursor]]
Block specialize: b83 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [[] ->> [b]]  ~~>  b834 :: [[] ->> [Ref MimgMMapBlock], [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] >>= [[] ->> [MimgMMapCursor]], generics=[?5868, ?5867], substitution=[?5868 --> Ref MimgMMapBlock, ?5867 --> MimgMMapCursor]
Requesting specialization of k52 :: {[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]], [] ->> [Ref MimgMMapBlock]} [] ->> [MimgMMapCursor]
ClosureDefn specialize: k52 :: forall (a :: *) (b :: *). {[a] ->> [[] ->> [b]], [] ->> [a]} [] ->> [b]  ~~>  k524 :: {[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]], [] ->> [Ref MimgMMapBlock]} [] ->> [MimgMMapCursor], generics=[?5860, ?5863], substitution=[?5860 --> Ref MimgMMapBlock, ?5863 --> MimgMMapCursor]
Requesting specialization of b82 :: [[] ->> [Ref MimgMMapBlock], [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] >>= [MimgMMapCursor]
Block specialize: b82 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [b]  ~~>  b824 :: [[] ->> [Ref MimgMMapBlock], [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] >>= [MimgMMapCursor], generics=[?5847, ?5848], substitution=[?5847 --> Ref MimgMMapBlock, ?5848 --> MimgMMapCursor]
TopLevel specialize: >>= :: forall (a :: *) (b :: *). [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  s3 :: [[[] ->> [MimgMMapCursor]] ->> [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5895, ?5896], substitution=[?5895 --> MimgMMapCursor, ?5896 --> Unit]
Requesting specialization of b85 :: [] >>= [[[] ->> [MimgMMapCursor]] ->> [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Block specialize: b85 :: forall (a :: *) (b :: *). [] >>= [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  b855 :: [] >>= [[[] ->> [MimgMMapCursor]] ->> [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5890, ?5891], substitution=[?5890 --> MimgMMapCursor, ?5891 --> Unit]
Requesting specialization of k54 :: {} [[] ->> [MimgMMapCursor]] ->> [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k54 :: forall (a :: *) (b :: *). {} [[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  k545 :: {} [[] ->> [MimgMMapCursor]] ->> [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5888, ?5887], substitution=[?5888 --> MimgMMapCursor, ?5887 --> Unit]
Requesting specialization of b84 :: [[] ->> [MimgMMapCursor]] >>= [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Block specialize: b84 :: forall (a :: *) (b :: *). [[] ->> [a]] >>= [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  b845 :: [[] ->> [MimgMMapCursor]] >>= [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5879, ?5880], substitution=[?5879 --> MimgMMapCursor, ?5880 --> Unit]
Requesting specialization of k53 :: {[] ->> [MimgMMapCursor]} [[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
ClosureDefn specialize: k53 :: forall (a :: *) (b :: *). {[] ->> [a]} [[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]  ~~>  k535 :: {[] ->> [MimgMMapCursor]} [[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]], generics=[?5874, ?5877], substitution=[?5874 --> MimgMMapCursor, ?5877 --> Unit]
Requesting specialization of b83 :: [[] ->> [MimgMMapCursor], [MimgMMapCursor] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Block specialize: b83 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [[] ->> [b]]  ~~>  b835 :: [[] ->> [MimgMMapCursor], [MimgMMapCursor] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]], generics=[?5868, ?5867], substitution=[?5868 --> MimgMMapCursor, ?5867 --> Unit]
Requesting specialization of k52 :: {[MimgMMapCursor] ->> [[] ->> [Unit]], [] ->> [MimgMMapCursor]} [] ->> [Unit]
ClosureDefn specialize: k52 :: forall (a :: *) (b :: *). {[a] ->> [[] ->> [b]], [] ->> [a]} [] ->> [b]  ~~>  k525 :: {[MimgMMapCursor] ->> [[] ->> [Unit]], [] ->> [MimgMMapCursor]} [] ->> [Unit], generics=[?5860, ?5863], substitution=[?5860 --> MimgMMapCursor, ?5863 --> Unit]
Requesting specialization of b82 :: [[] ->> [MimgMMapCursor], [MimgMMapCursor] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b82 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [b]  ~~>  b825 :: [[] ->> [MimgMMapCursor], [MimgMMapCursor] ->> [[] ->> [Unit]]] >>= [Unit], generics=[?5847, ?5848], substitution=[?5847 --> MimgMMapCursor, ?5848 --> Unit]
TopLevel specialize: putHeader :: [[Ref MimgHeader] ->> [[] ->> [Unit]]]  ~~>  putHeader :: [[Ref MimgHeader] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b481 :: [] >>= [[Ref MimgHeader] ->> [[] ->> [Unit]]]
Block specialize: b481 :: [] >>= [[Ref MimgHeader] ->> [[] ->> [Unit]]]  ~~>  b481 :: [] >>= [[Ref MimgHeader] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k225 :: {} [Ref MimgHeader] ->> [[] ->> [Unit]]
ClosureDefn specialize: k225 :: {} [Ref MimgHeader] ->> [[] ->> [Unit]]  ~~>  k225 :: {} [Ref MimgHeader] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b480 :: [Ref MimgHeader] >>= [[] ->> [Unit]]
Block specialize: b480 :: [Ref MimgHeader] >>= [[] ->> [Unit]]  ~~>  b480 :: [Ref MimgHeader] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k224 :: {Ref MimgHeader} [] ->> [Unit]
ClosureDefn specialize: k224 :: {Ref MimgHeader} [] ->> [Unit]  ~~>  k224 :: {Ref MimgHeader} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b479 :: [Ref MimgHeader] >>= [Unit]
Block specialize: b479 :: [Ref MimgHeader] >>= [Unit]  ~~>  b479 :: [Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of >>= :: [[[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Requesting specialization of get :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
making new version of structure type MimgHeader
new version of StructType MimgHeader is MimgHeader
new version of primitive select_start :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
         old version was select_start :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
new version of primitive select_end :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
         old version was select_end :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
new version of primitive select_entry :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
         old version was select_entry :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
specialized version of primitive select_start :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
            original version was select_start :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
Requesting specialization of putHex :: [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of >>= :: [[[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Requesting specialization of get :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
specialized version of primitive select_end :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
            original version was select_end :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
Requesting specialization of putHex :: [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of >>= :: [[[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Requesting specialization of get :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
specialized version of primitive select_entry :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
            original version was select_entry :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
Requesting specialization of putHex :: [[Bit 32] ->> [[] ->> [Unit]]]
External specialize: nextMimgHeader :: [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]  ~~>  nextMimgHeader :: [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]
Requesting specialization of nextMimgHeader_imp :: [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
TopLevel specialize: nextMimgHeader_imp :: [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]  ~~>  nextMimgHeader_imp :: [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]], generics=[], substitution=null
Requesting specialization of b500 :: [] >>= [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]
Block specialize: b500 :: [] >>= [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]  ~~>  b500 :: [] >>= [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]], generics=[], substitution=null
Requesting specialization of nextWordCursor :: [[Bit 32] ->> [[WordCursor] ->> [Maybe (Pair (Bit 32) WordCursor)]]]
TopLevel specialize: forallDisplay :: forall (a :: *) (b :: *). [[[a] ->> [Maybe (Pair b a)]] ->> [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]]  ~~>  forallDisplay :: [[[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]]], generics=[?7923, ?7924], substitution=[?7923 --> MimgHeaderCursor, ?7924 --> Ref MimgHeader]
Requesting specialization of b452 :: [] >>= [[[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]]]
Block specialize: b452 :: forall (a :: *) (b :: *). [] >>= [[[a] ->> [Maybe (Pair b a)]] ->> [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]]  ~~>  b4521 :: [] >>= [[[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]]], generics=[?7918, ?7919], substitution=[?7918 --> MimgHeaderCursor, ?7919 --> Ref MimgHeader]
Requesting specialization of k219 :: {} [[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]]
ClosureDefn specialize: k219 :: forall (a :: *) (b :: *). {} [[a] ->> [Maybe (Pair b a)]] ->> [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]  ~~>  k2191 :: {} [[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]], generics=[?7912, ?7913], substitution=[?7912 --> MimgHeaderCursor, ?7913 --> Ref MimgHeader]
Requesting specialization of b451 :: [[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] >>= [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]]
Block specialize: b451 :: forall (a :: *) (b :: *). [[a] ->> [Maybe (Pair b a)]] >>= [[[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]]  ~~>  b4511 :: [[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] >>= [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]], generics=[?7907, ?7908], substitution=[?7907 --> MimgHeaderCursor, ?7908 --> Ref MimgHeader]
Requesting specialization of k218 :: {[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]} [[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]
ClosureDefn specialize: k218 :: forall (a :: *) (b :: *). {[a] ->> [Maybe (Pair b a)]} [[b] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[a] ->> [[] ->> [Unit]]]]  ~~>  k2181 :: {[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]} [[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]], generics=[?7900, ?7902], substitution=[?7900 --> MimgHeaderCursor, ?7902 --> Ref MimgHeader]
Requesting specialization of b450 :: [[Ref MimgHeader] ->> [[] ->> [Unit]], [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] >>= [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]
Block specialize: b450 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [Unit]], [b] ->> [Maybe (Pair a b)]] >>= [[Ref String] ->> [[b] ->> [[] ->> [Unit]]]]  ~~>  b4501 :: [[Ref MimgHeader] ->> [[] ->> [Unit]], [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] >>= [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]], generics=[?7895, ?7894], substitution=[?7895 --> Ref MimgHeader, ?7894 --> MimgHeaderCursor]
Requesting specialization of k217 :: {[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Ref MimgHeader] ->> [[] ->> [Unit]]} [Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k217 :: forall (a :: *) (b :: *). {[a] ->> [Maybe (Pair b a)], [b] ->> [[] ->> [Unit]]} [Ref String] ->> [[a] ->> [[] ->> [Unit]]]  ~~>  k2171 :: {[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Ref MimgHeader] ->> [[] ->> [Unit]]} [Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]], generics=[?7886, ?7887], substitution=[?7886 --> MimgHeaderCursor, ?7887 --> Ref MimgHeader]
Requesting specialization of b449 :: [[Ref MimgHeader] ->> [[] ->> [Unit]], Ref String, [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] >>= [[MimgHeaderCursor] ->> [[] ->> [Unit]]]
Block specialize: b449 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [Unit]], Ref String, [b] ->> [Maybe (Pair a b)]] >>= [[b] ->> [[] ->> [Unit]]]  ~~>  b4491 :: [[Ref MimgHeader] ->> [[] ->> [Unit]], Ref String, [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] >>= [[MimgHeaderCursor] ->> [[] ->> [Unit]]], generics=[?7880, ?7879], substitution=[?7880 --> Ref MimgHeader, ?7879 --> MimgHeaderCursor]
Requesting specialization of k216 :: {[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]]} [MimgHeaderCursor] ->> [[] ->> [Unit]]
ClosureDefn specialize: k216 :: forall (a :: *) (b :: *). {[a] ->> [Maybe (Pair b a)], Ref String, [b] ->> [[] ->> [Unit]]} [a] ->> [[] ->> [Unit]]  ~~>  k2161 :: {[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]]} [MimgHeaderCursor] ->> [[] ->> [Unit]], generics=[?7873, ?7872], substitution=[?7873 --> MimgHeaderCursor, ?7872 --> Ref MimgHeader]
Requesting specialization of b448 :: [[Ref MimgHeader] ->> [[] ->> [Unit]], Ref String, [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], MimgHeaderCursor] >>= [[] ->> [Unit]]
Block specialize: b448 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [Unit]], Ref String, [b] ->> [Maybe (Pair a b)], b] >>= [[] ->> [Unit]]  ~~>  b4481 :: [[Ref MimgHeader] ->> [[] ->> [Unit]], Ref String, [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], MimgHeaderCursor] >>= [[] ->> [Unit]], generics=[?7863, ?7859], substitution=[?7863 --> Ref MimgHeader, ?7859 --> MimgHeaderCursor]
Requesting specialization of b447 :: [Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]]] >>= [[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]]
Requesting specialization of k212 :: {MimgHeaderCursor, [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]} [] ->> [Unit]
ClosureDefn specialize: k212 :: forall (a :: *) (b :: *). {a, [Bit 32] ->> [[b] ->> [[] ->> [Bit 32]]], [a] ->> [Maybe (Pair b a)]} [] ->> [Unit]  ~~>  k2121 :: {MimgHeaderCursor, [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]} [] ->> [Unit], generics=[?7846, ?7851], substitution=[?7846 --> MimgHeaderCursor, ?7851 --> Ref MimgHeader]
Requesting specialization of b443 :: [[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], MimgHeaderCursor] >>= [Unit]
Block specialize: b443 :: forall (b :: *) (a :: *). [[b] ->> [Maybe (Pair a b)], [Bit 32] ->> [[a] ->> [[] ->> [Bit 32]]], b] >>= [Unit]  ~~>  b4431 :: [[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], MimgHeaderCursor] >>= [Unit], generics=[?7822, ?7823], substitution=[?7822 --> MimgHeaderCursor, ?7823 --> Ref MimgHeader]
Requesting specialization of forallDoWith :: [[[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]]
Requesting specialization of return :: [[Unit] ->> [[] ->> [Unit]]]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: forallDoWith :: forall (b :: *) (a :: *) (s :: *). [[[b] ->> [Maybe (Pair a b)]] ->> [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]]  ~~>  s29 :: [[[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]], generics=[?7814, ?7815, ?7816], substitution=[?7814 --> MimgHeaderCursor, ?7815 --> Ref MimgHeader, ?7816 --> Bit 32]
Requesting specialization of b442 :: [] >>= [[[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]]
Block specialize: b442 :: forall (b :: *) (a :: *) (s :: *). [] >>= [[[b] ->> [Maybe (Pair a b)]] ->> [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]]  ~~>  b4421 :: [] >>= [[[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]], generics=[?7729, ?7730, ?7731], substitution=[?7729 --> MimgHeaderCursor, ?7730 --> Ref MimgHeader, ?7731 --> Bit 32]
Requesting specialization of k211 :: {} [[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]
ClosureDefn specialize: k211 :: forall (b :: *) (a :: *) (s :: *). {} [[b] ->> [Maybe (Pair a b)]] ->> [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]  ~~>  k2111 :: {} [[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]], generics=[?7658, ?7659, ?7735], substitution=[?7658 --> MimgHeaderCursor, ?7659 --> Ref MimgHeader, ?7735 --> Bit 32]
Requesting specialization of b441 :: [[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] >>= [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]
Block specialize: b441 :: forall (b :: *) (a :: *) (s :: *). [[b] ->> [Maybe (Pair a b)]] >>= [[[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]]  ~~>  b4411 :: [[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] >>= [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]], generics=[?7736, ?7737, ?7738], substitution=[?7736 --> MimgHeaderCursor, ?7737 --> Ref MimgHeader, ?7738 --> Bit 32]
Requesting specialization of k210 :: {[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]} [[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]
ClosureDefn specialize: k210 :: forall (b :: *) (a :: *) (s :: *). {[b] ->> [Maybe (Pair a b)]} [[s] ->> [[a] ->> [[] ->> [s]]]] ->> [[s] ->> [[b] ->> [[] ->> [s]]]]  ~~>  k2101 :: {[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]} [[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]], generics=[?7740, ?7741, ?7670], substitution=[?7740 --> MimgHeaderCursor, ?7741 --> Ref MimgHeader, ?7670 --> Bit 32]
Requesting specialization of b440 :: [[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]
Block specialize: b440 :: forall (b :: *) (a :: *) (s :: *). [[b] ->> [Maybe (Pair a b)], [s] ->> [[a] ->> [[] ->> [s]]]] >>= [[s] ->> [[b] ->> [[] ->> [s]]]]  ~~>  b4401 :: [[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]], generics=[?7745, ?7744, ?7743], substitution=[?7745 --> MimgHeaderCursor, ?7744 --> Ref MimgHeader, ?7743 --> Bit 32]
Requesting specialization of k209 :: {[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]} [Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]
ClosureDefn specialize: k209 :: forall (s :: *) (a :: *) (b :: *). {[s] ->> [[a] ->> [[] ->> [s]]], [b] ->> [Maybe (Pair a b)]} [s] ->> [[b] ->> [[] ->> [s]]]  ~~>  k2091 :: {[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]} [Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]], generics=[?7747, ?7749, ?7748], substitution=[?7747 --> Bit 32, ?7749 --> Ref MimgHeader, ?7748 --> MimgHeaderCursor]
Requesting specialization of b439 :: [Bit 32, [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]
Block specialize: b439 :: forall (s :: *) (b :: *) (a :: *). [s, [b] ->> [Maybe (Pair a b)], [s] ->> [[a] ->> [[] ->> [s]]]] >>= [[b] ->> [[] ->> [s]]]  ~~>  b4391 :: [Bit 32, [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]], generics=[?7750, ?7752, ?7751], substitution=[?7750 --> Bit 32, ?7752 --> MimgHeaderCursor, ?7751 --> Ref MimgHeader]
Requesting specialization of k208 :: {[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], Bit 32} [MimgHeaderCursor] ->> [[] ->> [Bit 32]]
ClosureDefn specialize: k208 :: forall (s :: *) (a :: *) (b :: *). {[s] ->> [[a] ->> [[] ->> [s]]], [b] ->> [Maybe (Pair a b)], s} [b] ->> [[] ->> [s]]  ~~>  k2081 :: {[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], Bit 32} [MimgHeaderCursor] ->> [[] ->> [Bit 32]], generics=[?7755, ?7756, ?7696], substitution=[?7755 --> Bit 32, ?7756 --> Ref MimgHeader, ?7696 --> MimgHeaderCursor]
Requesting specialization of b438 :: [MimgHeaderCursor, Bit 32, [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [[] ->> [Bit 32]]
Block specialize: b438 :: forall (a :: *) (s :: *) (a0 :: *). [a, s, [a] ->> [Maybe (Pair a0 a)], [s] ->> [[a0] ->> [[] ->> [s]]]] >>= [[] ->> [s]]  ~~>  b4381 :: [MimgHeaderCursor, Bit 32, [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [[] ->> [Bit 32]], generics=[?7759, ?7757, ?7758], substitution=[?7759 --> MimgHeaderCursor, ?7757 --> Bit 32, ?7758 --> Ref MimgHeader]
Requesting specialization of k207 :: {[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], Bit 32, MimgHeaderCursor} [] ->> [Bit 32]
ClosureDefn specialize: k207 :: forall (s :: *) (a :: *) (b :: *). {[s] ->> [[a] ->> [[] ->> [s]]], [b] ->> [Maybe (Pair a b)], s, b} [] ->> [s]  ~~>  k2071 :: {[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], Bit 32, MimgHeaderCursor} [] ->> [Bit 32], generics=[?7762, ?7763, ?7707], substitution=[?7762 --> Bit 32, ?7763 --> Ref MimgHeader, ?7707 --> MimgHeaderCursor]
Requesting specialization of b437 :: [MimgHeaderCursor, Bit 32, [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [Bit 32]
Block specialize: b437 :: forall (a :: *) (s :: *) (a0 :: *). [a, s, [a] ->> [Maybe (Pair a0 a)], [s] ->> [[a0] ->> [[] ->> [s]]]] >>= [s]  ~~>  b4371 :: [MimgHeaderCursor, Bit 32, [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [Bit 32], generics=[?7712, ?7773, ?7771], substitution=[?7712 --> MimgHeaderCursor, ?7773 --> Bit 32, ?7771 --> Ref MimgHeader]
Pair7 is a specialized DataType for Pair (Ref MimgHeader) MimgHeaderCursor
Maybe8 is a specialized DataType for Maybe Pair7
Requesting specialization of b436 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b435 :: [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor), Bit 32, [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [Bit 32]
Block specialize: b435 :: forall (a :: *) (b :: *) (s :: *). [Maybe (Pair a b), s, [b] ->> [Maybe (Pair a b)], [s] ->> [[a] ->> [[] ->> [s]]]] >>= [s]  ~~>  b4351 :: [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor), Bit 32, [MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [Bit 32], generics=[?7791, ?7804, ?7813], substitution=[?7791 --> Ref MimgHeader, ?7804 --> MimgHeaderCursor, ?7813 --> Bit 32]
Requesting specialization of fst :: [[Pair (Ref MimgHeader) MimgHeaderCursor] ->> [Ref MimgHeader]]
Requesting specialization of forallDoWith :: [[[MimgHeaderCursor] ->> [Maybe (Pair (Ref MimgHeader) MimgHeaderCursor)]] ->> [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]]
Requesting specialization of snd :: [[Pair (Ref MimgHeader) MimgHeaderCursor] ->> [MimgHeaderCursor]]
Requesting specialization of b434 :: [Bit 32] >>= [Bit 32]
TopLevel specialize: snd :: forall (a :: *) (b :: *). [[Pair a b] ->> [b]]  ~~>  s31 :: [[Pair (Ref MimgHeader) MimgHeaderCursor] ->> [MimgHeaderCursor]], generics=[?6215, ?6218], substitution=[?6215 --> Ref MimgHeader, ?6218 --> MimgHeaderCursor]
Requesting specialization of b81 :: [] >>= [[Pair (Ref MimgHeader) MimgHeaderCursor] ->> [MimgHeaderCursor]]
Block specialize: b81 :: forall (a :: *) (b :: *). [] >>= [[Pair a b] ->> [b]]  ~~>  b811 :: [] >>= [[Pair (Ref MimgHeader) MimgHeaderCursor] ->> [MimgHeaderCursor]], generics=[?6210, ?6213], substitution=[?6210 --> Ref MimgHeader, ?6213 --> MimgHeaderCursor]
Requesting specialization of k51 :: {} [Pair (Ref MimgHeader) MimgHeaderCursor] ->> [MimgHeaderCursor]
ClosureDefn specialize: k51 :: forall (a :: *) (b :: *). {} [Pair a b] ->> [b]  ~~>  k511 :: {} [Pair (Ref MimgHeader) MimgHeaderCursor] ->> [MimgHeaderCursor], generics=[?6208, ?6207], substitution=[?6208 --> Ref MimgHeader, ?6207 --> MimgHeaderCursor]
Requesting specialization of b80 :: [Pair (Ref MimgHeader) MimgHeaderCursor] >>= [MimgHeaderCursor]
Block specialize: b80 :: forall (a :: *) (b :: *). [Pair a b] >>= [b]  ~~>  b801 :: [Pair (Ref MimgHeader) MimgHeaderCursor] >>= [MimgHeaderCursor], generics=[?6202, ?6201], substitution=[?6202 --> Ref MimgHeader, ?6201 --> MimgHeaderCursor]
Requesting specialization of b79 :: [Pair (Ref MimgHeader) MimgHeaderCursor] >>= [MimgHeaderCursor]
Block specialize: b79 :: forall (a :: *) (b :: *). [Pair a b] >>= [b]  ~~>  b791 :: [Pair (Ref MimgHeader) MimgHeaderCursor] >>= [MimgHeaderCursor], generics=[?6189, ?6198], substitution=[?6189 --> Ref MimgHeader, ?6198 --> MimgHeaderCursor]
Requesting specialization of b78 :: [MimgHeaderCursor] >>= [MimgHeaderCursor]
Block specialize: b78 :: forall (a :: *). [a] >>= [a]  ~~>  b781 :: [MimgHeaderCursor] >>= [MimgHeaderCursor], generics=[?6187], substitution=[?6187 --> MimgHeaderCursor]
TopLevel specialize: fst :: forall (a :: *) (b :: *). [[Pair a b] ->> [a]]  ~~>  s30 :: [[Pair (Ref MimgHeader) MimgHeaderCursor] ->> [Ref MimgHeader]], generics=[?6182, ?6185], substitution=[?6182 --> Ref MimgHeader, ?6185 --> MimgHeaderCursor]
Requesting specialization of b77 :: [] >>= [[Pair (Ref MimgHeader) MimgHeaderCursor] ->> [Ref MimgHeader]]
Block specialize: b77 :: forall (a :: *) (b :: *). [] >>= [[Pair a b] ->> [a]]  ~~>  b771 :: [] >>= [[Pair (Ref MimgHeader) MimgHeaderCursor] ->> [Ref MimgHeader]], generics=[?6177, ?6180], substitution=[?6177 --> Ref MimgHeader, ?6180 --> MimgHeaderCursor]
Requesting specialization of k50 :: {} [Pair (Ref MimgHeader) MimgHeaderCursor] ->> [Ref MimgHeader]
ClosureDefn specialize: k50 :: forall (a :: *) (b :: *). {} [Pair a b] ->> [a]  ~~>  k501 :: {} [Pair (Ref MimgHeader) MimgHeaderCursor] ->> [Ref MimgHeader], generics=[?6175, ?6174], substitution=[?6175 --> Ref MimgHeader, ?6174 --> MimgHeaderCursor]
Requesting specialization of b76 :: [Pair (Ref MimgHeader) MimgHeaderCursor] >>= [Ref MimgHeader]
Block specialize: b76 :: forall (a :: *) (b :: *). [Pair a b] >>= [a]  ~~>  b761 :: [Pair (Ref MimgHeader) MimgHeaderCursor] >>= [Ref MimgHeader], generics=[?6169, ?6168], substitution=[?6169 --> Ref MimgHeader, ?6168 --> MimgHeaderCursor]
Requesting specialization of b75 :: [Pair (Ref MimgHeader) MimgHeaderCursor] >>= [Ref MimgHeader]
Block specialize: b75 :: forall (a :: *) (b :: *). [Pair a b] >>= [a]  ~~>  b751 :: [Pair (Ref MimgHeader) MimgHeaderCursor] >>= [Ref MimgHeader], generics=[?6165, ?6162], substitution=[?6165 --> Ref MimgHeader, ?6162 --> MimgHeaderCursor]
Requesting specialization of b74 :: [Ref MimgHeader] >>= [Ref MimgHeader]
Block specialize: b74 :: forall (a :: *). [a] >>= [a]  ~~>  b741 :: [Ref MimgHeader] >>= [Ref MimgHeader], generics=[?6154], substitution=[?6154 --> Ref MimgHeader]
Block specialize: b447 :: forall (a :: *). [Ref String, [a] ->> [[] ->> [Unit]]] >>= [[Bit 32] ->> [[a] ->> [[] ->> [Bit 32]]]]  ~~>  b4471 :: [Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]]] >>= [[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]], generics=[?7639], substitution=[?7639 --> Ref MimgHeader]
Requesting specialization of k215 :: {[Ref MimgHeader] ->> [[] ->> [Unit]], Ref String} [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]
ClosureDefn specialize: k215 :: forall (a :: *). {[a] ->> [[] ->> [Unit]], Ref String} [Bit 32] ->> [[a] ->> [[] ->> [Bit 32]]]  ~~>  k2151 :: {[Ref MimgHeader] ->> [[] ->> [Unit]], Ref String} [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], generics=[?7635], substitution=[?7635 --> Ref MimgHeader]
Requesting specialization of b446 :: [Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]], Bit 32] >>= [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]
Block specialize: b446 :: forall (a :: *). [Ref String, [a] ->> [[] ->> [Unit]], Bit 32] >>= [[a] ->> [[] ->> [Bit 32]]]  ~~>  b4461 :: [Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]], Bit 32] >>= [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], generics=[?7628], substitution=[?7628 --> Ref MimgHeader]
Requesting specialization of k214 :: {Bit 32, [Ref MimgHeader] ->> [[] ->> [Unit]], Ref String} [Ref MimgHeader] ->> [[] ->> [Bit 32]]
ClosureDefn specialize: k214 :: forall (a :: *). {Bit 32, [a] ->> [[] ->> [Unit]], Ref String} [a] ->> [[] ->> [Bit 32]]  ~~>  k2141 :: {Bit 32, [Ref MimgHeader] ->> [[] ->> [Unit]], Ref String} [Ref MimgHeader] ->> [[] ->> [Bit 32]], generics=[?7622], substitution=[?7622 --> Ref MimgHeader]
Requesting specialization of b445 :: [Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]], Ref MimgHeader, Bit 32] >>= [[] ->> [Bit 32]]
Block specialize: b445 :: forall (a :: *). [Ref String, [a] ->> [[] ->> [Unit]], a, Bit 32] >>= [[] ->> [Bit 32]]  ~~>  b4451 :: [Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]], Ref MimgHeader, Bit 32] >>= [[] ->> [Bit 32]], generics=[?7612], substitution=[?7612 --> Ref MimgHeader]
Requesting specialization of k213 :: {Bit 32, Ref MimgHeader, [Ref MimgHeader] ->> [[] ->> [Unit]], Ref String} [] ->> [Bit 32]
ClosureDefn specialize: k213 :: forall (a :: *). {Bit 32, a, [a] ->> [[] ->> [Unit]], Ref String} [] ->> [Bit 32]  ~~>  k2131 :: {Bit 32, Ref MimgHeader, [Ref MimgHeader] ->> [[] ->> [Unit]], Ref String} [] ->> [Bit 32], generics=[?7604], substitution=[?7604 --> Ref MimgHeader]
Requesting specialization of b444 :: [Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]], Ref MimgHeader, Bit 32] >>= [Bit 32]
Block specialize: b444 :: forall (a :: *). [Ref String, [a] ->> [[] ->> [Unit]], a, Bit 32] >>= [Bit 32]  ~~>  b4441 :: [Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]], Ref MimgHeader, Bit 32] >>= [Bit 32], generics=[?7546], substitution=[?7546 --> Ref MimgHeader]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of putUnsigned :: [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of puts :: [[Ref String] ->> [[] ->> [Unit]]]
Requesting specialization of return :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of + :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel specialize: mimgHeaders :: [[Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]]  ~~>  mimgHeaders :: [[Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]], generics=[], substitution=null
Requesting specialization of b497 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]]
Block specialize: b497 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]]  ~~>  b497 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]], generics=[], substitution=null
Requesting specialization of k233 :: {} [Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]
ClosureDefn specialize: k233 :: {} [Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]  ~~>  k233 :: {} [Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]], generics=[], substitution=null
Requesting specialization of b496 :: [Ref MimgBootData] >>= [[] ->> [MimgHeaderCursor]]
Block specialize: b496 :: [Ref MimgBootData] >>= [[] ->> [MimgHeaderCursor]]  ~~>  b496 :: [Ref MimgBootData] >>= [[] ->> [MimgHeaderCursor]], generics=[], substitution=null
Requesting specialization of >>= :: [[[] ->> [Ref MimgHeaderBlock]] ->> [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]]]
Requesting specialization of get :: [Ref (Stored (Ref MimgHeaderBlock))] ->> [[] ->> [Ref MimgHeaderBlock]]
specialized version of primitive select_headers :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgHeaderBlock))]
            original version was select_headers :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgHeaderBlock))]
Requesting specialization of mimgHeaderCursor :: [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]
External specialize: mimgHeaderCursor :: [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]  ~~>  mimgHeaderCursor :: [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]
Requesting specialization of wordCursor :: [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
External specialize: get :: forall (t :: *). [Ref (Stored t)] ->> [[] ->> [t]]  ~~>  get7 :: [Ref (Stored (Ref MimgHeaderBlock))] ->> [[] ->> [Ref MimgHeaderBlock]]
TopLevel specialize: >>= :: forall (a :: *) (b :: *). [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  s32 :: [[[] ->> [Ref MimgHeaderBlock]] ->> [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]]], generics=[?5895, ?5896], substitution=[?5895 --> Ref MimgHeaderBlock, ?5896 --> MimgHeaderCursor]
Requesting specialization of b85 :: [] >>= [[[] ->> [Ref MimgHeaderBlock]] ->> [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]]]
Block specialize: b85 :: forall (a :: *) (b :: *). [] >>= [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  b856 :: [] >>= [[[] ->> [Ref MimgHeaderBlock]] ->> [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]]], generics=[?5890, ?5891], substitution=[?5890 --> Ref MimgHeaderBlock, ?5891 --> MimgHeaderCursor]
Requesting specialization of k54 :: {} [[] ->> [Ref MimgHeaderBlock]] ->> [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]]
ClosureDefn specialize: k54 :: forall (a :: *) (b :: *). {} [[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  k546 :: {} [[] ->> [Ref MimgHeaderBlock]] ->> [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]], generics=[?5888, ?5887], substitution=[?5888 --> Ref MimgHeaderBlock, ?5887 --> MimgHeaderCursor]
Requesting specialization of b84 :: [[] ->> [Ref MimgHeaderBlock]] >>= [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]]
Block specialize: b84 :: forall (a :: *) (b :: *). [[] ->> [a]] >>= [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  b846 :: [[] ->> [Ref MimgHeaderBlock]] >>= [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]], generics=[?5879, ?5880], substitution=[?5879 --> Ref MimgHeaderBlock, ?5880 --> MimgHeaderCursor]
Requesting specialization of k53 :: {[] ->> [Ref MimgHeaderBlock]} [[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]
ClosureDefn specialize: k53 :: forall (a :: *) (b :: *). {[] ->> [a]} [[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]  ~~>  k536 :: {[] ->> [Ref MimgHeaderBlock]} [[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]], generics=[?5874, ?5877], substitution=[?5874 --> Ref MimgHeaderBlock, ?5877 --> MimgHeaderCursor]
Requesting specialization of b83 :: [[] ->> [Ref MimgHeaderBlock], [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] >>= [[] ->> [MimgHeaderCursor]]
Block specialize: b83 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [[] ->> [b]]  ~~>  b836 :: [[] ->> [Ref MimgHeaderBlock], [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] >>= [[] ->> [MimgHeaderCursor]], generics=[?5868, ?5867], substitution=[?5868 --> Ref MimgHeaderBlock, ?5867 --> MimgHeaderCursor]
Requesting specialization of k52 :: {[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]], [] ->> [Ref MimgHeaderBlock]} [] ->> [MimgHeaderCursor]
ClosureDefn specialize: k52 :: forall (a :: *) (b :: *). {[a] ->> [[] ->> [b]], [] ->> [a]} [] ->> [b]  ~~>  k526 :: {[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]], [] ->> [Ref MimgHeaderBlock]} [] ->> [MimgHeaderCursor], generics=[?5860, ?5863], substitution=[?5860 --> Ref MimgHeaderBlock, ?5863 --> MimgHeaderCursor]
Requesting specialization of b82 :: [[] ->> [Ref MimgHeaderBlock], [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] >>= [MimgHeaderCursor]
Block specialize: b82 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [b]  ~~>  b826 :: [[] ->> [Ref MimgHeaderBlock], [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] >>= [MimgHeaderCursor], generics=[?5847, ?5848], substitution=[?5847 --> Ref MimgHeaderBlock, ?5848 --> MimgHeaderCursor]
TopLevel specialize: >>= :: forall (a :: *) (b :: *). [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  >>= :: [[[] ->> [MimgHeaderCursor]] ->> [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5895, ?5896], substitution=[?5895 --> MimgHeaderCursor, ?5896 --> Unit]
Requesting specialization of b85 :: [] >>= [[[] ->> [MimgHeaderCursor]] ->> [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Block specialize: b85 :: forall (a :: *) (b :: *). [] >>= [[[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]]  ~~>  b857 :: [] >>= [[[] ->> [MimgHeaderCursor]] ->> [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5890, ?5891], substitution=[?5890 --> MimgHeaderCursor, ?5891 --> Unit]
Requesting specialization of k54 :: {} [[] ->> [MimgHeaderCursor]] ->> [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k54 :: forall (a :: *) (b :: *). {} [[] ->> [a]] ->> [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  k547 :: {} [[] ->> [MimgHeaderCursor]] ->> [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5888, ?5887], substitution=[?5888 --> MimgHeaderCursor, ?5887 --> Unit]
Requesting specialization of b84 :: [[] ->> [MimgHeaderCursor]] >>= [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Block specialize: b84 :: forall (a :: *) (b :: *). [[] ->> [a]] >>= [[[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]]  ~~>  b847 :: [[] ->> [MimgHeaderCursor]] >>= [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5879, ?5880], substitution=[?5879 --> MimgHeaderCursor, ?5880 --> Unit]
Requesting specialization of k53 :: {[] ->> [MimgHeaderCursor]} [[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
ClosureDefn specialize: k53 :: forall (a :: *) (b :: *). {[] ->> [a]} [[a] ->> [[] ->> [b]]] ->> [[] ->> [b]]  ~~>  k537 :: {[] ->> [MimgHeaderCursor]} [[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]], generics=[?5874, ?5877], substitution=[?5874 --> MimgHeaderCursor, ?5877 --> Unit]
Requesting specialization of b83 :: [[] ->> [MimgHeaderCursor], [MimgHeaderCursor] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Block specialize: b83 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [[] ->> [b]]  ~~>  b837 :: [[] ->> [MimgHeaderCursor], [MimgHeaderCursor] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]], generics=[?5868, ?5867], substitution=[?5868 --> MimgHeaderCursor, ?5867 --> Unit]
Requesting specialization of k52 :: {[MimgHeaderCursor] ->> [[] ->> [Unit]], [] ->> [MimgHeaderCursor]} [] ->> [Unit]
ClosureDefn specialize: k52 :: forall (a :: *) (b :: *). {[a] ->> [[] ->> [b]], [] ->> [a]} [] ->> [b]  ~~>  k527 :: {[MimgHeaderCursor] ->> [[] ->> [Unit]], [] ->> [MimgHeaderCursor]} [] ->> [Unit], generics=[?5860, ?5863], substitution=[?5860 --> MimgHeaderCursor, ?5863 --> Unit]
Requesting specialization of b82 :: [[] ->> [MimgHeaderCursor], [MimgHeaderCursor] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b82 :: forall (a :: *) (b :: *). [[] ->> [a], [a] ->> [[] ->> [b]]] >>= [b]  ~~>  b827 :: [[] ->> [MimgHeaderCursor], [MimgHeaderCursor] ->> [[] ->> [Unit]]] >>= [Unit], generics=[?5847, ?5848], substitution=[?5847 --> MimgHeaderCursor, ?5848 --> Unit]
TopLevel specialize: puts :: [[Ref String] ->> [[] ->> [Unit]]]  ~~>  puts :: [[Ref String] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b393 :: [] >>= [[Ref String] ->> [[] ->> [Unit]]]
Block specialize: b393 :: [] >>= [[Ref String] ->> [[] ->> [Unit]]]  ~~>  b393 :: [] >>= [[Ref String] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of hputs :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]]
Requesting specialization of putchar :: [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel specialize: hputs :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]]  ~~>  hputs :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of b206 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]]
Block specialize: b206 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]]  ~~>  b206 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k104 :: {} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k104 :: {} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]  ~~>  k104 :: {} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b205 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ref String] ->> [[] ->> [Unit]]]
Block specialize: b205 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ref String] ->> [[] ->> [Unit]]]  ~~>  b205 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ref String] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k103 :: {[Bit 32] ->> [[] ->> [Unit]]} [Ref String] ->> [[] ->> [Unit]]
ClosureDefn specialize: k103 :: {[Bit 32] ->> [[] ->> [Unit]]} [Ref String] ->> [[] ->> [Unit]]  ~~>  k103 :: {[Bit 32] ->> [[] ->> [Unit]]} [Ref String] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b204 :: [Ref String, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Block specialize: b204 :: [Ref String, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]  ~~>  b204 :: [Ref String, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k102 :: {[Bit 32] ->> [[] ->> [Unit]], Ref String} [] ->> [Unit]
ClosureDefn specialize: k102 :: {[Bit 32] ->> [[] ->> [Unit]], Ref String} [] ->> [Unit]  ~~>  k102 :: {[Bit 32] ->> [[] ->> [Unit]], Ref String} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b203 :: [Ref String, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b203 :: [Ref String, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]  ~~>  b203 :: [Ref String, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Ref String))]]
Pair9 is a specialized DataType for Pair (Bit 32) (Ref String)
Maybe10 is a specialized DataType for Maybe Pair9
Requesting specialization of b202 :: [] >>= [Unit]
Requesting specialization of b201 :: [Maybe (Pair (Bit 32) (Ref String)), [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b201 :: [Maybe (Pair (Bit 32) (Ref String)), [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]  ~~>  b201 :: [Maybe (Pair (Bit 32) (Ref String)), [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit], generics=[], substitution=null
Requesting specialization of fst :: [[Pair (Bit 32) (Ref String)] ->> [Bit 32]]
Requesting specialization of hputs :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]]
Requesting specialization of snd :: [[Pair (Bit 32) (Ref String)] ->> [Ref String]]
Requesting specialization of b200 :: [Unit] >>= [Unit]
Block specialize: b200 :: [Unit] >>= [Unit]  ~~>  b200 :: [Unit] >>= [Unit], generics=[], substitution=null
TopLevel specialize: snd :: forall (a :: *) (b :: *). [[Pair a b] ->> [b]]  ~~>  s34 :: [[Pair (Bit 32) (Ref String)] ->> [Ref String]], generics=[?6215, ?6218], substitution=[?6215 --> Bit 32, ?6218 --> Ref String]
Requesting specialization of b81 :: [] >>= [[Pair (Bit 32) (Ref String)] ->> [Ref String]]
Block specialize: b81 :: forall (a :: *) (b :: *). [] >>= [[Pair a b] ->> [b]]  ~~>  b812 :: [] >>= [[Pair (Bit 32) (Ref String)] ->> [Ref String]], generics=[?6210, ?6213], substitution=[?6210 --> Bit 32, ?6213 --> Ref String]
Requesting specialization of k51 :: {} [Pair (Bit 32) (Ref String)] ->> [Ref String]
ClosureDefn specialize: k51 :: forall (a :: *) (b :: *). {} [Pair a b] ->> [b]  ~~>  k512 :: {} [Pair (Bit 32) (Ref String)] ->> [Ref String], generics=[?6208, ?6207], substitution=[?6208 --> Bit 32, ?6207 --> Ref String]
Requesting specialization of b80 :: [Pair (Bit 32) (Ref String)] >>= [Ref String]
Block specialize: b80 :: forall (a :: *) (b :: *). [Pair a b] >>= [b]  ~~>  b802 :: [Pair (Bit 32) (Ref String)] >>= [Ref String], generics=[?6202, ?6201], substitution=[?6202 --> Bit 32, ?6201 --> Ref String]
Requesting specialization of b79 :: [Pair (Bit 32) (Ref String)] >>= [Ref String]
Block specialize: b79 :: forall (a :: *) (b :: *). [Pair a b] >>= [b]  ~~>  b792 :: [Pair (Bit 32) (Ref String)] >>= [Ref String], generics=[?6189, ?6198], substitution=[?6189 --> Bit 32, ?6198 --> Ref String]
Requesting specialization of b78 :: [Ref String] >>= [Ref String]
Block specialize: b78 :: forall (a :: *). [a] >>= [a]  ~~>  b782 :: [Ref String] >>= [Ref String], generics=[?6187], substitution=[?6187 --> Ref String]
TopLevel specialize: fst :: forall (a :: *) (b :: *). [[Pair a b] ->> [a]]  ~~>  s33 :: [[Pair (Bit 32) (Ref String)] ->> [Bit 32]], generics=[?6182, ?6185], substitution=[?6182 --> Bit 32, ?6185 --> Ref String]
Requesting specialization of b77 :: [] >>= [[Pair (Bit 32) (Ref String)] ->> [Bit 32]]
Block specialize: b77 :: forall (a :: *) (b :: *). [] >>= [[Pair a b] ->> [a]]  ~~>  b772 :: [] >>= [[Pair (Bit 32) (Ref String)] ->> [Bit 32]], generics=[?6177, ?6180], substitution=[?6177 --> Bit 32, ?6180 --> Ref String]
Requesting specialization of k50 :: {} [Pair (Bit 32) (Ref String)] ->> [Bit 32]
ClosureDefn specialize: k50 :: forall (a :: *) (b :: *). {} [Pair a b] ->> [a]  ~~>  k502 :: {} [Pair (Bit 32) (Ref String)] ->> [Bit 32], generics=[?6175, ?6174], substitution=[?6175 --> Bit 32, ?6174 --> Ref String]
Requesting specialization of b76 :: [Pair (Bit 32) (Ref String)] >>= [Bit 32]
Block specialize: b76 :: forall (a :: *) (b :: *). [Pair a b] >>= [a]  ~~>  b762 :: [Pair (Bit 32) (Ref String)] >>= [Bit 32], generics=[?6169, ?6168], substitution=[?6169 --> Bit 32, ?6168 --> Ref String]
Requesting specialization of b75 :: [Pair (Bit 32) (Ref String)] >>= [Bit 32]
Block specialize: b75 :: forall (a :: *) (b :: *). [Pair a b] >>= [a]  ~~>  b752 :: [Pair (Bit 32) (Ref String)] >>= [Bit 32], generics=[?6165, ?6162], substitution=[?6165 --> Bit 32, ?6162 --> Ref String]
Requesting specialization of b74 :: [Bit 32] >>= [Bit 32]
Block specialize: b74 :: forall (a :: *). [a] >>= [a]  ~~>  b742 :: [Bit 32] >>= [Bit 32], generics=[?6154], substitution=[?6154 --> Bit 32]
Block specialize: b202 :: [] >>= [Unit]  ~~>  b202 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of return :: [[Unit] ->> [[] ->> [Unit]]]
Requesting specialization of Unit :: [Unit]
Requesting specialization of b200 :: [Unit] >>= [Unit]
External specialize: nextChar :: [Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Ref String))]]  ~~>  nextChar :: [Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Ref String))]]
Requesting specialization of nextCharImp :: [[Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]]
TopLevel specialize: nextCharImp :: [[Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]]  ~~>  nextCharImp :: [[Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]], generics=[], substitution=null
Requesting specialization of b127 :: [] >>= [[Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]]
Block specialize: b127 :: [] >>= [[Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]]  ~~>  b127 :: [] >>= [[Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]], generics=[], substitution=null
Requesting specialization of k76 :: {} [Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]
ClosureDefn specialize: k76 :: {} [Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]  ~~>  k76 :: {} [Ref String] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]], generics=[], substitution=null
Requesting specialization of b126 :: [Ref String] >>= [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]
Block specialize: b126 :: [Ref String] >>= [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]  ~~>  b126 :: [Ref String] >>= [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]], generics=[], substitution=null
Requesting specialization of k75 :: {Ref String} [] ->> [Maybe (Pair (Bit 32) (Bit 32))]
ClosureDefn specialize: k75 :: {Ref String} [] ->> [Maybe (Pair (Bit 32) (Bit 32))]  ~~>  k75 :: {Ref String} [] ->> [Maybe (Pair (Bit 32) (Bit 32))], generics=[], substitution=null
Requesting specialization of b125 :: [Ref String] >>= [Maybe (Pair (Bit 32) (Bit 32))]
Block specialize: b125 :: [Ref String] >>= [Maybe (Pair (Bit 32) (Bit 32))]  ~~>  b125 :: [Ref String] >>= [Maybe (Pair (Bit 32) (Bit 32))], generics=[], substitution=null
Requesting specialization of loadChar :: [Ref String] ->> [[] ->> [Bit 32]]
Requesting specialization of == :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Requesting specialization of b124 :: [] >>= [Maybe (Pair (Bit 32) (Bit 32))]
Requesting specialization of b123 :: [Bit 32, Ref String] >>= [Maybe (Pair (Bit 32) (Bit 32))]
Block specialize: b123 :: [Bit 32, Ref String] >>= [Maybe (Pair (Bit 32) (Bit 32))]  ~~>  b123 :: [Bit 32, Ref String] >>= [Maybe (Pair (Bit 32) (Bit 32))], generics=[], substitution=null
Requesting specialization of return :: [[Maybe (Pair (Bit 32) (Bit 32))] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]]
Requesting specialization of Just :: [[Pair (Bit 32) (Bit 32)] ->> [Maybe (Pair (Bit 32) (Bit 32))]]
Requesting specialization of Pair :: [[Bit 32] ->> [[Bit 32] ->> [Pair (Bit 32) (Bit 32)]]]
Requesting specialization of + :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of refToWord :: [Ref String] ->> [Bit 32]
Requesting specialization of b122 :: [Maybe (Pair (Bit 32) (Bit 32))] >>= [Maybe (Pair (Bit 32) (Bit 32))]
Block specialize: b122 :: [Maybe (Pair (Bit 32) (Bit 32))] >>= [Maybe (Pair (Bit 32) (Bit 32))]  ~~>  b122 :: [Maybe (Pair (Bit 32) (Bit 32))] >>= [Maybe (Pair (Bit 32) (Bit 32))], generics=[], substitution=null
External specialize: refToWord :: forall (a :: area). [Ref a] ->> [Bit 32]  ~~>  refToWord :: [Ref String] ->> [Bit 32]
Requesting specialization of ptrToWordImp :: [[Bit 32] ->> [Bit 32]]
TopLevel specialize: ptrToWordImp :: [[Bit 32] ->> [Bit 32]]  ~~>  ptrToWordImp :: [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of b65 :: [] >>= [[Bit 32] ->> [Bit 32]]
Block specialize: b65 :: forall (a :: *). [] >>= [[a] ->> [a]]  ~~>  b65 :: [] >>= [[Bit 32] ->> [Bit 32]], generics=[?6089], substitution=[?6089 --> Bit 32]
Requesting specialization of k44 :: {} [Bit 32] ->> [Bit 32]
ClosureDefn specialize: k44 :: forall (a :: *). {} [a] ->> [a]  ~~>  k44 :: {} [Bit 32] ->> [Bit 32], generics=[?6088], substitution=[?6088 --> Bit 32]
Requesting specialization of b64 :: [Bit 32] >>= [Bit 32]
Block specialize: b64 :: forall (a :: *). [a] >>= [a]  ~~>  b64 :: [Bit 32] >>= [Bit 32], generics=[?6084], substitution=[?6084 --> Bit 32]
TopLevel specialize: Pair :: forall (a :: *) (b :: *). [[a] ->> [[b] ->> [Pair a b]]]  ~~>  s37 :: [[Bit 32] ->> [[Bit 32] ->> [Pair (Bit 32) (Bit 32)]]], generics=[?6001, ?6002], substitution=[?6001 --> Bit 32, ?6002 --> Bit 32]
Requesting specialization of b5 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Pair (Bit 32) (Bit 32)]]]
Block specialize: b5 :: forall (a :: *) (b :: *). [] >>= [[a] ->> [[b] ->> [Pair a b]]]  ~~>  b51 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Pair (Bit 32) (Bit 32)]]], generics=[?5996, ?5997], substitution=[?5996 --> Bit 32, ?5997 --> Bit 32]
Requesting specialization of k4 :: {} [Bit 32] ->> [[Bit 32] ->> [Pair (Bit 32) (Bit 32)]]
ClosureDefn specialize: k4 :: forall (a :: *) (b :: *). {} [a] ->> [[b] ->> [Pair a b]]  ~~>  k41 :: {} [Bit 32] ->> [[Bit 32] ->> [Pair (Bit 32) (Bit 32)]], generics=[?5994, ?5993], substitution=[?5994 --> Bit 32, ?5993 --> Bit 32]
Requesting specialization of b4 :: [Bit 32] >>= [[Bit 32] ->> [Pair (Bit 32) (Bit 32)]]
Block specialize: b4 :: forall (a :: *) (b :: *). [a] >>= [[b] ->> [Pair a b]]  ~~>  b41 :: [Bit 32] >>= [[Bit 32] ->> [Pair (Bit 32) (Bit 32)]], generics=[?5985, ?5986], substitution=[?5985 --> Bit 32, ?5986 --> Bit 32]
Requesting specialization of k3 :: {Bit 32} [Bit 32] ->> [Pair (Bit 32) (Bit 32)]
ClosureDefn specialize: k3 :: forall (a :: *) (b :: *). {a} [b] ->> [Pair a b]  ~~>  k31 :: {Bit 32} [Bit 32] ->> [Pair (Bit 32) (Bit 32)], generics=[?5977, ?5981], substitution=[?5977 --> Bit 32, ?5981 --> Bit 32]
Pair11 is a specialized DataType for Pair (Bit 32) (Bit 32)
TopLevel specialize: Just :: forall (a :: *). [[a] ->> [Maybe a]]  ~~>  s36 :: [[Pair (Bit 32) (Bit 32)] ->> [Maybe (Pair (Bit 32) (Bit 32))]], generics=[?5378], substitution=[?5378 --> Pair (Bit 32) (Bit 32)]
Requesting specialization of b6 :: [] >>= [[Pair (Bit 32) (Bit 32)] ->> [Maybe (Pair (Bit 32) (Bit 32))]]
Block specialize: b6 :: forall (a :: *). [] >>= [[a] ->> [Maybe a]]  ~~>  b64 :: [] >>= [[Pair (Bit 32) (Bit 32)] ->> [Maybe (Pair (Bit 32) (Bit 32))]], generics=[?5375], substitution=[?5375 --> Pair (Bit 32) (Bit 32)]
Requesting specialization of k5 :: {} [Pair (Bit 32) (Bit 32)] ->> [Maybe (Pair (Bit 32) (Bit 32))]
ClosureDefn specialize: k5 :: forall (a :: *). {} [a] ->> [Maybe a]  ~~>  k54 :: {} [Pair (Bit 32) (Bit 32)] ->> [Maybe (Pair (Bit 32) (Bit 32))], generics=[?5373], substitution=[?5373 --> Pair (Bit 32) (Bit 32)]
Maybe12 is a specialized DataType for Maybe Pair11
TopLevel specialize: return :: forall (a :: *). [[a] ->> [[] ->> [a]]]  ~~>  s35 :: [[Maybe (Pair (Bit 32) (Bit 32))] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]], generics=[?5420], substitution=[?5420 --> Maybe (Pair (Bit 32) (Bit 32))]
Requesting specialization of primRet :: [[Maybe (Pair (Bit 32) (Bit 32))] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]]
TopLevel specialize: primRet :: forall (a :: *). [[a] ->> [[] ->> [a]]]  ~~>  s38 :: [[Maybe (Pair (Bit 32) (Bit 32))] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]], generics=[?5418], substitution=[?5418 --> Maybe (Pair (Bit 32) (Bit 32))]
Requesting specialization of b10 :: [] >>= [[Maybe (Pair (Bit 32) (Bit 32))] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]]
Block specialize: b10 :: forall (a :: *). [] >>= [[a] ->> [[] ->> [a]]]  ~~>  b103 :: [] >>= [[Maybe (Pair (Bit 32) (Bit 32))] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]], generics=[?5415], substitution=[?5415 --> Maybe (Pair (Bit 32) (Bit 32))]
Requesting specialization of k8 :: {} [Maybe (Pair (Bit 32) (Bit 32))] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]
ClosureDefn specialize: k8 :: forall (a :: *). {} [a] ->> [[] ->> [a]]  ~~>  k83 :: {} [Maybe (Pair (Bit 32) (Bit 32))] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]], generics=[?5414], substitution=[?5414 --> Maybe (Pair (Bit 32) (Bit 32))]
Requesting specialization of b9 :: [Maybe (Pair (Bit 32) (Bit 32))] >>= [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]
Block specialize: b9 :: forall (a :: *). [a] >>= [[] ->> [a]]  ~~>  b93 :: [Maybe (Pair (Bit 32) (Bit 32))] >>= [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]], generics=[?5408], substitution=[?5408 --> Maybe (Pair (Bit 32) (Bit 32))]
Requesting specialization of ret1 :: {Maybe (Pair (Bit 32) (Bit 32))} [] ->> [Maybe (Pair (Bit 32) (Bit 32))]
ClosureDefn specialize: ret1 :: forall (a :: *). {a} [] ->> [a]  ~~>  ret13 :: {Maybe (Pair (Bit 32) (Bit 32))} [] ->> [Maybe (Pair (Bit 32) (Bit 32))], generics=[?5404], substitution=[?5404 --> Maybe (Pair (Bit 32) (Bit 32))]
Block specialize: b124 :: [] >>= [Maybe (Pair (Bit 32) (Bit 32))]  ~~>  b124 :: [] >>= [Maybe (Pair (Bit 32) (Bit 32))], generics=[], substitution=null
Requesting specialization of return :: [[Maybe (Pair (Bit 32) (Bit 32))] ->> [[] ->> [Maybe (Pair (Bit 32) (Bit 32))]]]
Requesting specialization of Nothing :: [Maybe (Pair (Bit 32) (Bit 32))]
Requesting specialization of b122 :: [Maybe (Pair (Bit 32) (Bit 32))] >>= [Maybe (Pair (Bit 32) (Bit 32))]
TopLevel specialize: Nothing :: forall (a :: *). [Maybe a]  ~~>  s39 :: [Maybe (Pair (Bit 32) (Bit 32))], generics=[?5369], substitution=[?5369 --> Pair (Bit 32) (Bit 32)]
External specialize: loadChar :: [Ref String] ->> [[] ->> [Bit 32]]  ~~>  loadChar :: [Ref String] ->> [[] ->> [Bit 32]]
Requesting specialization of loadCharImp :: [[Addr] ->> [[] ->> [Bit 8]]]
TopLevel specialize: loadCharImp :: [[Addr] ->> [[] ->> [Bit 8]]]  ~~>  loadCharImp :: [[Addr] ->> [[] ->> [Bit 8]]], generics=[], substitution=null
Requesting specialization of b67 :: [] >>= [[Addr] ->> [[] ->> [Bit 8]]]
Block specialize: b67 :: [] >>= [[Addr] ->> [[] ->> [Bit 8]]]  ~~>  b67 :: [] >>= [[Addr] ->> [[] ->> [Bit 8]]], generics=[], substitution=null
Requesting specialization of k45 :: {} [Addr] ->> [[] ->> [Bit 8]]
ClosureDefn specialize: k45 :: {} [Addr] ->> [[] ->> [Bit 8]]  ~~>  k45 :: {} [Addr] ->> [[] ->> [Bit 8]], generics=[], substitution=null
Requesting specialization of b66 :: [Addr] >>= [[] ->> [Bit 8]]
Block specialize: b66 :: [Addr] >>= [[] ->> [Bit 8]]  ~~>  b66 :: [Addr] >>= [[] ->> [Bit 8]], generics=[], substitution=null
Requesting specialization of loadCharImp1 :: {Addr} [] ->> [Bit 8]
ClosureDefn specialize: loadCharImp1 :: {Addr} [] ->> [Bit 8]  ~~>  loadCharImp1 :: {Addr} [] ->> [Bit 8], generics=[], substitution=null
TopLevel specialize: clearScreen :: [[] ->> [Unit]]  ~~>  clearScreen :: [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b391 :: [] >>= [[] ->> [Unit]]
Block specialize: b391 :: [] >>= [[] ->> [Unit]]  ~~>  b391 :: [] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of clearWindow :: [[Ref Window] ->> [[] ->> [Unit]]]
Requesting specialization of console :: Ref Window
TopLevel specialize: clearWindow :: [[Ref Window] ->> [[] ->> [Unit]]]  ~~>  clearWindow :: [[Ref Window] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of b353 :: [] >>= [[Ref Window] ->> [[] ->> [Unit]]]
Block specialize: b353 :: [] >>= [[Ref Window] ->> [[] ->> [Unit]]]  ~~>  b353 :: [] >>= [[Ref Window] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k168 :: {} [Ref Window] ->> [[] ->> [Unit]]
ClosureDefn specialize: k168 :: {} [Ref Window] ->> [[] ->> [Unit]]  ~~>  k168 :: {} [Ref Window] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b352 :: [Ref Window] >>= [[] ->> [Unit]]
Block specialize: b352 :: [Ref Window] >>= [[] ->> [Unit]]  ~~>  b352 :: [Ref Window] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k167 :: {Ref Window} [] ->> [Unit]
ClosureDefn specialize: k167 :: {Ref Window} [] ->> [Unit]  ~~>  k167 :: {Ref Window} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b351 :: [Ref Window] >>= [Unit]
Block specialize: b351 :: [Ref Window] >>= [Unit]  ~~>  b351 :: [Ref Window] >>= [Unit], generics=[], substitution=null
Requesting specialization of get :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
Requesting specialization of get :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
Requesting specialization of set :: [Ref (Stored (Ix 25))] ->> [[Ix 25] ->> [[] ->> [Unit]]]
Requesting specialization of set :: [Ref (Stored (Ix 80))] ->> [[Ix 80] ->> [[] ->> [Unit]]]
Requesting specialization of get :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
Requesting specialization of get :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
Requesting specialization of get :: [Ref (Stored (Bit 8))] ->> [[] ->> [Bit 8]]
Requesting specialization of for :: [[Ix 25] ->> [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
Requesting specialization of b350 :: [Ix 80, Ix 80, Bit 8] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Block specialize: b350 :: [Ix 80, Ix 80, Bit 8] >>= [[Ix 25] ->> [[] ->> [Unit]]]  ~~>  b350 :: [Ix 80, Ix 80, Bit 8] >>= [[Ix 25] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k166 :: {Bit 8, Ix 80, Ix 80} [Ix 25] ->> [[] ->> [Unit]]
ClosureDefn specialize: k166 :: {Bit 8, Ix 80, Ix 80} [Ix 25] ->> [[] ->> [Unit]]  ~~>  k166 :: {Bit 8, Ix 80, Ix 80} [Ix 25] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b349 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [[] ->> [Unit]]
Block specialize: b349 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [[] ->> [Unit]]  ~~>  b349 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of for :: [[Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
Requesting specialization of b348 :: [Ix 25, Bit 8] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Block specialize: b348 :: [Ix 25, Bit 8] >>= [[Ix 80] ->> [[] ->> [Unit]]]  ~~>  b348 :: [Ix 25, Bit 8] >>= [[Ix 80] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k165 :: {Bit 8, Ix 25} [Ix 80] ->> [[] ->> [Unit]]
ClosureDefn specialize: k165 :: {Bit 8, Ix 25} [Ix 80] ->> [[] ->> [Unit]]  ~~>  k165 :: {Bit 8, Ix 25} [Ix 80] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b347 :: [Ix 25, Ix 80, Bit 8] >>= [[] ->> [Unit]]
Block specialize: b347 :: [Ix 25, Ix 80, Bit 8] >>= [[] ->> [Unit]]  ~~>  b347 :: [Ix 25, Ix 80, Bit 8] >>= [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of set :: [Ref (Stored Char)] ->> [[Char] ->> [[] ->> [Unit]]]
Requesting specialization of pos :: [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]
Requesting specialization of blank :: [Char]
TopLevel specialize: for :: forall (n :: nat). [[Ix n] ->> [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]  ~~>  s40 :: [[Ix 25] ->> [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]], generics=[?5556], substitution=[?5556 --> 25]
Requesting specialization of b343 :: [] >>= [[Ix 25] ->> [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
Block specialize: b343 :: forall (n :: nat). [] >>= [[Ix n] ->> [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]  ~~>  b3431 :: [] >>= [[Ix 25] ->> [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]], generics=[?5553], substitution=[?5553 --> 25]
Requesting specialization of k162 :: {} [Ix 25] ->> [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
ClosureDefn specialize: k162 :: forall (n :: nat). {} [Ix n] ->> [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]  ~~>  k1621 :: {} [Ix 25] ->> [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5550], substitution=[?5550 --> 25]
Requesting specialization of b342 :: [Ix 25] >>= [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Block specialize: b342 :: forall (n :: nat). [Ix n] >>= [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]  ~~>  b3421 :: [Ix 25] >>= [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]], generics=[?5546], substitution=[?5546 --> 25]
Requesting specialization of k161 :: {Ix 25} [Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k161 :: forall (n :: nat). {Ix n} [Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]  ~~>  k1611 :: {Ix 25} [Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5543], substitution=[?5543 --> 25]
Requesting specialization of b341 :: [Ix 25, Ix 25] >>= [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Block specialize: b341 :: forall (n :: nat). [Ix n, Ix n] >>= [[[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]  ~~>  b3411 :: [Ix 25, Ix 25] >>= [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]], generics=[?5537], substitution=[?5537 --> 25]
Requesting specialization of k160 :: {Ix 25, Ix 25} [[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
ClosureDefn specialize: k160 :: forall (n :: nat). {Ix n, Ix n} [[Ix n] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]  ~~>  k1601 :: {Ix 25, Ix 25} [[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]], generics=[?5532], substitution=[?5532 --> 25]
Requesting specialization of b340 :: [Ix 25, [Ix 25] ->> [[] ->> [Unit]], Ix 25] >>= [[] ->> [Unit]]
Block specialize: b340 :: forall (n :: nat). [Ix n, [Ix n] ->> [[] ->> [Unit]], Ix n] >>= [[] ->> [Unit]]  ~~>  b3401 :: [Ix 25, [Ix 25] ->> [[] ->> [Unit]], Ix 25] >>= [[] ->> [Unit]], generics=[?5519], substitution=[?5519 --> 25]
Requesting specialization of loop6 :: [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
TopLevel specialize: loop6 :: forall (n :: nat). [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]]  ~~>  s41 :: [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]], generics=[?5514], substitution=[?5514 --> 25]
Requesting specialization of b301 :: [] >>= [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
Block specialize: b301 :: forall (n :: nat). [] >>= [[Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]]  ~~>  b3011 :: [] >>= [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]], generics=[?5469], substitution=[?5469 --> 25]
Requesting specialization of k139 :: {} [Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
ClosureDefn specialize: k139 :: forall (n :: nat). {} [Ix n] ->> [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]  ~~>  k1391 :: {} [Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]], generics=[?5433], substitution=[?5433 --> 25]
Requesting specialization of b300 :: [Ix 25] >>= [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Block specialize: b300 :: forall (n :: nat). [Ix n] >>= [[[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]]  ~~>  b3001 :: [Ix 25] >>= [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]], generics=[?5472], substitution=[?5472 --> 25]
Requesting specialization of k138 :: {Ix 25} [[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k138 :: forall (n :: nat). {Ix n} [[Ix n] ->> [[] ->> [Unit]]] ->> [[Ix n] ->> [[] ->> [Unit]]]  ~~>  k1381 :: {Ix 25} [[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]], generics=[?5439], substitution=[?5439 --> 25]
Requesting specialization of b299 :: [[Ix 25] ->> [[] ->> [Unit]], Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Block specialize: b299 :: forall (n :: nat). [[Ix n] ->> [[] ->> [Unit]], Ix n] >>= [[Ix n] ->> [[] ->> [Unit]]]  ~~>  b2991 :: [[Ix 25] ->> [[] ->> [Unit]], Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]], generics=[?5475], substitution=[?5475 --> 25]
Requesting specialization of b298 :: [Ix 25, [Ix 25] ->> [[] ->> [Unit]]] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Block specialize: b298 :: forall (n :: nat). [Ix n, [Ix n] ->> [[] ->> [Unit]]] >>= [[Ix n] ->> [[] ->> [Unit]]]  ~~>  b2981 :: [Ix 25, [Ix 25] ->> [[] ->> [Unit]]] >>= [[Ix 25] ->> [[] ->> [Unit]]], generics=[?5445], substitution=[?5445 --> 25]
Requesting specialization of k137 :: {[Ix 25] ->> [[] ->> [Unit]], Ix 25} [Ix 25] ->> [[] ->> [Unit]]
ClosureDefn specialize: k137 :: forall (n :: nat). {[Ix n] ->> [[] ->> [Unit]], Ix n} [Ix n] ->> [[] ->> [Unit]]  ~~>  k1371 :: {[Ix 25] ->> [[] ->> [Unit]], Ix 25} [Ix 25] ->> [[] ->> [Unit]], generics=[?5450], substitution=[?5450 --> 25]
Requesting specialization of b297 :: [Ix 25, Ix 25, [Ix 25] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Block specialize: b297 :: forall (n :: nat). [Ix n, Ix n, [Ix n] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]  ~~>  b2971 :: [Ix 25, Ix 25, [Ix 25] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]], generics=[?5454], substitution=[?5454 --> 25]
Requesting specialization of k136 :: {[Ix 25] ->> [[] ->> [Unit]], Ix 25, Ix 25} [] ->> [Unit]
ClosureDefn specialize: k136 :: forall (n :: nat). {[Ix n] ->> [[] ->> [Unit]], Ix n, Ix n} [] ->> [Unit]  ~~>  k1361 :: {[Ix 25] ->> [[] ->> [Unit]], Ix 25, Ix 25} [] ->> [Unit], generics=[?5459], substitution=[?5459 --> 25]
Requesting specialization of b296 :: [Ix 25, Ix 25, [Ix 25] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b296 :: forall (n :: nat). [Ix n, Ix n, [Ix n] ->> [[] ->> [Unit]]] >>= [Unit]  ~~>  b2961 :: [Ix 25, Ix 25, [Ix 25] ->> [[] ->> [Unit]]] >>= [Unit], generics=[?5498], substitution=[?5498 --> 25]
Requesting specialization of ltInc :: [[Ix 25] ->> [[Ix 25] ->> [Maybe (Ix 25)]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b294 :: [Maybe (Ix 25), Ix 25, [Ix 25] ->> [[] ->> [Unit]]] >>= [Unit]
Block specialize: b294 :: forall (n :: nat). [Maybe (Ix n), Ix n, [Ix n] ->> [[] ->> [Unit]]] >>= [Unit]  ~~>  b2941 :: [Maybe (Ix 25), Ix 25, [Ix 25] ->> [[] ->> [Unit]]] >>= [Unit], generics=[?5501], substitution=[?5501 --> 25]
Requesting specialization of loop6 :: [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
Requesting specialization of b293 :: [Unit] >>= [Unit]
Running type checker ...
generics for Nothing: [] in type [Maybe1]
TopLevel group inferred Nothing :: [Maybe1]
Generalizing definition for: Nothing with generics []
Inferred Nothing :: Maybe1
Inferred k5 :: {} [Ix 25] ->> [Maybe1]
Inferred b6 :: [] >>= [[Ix 25] ->> [Maybe1]]
generics for Just: [] in type [[Ix 25] ->> [Maybe1]]
TopLevel group inferred Just :: [[Ix 25] ->> [Maybe1]]
Generalizing definition for: Just with generics []
Inferred Just :: [Ix 25] ->> [Maybe1]
Inferred b158 :: [] >>= [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]]
generics for ltIncBy: [] in type [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]]
TopLevel group inferred ltIncBy :: [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]]
Generalizing definition for: ltIncBy with generics []
Inferred ltIncBy :: [Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]
generics for Unit: [] in type [Unit]
TopLevel group inferred Unit :: [Unit]
Generalizing definition for: Unit with generics []
Inferred Unit :: Unit
Inferred b149 :: [] >>= [Ix 25]
generics for ix1: [] in type [Ix 25]
TopLevel group inferred ix1 :: [Ix 25]
Generalizing definition for: ix1 with generics []
Inferred ix1 :: Ix 25
Inferred b160 :: [] >>= [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]
generics for s7: [] in type [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]
TopLevel group inferred s7 :: [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]
Generalizing definition for: s7 with generics []
Inferred s7 :: [Ix 25] ->> [[Ix 25] ->> [Maybe1]]
Inferred ret1 :: {Unit} [] ->> [Unit]
Inferred b9 :: [Unit] >>= [[] ->> [Unit]]
Inferred k8 :: {} [Unit] ->> [[] ->> [Unit]]
Inferred b10 :: [] >>= [[Unit] ->> [[] ->> [Unit]]]
generics for primRet: [] in type [[Unit] ->> [[] ->> [Unit]]]
TopLevel group inferred primRet :: [[Unit] ->> [[] ->> [Unit]]]
Generalizing definition for: primRet with generics []
Inferred primRet :: [Unit] ->> [[] ->> [Unit]]
generics for return: [] in type [[Unit] ->> [[] ->> [Unit]]]
TopLevel group inferred return :: [[Unit] ->> [[] ->> [Unit]]]
Generalizing definition for: return with generics []
Inferred return :: [Unit] ->> [[] ->> [Unit]]
Inferred b293 :: [Unit] >>= [Unit]
Inferred b295 :: [] >>= [Unit]
Inferred b3011 :: [] >>= [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
Inferred k1391 :: {} [Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Inferred b3001 :: [Ix 25] >>= [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Inferred k1381 :: {Ix 25} [[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b2991 :: [[Ix 25] ->> [[] ->> [Unit]], Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b2981 :: [Ix 25, [Ix 25] ->> [[] ->> [Unit]]] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Inferred k1371 :: {[Ix 25] ->> [[] ->> [Unit]], Ix 25} [Ix 25] ->> [[] ->> [Unit]]
Inferred b2971 :: [Ix 25, Ix 25, [Ix 25] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k1361 :: {[Ix 25] ->> [[] ->> [Unit]], Ix 25, Ix 25} [] ->> [Unit]
Inferred b2961 :: [Ix 25, Ix 25, [Ix 25] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred b2941 :: [Maybe1, Ix 25, [Ix 25] ->> [[] ->> [Unit]]] >>= [Unit]
generics for s41: [] in type [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
TopLevel group inferred s41 :: [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
Generalizing definition for: s41 with generics []
Inferred s41 :: [Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Inferred b3401 :: [Ix 25, [Ix 25] ->> [[] ->> [Unit]], Ix 25] >>= [[] ->> [Unit]]
Inferred k1601 :: {Ix 25, Ix 25} [[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
Inferred b3411 :: [Ix 25, Ix 25] >>= [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred k1611 :: {Ix 25} [Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b3421 :: [Ix 25] >>= [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Inferred k1621 :: {} [Ix 25] ->> [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Inferred b3431 :: [] >>= [[Ix 25] ->> [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
generics for s40: [] in type [[Ix 25] ->> [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
TopLevel group inferred s40 :: [[Ix 25] ->> [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
Generalizing definition for: s40 with generics []
Inferred s40 :: [Ix 25] ->> [[Ix 25] ->> [[[Ix 25] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
generics for s13: [] in type [Maybe0]
TopLevel group inferred s13 :: [Maybe0]
Generalizing definition for: s13 with generics []
Inferred s13 :: Maybe0
Inferred k51 :: {} [Ix 80] ->> [Maybe0]
Inferred b61 :: [] >>= [[Ix 80] ->> [Maybe0]]
generics for s14: [] in type [[Ix 80] ->> [Maybe0]]
TopLevel group inferred s14 :: [[Ix 80] ->> [Maybe0]]
Generalizing definition for: s14 with generics []
Inferred s14 :: [Ix 80] ->> [Maybe0]
Inferred b1581 :: [] >>= [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]]
generics for s11: [] in type [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]]
TopLevel group inferred s11 :: [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]]
Generalizing definition for: s11 with generics []
Inferred s11 :: [Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]
Inferred b1491 :: [] >>= [Ix 80]
generics for s12: [] in type [Ix 80]
TopLevel group inferred s12 :: [Ix 80]
Generalizing definition for: s12 with generics []
Inferred s12 :: Ix 80
Inferred b1601 :: [] >>= [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]
generics for ltInc: [] in type [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]
TopLevel group inferred ltInc :: [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]
Generalizing definition for: ltInc with generics []
Inferred ltInc :: [Ix 80] ->> [[Ix 80] ->> [Maybe0]]
Inferred b301 :: [] >>= [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]]
Inferred k139 :: {} [Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]
Inferred b300 :: [Ix 80] >>= [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]
Inferred k138 :: {Ix 80} [[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]
Inferred b299 :: [[Ix 80] ->> [[] ->> [Unit]], Ix 80] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Inferred b298 :: [Ix 80, [Ix 80] ->> [[] ->> [Unit]]] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Inferred k137 :: {[Ix 80] ->> [[] ->> [Unit]], Ix 80} [Ix 80] ->> [[] ->> [Unit]]
Inferred b297 :: [Ix 80, Ix 80, [Ix 80] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k136 :: {[Ix 80] ->> [[] ->> [Unit]], Ix 80, Ix 80} [] ->> [Unit]
Inferred b296 :: [Ix 80, Ix 80, [Ix 80] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred b294 :: [Maybe0, Ix 80, [Ix 80] ->> [[] ->> [Unit]]] >>= [Unit]
generics for loop6: [] in type [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]]
TopLevel group inferred loop6 :: [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]]
Generalizing definition for: loop6 with generics []
Inferred loop6 :: [Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[Ix 80] ->> [[] ->> [Unit]]]]
Inferred b340 :: [Ix 80, [Ix 80] ->> [[] ->> [Unit]], Ix 80] >>= [[] ->> [Unit]]
Inferred k160 :: {Ix 80, Ix 80} [[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
Inferred b341 :: [Ix 80, Ix 80] >>= [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred k161 :: {Ix 80} [Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b342 :: [Ix 80] >>= [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Inferred k162 :: {} [Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Inferred b343 :: [] >>= [[Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
generics for for: [] in type [[Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
TopLevel group inferred for :: [[Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]]
Generalizing definition for: for with generics []
Inferred for :: [Ix 80] ->> [[Ix 80] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Inferred b315 :: [Ix 25, Ix 80] >>= [Ref (Stored Char)]
Inferred k146 :: {Ix 25} [Ix 80] ->> [Ref (Stored Char)]
Inferred b316 :: [Ix 25] >>= [[Ix 80] ->> [Ref (Stored Char)]]
Inferred k147 :: {} [Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]
Inferred b317 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]
generics for pos: [] in type [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]
TopLevel group inferred pos :: [[Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]]
Generalizing definition for: pos with generics []
Inferred pos :: [Ix 25] ->> [[Ix 80] ->> [Ref (Stored Char)]]
generics for defAttr: [] in type [Bit 8]
TopLevel group inferred defAttr :: [Bit 8]
Generalizing definition for: defAttr with generics []
Inferred defAttr :: Bit 8
Inferred b312 :: [Bit 32] >>= [Char]
Inferred k145 :: {} [Bit 32] ->> [Char]
Inferred b313 :: [] >>= [[Bit 32] ->> [Char]]
generics for char: [] in type [[Bit 32] ->> [Char]]
TopLevel group inferred char :: [[Bit 32] ->> [Char]]
Generalizing definition for: char with generics []
Inferred char :: [Bit 32] ->> [Char]
Inferred b314 :: [] >>= [Char]
generics for blank: [] in type [Char]
TopLevel group inferred blank :: [Char]
Generalizing definition for: blank with generics []
Inferred blank :: Char
Inferred b347 :: [Ix 25, Ix 80, Bit 8] >>= [[] ->> [Unit]]
Inferred k165 :: {Bit 8, Ix 25} [Ix 80] ->> [[] ->> [Unit]]
Inferred b348 :: [Ix 25, Bit 8] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Inferred b349 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [[] ->> [Unit]]
Inferred k166 :: {Bit 8, Ix 80, Ix 80} [Ix 25] ->> [[] ->> [Unit]]
Inferred b350 :: [Ix 80, Ix 80, Bit 8] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b351 :: [Ref Window] >>= [Unit]
Inferred k167 :: {Ref Window} [] ->> [Unit]
Inferred b352 :: [Ref Window] >>= [[] ->> [Unit]]
Inferred k168 :: {} [Ref Window] ->> [[] ->> [Unit]]
Inferred b353 :: [] >>= [[Ref Window] ->> [[] ->> [Unit]]]
generics for clearWindow: [] in type [[Ref Window] ->> [[] ->> [Unit]]]
TopLevel group inferred clearWindow :: [[Ref Window] ->> [[] ->> [Unit]]]
Generalizing definition for: clearWindow with generics []
Inferred clearWindow :: [Ref Window] ->> [[] ->> [Unit]]
Inferred b331 :: [Ix 25, Ix 80] >>= [Init Coord]
Inferred k153 :: {Ix 25} [Ix 80] ->> [Init Coord]
Inferred b332 :: [Ix 25] >>= [[Ix 80] ->> [Init Coord]]
Inferred k154 :: {} [Ix 25] ->> [[Ix 80] ->> [Init Coord]]
Inferred b333 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]]
generics for initCoord: [] in type [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]]
TopLevel group inferred initCoord :: [[Ix 25] ->> [[Ix 80] ->> [Init Coord]]]
Generalizing definition for: initCoord with generics []
Inferred initCoord :: [Ix 25] ->> [[Ix 80] ->> [Init Coord]]
Inferred b334 :: [Ix 25, Ix 80, Ix 25, Ix 80, Bit 8] >>= [Init Window]
Inferred k155 :: {Ix 80, Ix 25, Ix 80, Ix 25} [Bit 8] ->> [Init Window]
Inferred b335 :: [Ix 25, Ix 80, Ix 25, Ix 80] >>= [[Bit 8] ->> [Init Window]]
Inferred k156 :: {Ix 25, Ix 80, Ix 25} [Ix 80] ->> [[Bit 8] ->> [Init Window]]
Inferred b336 :: [Ix 25, Ix 80, Ix 25] >>= [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]
Inferred k157 :: {Ix 80, Ix 25} [Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]
Inferred b337 :: [Ix 25, Ix 80] >>= [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]
Inferred k158 :: {Ix 25} [Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]
Inferred b338 :: [Ix 25] >>= [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]
Inferred k159 :: {} [Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]
Inferred b339 :: [] >>= [[Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]]
generics for window: [] in type [[Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]]
TopLevel group inferred window :: [[Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]]
Generalizing definition for: window with generics []
Inferred window :: [Ix 25] ->> [[Ix 80] ->> [[Ix 25] ->> [[Ix 80] ->> [[Bit 8] ->> [Init Window]]]]]
Inferred b1481 :: [] >>= [Ix 25]
generics for ix0: [] in type [Ix 25]
TopLevel group inferred ix0 :: [Ix 25]
Generalizing definition for: ix0 with generics []
Inferred ix0 :: Ix 25
Inferred b148 :: [] >>= [Ix 80]
generics for s6: [] in type [Ix 80]
TopLevel group inferred s6 :: [Ix 80]
Generalizing definition for: s6 with generics []
Inferred s6 :: Ix 80
Inferred b425 :: [] >>= [Init Window]
generics for s2: [] in type [Init Window]
TopLevel group inferred s2 :: [Init Window]
Generalizing definition for: s2 with generics []
Inferred s2 :: Init Window
Inferred b391 :: [] >>= [[] ->> [Unit]]
generics for clearScreen: [] in type [[] ->> [Unit]]
TopLevel group inferred clearScreen :: [[] ->> [Unit]]
Generalizing definition for: clearScreen with generics []
Inferred clearScreen :: [] ->> [Unit]
Inferred b827 :: [[] ->> [MimgHeaderCursor], [MimgHeaderCursor] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred k527 :: {[MimgHeaderCursor] ->> [[] ->> [Unit]], [] ->> [MimgHeaderCursor]} [] ->> [Unit]
Inferred b837 :: [[] ->> [MimgHeaderCursor], [MimgHeaderCursor] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k537 :: {[] ->> [MimgHeaderCursor]} [[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
Inferred b847 :: [[] ->> [MimgHeaderCursor]] >>= [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred k547 :: {} [[] ->> [MimgHeaderCursor]] ->> [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b857 :: [] >>= [[[] ->> [MimgHeaderCursor]] ->> [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
generics for >>=: [] in type [[[] ->> [MimgHeaderCursor]] ->> [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
TopLevel group inferred >>= :: [[[] ->> [MimgHeaderCursor]] ->> [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Generalizing definition for: >>= with generics []
Inferred >>= :: [[] ->> [MimgHeaderCursor]] ->> [[[MimgHeaderCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b826 :: [[] ->> [Ref MimgHeaderBlock], [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] >>= [MimgHeaderCursor]
Inferred k526 :: {[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]], [] ->> [Ref MimgHeaderBlock]} [] ->> [MimgHeaderCursor]
Inferred b836 :: [[] ->> [Ref MimgHeaderBlock], [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] >>= [[] ->> [MimgHeaderCursor]]
Inferred k536 :: {[] ->> [Ref MimgHeaderBlock]} [[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]
Inferred b846 :: [[] ->> [Ref MimgHeaderBlock]] >>= [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]]
Inferred k546 :: {} [[] ->> [Ref MimgHeaderBlock]] ->> [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]]
Inferred b856 :: [] >>= [[[] ->> [Ref MimgHeaderBlock]] ->> [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]]]
generics for s32: [] in type [[[] ->> [Ref MimgHeaderBlock]] ->> [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]]]
TopLevel group inferred s32 :: [[[] ->> [Ref MimgHeaderBlock]] ->> [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]]]
Generalizing definition for: s32 with generics []
Inferred s32 :: [[] ->> [Ref MimgHeaderBlock]] ->> [[[Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]] ->> [[] ->> [MimgHeaderCursor]]]
Inferred ret12 :: {WordCursor} [] ->> [WordCursor]
Inferred b92 :: [WordCursor] >>= [[] ->> [WordCursor]]
Inferred k82 :: {} [WordCursor] ->> [[] ->> [WordCursor]]
Inferred b102 :: [] >>= [[WordCursor] ->> [[] ->> [WordCursor]]]
generics for s28: [] in type [[WordCursor] ->> [[] ->> [WordCursor]]]
TopLevel group inferred s28 :: [[WordCursor] ->> [[] ->> [WordCursor]]]
Generalizing definition for: s28 with generics []
Inferred s28 :: [WordCursor] ->> [[] ->> [WordCursor]]
generics for s27: [] in type [[WordCursor] ->> [[] ->> [WordCursor]]]
TopLevel group inferred s27 :: [[WordCursor] ->> [[] ->> [WordCursor]]]
Generalizing definition for: s27 with generics []
Inferred s27 :: [WordCursor] ->> [[] ->> [WordCursor]]
Inferred b11 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred k9 :: {Bit 32} [Bit 32] ->> [Bit 32]
Inferred b12 :: [Bit 32] >>= [[Bit 32] ->> [Bit 32]]
Inferred k10 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred b13 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
generics for +: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred + :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: + with generics []
Inferred + :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred b488 :: [Bit 32] >>= [Bit 32]
Inferred k230 :: {} [Bit 32] ->> [Bit 32]
Inferred b489 :: [] >>= [[Bit 32] ->> [Bit 32]]
generics for refToWord_imp: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred refToWord_imp :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: refToWord_imp with generics []
Inferred refToWord_imp :: [Bit 32] ->> [Bit 32]
Inferred b485 :: [Ref (Stored (Bit 32))] >>= [WordCursor]
Inferred k228 :: {Ref (Stored (Bit 32))} [] ->> [WordCursor]
Inferred b486 :: [Ref (Stored (Bit 32))] >>= [[] ->> [WordCursor]]
Inferred k229 :: {} [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]
Inferred b487 :: [] >>= [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
generics for wordCursor: [] in type [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
TopLevel group inferred wordCursor :: [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
Generalizing definition for: wordCursor with generics []
Inferred wordCursor :: [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]
Inferred b496 :: [Ref MimgBootData] >>= [[] ->> [MimgHeaderCursor]]
Inferred k233 :: {} [Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]
Inferred b497 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]]
generics for mimgHeaders: [] in type [[Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]]
TopLevel group inferred mimgHeaders :: [[Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]]
Generalizing definition for: mimgHeaders with generics []
Inferred mimgHeaders :: [Ref MimgBootData] ->> [[] ->> [MimgHeaderCursor]]
generics for s19: [] in type [Maybe2]
TopLevel group inferred s19 :: [Maybe2]
Generalizing definition for: s19 with generics []
Inferred s19 :: Maybe2
Inferred k52 :: {} [Ix 32] ->> [Maybe2]
Inferred b62 :: [] >>= [[Ix 32] ->> [Maybe2]]
generics for s20: [] in type [[Ix 32] ->> [Maybe2]]
TopLevel group inferred s20 :: [[Ix 32] ->> [Maybe2]]
Generalizing definition for: s20 with generics []
Inferred s20 :: [Ix 32] ->> [Maybe2]
Inferred b1582 :: [] >>= [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]
generics for s17: [] in type [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]
TopLevel group inferred s17 :: [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]
Generalizing definition for: s17 with generics []
Inferred s17 :: [Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]
Inferred b1492 :: [] >>= [Ix 32]
generics for s18: [] in type [Ix 32]
TopLevel group inferred s18 :: [Ix 32]
Generalizing definition for: s18 with generics []
Inferred s18 :: Ix 32
Inferred b1602 :: [] >>= [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]
generics for s16: [] in type [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]
TopLevel group inferred s16 :: [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]
Generalizing definition for: s16 with generics []
Inferred s16 :: [Ix 32] ->> [[Ix 32] ->> [Maybe2]]
Inferred b176 :: [Unit] >>= [Unit]
Inferred b178 :: [] >>= [Unit]
Inferred b185 :: [] >>= [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]]
Inferred k95 :: {} [Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]
Inferred b184 :: [Ix 32] >>= [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]
Inferred k94 :: {Ix 32} [Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
Inferred b183 :: [Bit 32, Ix 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
Inferred k93 :: {Ix 32, Bit 32} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]
Inferred b182 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Inferred b181 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Inferred k92 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [Ix 32] ->> [[] ->> [Unit]]
Inferred b180 :: [Ix 32, Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k91 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32, Ix 32} [] ->> [Unit]
Inferred b179 :: [Ix 32, Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred b177 :: [Maybe2, Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
generics for padloop3: [] in type [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]]
TopLevel group inferred padloop3 :: [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]]
Generalizing definition for: padloop3 with generics []
Inferred padloop3 :: [Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]]
Inferred b102 :: [] >>= [Bit 8]
generics for bit0: [] in type [Bit 8]
TopLevel group inferred bit0 :: [Bit 8]
Generalizing definition for: bit0 with generics []
Inferred bit0 :: Bit 8
Inferred b252 :: [] >>= [Init (Stored (Bit 8))]
Inferred k126 :: {} [Ix 32] ->> [Init (Stored (Bit 8))]
Inferred b253 :: [] >>= [[Ix 32] ->> [Init (Stored (Bit 8))]]
Inferred b254 :: [] >>= [Init (Array 32 (Stored (Bit 8)))]
generics for s1: [] in type [Init (Array 32 (Stored (Bit 8)))]
TopLevel group inferred s1 :: [Init (Array 32 (Stored (Bit 8)))]
Generalizing definition for: s1 with generics []
Inferred s1 :: Init (Array 32 (Stored (Bit 8)))
Inferred b159 :: [] >>= [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]
generics for ltDecBy: [] in type [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]
TopLevel group inferred ltDecBy :: [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]
Generalizing definition for: ltDecBy with generics []
Inferred ltDecBy :: [Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]
Inferred b161 :: [] >>= [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]
generics for ltDec: [] in type [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]
TopLevel group inferred ltDec :: [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]
Generalizing definition for: ltDec with generics []
Inferred ltDec :: [Ix 32] ->> [[Ix 32] ->> [Maybe2]]
Inferred b1482 :: [] >>= [Ix 32]
generics for s15: [] in type [Ix 32]
TopLevel group inferred s15 :: [Ix 32]
Generalizing definition for: s15 with generics []
Inferred s15 :: Ix 32
Inferred b164 :: [Ix 32] >>= [Maybe2]
Inferred k86 :: {} [Ix 32] ->> [Maybe2]
Inferred b165 :: [] >>= [[Ix 32] ->> [Maybe2]]
generics for decIx: [] in type [[Ix 32] ->> [Maybe2]]
TopLevel group inferred decIx :: [[Ix 32] ->> [Maybe2]]
Generalizing definition for: decIx with generics []
Inferred decIx :: [Ix 32] ->> [Maybe2]
Inferred b168 :: [Unit] >>= [Unit]
Inferred b170 :: [] >>= [Unit]
Inferred b175 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
Inferred k90 :: {} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]
Inferred b174 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Inferred b173 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]
Inferred k89 :: {[Bit 32] ->> [[] ->> [Unit]]} [Ix 32] ->> [[] ->> [Unit]]
Inferred b172 :: [Ix 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k88 :: {[Bit 32] ->> [[] ->> [Unit]], Ix 32} [] ->> [Unit]
Inferred b171 :: [Ix 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred b169 :: [Maybe2, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
generics for output2: [] in type [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred output2 :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: output2 with generics []
Inferred output2 :: [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ix 32] ->> [[] ->> [Unit]]]
Inferred b220 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit]
Inferred k109 :: {Ix 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [] ->> [Unit]
Inferred b221 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]], Ix 32] >>= [[] ->> [Unit]]
Inferred k110 :: {[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32} [Ix 32] ->> [[] ->> [Unit]]
Inferred b222 :: [Ix 32, Bit 32, [Bit 32] ->> [[] ->> [Unit]]] >>= [[Ix 32] ->> [[] ->> [Unit]]]
generics for false: [] in type [Bool]
TopLevel group inferred false :: [Bool]
Generalizing definition for: false with generics []
Inferred false :: Bool
Inferred bfalse :: [] >>= [Bool]
generics for true: [] in type [Bool]
TopLevel group inferred true :: [Bool]
Generalizing definition for: true with generics []
Inferred true :: Bool
Inferred btrue :: [] >>= [Bool]
Inferred bconv :: [Bit 1] >>= [Bool]
Inferred b61 :: [Bit 32, Bit 32] >>= [Bool]
Inferred k42 :: {Bit 32} [Bit 32] ->> [Bool]
Inferred b62 :: [Bit 32] >>= [[Bit 32] ->> [Bool]]
Inferred k43 :: {} [Bit 32] ->> [[Bit 32] ->> [Bool]]
Inferred b63 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
generics for <=: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
TopLevel group inferred <= :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Generalizing definition for: <= with generics []
Inferred <= :: [Bit 32] ->> [[Bit 32] ->> [Bool]]
Inferred b229 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]
Inferred b231 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]
Inferred b14 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred k11 :: {Bit 32} [Bit 32] ->> [Bit 32]
Inferred b15 :: [Bit 32] >>= [[Bit 32] ->> [Bit 32]]
Inferred k12 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred b16 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
generics for -: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred - :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: - with generics []
Inferred - :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred b230 :: [Bit 32, [Bit 32] ->> [Bit 8]] >>= [Bit 8]
Inferred b232 :: [Bit 32] >>= [Bit 8]
Inferred k116 :: {} [Bit 32] ->> [Bit 8]
Inferred b233 :: [] >>= [[Bit 32] ->> [Bit 8]]
generics for digitToByte: [] in type [[Bit 32] ->> [Bit 8]]
TopLevel group inferred digitToByte :: [[Bit 32] ->> [Bit 8]]
Generalizing definition for: digitToByte with generics []
Inferred digitToByte :: [Bit 32] ->> [Bit 8]
Inferred b186 :: [Unit] >>= [Unit]
Inferred b191 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit]
Inferred b34 :: [Bit 32, Bit 32] >>= [Bool]
Inferred k24 :: {Bit 32} [Bit 32] ->> [Bool]
Inferred b35 :: [Bit 32] >>= [[Bit 32] ->> [Bool]]
Inferred k25 :: {} [Bit 32] ->> [[Bit 32] ->> [Bool]]
Inferred b36 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
generics for ==: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
TopLevel group inferred == :: [[Bit 32] ->> [[Bit 32] ->> [Bool]]]
Generalizing definition for: == with generics []
Inferred == :: [Bit 32] ->> [[Bit 32] ->> [Bool]]
Inferred b187 :: [Unit] >>= [Unit]
Inferred b189 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [Unit]
Inferred b199 :: [] >>= [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Inferred k101 :: {} [Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
Inferred b198 :: [Ix 32] >>= [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
Inferred k100 :: {Ix 32} [[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Inferred b197 :: [[Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Inferred k99 :: {Ix 32, [Ix 32] ->> [[] ->> [Unit]]} [NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred b196 :: [NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred b195 :: [Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred k98 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32} [Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b194 :: [Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k97 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32, Ix 32} [Bit 32] ->> [[] ->> [Unit]]
Inferred b193 :: [Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [[] ->> [Unit]]
Inferred k96 :: {NZBit 32, [Ix 32] ->> [[] ->> [Unit]], Ix 32, Ix 32, Bit 32} [] ->> [Unit]
Inferred b192 :: [Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [Unit]
Inferred b190 :: [Maybe2, Bit 32, Ix 32, Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32] >>= [Unit]
Inferred b188 :: [Ix 32, [Ix 32] ->> [[] ->> [Unit]], NZBit 32, Ix 32, Bit 32] >>= [Unit]
generics for loop4: [] in type [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
TopLevel group inferred loop4 :: [[Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Generalizing definition for: loop4 with generics []
Inferred loop4 :: [Ix 32] ->> [[[Ix 32] ->> [[] ->> [Unit]]] ->> [[NZBit 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
Inferred b223 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Ix 32, Ix 32, NZBit 32] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k111 :: {NZBit 32, Ix 32, Ix 32, Bit 32} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b224 :: [Bit 32, Ix 32, Ix 32, NZBit 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred k112 :: {NZBit 32, Ix 32, Ix 32} [Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred b225 :: [Ix 32, Ix 32, NZBit 32] >>= [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Inferred k113 :: {NZBit 32, Ix 32} [Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Inferred b226 :: [Ix 32, NZBit 32] >>= [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
Inferred k114 :: {NZBit 32} [Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]
Inferred b227 :: [NZBit 32] >>= [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Inferred k115 :: {} [NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Inferred b228 :: [] >>= [[NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]]
generics for hputDigitsFmt: [] in type [[NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]]
TopLevel group inferred hputDigitsFmt :: [[NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]]
Generalizing definition for: hputDigitsFmt with generics []
Inferred hputDigitsFmt :: [NZBit 32] ->> [[Ix 32] ->> [[Ix 32] ->> [[Bit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]]]
Inferred b218 :: [NZBit 32] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred k108 :: {} [NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred b219 :: [] >>= [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
generics for hputDigits: [] in type [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
TopLevel group inferred hputDigits :: [[NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]]
Generalizing definition for: hputDigits with generics []
Inferred hputDigits :: [NZBit 32] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Inferred b138 :: [] >>= [NZBit 32]
generics for nz10: [] in type [NZBit 32]
TopLevel group inferred nz10 :: [NZBit 32]
Generalizing definition for: nz10 with generics []
Inferred nz10 :: NZBit 32
Inferred b207 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
generics for hputUnsigned: [] in type [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred hputUnsigned :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: hputUnsigned with generics []
Inferred hputUnsigned :: [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b106 :: [Bit 16, Bit 32] >>= [Bit 16]
Inferred k66 :: {Bit 16} [Bit 32] ->> [Bit 16]
Inferred b107 :: [Bit 16] >>= [[Bit 32] ->> [Bit 16]]
Inferred k67 :: {} [Bit 16] ->> [[Bit 32] ->> [Bit 16]]
Inferred b108 :: [] >>= [[Bit 16] ->> [[Bit 32] ->> [Bit 16]]]
generics for portPlus: [] in type [[Bit 16] ->> [[Bit 32] ->> [Bit 16]]]
TopLevel group inferred portPlus :: [[Bit 16] ->> [[Bit 32] ->> [Bit 16]]]
Generalizing definition for: portPlus with generics []
Inferred portPlus :: [Bit 16] ->> [[Bit 32] ->> [Bit 16]]
Inferred b267 :: [] >>= [Bit 16]
generics for com1data: [] in type [Bit 16]
TopLevel group inferred com1data :: [Bit 16]
Generalizing definition for: com1data with generics []
Inferred com1data :: Bit 16
Inferred b268 :: [] >>= [Bit 16]
generics for com1ctrl: [] in type [Bit 16]
TopLevel group inferred com1ctrl :: [Bit 16]
Generalizing definition for: com1ctrl with generics []
Inferred com1ctrl :: Bit 16
Inferred b255 :: [Unit] >>= [Unit]
Inferred b256 :: [Bit 32] >>= [Unit]
Inferred b260 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k128 :: {} [Bit 32] ->> [[] ->> [Unit]]
Inferred b259 :: [Bit 32] >>= [[] ->> [Unit]]
Inferred k127 :: {Bit 32} [] ->> [Unit]
Inferred b258 :: [Bit 32] >>= [Unit]
Inferred b257 :: [Bit 32] >>= [Unit]
generics for put5: [] in type [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel group inferred put5 :: [[Bit 32] ->> [[] ->> [Unit]]]
Generalizing definition for: put5 with generics []
Inferred put5 :: [Bit 32] ->> [[] ->> [Unit]]
Inferred b261 :: [Unit] >>= [Unit]
Inferred b263 :: [] >>= [Unit]
Inferred b262 :: [] >>= [Unit]
Inferred b264 :: [Bit 32] >>= [Unit]
Inferred k129 :: {Bit 32} [] ->> [Unit]
Inferred b265 :: [Bit 32] >>= [[] ->> [Unit]]
Inferred k130 :: {} [Bit 32] ->> [[] ->> [Unit]]
Inferred b266 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
generics for sputchar: [] in type [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel group inferred sputchar :: [[Bit 32] ->> [[] ->> [Unit]]]
Generalizing definition for: sputchar with generics []
Inferred sputchar :: [Bit 32] ->> [[] ->> [Unit]]
generics for True: [] in type [Bool]
TopLevel group inferred True :: [Bool]
Generalizing definition for: True with generics []
Inferred True :: Bool
Inferred b821 :: [[] ->> [Ix 80], [Ix 80] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred k521 :: {[Ix 80] ->> [[] ->> [Unit]], [] ->> [Ix 80]} [] ->> [Unit]
Inferred b831 :: [[] ->> [Ix 80], [Ix 80] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k531 :: {[] ->> [Ix 80]} [[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
Inferred b841 :: [[] ->> [Ix 80]] >>= [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred k541 :: {} [[] ->> [Ix 80]] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b851 :: [] >>= [[[] ->> [Ix 80]] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
generics for s10: [] in type [[[] ->> [Ix 80]] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
TopLevel group inferred s10 :: [[[] ->> [Ix 80]] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Generalizing definition for: s10 with generics []
Inferred s10 :: [[] ->> [Ix 80]] ->> [[[Ix 80] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b861 :: [Ref (Stored (Ix 80)), Ref (Stored (Ix 80))] >>= [[] ->> [Unit]]
Inferred k551 :: {Ref (Stored (Ix 80))} [Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]
Inferred b871 :: [Ref (Stored (Ix 80))] >>= [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]]
Inferred k561 :: {} [Ref (Stored (Ix 80))] ->> [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]]
Inferred b881 :: [] >>= [[Ref (Stored (Ix 80))] ->> [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]]]
generics for >->: [] in type [[Ref (Stored (Ix 80))] ->> [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]]]
TopLevel group inferred >-> :: [[Ref (Stored (Ix 80))] ->> [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]]]
Generalizing definition for: >-> with generics []
Inferred >-> :: [Ref (Stored (Ix 80))] ->> [[Ref (Stored (Ix 80))] ->> [[] ->> [Unit]]]
Inferred b374 :: [Unit] >>= [Unit]
Inferred b376 :: [Maybe1, Ref Window] >>= [Unit]
Inferred b82 :: [[] ->> [Char], [Char] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred k52 :: {[Char] ->> [[] ->> [Unit]], [] ->> [Char]} [] ->> [Unit]
Inferred b83 :: [[] ->> [Char], [Char] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k53 :: {[] ->> [Char]} [[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
Inferred b84 :: [[] ->> [Char]] >>= [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred k54 :: {} [[] ->> [Char]] ->> [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b85 :: [] >>= [[[] ->> [Char]] ->> [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
generics for s9: [] in type [[[] ->> [Char]] ->> [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
TopLevel group inferred s9 :: [[[] ->> [Char]] ->> [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Generalizing definition for: s9 with generics []
Inferred s9 :: [[] ->> [Char]] ->> [[[Char] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b86 :: [Ref (Stored Char), Ref (Stored Char)] >>= [[] ->> [Unit]]
Inferred k55 :: {Ref (Stored Char)} [Ref (Stored Char)] ->> [[] ->> [Unit]]
Inferred b87 :: [Ref (Stored Char)] >>= [[Ref (Stored Char)] ->> [[] ->> [Unit]]]
Inferred k56 :: {} [Ref (Stored Char)] ->> [[Ref (Stored Char)] ->> [[] ->> [Unit]]]
Inferred b88 :: [] >>= [[Ref (Stored Char)] ->> [[Ref (Stored Char)] ->> [[] ->> [Unit]]]]
generics for s8: [] in type [[Ref (Stored Char)] ->> [[Ref (Stored Char)] ->> [[] ->> [Unit]]]]
TopLevel group inferred s8 :: [[Ref (Stored Char)] ->> [[Ref (Stored Char)] ->> [[] ->> [Unit]]]]
Generalizing definition for: s8 with generics []
Inferred s8 :: [Ref (Stored Char)] ->> [[Ref (Stored Char)] ->> [[] ->> [Unit]]]
Inferred b383 :: [Ix 25, Ix 25, Ix 80] >>= [[] ->> [Unit]]
Inferred k182 :: {Ix 25, Ix 25} [Ix 80] ->> [[] ->> [Unit]]
Inferred b384 :: [Ix 25, Ix 25] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Inferred b385 :: [Ix 80, Ix 80, Ix 25, Ix 25] >>= [[] ->> [Unit]]
Inferred k183 :: {Ix 25, Ix 80, Ix 80} [Ix 25] ->> [[] ->> [Unit]]
Inferred b386 :: [Ix 80, Ix 80, Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Inferred k184 :: {Ix 80, Ix 80} [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b387 :: [Ix 80, Ix 80] >>= [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Inferred b381 :: [Ix 25, Ix 80, Bit 8] >>= [[] ->> [Unit]]
Inferred k181 :: {Bit 8, Ix 25} [Ix 80] ->> [[] ->> [Unit]]
Inferred b382 :: [Ix 25, Bit 8] >>= [[Ix 80] ->> [[] ->> [Unit]]]
Inferred b302 :: [[] ->> [Unit]] >>= [[] ->> [Unit]]
Inferred b303 :: [[] ->> [Unit]] >>= [[] ->> [Unit]]
Inferred b311 :: [] >>= [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]]
Inferred k144 :: {} [Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
Inferred b310 :: [Ix 25] >>= [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
Inferred k143 :: {Ix 25} [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Inferred b309 :: [[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25] >>= [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Inferred k142 :: {Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]} [[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b308 :: [[] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b307 :: [Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Inferred k141 :: {[] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25} [Ix 25] ->> [[] ->> [Unit]]
Inferred b306 :: [Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[] ->> [Unit]]
Inferred b305 :: [Maybe1, Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit]] >>= [[] ->> [Unit]]
Inferred k140 :: {Ix 25, [] ->> [Unit], [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], Ix 25, Ix 25} [] ->> [Unit]
Inferred b304 :: [Ix 25, Ix 25, [Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]], [] ->> [Unit], Ix 25] >>= [Unit]
generics for loop7: [] in type [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]]
TopLevel group inferred loop7 :: [[Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]]
Generalizing definition for: loop7 with generics []
Inferred loop7 :: [Ix 25] ->> [[[Ix 25] ->> [[Ix 25] ->> [[] ->> [Unit]]]] ->> [[[] ->> [Unit]] ->> [[Ix 25] ->> [[] ->> [Unit]]]]]
Inferred b388 :: [Ref Window] >>= [Unit]
Inferred k185 :: {Ref Window} [] ->> [Unit]
Inferred b389 :: [Ref Window] >>= [[] ->> [Unit]]
Inferred k186 :: {} [Ref Window] ->> [[] ->> [Unit]]
Inferred b390 :: [] >>= [[Ref Window] ->> [[] ->> [Unit]]]
generics for scroll: [] in type [[Ref Window] ->> [[] ->> [Unit]]]
TopLevel group inferred scroll :: [[Ref Window] ->> [[] ->> [Unit]]]
Generalizing definition for: scroll with generics []
Inferred scroll :: [Ref Window] ->> [[] ->> [Unit]]
Inferred b375 :: [Ref Window] >>= [Unit]
Inferred b377 :: [Ix 25, Ref Window] >>= [Unit]
Inferred k178 :: {Ref Window, Ix 25} [] ->> [Unit]
Inferred b378 :: [Ix 25, Ref Window] >>= [[] ->> [Unit]]
Inferred k179 :: {Ref Window} [Ix 25] ->> [[] ->> [Unit]]
Inferred b379 :: [Ref Window] >>= [[Ix 25] ->> [[] ->> [Unit]]]
Inferred k180 :: {} [Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b380 :: [] >>= [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
generics for newline: [] in type [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
TopLevel group inferred newline :: [[Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]]
Generalizing definition for: newline with generics []
Inferred newline :: [Ref Window] ->> [[Ix 25] ->> [[] ->> [Unit]]]
Inferred b354 :: [Unit] >>= [Unit]
Inferred b359 :: [Ref Window, Ix 25] >>= [Unit]
Inferred b355 :: [Unit] >>= [Unit]
Inferred b357 :: [Maybe0, Ref Window] >>= [Unit]
Inferred b356 :: [Ref Window, Ix 25] >>= [Unit]
Inferred b358 :: [Bit 32, Ref Window, Ix 25] >>= [Unit]
Inferred b360 :: [Bool, Bit 32, Ref Window, Ix 25] >>= [Unit]
Inferred b362 :: [Ix 25, Ref Window, Bit 32] >>= [Unit]
Inferred b361 :: [Ix 25, Ref Window, Bit 32] >>= [Unit]
Inferred b363 :: [Ref Window, Bit 32] >>= [Unit]
Inferred k169 :: {Bit 32, Ref Window} [] ->> [Unit]
Inferred b364 :: [Ref Window, Bit 32] >>= [[] ->> [Unit]]
Inferred k170 :: {Ref Window} [Bit 32] ->> [[] ->> [Unit]]
Inferred b365 :: [Ref Window] >>= [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k171 :: {} [Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b366 :: [] >>= [[Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
generics for wputchar: [] in type [[Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred wputchar :: [[Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: wputchar with generics []
Inferred wputchar :: [Ref Window] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b392 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
generics for putchar: [] in type [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel group inferred putchar :: [[Bit 32] ->> [[] ->> [Unit]]]
Generalizing definition for: putchar with generics []
Inferred putchar :: [Bit 32] ->> [[] ->> [Unit]]
Inferred b394 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
generics for putUnsigned: [] in type [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel group inferred putUnsigned :: [[Bit 32] ->> [[] ->> [Unit]]]
Generalizing definition for: putUnsigned with generics []
Inferred putUnsigned :: [Bit 32] ->> [[] ->> [Unit]]
Inferred loadCharImp1 :: {Addr} [] ->> [Bit 8]
Inferred b66 :: [Addr] >>= [[] ->> [Bit 8]]
Inferred k45 :: {} [Addr] ->> [[] ->> [Bit 8]]
Inferred b67 :: [] >>= [[Addr] ->> [[] ->> [Bit 8]]]
generics for loadCharImp: [] in type [[Addr] ->> [[] ->> [Bit 8]]]
TopLevel group inferred loadCharImp :: [[Addr] ->> [[] ->> [Bit 8]]]
Generalizing definition for: loadCharImp with generics []
Inferred loadCharImp :: [Addr] ->> [[] ->> [Bit 8]]
Inferred ret13 :: {Maybe12} [] ->> [Maybe12]
Inferred b93 :: [Maybe12] >>= [[] ->> [Maybe12]]
Inferred k83 :: {} [Maybe12] ->> [[] ->> [Maybe12]]
Inferred b103 :: [] >>= [[Maybe12] ->> [[] ->> [Maybe12]]]
generics for s38: [] in type [[Maybe12] ->> [[] ->> [Maybe12]]]
TopLevel group inferred s38 :: [[Maybe12] ->> [[] ->> [Maybe12]]]
Generalizing definition for: s38 with generics []
Inferred s38 :: [Maybe12] ->> [[] ->> [Maybe12]]
generics for s35: [] in type [[Maybe12] ->> [[] ->> [Maybe12]]]
TopLevel group inferred s35 :: [[Maybe12] ->> [[] ->> [Maybe12]]]
Generalizing definition for: s35 with generics []
Inferred s35 :: [Maybe12] ->> [[] ->> [Maybe12]]
generics for s39: [] in type [Maybe12]
TopLevel group inferred s39 :: [Maybe12]
Generalizing definition for: s39 with generics []
Inferred s39 :: Maybe12
Inferred b122 :: [Maybe12] >>= [Maybe12]
Inferred b124 :: [] >>= [Maybe12]
Inferred k54 :: {} [Pair11] ->> [Maybe12]
Inferred b64 :: [] >>= [[Pair11] ->> [Maybe12]]
generics for s36: [] in type [[Pair11] ->> [Maybe12]]
TopLevel group inferred s36 :: [[Pair11] ->> [Maybe12]]
Generalizing definition for: s36 with generics []
Inferred s36 :: [Pair11] ->> [Maybe12]
Inferred k31 :: {Bit 32} [Bit 32] ->> [Pair11]
Inferred b41 :: [Bit 32] >>= [[Bit 32] ->> [Pair11]]
Inferred k41 :: {} [Bit 32] ->> [[Bit 32] ->> [Pair11]]
Inferred b51 :: [] >>= [[Bit 32] ->> [[Bit 32] ->> [Pair11]]]
generics for s37: [] in type [[Bit 32] ->> [[Bit 32] ->> [Pair11]]]
TopLevel group inferred s37 :: [[Bit 32] ->> [[Bit 32] ->> [Pair11]]]
Generalizing definition for: s37 with generics []
Inferred s37 :: [Bit 32] ->> [[Bit 32] ->> [Pair11]]
Inferred b64 :: [Bit 32] >>= [Bit 32]
Inferred k44 :: {} [Bit 32] ->> [Bit 32]
Inferred b65 :: [] >>= [[Bit 32] ->> [Bit 32]]
generics for ptrToWordImp: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred ptrToWordImp :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: ptrToWordImp with generics []
Inferred ptrToWordImp :: [Bit 32] ->> [Bit 32]
Inferred b123 :: [Bit 32, Ref String] >>= [Maybe12]
Inferred b125 :: [Ref String] >>= [Maybe12]
Inferred k75 :: {Ref String} [] ->> [Maybe12]
Inferred b126 :: [Ref String] >>= [[] ->> [Maybe12]]
Inferred k76 :: {} [Ref String] ->> [[] ->> [Maybe12]]
Inferred b127 :: [] >>= [[Ref String] ->> [[] ->> [Maybe12]]]
generics for nextCharImp: [] in type [[Ref String] ->> [[] ->> [Maybe12]]]
TopLevel group inferred nextCharImp :: [[Ref String] ->> [[] ->> [Maybe12]]]
Generalizing definition for: nextCharImp with generics []
Inferred nextCharImp :: [Ref String] ->> [[] ->> [Maybe12]]
Inferred b200 :: [Unit] >>= [Unit]
Inferred b202 :: [] >>= [Unit]
Inferred b742 :: [Bit 32] >>= [Bit 32]
Inferred b752 :: [Pair9] >>= [Bit 32]
Inferred b762 :: [Pair9] >>= [Bit 32]
Inferred k502 :: {} [Pair9] ->> [Bit 32]
Inferred b772 :: [] >>= [[Pair9] ->> [Bit 32]]
generics for s33: [] in type [[Pair9] ->> [Bit 32]]
TopLevel group inferred s33 :: [[Pair9] ->> [Bit 32]]
Generalizing definition for: s33 with generics []
Inferred s33 :: [Pair9] ->> [Bit 32]
Inferred b782 :: [Ref String] >>= [Ref String]
Inferred b792 :: [Pair9] >>= [Ref String]
Inferred b802 :: [Pair9] >>= [Ref String]
Inferred k512 :: {} [Pair9] ->> [Ref String]
Inferred b812 :: [] >>= [[Pair9] ->> [Ref String]]
generics for s34: [] in type [[Pair9] ->> [Ref String]]
TopLevel group inferred s34 :: [[Pair9] ->> [Ref String]]
Generalizing definition for: s34 with generics []
Inferred s34 :: [Pair9] ->> [Ref String]
Inferred b206 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]]
Inferred k104 :: {} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]
Inferred b205 :: [[Bit 32] ->> [[] ->> [Unit]]] >>= [[Ref String] ->> [[] ->> [Unit]]]
Inferred k103 :: {[Bit 32] ->> [[] ->> [Unit]]} [Ref String] ->> [[] ->> [Unit]]
Inferred b204 :: [Ref String, [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k102 :: {[Bit 32] ->> [[] ->> [Unit]], Ref String} [] ->> [Unit]
Inferred b203 :: [Ref String, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred b201 :: [Maybe10, [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
generics for hputs: [] in type [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]]
TopLevel group inferred hputs :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]]
Generalizing definition for: hputs with generics []
Inferred hputs :: [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[] ->> [Unit]]]
Inferred b393 :: [] >>= [[Ref String] ->> [[] ->> [Unit]]]
generics for puts: [] in type [[Ref String] ->> [[] ->> [Unit]]]
TopLevel group inferred puts :: [[Ref String] ->> [[] ->> [Unit]]]
Generalizing definition for: puts with generics []
Inferred puts :: [Ref String] ->> [[] ->> [Unit]]
Inferred ret11 :: {Bit 32} [] ->> [Bit 32]
Inferred b91 :: [Bit 32] >>= [[] ->> [Bit 32]]
Inferred k81 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
Inferred b101 :: [] >>= [[Bit 32] ->> [[] ->> [Bit 32]]]
generics for s25: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred s25 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: s25 with generics []
Inferred s25 :: [Bit 32] ->> [[] ->> [Bit 32]]
generics for s24: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred s24 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: s24 with generics []
Inferred s24 :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred b4441 :: [Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]], Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred k2131 :: {Bit 32, Ref MimgHeader, [Ref MimgHeader] ->> [[] ->> [Unit]], Ref String} [] ->> [Bit 32]
Inferred b4451 :: [Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]], Ref MimgHeader, Bit 32] >>= [[] ->> [Bit 32]]
Inferred k2141 :: {Bit 32, [Ref MimgHeader] ->> [[] ->> [Unit]], Ref String} [Ref MimgHeader] ->> [[] ->> [Bit 32]]
Inferred b4461 :: [Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]], Bit 32] >>= [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]
Inferred k2151 :: {[Ref MimgHeader] ->> [[] ->> [Unit]], Ref String} [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]
Inferred b4471 :: [Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]]] >>= [[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]]
Inferred b434 :: [Bit 32] >>= [Bit 32]
Inferred b436 :: [Bit 32] >>= [Bit 32]
Inferred b741 :: [Ref MimgHeader] >>= [Ref MimgHeader]
Inferred b751 :: [Pair7] >>= [Ref MimgHeader]
Inferred b761 :: [Pair7] >>= [Ref MimgHeader]
Inferred k501 :: {} [Pair7] ->> [Ref MimgHeader]
Inferred b771 :: [] >>= [[Pair7] ->> [Ref MimgHeader]]
generics for s30: [] in type [[Pair7] ->> [Ref MimgHeader]]
TopLevel group inferred s30 :: [[Pair7] ->> [Ref MimgHeader]]
Generalizing definition for: s30 with generics []
Inferred s30 :: [Pair7] ->> [Ref MimgHeader]
Inferred b781 :: [MimgHeaderCursor] >>= [MimgHeaderCursor]
Inferred b791 :: [Pair7] >>= [MimgHeaderCursor]
Inferred b801 :: [Pair7] >>= [MimgHeaderCursor]
Inferred k511 :: {} [Pair7] ->> [MimgHeaderCursor]
Inferred b811 :: [] >>= [[Pair7] ->> [MimgHeaderCursor]]
generics for s31: [] in type [[Pair7] ->> [MimgHeaderCursor]]
TopLevel group inferred s31 :: [[Pair7] ->> [MimgHeaderCursor]]
Generalizing definition for: s31 with generics []
Inferred s31 :: [Pair7] ->> [MimgHeaderCursor]
Inferred b4421 :: [] >>= [[[MimgHeaderCursor] ->> [Maybe8]] ->> [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]]
Inferred k2111 :: {} [[MimgHeaderCursor] ->> [Maybe8]] ->> [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]
Inferred b4411 :: [[MimgHeaderCursor] ->> [Maybe8]] >>= [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]
Inferred k2101 :: {[MimgHeaderCursor] ->> [Maybe8]} [[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]
Inferred b4401 :: [[MimgHeaderCursor] ->> [Maybe8], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]
Inferred k2091 :: {[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], [MimgHeaderCursor] ->> [Maybe8]} [Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]
Inferred b4391 :: [Bit 32, [MimgHeaderCursor] ->> [Maybe8], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]
Inferred k2081 :: {[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], [MimgHeaderCursor] ->> [Maybe8], Bit 32} [MimgHeaderCursor] ->> [[] ->> [Bit 32]]
Inferred b4381 :: [MimgHeaderCursor, Bit 32, [MimgHeaderCursor] ->> [Maybe8], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [[] ->> [Bit 32]]
Inferred k2071 :: {[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], [MimgHeaderCursor] ->> [Maybe8], Bit 32, MimgHeaderCursor} [] ->> [Bit 32]
Inferred b4371 :: [MimgHeaderCursor, Bit 32, [MimgHeaderCursor] ->> [Maybe8], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [Bit 32]
Inferred b4351 :: [Maybe8, Bit 32, [MimgHeaderCursor] ->> [Maybe8], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] >>= [Bit 32]
generics for s29: [] in type [[[MimgHeaderCursor] ->> [Maybe8]] ->> [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]]
TopLevel group inferred s29 :: [[[MimgHeaderCursor] ->> [Maybe8]] ->> [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]]
Generalizing definition for: s29 with generics []
Inferred s29 :: [[MimgHeaderCursor] ->> [Maybe8]] ->> [[[Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgHeaderCursor] ->> [[] ->> [Bit 32]]]]]
Inferred b4431 :: [[MimgHeaderCursor] ->> [Maybe8], [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], MimgHeaderCursor] >>= [Unit]
Inferred k2121 :: {MimgHeaderCursor, [Bit 32] ->> [[Ref MimgHeader] ->> [[] ->> [Bit 32]]], [MimgHeaderCursor] ->> [Maybe8]} [] ->> [Unit]
Inferred b4481 :: [[Ref MimgHeader] ->> [[] ->> [Unit]], Ref String, [MimgHeaderCursor] ->> [Maybe8], MimgHeaderCursor] >>= [[] ->> [Unit]]
Inferred k2161 :: {[MimgHeaderCursor] ->> [Maybe8], Ref String, [Ref MimgHeader] ->> [[] ->> [Unit]]} [MimgHeaderCursor] ->> [[] ->> [Unit]]
Inferred b4491 :: [[Ref MimgHeader] ->> [[] ->> [Unit]], Ref String, [MimgHeaderCursor] ->> [Maybe8]] >>= [[MimgHeaderCursor] ->> [[] ->> [Unit]]]
Inferred k2171 :: {[MimgHeaderCursor] ->> [Maybe8], [Ref MimgHeader] ->> [[] ->> [Unit]]} [Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]
Inferred b4501 :: [[Ref MimgHeader] ->> [[] ->> [Unit]], [MimgHeaderCursor] ->> [Maybe8]] >>= [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]
Inferred k2181 :: {[MimgHeaderCursor] ->> [Maybe8]} [[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]
Inferred b4511 :: [[MimgHeaderCursor] ->> [Maybe8]] >>= [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]]
Inferred k2191 :: {} [[MimgHeaderCursor] ->> [Maybe8]] ->> [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]]
Inferred b4521 :: [] >>= [[[MimgHeaderCursor] ->> [Maybe8]] ->> [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]]]
generics for forallDisplay: [] in type [[[MimgHeaderCursor] ->> [Maybe8]] ->> [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]]]
TopLevel group inferred forallDisplay :: [[[MimgHeaderCursor] ->> [Maybe8]] ->> [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]]]
Generalizing definition for: forallDisplay with generics []
Inferred forallDisplay :: [[MimgHeaderCursor] ->> [Maybe8]] ->> [[[Ref MimgHeader] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgHeaderCursor] ->> [[] ->> [Unit]]]]]
generics for s23: [] in type [Maybe4]
TopLevel group inferred s23 :: [Maybe4]
Generalizing definition for: s23 with generics []
Inferred s23 :: Maybe4
Inferred b490 :: [Maybe4] >>= [Maybe4]
Inferred b492 :: [] >>= [Maybe4]
Inferred k53 :: {} [Pair3] ->> [Maybe4]
Inferred b63 :: [] >>= [[Pair3] ->> [Maybe4]]
generics for s22: [] in type [[Pair3] ->> [Maybe4]]
TopLevel group inferred s22 :: [[Pair3] ->> [Maybe4]]
Generalizing definition for: s22 with generics []
Inferred s22 :: [Pair3] ->> [Maybe4]
Inferred k3 :: {Bit 32} [WordCursor] ->> [Pair3]
Inferred b4 :: [Bit 32] >>= [[WordCursor] ->> [Pair3]]
Inferred k4 :: {} [Bit 32] ->> [[WordCursor] ->> [Pair3]]
Inferred b5 :: [] >>= [[Bit 32] ->> [[WordCursor] ->> [Pair3]]]
generics for Pair: [] in type [[Bit 32] ->> [[WordCursor] ->> [Pair3]]]
TopLevel group inferred Pair :: [[Bit 32] ->> [[WordCursor] ->> [Pair3]]]
Generalizing definition for: Pair with generics []
Inferred Pair :: [Bit 32] ->> [[WordCursor] ->> [Pair3]]
Inferred b491 :: [WordCursor, Bit 32, Bit 32] >>= [Maybe4]
Inferred b493 :: [WordCursor, Bit 32] >>= [Maybe4]
Inferred k231 :: {Bit 32} [WordCursor] ->> [Maybe4]
Inferred b494 :: [Bit 32] >>= [[WordCursor] ->> [Maybe4]]
Inferred k232 :: {} [Bit 32] ->> [[WordCursor] ->> [Maybe4]]
Inferred b495 :: [] >>= [[Bit 32] ->> [[WordCursor] ->> [Maybe4]]]
generics for nextWordCursor: [] in type [[Bit 32] ->> [[WordCursor] ->> [Maybe4]]]
TopLevel group inferred nextWordCursor :: [[Bit 32] ->> [[WordCursor] ->> [Maybe4]]]
Generalizing definition for: nextWordCursor with generics []
Inferred nextWordCursor :: [Bit 32] ->> [[WordCursor] ->> [Maybe4]]
Inferred b500 :: [] >>= [[WordCursor] ->> [Maybe4]]
generics for nextMimgHeader_imp: [] in type [[WordCursor] ->> [Maybe4]]
TopLevel group inferred nextMimgHeader_imp :: [[WordCursor] ->> [Maybe4]]
Generalizing definition for: nextMimgHeader_imp with generics []
Inferred nextMimgHeader_imp :: [WordCursor] ->> [Maybe4]
Inferred b823 :: [[] ->> [Bit 32], [Bit 32] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred k523 :: {[Bit 32] ->> [[] ->> [Unit]], [] ->> [Bit 32]} [] ->> [Unit]
Inferred b833 :: [[] ->> [Bit 32], [Bit 32] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k533 :: {[] ->> [Bit 32]} [[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
Inferred b843 :: [[] ->> [Bit 32]] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred k543 :: {} [[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b853 :: [] >>= [[[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
generics for s21: [] in type [[[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
TopLevel group inferred s21 :: [[[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Generalizing definition for: s21 with generics []
Inferred s21 :: [[] ->> [Bit 32]] ->> [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b139 :: [] >>= [NZBit 32]
generics for nz16: [] in type [NZBit 32]
TopLevel group inferred nz16 :: [NZBit 32]
Generalizing definition for: nz16 with generics []
Inferred nz16 :: NZBit 32
Inferred b217 :: [] >>= [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
generics for hputHex: [] in type [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred hputHex :: [[[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: hputHex with generics []
Inferred hputHex :: [[Bit 32] ->> [[] ->> [Unit]]] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b398 :: [] >>= [[Bit 32] ->> [[] ->> [Unit]]]
generics for putHex: [] in type [[Bit 32] ->> [[] ->> [Unit]]]
TopLevel group inferred putHex :: [[Bit 32] ->> [[] ->> [Unit]]]
Generalizing definition for: putHex with generics []
Inferred putHex :: [Bit 32] ->> [[] ->> [Unit]]
Inferred b479 :: [Ref MimgHeader] >>= [Unit]
Inferred k224 :: {Ref MimgHeader} [] ->> [Unit]
Inferred b480 :: [Ref MimgHeader] >>= [[] ->> [Unit]]
Inferred k225 :: {} [Ref MimgHeader] ->> [[] ->> [Unit]]
Inferred b481 :: [] >>= [[Ref MimgHeader] ->> [[] ->> [Unit]]]
generics for putHeader: [] in type [[Ref MimgHeader] ->> [[] ->> [Unit]]]
TopLevel group inferred putHeader :: [[Ref MimgHeader] ->> [[] ->> [Unit]]]
Generalizing definition for: putHeader with generics []
Inferred putHeader :: [Ref MimgHeader] ->> [[] ->> [Unit]]
Inferred b825 :: [[] ->> [MimgMMapCursor], [MimgMMapCursor] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred k525 :: {[MimgMMapCursor] ->> [[] ->> [Unit]], [] ->> [MimgMMapCursor]} [] ->> [Unit]
Inferred b835 :: [[] ->> [MimgMMapCursor], [MimgMMapCursor] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k535 :: {[] ->> [MimgMMapCursor]} [[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
Inferred b845 :: [[] ->> [MimgMMapCursor]] >>= [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred k545 :: {} [[] ->> [MimgMMapCursor]] ->> [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b855 :: [] >>= [[[] ->> [MimgMMapCursor]] ->> [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
generics for s3: [] in type [[[] ->> [MimgMMapCursor]] ->> [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
TopLevel group inferred s3 :: [[[] ->> [MimgMMapCursor]] ->> [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Generalizing definition for: s3 with generics []
Inferred s3 :: [[] ->> [MimgMMapCursor]] ->> [[[MimgMMapCursor] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b824 :: [[] ->> [Ref MimgMMapBlock], [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] >>= [MimgMMapCursor]
Inferred k524 :: {[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]], [] ->> [Ref MimgMMapBlock]} [] ->> [MimgMMapCursor]
Inferred b834 :: [[] ->> [Ref MimgMMapBlock], [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] >>= [[] ->> [MimgMMapCursor]]
Inferred k534 :: {[] ->> [Ref MimgMMapBlock]} [[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]
Inferred b844 :: [[] ->> [Ref MimgMMapBlock]] >>= [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]]
Inferred k544 :: {} [[] ->> [Ref MimgMMapBlock]] ->> [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]]
Inferred b854 :: [] >>= [[[] ->> [Ref MimgMMapBlock]] ->> [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]]]
generics for s26: [] in type [[[] ->> [Ref MimgMMapBlock]] ->> [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]]]
TopLevel group inferred s26 :: [[[] ->> [Ref MimgMMapBlock]] ->> [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]]]
Generalizing definition for: s26 with generics []
Inferred s26 :: [[] ->> [Ref MimgMMapBlock]] ->> [[[Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]] ->> [[] ->> [MimgMMapCursor]]]
Inferred b498 :: [Ref MimgBootData] >>= [[] ->> [MimgMMapCursor]]
Inferred k234 :: {} [Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]
Inferred b499 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]]
generics for mimgMMap: [] in type [[Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]]
TopLevel group inferred mimgMMap :: [[Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]]
Generalizing definition for: mimgMMap with generics []
Inferred mimgMMap :: [Ref MimgBootData] ->> [[] ->> [MimgMMapCursor]]
Inferred b444 :: [Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]], Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred k213 :: {Bit 32, Ref MimgMMap, [Ref MimgMMap] ->> [[] ->> [Unit]], Ref String} [] ->> [Bit 32]
Inferred b445 :: [Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]], Ref MimgMMap, Bit 32] >>= [[] ->> [Bit 32]]
Inferred k214 :: {Bit 32, [Ref MimgMMap] ->> [[] ->> [Unit]], Ref String} [Ref MimgMMap] ->> [[] ->> [Bit 32]]
Inferred b446 :: [Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]], Bit 32] >>= [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]
Inferred k215 :: {[Ref MimgMMap] ->> [[] ->> [Unit]], Ref String} [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]
Inferred b447 :: [Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]]] >>= [[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]]
Inferred b74 :: [Ref MimgMMap] >>= [Ref MimgMMap]
Inferred b75 :: [Pair5] >>= [Ref MimgMMap]
Inferred b76 :: [Pair5] >>= [Ref MimgMMap]
Inferred k50 :: {} [Pair5] ->> [Ref MimgMMap]
Inferred b77 :: [] >>= [[Pair5] ->> [Ref MimgMMap]]
generics for fst: [] in type [[Pair5] ->> [Ref MimgMMap]]
TopLevel group inferred fst :: [[Pair5] ->> [Ref MimgMMap]]
Generalizing definition for: fst with generics []
Inferred fst :: [Pair5] ->> [Ref MimgMMap]
Inferred b78 :: [MimgMMapCursor] >>= [MimgMMapCursor]
Inferred b79 :: [Pair5] >>= [MimgMMapCursor]
Inferred b80 :: [Pair5] >>= [MimgMMapCursor]
Inferred k51 :: {} [Pair5] ->> [MimgMMapCursor]
Inferred b81 :: [] >>= [[Pair5] ->> [MimgMMapCursor]]
generics for snd: [] in type [[Pair5] ->> [MimgMMapCursor]]
TopLevel group inferred snd :: [[Pair5] ->> [MimgMMapCursor]]
Generalizing definition for: snd with generics []
Inferred snd :: [Pair5] ->> [MimgMMapCursor]
Inferred b442 :: [] >>= [[[MimgMMapCursor] ->> [Maybe6]] ->> [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]]
Inferred k211 :: {} [[MimgMMapCursor] ->> [Maybe6]] ->> [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]
Inferred b441 :: [[MimgMMapCursor] ->> [Maybe6]] >>= [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]
Inferred k210 :: {[MimgMMapCursor] ->> [Maybe6]} [[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]
Inferred b440 :: [[MimgMMapCursor] ->> [Maybe6], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]
Inferred k209 :: {[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], [MimgMMapCursor] ->> [Maybe6]} [Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]
Inferred b439 :: [Bit 32, [MimgMMapCursor] ->> [Maybe6], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]
Inferred k208 :: {[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], [MimgMMapCursor] ->> [Maybe6], Bit 32} [MimgMMapCursor] ->> [[] ->> [Bit 32]]
Inferred b438 :: [MimgMMapCursor, Bit 32, [MimgMMapCursor] ->> [Maybe6], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [[] ->> [Bit 32]]
Inferred k207 :: {[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], [MimgMMapCursor] ->> [Maybe6], Bit 32, MimgMMapCursor} [] ->> [Bit 32]
Inferred b437 :: [MimgMMapCursor, Bit 32, [MimgMMapCursor] ->> [Maybe6], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [Bit 32]
Inferred b435 :: [Maybe6, Bit 32, [MimgMMapCursor] ->> [Maybe6], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] >>= [Bit 32]
generics for forallDoWith: [] in type [[[MimgMMapCursor] ->> [Maybe6]] ->> [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]]
TopLevel group inferred forallDoWith :: [[[MimgMMapCursor] ->> [Maybe6]] ->> [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]]
Generalizing definition for: forallDoWith with generics []
Inferred forallDoWith :: [[MimgMMapCursor] ->> [Maybe6]] ->> [[[Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]]] ->> [[Bit 32] ->> [[MimgMMapCursor] ->> [[] ->> [Bit 32]]]]]
Inferred b443 :: [[MimgMMapCursor] ->> [Maybe6], [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], MimgMMapCursor] >>= [Unit]
Inferred k212 :: {MimgMMapCursor, [Bit 32] ->> [[Ref MimgMMap] ->> [[] ->> [Bit 32]]], [MimgMMapCursor] ->> [Maybe6]} [] ->> [Unit]
Inferred b448 :: [[Ref MimgMMap] ->> [[] ->> [Unit]], Ref String, [MimgMMapCursor] ->> [Maybe6], MimgMMapCursor] >>= [[] ->> [Unit]]
Inferred k216 :: {[MimgMMapCursor] ->> [Maybe6], Ref String, [Ref MimgMMap] ->> [[] ->> [Unit]]} [MimgMMapCursor] ->> [[] ->> [Unit]]
Inferred b449 :: [[Ref MimgMMap] ->> [[] ->> [Unit]], Ref String, [MimgMMapCursor] ->> [Maybe6]] >>= [[MimgMMapCursor] ->> [[] ->> [Unit]]]
Inferred k217 :: {[MimgMMapCursor] ->> [Maybe6], [Ref MimgMMap] ->> [[] ->> [Unit]]} [Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]
Inferred b450 :: [[Ref MimgMMap] ->> [[] ->> [Unit]], [MimgMMapCursor] ->> [Maybe6]] >>= [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]
Inferred k218 :: {[MimgMMapCursor] ->> [Maybe6]} [[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]
Inferred b451 :: [[MimgMMapCursor] ->> [Maybe6]] >>= [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]]
Inferred k219 :: {} [[MimgMMapCursor] ->> [Maybe6]] ->> [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]]
Inferred b452 :: [] >>= [[[MimgMMapCursor] ->> [Maybe6]] ->> [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]]]
generics for s4: [] in type [[[MimgMMapCursor] ->> [Maybe6]] ->> [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]]]
TopLevel group inferred s4 :: [[[MimgMMapCursor] ->> [Maybe6]] ->> [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]]]
Generalizing definition for: s4 with generics []
Inferred s4 :: [[MimgMMapCursor] ->> [Maybe6]] ->> [[[Ref MimgMMap] ->> [[] ->> [Unit]]] ->> [[Ref String] ->> [[MimgMMapCursor] ->> [[] ->> [Unit]]]]]
Inferred b501 :: [] >>= [[WordCursor] ->> [Maybe4]]
generics for nextMimgMMap_imp: [] in type [[WordCursor] ->> [Maybe4]]
TopLevel group inferred nextMimgMMap_imp :: [[WordCursor] ->> [Maybe4]]
Generalizing definition for: nextMimgMMap_imp with generics []
Inferred nextMimgMMap_imp :: [WordCursor] ->> [Maybe4]
Inferred b482 :: [Ref MimgMMap] >>= [Unit]
Inferred k226 :: {Ref MimgMMap} [] ->> [Unit]
Inferred b483 :: [Ref MimgMMap] >>= [[] ->> [Unit]]
Inferred k227 :: {} [Ref MimgMMap] ->> [[] ->> [Unit]]
Inferred b484 :: [] >>= [[Ref MimgMMap] ->> [[] ->> [Unit]]]
generics for putMMap: [] in type [[Ref MimgMMap] ->> [[] ->> [Unit]]]
TopLevel group inferred putMMap :: [[Ref MimgMMap] ->> [[] ->> [Unit]]]
Generalizing definition for: putMMap with generics []
Inferred putMMap :: [Ref MimgMMap] ->> [[] ->> [Unit]]
Inferred b822 :: [[] ->> [Ref String], [Ref String] ->> [[] ->> [Unit]]] >>= [Unit]
Inferred k522 :: {[Ref String] ->> [[] ->> [Unit]], [] ->> [Ref String]} [] ->> [Unit]
Inferred b832 :: [[] ->> [Ref String], [Ref String] ->> [[] ->> [Unit]]] >>= [[] ->> [Unit]]
Inferred k532 :: {[] ->> [Ref String]} [[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]
Inferred b842 :: [[] ->> [Ref String]] >>= [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred k542 :: {} [[] ->> [Ref String]] ->> [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b852 :: [] >>= [[[] ->> [Ref String]] ->> [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
generics for s5: [] in type [[[] ->> [Ref String]] ->> [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
TopLevel group inferred s5 :: [[[] ->> [Ref String]] ->> [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]]
Generalizing definition for: s5 with generics []
Inferred s5 :: [[] ->> [Ref String]] ->> [[[Ref String] ->> [[] ->> [Unit]]] ->> [[] ->> [Unit]]]
Inferred b505 :: [Ref String, Ref String] >>= [Unit]
Inferred k237 :: {Ref String, Ref String} [] ->> [Unit]
Inferred b506 :: [Ref String, Ref String] >>= [[] ->> [Unit]]
Inferred k238 :: {Ref String} [Ref String] ->> [[] ->> [Unit]]
Inferred b507 :: [Ref String] >>= [[Ref String] ->> [[] ->> [Unit]]]
Inferred k239 :: {} [Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]
Inferred b508 :: [] >>= [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]]
generics for showMimgString: [] in type [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]]
TopLevel group inferred showMimgString :: [[Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]]
Generalizing definition for: showMimgString with generics []
Inferred showMimgString :: [Ref String] ->> [[Ref String] ->> [[] ->> [Unit]]]
Inferred b502 :: [Ref MimgBootData] >>= [Unit]
Inferred k235 :: {Ref MimgBootData} [] ->> [Unit]
Inferred b503 :: [Ref MimgBootData] >>= [[] ->> [Unit]]
Inferred k236 :: {} [Ref MimgBootData] ->> [[] ->> [Unit]]
Inferred b504 :: [] >>= [[Ref MimgBootData] ->> [[] ->> [Unit]]]
generics for putMimgBootData: [] in type [[Ref MimgBootData] ->> [[] ->> [Unit]]]
TopLevel group inferred putMimgBootData :: [[Ref MimgBootData] ->> [[] ->> [Unit]]]
Generalizing definition for: putMimgBootData with generics []
Inferred putMimgBootData :: [Ref MimgBootData] ->> [[] ->> [Unit]]
Inferred b509 :: [] >>= [Unit]
Inferred k240 :: {} [] ->> [Unit]
Inferred b510 :: [] >>= [[] ->> [Unit]]
generics for kernel: [] in type [[] ->> [Unit]]
TopLevel group inferred kernel :: [[] ->> [Unit]]
Generalizing definition for: kernel with generics []
Inferred kernel :: [] ->> [Unit]
Running optimizer ...
-------------------------
applied right monad law in b6
applied right monad law in b9
applied right monad law in b10
suffixInline succeeded for call to block b293 from block b295
applied right monad law in b3011
applied right monad law in b3001
applied right monad law in b2981
applied right monad law in b2971
elided call to goto block b2991
suffixInline succeeded for call to block b293 from block b2941
applied right monad law in b3411
applied right monad law in b3421
applied right monad law in b3431
applied right monad law in b61
applied right monad law in b301
applied right monad law in b300
applied right monad law in b298
applied right monad law in b297
elided call to goto block b299
suffixInline succeeded for call to block b293 from block b294
applied right monad law in b341
applied right monad law in b342
applied right monad law in b343
applied right monad law in b316
applied right monad law in b317
applied right monad law in b313
applied right monad law in b348
prefixInline succeeded for call to block b348 from block b349
applied right monad law in b350
prefixInline succeeded for call to block b350 from block b351
applied right monad law in b352
applied right monad law in b353
applied right monad law in b332
applied right monad law in b333
applied right monad law in b335
applied right monad law in b336
applied right monad law in b337
applied right monad law in b338
applied right monad law in b339
applied right monad law in b837
applied right monad law in b847
applied right monad law in b857
applied right monad law in b836
applied right monad law in b846
applied right monad law in b856
applied right monad law in b92
applied right monad law in b102
applied right monad law in b12
applied right monad law in b13
applied right monad law in b489
applied right monad law in b486
applied right monad law in b487
applied right monad law in b497
applied right monad law in b62
suffixInline succeeded for call to block b176 from block b178
applied right monad law in b185
applied right monad law in b184
applied right monad law in b183
applied right monad law in b181
applied right monad law in b180
elided call to goto block b182
suffixInline succeeded for call to block b176 from block b177
applied right monad law in b253
prefixInline succeeded for call to block b253 from block b254
applied right monad law in b165
suffixInline succeeded for call to block b168 from block b170
applied right monad law in b175
applied right monad law in b173
applied right monad law in b172
elided call to goto block b174
suffixInline succeeded for call to block b168 from block b169
applied right monad law in b221
applied right monad law in b222
suffixInline succeeded for call to block bconv from block b61
applied right monad law in b62
applied right monad law in b63
suffixInline succeeded for call to block b229 from block b231
applied right monad law in b15
applied right monad law in b16
suffixInline succeeded for call to block b229 from block b230
applied right monad law in b233
suffixInline succeeded for call to block b186 from block b191
suffixInline succeeded for call to block bconv from block b34
applied right monad law in b35
applied right monad law in b36
suffixInline succeeded for call to block b186 from block b187
suffixInline succeeded for call to block b187 from block b189
applied right monad law in b199
applied right monad law in b198
applied right monad law in b197
applied right monad law in b195
applied right monad law in b194
applied right monad law in b193
elided call to goto block b196
suffixInline succeeded for call to block b187 from block b188
prefixInline succeeded for call to block b222 from block b223
applied right monad law in b224
applied right monad law in b225
applied right monad law in b226
applied right monad law in b227
applied right monad law in b228
applied right monad law in b219
applied right monad law in b107
applied right monad law in b108
suffixInline succeeded for call to block b255 from block b256
applied right monad law in b260
applied right monad law in b259
suffixInline succeeded for call to block b255 from block b257
suffixInline succeeded for call to block b261 from block b263
suffixInline succeeded for call to block b261 from block b262
applied right monad law in b265
applied right monad law in b266
applied right monad law in b831
applied right monad law in b841
applied right monad law in b851
applied right monad law in b871
applied right monad law in b881
suffixInline succeeded for call to block b374 from block b376
applied right monad law in b83
applied right monad law in b84
applied right monad law in b85
applied right monad law in b87
applied right monad law in b88
applied right monad law in b384
prefixInline succeeded for call to block b384 from block b385
applied right monad law in b386
applied right monad law in b387
applied right monad law in b382
suffixInline succeeded for call to block b302 from block b303
applied right monad law in b311
applied right monad law in b310
applied right monad law in b309
applied right monad law in b307
elided call to goto block b308
suffixInline succeeded for call to block b302 from block b305
prefixInline succeeded for call to block b387 from block b388
prefixInline succeeded for call to block b382 from block b388
applied right monad law in b389
applied right monad law in b390
suffixInline succeeded for call to block b374 from block b375
applied right monad law in b378
applied right monad law in b379
applied right monad law in b380
suffixInline succeeded for call to block b354 from block b359
suffixInline succeeded for call to block b354 from block b355
suffixInline succeeded for call to block b355 from block b357
suffixInline succeeded for call to block b355 from block b356
suffixInline succeeded for call to block b360 from block b362
suffixInline succeeded for call to block b360 from block b361
applied right monad law in b364
applied right monad law in b365
applied right monad law in b366
applied right monad law in b66
applied right monad law in b67
applied right monad law in b93
applied right monad law in b103
suffixInline succeeded for call to block b122 from block b124
applied right monad law in b64
applied right monad law in b41
applied right monad law in b51
applied right monad law in b65
suffixInline succeeded for call to block b122 from block b123
applied right monad law in b126
applied right monad law in b127
suffixInline succeeded for call to block b200 from block b202
suffixInline succeeded for call to block b742 from block b752
elided call to goto block b762
applied right monad law in b772
suffixInline succeeded for call to block b782 from block b792
elided call to goto block b802
applied right monad law in b812
applied right monad law in b206
applied right monad law in b205
applied right monad law in b204
suffixInline succeeded for call to block b200 from block b201
applied right monad law in b91
applied right monad law in b101
applied right monad law in b4451
applied right monad law in b4461
applied right monad law in b4471
suffixInline succeeded for call to block b434 from block b436
suffixInline succeeded for call to block b741 from block b751
elided call to goto block b761
applied right monad law in b771
suffixInline succeeded for call to block b781 from block b791
elided call to goto block b801
applied right monad law in b811
applied right monad law in b4421
applied right monad law in b4411
applied right monad law in b4401
applied right monad law in b4391
applied right monad law in b4381
suffixInline succeeded for call to block b434 from block b4351
applied right monad law in b4481
prefixInline succeeded for call to block b4471 from block b4481
applied right monad law in b4491
applied right monad law in b4501
applied right monad law in b4511
applied right monad law in b4521
suffixInline succeeded for call to block b490 from block b492
applied right monad law in b63
applied right monad law in b4
applied right monad law in b5
suffixInline succeeded for call to block b490 from block b491
applied right monad law in b494
applied right monad law in b495
applied right monad law in b833
applied right monad law in b843
applied right monad law in b853
applied right monad law in b480
applied right monad law in b481
applied right monad law in b835
applied right monad law in b845
applied right monad law in b855
applied right monad law in b834
applied right monad law in b844
applied right monad law in b854
applied right monad law in b499
applied right monad law in b445
applied right monad law in b446
applied right monad law in b447
suffixInline succeeded for call to block b74 from block b75
elided call to goto block b76
applied right monad law in b77
suffixInline succeeded for call to block b78 from block b79
elided call to goto block b80
applied right monad law in b81
applied right monad law in b442
applied right monad law in b441
applied right monad law in b440
applied right monad law in b439
applied right monad law in b438
suffixInline succeeded for call to block b434 from block b435
applied right monad law in b448
prefixInline succeeded for call to block b447 from block b448
applied right monad law in b449
applied right monad law in b450
applied right monad law in b451
applied right monad law in b452
applied right monad law in b483
applied right monad law in b484
applied right monad law in b832
applied right monad law in b842
applied right monad law in b852
applied right monad law in b506
applied right monad law in b507
applied right monad law in b508
applied right monad law in b503
applied right monad law in b504
applied right monad law in b510
Inlining pass finished, running shake.
lifted allocator for t5699
lifted allocator for t5699
lifted allocator for t5699
lifted allocator for t5699
lifted allocator for t5699
lifted allocator for t5759
lifted allocator for t5759
lifted allocator for t5759
lifted allocator for t5759
lifted allocator for t5759
lifting static allocator to top-level s42
lifted allocator for t6500
lifted allocator for t6500
lifted allocator for t6500
lifted allocator for t6500
lifted allocator for t6500
lifted allocator for t6632
lifted allocator for t6638
lifted allocator for t6638
lifted allocator for t6638
lifted allocator for t6638
lifted allocator for t6638
lifted allocator for t6632
lifted allocator for t6632
lifted allocator for t6632
lifted allocator for t6632
applied left monad law for t5650 <- return @
applied left monad law for t5651 <- return @1
applied left monad law for t5653 <- return t5652
applied left monad law for t5656 <- return t5655
applied left monad law for t5664 <- return wordToByte
replacing reference to top level defAttr with X0a
applied left monad law for t5669 <- return char
rewriting char @ [32]
applied left monad law for t5673 <- return set
applied left monad law for t5674 <- return pos
rewriting pos @ [t5670]
applied left monad law for t5676 <- return t5675
rewriting t5675 @ [t5671]
applied left monad law for t5679 <- return t5678
applied left monad law for t5680 <- return blank
liveness replaced t5675 with a wildcard
applied left monad law for t5579 <- return genLtInc1
applied left monad law for t5581 <- return t5580
applied left monad law for t5582 <- return ix1u1
applied left monad law for t5583 <- return s11
replacing s11 @ ... with block call
applied left monad law for t7638 <- return s12
deriving specialized block b512 for BlockCall to block b511
applied left monad law for t5509 <- return return
replacing return @ ... with block call
applied left monad law for t7640 <- return Unit
applied left monad law for t7641 <- return primRet
rewriting primRet @ [Unit]
deriving specialized closure definition k241 for ClosAlloc using ret1
deriving specialized block b515 for BlockCall to block b514
applied left monad law for t5511 <- return t5510
applied left monad law for t5608 <- return t5607
applied left monad law for t5610 <- return t5609
applied left monad law for t5612 <- return ltInc
replacing ltInc @ ... with block call
applied left monad law for t5614 <- return t5613
applied left monad law for t5620 <- return loop6
rewriting loop6 @ [t5617]
applied left monad law for t5622 <- return t5621
rewriting t5621 @ [t5618]
applied left monad law for t5624 <- return t5623
rewriting t5623 @ [t5619]
applied left monad law for t5626 <- return t5625
rewriting t5625 @ []
liveness replaced t5625 with a wildcard
liveness replaced t5623 with a wildcard
liveness replaced t5621 with a wildcard
deriving specialized block b518 for BlockCall to block b294
liveness replaced t5611 with a wildcard
applied left monad law for t5620 <- return loop6
rewriting loop6 @ [t5617]
applied left monad law for t5622 <- return t5621
rewriting t5621 @ [t5618]
applied left monad law for t5624 <- return t5623
rewriting t5623 @ [t5619]
applied left monad law for t5626 <- return t5625
rewriting t5625 @ []
liveness replaced t5625 with a wildcard
liveness replaced t5623 with a wildcard
liveness replaced t5621 with a wildcard
applied left monad law for t5631 <- return loop6
rewriting loop6 @ [t5628]
applied left monad law for t5633 <- return t5632
rewriting t5632 @ [t5629]
applied left monad law for t5635 <- return t5634
rewriting t5634 @ [t5630]
liveness replaced t5634 with a wildcard
liveness replaced t5632 with a wildcard
applied left monad law for t5694 <- return for
rewriting for @ [t5690]
applied left monad law for t5696 <- return t5695
rewriting t5695 @ [t5691]
applied left monad law for t5698 <- return t5697
rewriting t5697 @ [t5699]
deriving specialized closure definition k242 for ClosAlloc using k137
deriving specialized closure definition k243 for ClosAlloc using k136
liveness replaced t5629 with a wildcard
deriving specialized block b519 for BlockCall to block b340
liveness replaced t5697 with a wildcard
liveness replaced t5695 with a wildcard
liveness replaced t5699 with a wildcard
applied left monad law for t5498 <- return genLtInc
applied left monad law for t5500 <- return t5499
applied left monad law for t5501 <- return ix1u
applied left monad law for t5502 <- return ltIncBy
replacing ltIncBy @ ... with block call
applied left monad law for t7651 <- return ix1
deriving specialized block b523 for BlockCall to block b522
applied left monad law for t5537 <- return t5536
applied left monad law for t5539 <- return t5538
applied left monad law for t5541 <- return s7
replacing s7 @ ... with block call
applied left monad law for t5543 <- return t5542
applied left monad law for t5549 <- return s41
rewriting s41 @ [t5546]
applied left monad law for t5551 <- return t5550
rewriting t5550 @ [t5547]
applied left monad law for t5553 <- return t5552
rewriting t5552 @ [t5548]
applied left monad law for t5555 <- return t5554
rewriting t5554 @ []
liveness replaced t5554 with a wildcard
liveness replaced t5552 with a wildcard
liveness replaced t5550 with a wildcard
deriving specialized block b525 for BlockCall to block b2941
liveness replaced t5540 with a wildcard
applied left monad law for t5549 <- return s41
rewriting s41 @ [t5546]
applied left monad law for t5551 <- return t5550
rewriting t5550 @ [t5547]
applied left monad law for t5553 <- return t5552
rewriting t5552 @ [t5548]
applied left monad law for t5555 <- return t5554
rewriting t5554 @ []
liveness replaced t5554 with a wildcard
liveness replaced t5552 with a wildcard
liveness replaced t5550 with a wildcard
applied left monad law for t5560 <- return s41
rewriting s41 @ [t5557]
applied left monad law for t5562 <- return t5561
rewriting t5561 @ [t5558]
applied left monad law for t5564 <- return t5563
rewriting t5563 @ [t5559]
liveness replaced t5563 with a wildcard
liveness replaced t5561 with a wildcard
applied left monad law for t5709 <- return get1
applied left monad law for t5713 <- return t5712
applied left monad law for t5715 <- return get2
cse: using previously computed value t5710 for t5716
applied left monad law for t5719 <- return t5718
applied left monad law for t5721 <- return set1
applied left monad law for t5725 <- return t5724
applied left monad law for t5727 <- return t5726
applied left monad law for t5729 <- return set2
cse: using previously computed value t5722 for t5730
applied left monad law for t5733 <- return t5732
applied left monad law for t5735 <- return t5734
applied left monad law for t5737 <- return get1
applied left monad law for t5741 <- return t5740
applied left monad law for t5743 <- return get2
cse: using previously computed value t5738 for t5744
applied left monad law for t5747 <- return t5746
applied left monad law for t5749 <- return get3
applied left monad law for t5752 <- return t5751
applied left monad law for t5754 <- return s40
rewriting s40 @ [t5714]
applied left monad law for t5756 <- return t5755
rewriting t5755 @ [t5742]
applied left monad law for t5758 <- return t5757
rewriting t5757 @ [t5759]
deriving specialized closure definition k244 for ClosAlloc using k1371
deriving specialized closure definition k245 for ClosAlloc using k1361
liveness replaced t5558 with a wildcard
deriving specialized block b526 for BlockCall to block b3401
applied left monad law for t5761 <- return t5760
liveness replaced t5757 with a wildcard
liveness replaced t5755 with a wildcard
liveness replaced t5759 with a wildcard
liveness replaced t5736 with a wildcard
liveness replaced t5728 with a wildcard
applied left monad law for t5769 <- return initStored1
applied left monad law for t5772 <- return initStored2
applied left monad law for t5786 <- return initCoord
rewriting initCoord @ [t5781]
applied left monad law for t5788 <- return t5787
rewriting t5787 @ [t5782]
applied left monad law for t5790 <- return initCoord
rewriting initCoord @ [t5783]
applied left monad law for t5792 <- return t5791
rewriting t5791 @ [t5784]
applied left monad law for t5794 <- return t5789
applied left monad law for t5796 <- return t5793
applied left monad law for t5799 <- return t5789
applied left monad law for t5801 <- return initStored
liveness replaced t5791 with a wildcard
liveness replaced t5787 with a wildcard
applied left monad law for t5835 <- return ix0u1
applied left monad law for t5836 <- return ix0u
applied left monad law for t5837 <- return window
rewriting window @ [ix0]
deriving specialized closure definition k246 for ClosAlloc using k158
applied left monad law for t5839 <- return t5838
rewriting t5838 @ [s6]
applied left monad law for t7665 <- return s6
applied left monad law for t5829 <- return ix0
deriving specialized closure definition k247 for ClosAlloc using k157
deriving specialized block b530 for BlockCall to block b529
applied left monad law for t5841 <- return t5840
applied left monad law for t5843 <- return t5842
applied left monad law for t5845 <- return t5844
replacing reference to top level defAttr with X0a
liveness replaced t5838 with a wildcard
applied left monad law for t5846 <- return clearWindow
rewriting clearWindow @ [console]
deriving specialized closure definition k248 for ClosAlloc using k167
applied left monad law for t5849 <- return t5847
applied left monad law for t5851 <- return t5848
applied left monad law for t5853 <- return t5852
applied left monad law for t5867 <- return t5865
applied left monad law for t5869 <- return t5866
applied left monad law for t5871 <- return t5870
applied left monad law for t5900 <- return get5
applied left monad law for t5902 <- return t5901
applied left monad law for t5904 <- return s27
applied left monad law for t5905 <- return +
applied left monad law for t5906 <- return refToWord1
rewriting + @ [t5907]
applied left monad law for t5909 <- return t5908
rewriting t5908 @ [4]
replacing s27 @ ... with block call
applied left monad law for t7668 <- return s28
rewriting s28 @ [t7667]
deriving specialized closure definition k249 for ClosAlloc using ret12
liveness replaced t7667 with a wildcard
deriving specialized block b535 for BlockCall to block b534
deriving specialized closure definition k250 for ClosAlloc using k249
deriving specialized block b537 for BlockCall to block b535
applied left monad law for t5914 <- return t5913
liveness replaced t5912 with a wildcard
liveness replaced t5908 with a wildcard
applied left monad law for t5921 <- return s32
applied left monad law for t5922 <- return get7
rewriting s32 @ [t5924]
applied left monad law for t5926 <- return t5925
rewriting t5925 @ [mimgHeaderCursor]
deriving specialized closure definition k251 for ClosAlloc using k526
liveness replaced t5925 with a wildcard
applied left monad law for t5931 <- return genLtInc2
applied left monad law for t5933 <- return t5932
applied left monad law for t5934 <- return ix1u2
applied left monad law for t5935 <- return s17
replacing s17 @ ... with block call
applied left monad law for t7675 <- return s18
deriving specialized block b541 for BlockCall to block b540
applied left monad law for t5937 <- return return
replacing return @ ... with block call
deriving specialized block b515 for BlockCall to block b514
applied left monad law for t5939 <- return t5938
applied left monad law for t5977 <- return s16
replacing s16 @ ... with block call
applied left monad law for t5979 <- return t5978
applied left monad law for t5986 <- return t5984
applied left monad law for t5988 <- return t5987
applied left monad law for t5990 <- return padloop3
rewriting padloop3 @ [t5982]
applied left monad law for t5992 <- return t5991
rewriting t5991 @ [t5983]
applied left monad law for t5994 <- return t5993
rewriting t5993 @ [t5984]
applied left monad law for t5996 <- return t5995
rewriting t5995 @ [t5985]
applied left monad law for t5998 <- return t5997
rewriting t5997 @ []
liveness replaced t5997 with a wildcard
liveness replaced t5995 with a wildcard
liveness replaced t5993 with a wildcard
liveness replaced t5991 with a wildcard
liveness replaced t5989 with a wildcard
deriving specialized block b543 for BlockCall to block b177
applied left monad law for t5986 <- return t5984
applied left monad law for t5988 <- return t5987
applied left monad law for t5990 <- return padloop3
rewriting padloop3 @ [t5982]
applied left monad law for t5992 <- return t5991
rewriting t5991 @ [t5983]
applied left monad law for t5994 <- return t5993
rewriting t5993 @ [t5984]
applied left monad law for t5996 <- return t5995
rewriting t5995 @ [t5985]
applied left monad law for t5998 <- return t5997
rewriting t5997 @ []
liveness replaced t5997 with a wildcard
liveness replaced t5995 with a wildcard
liveness replaced t5993 with a wildcard
liveness replaced t5991 with a wildcard
liveness replaced t5989 with a wildcard
applied left monad law for t6000 <- return bit0u
applied left monad law for t6001 <- return initStored
applied left monad law for t6004 <- return initArray
applied left monad law for t6005 <- return s42
applied left monad law for t6006 <- return genLtDec
applied left monad law for t6008 <- return t6007
applied left monad law for t6009 <- return ltDecBy
replacing ltDecBy @ ... with block call
applied left monad law for t7679 <- return s18
deriving specialized block b545 for BlockCall to block b544
applied left monad law for t6010 <- return ix0u2
applied left monad law for t6012 <- return ltDec
replacing ltDec @ ... with block call
applied left monad law for t7681 <- return s15
deriving specialized block b547 for BlockCall to block b546
applied left monad law for t6014 <- return t6013
applied left monad law for t6018 <- return return
replacing return @ ... with block call
deriving specialized block b515 for BlockCall to block b514
applied left monad law for t6020 <- return t6019
applied left monad law for t6036 <- return get3
applied left monad law for t6037 <- return @2
applied left monad law for t6039 <- return t6038
applied left monad law for t6042 <- return t6041
applied left monad law for t6044 <- return t6035
applied left monad law for t6045 <- return bitsToWord
applied left monad law for t6048 <- return t6047
applied left monad law for t6050 <- return decIx
rewriting decIx @ [t6034]
applied left monad law for t6055 <- return output2
rewriting output2 @ [t6053]
applied left monad law for t6057 <- return t6056
rewriting t6056 @ [t6054]
applied left monad law for t6059 <- return t6058
rewriting t6058 @ []
liveness replaced t6058 with a wildcard
liveness replaced t6056 with a wildcard
deriving specialized block b548 for BlockCall to block b169
liveness replaced t6049 with a wildcard
applied left monad law for t6055 <- return output2
rewriting output2 @ [t6053]
applied left monad law for t6057 <- return t6056
rewriting t6056 @ [t6054]
applied left monad law for t6059 <- return t6058
rewriting t6058 @ []
liveness replaced t6058 with a wildcard
liveness replaced t6056 with a wildcard
applied left monad law for t6065 <- return padloop3
rewriting padloop3 @ [t6061]
applied left monad law for t6067 <- return t6066
rewriting t6066 @ [t6062]
applied left monad law for t6069 <- return t6068
rewriting t6068 @ [t6063]
applied left monad law for t6071 <- return t6070
rewriting t6070 @ [t6064]
applied left monad law for t6073 <- return t6072
rewriting t6072 @ []
applied left monad law for t6075 <- return output2
rewriting output2 @ [t6063]
applied left monad law for t6077 <- return t6076
rewriting t6076 @ [t6064]
applied left monad law for t6079 <- return t6078
rewriting t6078 @ []
liveness replaced t6078 with a wildcard
liveness replaced t6076 with a wildcard
liveness replaced t6074 with a wildcard
liveness replaced t6072 with a wildcard
liveness replaced t6070 with a wildcard
liveness replaced t6068 with a wildcard
liveness replaced t6066 with a wildcard
applied left monad law for t6112 <- return +
rewriting + @ [48]
applied left monad law for t6114 <- return t6113
rewriting t6113 @ [t6110]
applied left monad law for t7630 <- return t6115
liveness replaced t6113 with a wildcard
applied left monad law for t6126 <- return +
rewriting + @ [97]
applied left monad law for t6128 <- return t6127
applied left monad law for t6129 <- return -
rewriting - @ [t6124]
applied left monad law for t6131 <- return t6130
rewriting t6130 @ [10]
rewriting t6127 @ [t6132]
rewrite: (x + n) + m == x + (n + m)
applied left monad law for t7631 <- return t6133
liveness replaced t6132 with a wildcard
liveness replaced t6130 with a wildcard
liveness replaced t6127 with a wildcard
applied left monad law for t6135 <- return wordToByte
applied left monad law for t6136 <- return <=
rewriting <= @ [t6134]
applied left monad law for t6138 <- return t6137
rewriting t6137 @ [9]
applied left monad law for t6111 <- return wordToByte
deriving specialized block b549 for BlockCall to block b231
applied left monad law for t6125 <- return wordToByte
deriving specialized block b550 for BlockCall to block b230
liveness replaced t6137 with a wildcard
applied left monad law for t6145 <- return t6143
applied left monad law for t6147 <- return t6146
applied left monad law for t6162 <- return t6160
applied left monad law for t6164 <- return t6163
applied left monad law for t7632 <- return t6165
applied left monad law for t6215 <- return set3
applied left monad law for t6216 <- return @2
applied left monad law for t6218 <- return t6217
applied left monad law for t6221 <- return t6220
applied left monad law for t6222 <- return digitToByte
applied left monad law for t6223 <- return nzrem
applied left monad law for t6225 <- return t6224
rewriting digitToByte @ [t6226]
applied left monad law for t6229 <- return t6228
applied left monad law for t6231 <- return s16
replacing s16 @ ... with block call
applied left monad law for t6233 <- return t6232
applied left monad law for t6242 <- return nzdiv
applied left monad law for t6244 <- return t6243
applied left monad law for t6246 <- return ==
rewriting == @ [t6245]
applied left monad law for t6248 <- return t6247
rewriting t6247 @ [0]
liveness replaced t6247 with a wildcard
deriving specialized block b551 for BlockCall to block b190
liveness replaced t6230 with a wildcard
applied left monad law for t6242 <- return nzdiv
applied left monad law for t6244 <- return t6243
applied left monad law for t6246 <- return ==
rewriting == @ [t6245]
applied left monad law for t6248 <- return t6247
rewriting t6247 @ [0]
liveness replaced t6247 with a wildcard
applied left monad law for t6255 <- return loop4
rewriting loop4 @ [t6250]
applied left monad law for t6257 <- return t6256
rewriting t6256 @ [t6251]
applied left monad law for t6259 <- return t6258
rewriting t6258 @ [t6252]
applied left monad law for t6261 <- return t6260
rewriting t6260 @ [t6253]
applied left monad law for t6263 <- return t6262
rewriting t6262 @ [t6254]
applied left monad law for t6265 <- return t6264
rewriting t6264 @ []
applied left monad law for t7633 <- return t6266
liveness replaced t6264 with a wildcard
liveness replaced t6262 with a wildcard
liveness replaced t6260 with a wildcard
liveness replaced t6258 with a wildcard
liveness replaced t6256 with a wildcard
applied left monad law for t6273 <- return loop4
rewriting loop4 @ [t6270]
applied left monad law for t6275 <- return t6274
rewriting t6274 @ [t6272]
deriving specialized closure definition k252 for ClosAlloc using k99
applied left monad law for t6277 <- return t6276
rewriting t6276 @ [t6271]
applied left monad law for t6279 <- return t6278
liveness replaced t6276 with a wildcard
liveness replaced t6274 with a wildcard
liveness replaced t6272 with a wildcard
applied left monad law for t6311 <- return hputDigitsFmt
rewriting hputDigitsFmt @ [t6310]
applied left monad law for t6313 <- return t6312
rewriting t6312 @ [maxBound2]
deriving specialized closure definition k253 for ClosAlloc using k113
applied left monad law for t6315 <- return t6314
rewriting t6314 @ [s15]
applied left monad law for t7687 <- return s15
applied left monad law for t6299 <- return maxBound2
deriving specialized closure definition k254 for ClosAlloc using k112
deriving specialized block b554 for BlockCall to block b553
applied left monad law for t6317 <- return t6316
liveness replaced t6314 with a wildcard
liveness replaced t6312 with a wildcard
applied left monad law for t6320 <- return nz10u
applied left monad law for t6321 <- return hputDigits
rewriting hputDigits @ [nz10]
applied left monad law for t6310 <- return nz10
deriving specialized closure definition k255 for ClosAlloc using k114
deriving specialized closure definition k256 for ClosAlloc using k253
applied left monad law for t6298 <- return nz10
deriving specialized closure definition k257 for ClosAlloc using k254
deriving specialized block b559 for BlockCall to block b554
deriving specialized block b556 for BlockCall to block b218
applied left monad law for t6324 <- return bitAdd
applied left monad law for t6326 <- return t6325
applied left monad law for t6327 <- return port
applied left monad law for t6335 <- return port
applied left monad law for t6336 <- return portPlus
rewriting portPlus @ [com1data]
deriving specialized closure definition k258 for ClosAlloc using k66
applied left monad law for t6338 <- return t6337
rewriting t6337 @ [5]
liveness replaced t6337 with a wildcard
applied left monad law for t6341 <- return outb
applied left monad law for t6343 <- return t6342
applied left monad law for t6345 <- return t6344
applied left monad law for t6353 <- return inb
applied left monad law for t6355 <- return t6354
applied left monad law for t6357 <- return ==
applied left monad law for t6358 <- return and
applied left monad law for t6360 <- return t6359
rewriting == @ [t6361]
applied left monad law for t6363 <- return t6362
rewriting t6362 @ [0]
liveness replaced t6362 with a wildcard
applied left monad law for t6366 <- return put5
rewriting put5 @ [t6365]
applied left monad law for t6368 <- return t6367
rewriting t6367 @ []
liveness replaced t6367 with a wildcard
applied left monad law for t6371 <- return put5
rewriting put5 @ [13]
applied left monad law for t6373 <- return t6372
rewriting t6372 @ []
liveness replaced t6372 with a wildcard
applied left monad law for t6375 <- return return
replacing return @ ... with block call
deriving specialized block b515 for BlockCall to block b514
applied left monad law for t6377 <- return t6376
applied left monad law for t6380 <- return put5
rewriting put5 @ [t6379]
applied left monad law for t6382 <- return t6381
rewriting t6381 @ []
applied left monad law for t6384 <- return ==
rewriting == @ [t6379]
applied left monad law for t6386 <- return t6385
rewriting t6385 @ [10]
liveness replaced t6385 with a wildcard
liveness replaced t6383 with a wildcard
liveness replaced t6381 with a wildcard
applied left monad law for t6395 <- return t6393
applied left monad law for t6397 <- return t6394
applied left monad law for t6399 <- return t6398
applied left monad law for t6413 <- return s10
applied left monad law for t6414 <- return get2
rewriting s10 @ [t6415]
applied left monad law for t6417 <- return t6416
applied left monad law for t6418 <- return set2
rewriting t6416 @ [t6419]
liveness replaced t6416 with a wildcard
applied left monad law for t6430 <- return set1
applied left monad law for t6434 <- return t6433
applied left monad law for t6436 <- return t6435
applied left monad law for t6440 <- return t6438
applied left monad law for t6442 <- return t6439
applied left monad law for t6444 <- return t6443
applied left monad law for t6458 <- return s9
applied left monad law for t6459 <- return get4
rewriting s9 @ [t6460]
applied left monad law for t6462 <- return t6461
applied left monad law for t6463 <- return set
rewriting t6461 @ [t6464]
liveness replaced t6461 with a wildcard
applied left monad law for t6474 <- return s8
applied left monad law for t6475 <- return pos
rewriting pos @ [t6471]
applied left monad law for t6477 <- return t6476
rewriting t6476 @ [t6473]
rewriting s8 @ [t6478]
applied left monad law for t6480 <- return t6479
applied left monad law for t6481 <- return pos
rewriting pos @ [t6472]
applied left monad law for t6483 <- return t6482
rewriting t6482 @ [t6473]
rewriting t6479 @ [t6484]
liveness replaced t6482 with a wildcard
liveness replaced t6479 with a wildcard
liveness replaced t6476 with a wildcard
applied left monad law for t6495 <- return for
rewriting for @ [t6491]
applied left monad law for t6497 <- return t6496
rewriting t6496 @ [t6492]
applied left monad law for t6499 <- return t6498
rewriting t6498 @ [t6500]
deriving specialized closure definition k259 for ClosAlloc using k137
deriving specialized closure definition k260 for ClosAlloc using k136
liveness replaced t5629 with a wildcard
deriving specialized block b562 for BlockCall to block b340
liveness replaced t6498 with a wildcard
liveness replaced t6496 with a wildcard
liveness replaced t6500 with a wildcard
applied left monad law for t6518 <- return set
applied left monad law for t6519 <- return pos
rewriting pos @ [t6515]
applied left monad law for t6521 <- return t6520
rewriting t6520 @ [t6516]
applied left monad law for t6524 <- return t6523
applied left monad law for t6525 <- return blank
liveness replaced t6520 with a wildcard
applied left monad law for t6537 <- return t6536
applied left monad law for t6565 <- return s7
replacing s7 @ ... with block call
applied left monad law for t6567 <- return t6566
applied left monad law for t6576 <- return t6575
deriving specialized block b565 for BlockCall to block b305
applied left monad law for t6576 <- return t6575
applied left monad law for t6587 <- return t6584
applied left monad law for t6589 <- return t6588
applied left monad law for t6591 <- return t6590
applied left monad law for t6593 <- return loop7
rewriting loop7 @ [t6583]
applied left monad law for t6595 <- return t6594
rewriting t6594 @ [t6584]
applied left monad law for t6597 <- return t6596
rewriting t6596 @ [t6585]
applied left monad law for t6599 <- return t6598
rewriting t6598 @ [t6586]
applied left monad law for t6601 <- return t6600
liveness replaced t6598 with a wildcard
liveness replaced t6596 with a wildcard
liveness replaced t6594 with a wildcard
liveness replaced t6592 with a wildcard
applied left monad law for t6603 <- return get1
applied left monad law for t6607 <- return t6606
applied left monad law for t6609 <- return get2
cse: using previously computed value t6604 for t6610
applied left monad law for t6613 <- return t6612
applied left monad law for t6615 <- return get1
applied left monad law for t6619 <- return t6618
applied left monad law for t6621 <- return get2
cse: using previously computed value t6616 for t6622
applied left monad law for t6625 <- return t6624
applied left monad law for t6627 <- return get3
applied left monad law for t6630 <- return t6629
applied left monad law for t6633 <- return for
rewriting for @ [t6614]
applied left monad law for t6635 <- return t6634
rewriting t6634 @ [t6626]
applied left monad law for t6637 <- return t6636
rewriting t6636 @ [t6638]
deriving specialized closure definition k261 for ClosAlloc using k137
deriving specialized closure definition k262 for ClosAlloc using k136
liveness replaced t5629 with a wildcard
deriving specialized block b566 for BlockCall to block b340
applied left monad law for t6640 <- return loop7
rewriting loop7 @ [t6620]
applied left monad law for t6642 <- return t6641
rewriting t6641 @ [t6632]
deriving specialized closure definition k263 for ClosAlloc using k142
applied left monad law for t6644 <- return t6643
rewriting t6643 @ [t6639]
applied left monad law for t6646 <- return t6645
applied left monad law for t6648 <- return t6647
liveness replaced t6643 with a wildcard
liveness replaced t6641 with a wildcard
liveness replaced t6636 with a wildcard
liveness replaced t6634 with a wildcard
liveness replaced t6638 with a wildcard
liveness replaced t6632 with a wildcard
applied left monad law for t6655 <- return scroll
rewriting scroll @ [t6654]
applied left monad law for t6657 <- return t6656
rewriting t6656 @ []
liveness replaced t6656 with a wildcard
applied left monad law for t6661 <- return >->
rewriting >-> @ [t6663]
applied left monad law for t6665 <- return t6664
rewriting t6664 @ [t6667]
applied left monad law for t6669 <- return t6668
applied left monad law for t6671 <- return get1
applied left monad law for t6675 <- return t6674
applied left monad law for t6677 <- return s7
replacing s7 @ ... with block call
applied left monad law for t6679 <- return t6678
deriving specialized block b570 for BlockCall to block b376
liveness replaced t6670 with a wildcard
liveness replaced t6664 with a wildcard
applied left monad law for t6695 <- return newline
rewriting newline @ [t6693]
applied left monad law for t6697 <- return t6696
rewriting t6696 @ [t6694]
applied left monad law for t6699 <- return t6698
rewriting t6698 @ []
liveness replaced t6698 with a wildcard
liveness replaced t6696 with a wildcard
applied left monad law for t6706 <- return set2
applied left monad law for t6710 <- return t6709
applied left monad law for t6712 <- return t6711
applied left monad law for t7634 <- return t6713
applied left monad law for t6716 <- return newline
rewriting newline @ [t6714]
applied left monad law for t6718 <- return t6717
rewriting t6717 @ [t6715]
applied left monad law for t6720 <- return t6719
rewriting t6719 @ []
applied left monad law for t7635 <- return t6721
liveness replaced t6719 with a wildcard
liveness replaced t6717 with a wildcard
applied left monad law for t6725 <- return get2
applied left monad law for t6729 <- return t6728
applied left monad law for t6731 <- return get3
applied left monad law for t6734 <- return t6733
applied left monad law for t6736 <- return set
applied left monad law for t6737 <- return pos
rewriting pos @ [t6724]
applied left monad law for t6739 <- return t6738
rewriting t6738 @ [t6730]
applied left monad law for t6742 <- return t6741
applied left monad law for t6743 <- return char
rewriting char @ [t6722]
applied left monad law for t6749 <- return t6748
applied left monad law for t6751 <- return get2
applied left monad law for t6755 <- return t6754
applied left monad law for t6757 <- return ltInc
replacing ltInc @ ... with block call
applied left monad law for t6759 <- return t6758
deriving specialized block b571 for BlockCall to block b357
liveness replaced t6750 with a wildcard
liveness replaced t6738 with a wildcard
applied left monad law for t6769 <- return True
applied left monad law for t7636 <- return True
shorting out match on constructor True
applied left monad law for t6773 <- return ==
rewriting == @ [t6772]
applied left monad law for t6775 <- return t6774
rewriting t6774 @ [10]
applied left monad law for t7637 <- return t6776
liveness replaced t6774 with a wildcard
applied left monad law for t6779 <- return sputchar
rewriting sputchar @ [t6778]
applied left monad law for t6781 <- return t6780
rewriting t6780 @ []
applied left monad law for t6783 <- return get1
applied left monad law for t6787 <- return t6786
applied left monad law for t6789 <- return ==
rewriting == @ [t6778]
applied left monad law for t6791 <- return t6790
rewriting t6790 @ [13]
liveness replaced t6790 with a wildcard
liveness replaced t6782 with a wildcard
liveness replaced t6780 with a wildcard
applied left monad law for t6804 <- return wputchar
rewriting wputchar @ [console]
deriving specialized closure definition k264 for ClosAlloc using k170
applied left monad law for t6805 <- return hputUnsigned
replacing hputUnsigned @ ... with block call
applied left monad law for t7711 <- return putchar
deriving specialized block b574 for BlockCall to block b573
applied left monad law for t6817 <- return s35
replacing s35 @ ... with block call
applied left monad law for t7713 <- return s39
applied left monad law for t7714 <- return s38
rewriting s38 @ [s39]
deriving specialized closure definition k265 for ClosAlloc using ret13
deriving specialized block b577 for BlockCall to block b576
applied left monad law for t6819 <- return t6818
applied left monad law for t6834 <- return s35
applied left monad law for t6835 <- return s36
applied left monad law for t6836 <- return s37
rewriting s37 @ [t6832]
applied left monad law for t6838 <- return t6837
applied left monad law for t6839 <- return +
rewriting + @ [1]
applied left monad law for t6841 <- return t6840
applied left monad law for t6842 <- return refToWord
rewriting t6840 @ [t6843]
rewriting t6837 @ [t6844]
rewriting s36 @ [t6845]
replacing s35 @ ... with block call
applied left monad law for t7714 <- return s38
rewriting s38 @ [t7713]
deriving specialized closure definition k266 for ClosAlloc using ret13
liveness replaced t7713 with a wildcard
deriving specialized block b579 for BlockCall to block b576
deriving specialized closure definition k267 for ClosAlloc using k266
deriving specialized block b581 for BlockCall to block b579
applied left monad law for t6848 <- return t6847
liveness replaced t6846 with a wildcard
liveness replaced t6840 with a wildcard
liveness replaced t6837 with a wildcard
applied left monad law for t6851 <- return loadChar
applied left monad law for t6853 <- return t6852
applied left monad law for t6855 <- return ==
rewriting == @ [t6854]
applied left monad law for t6857 <- return t6856
rewriting t6856 @ [0]
liveness replaced t6856 with a wildcard
applied left monad law for t6865 <- return return
replacing return @ ... with block call
deriving specialized block b515 for BlockCall to block b514
applied left monad law for t6867 <- return t6866
applied left monad law for t6873 <- return t6871
liveness replaced t6872 with a wildcard
applied left monad law for t6881 <- return t6880
liveness replaced t6879 with a wildcard
applied left monad law for t6898 <- return nextChar
applied left monad law for t6900 <- return t6899
applied left monad law for t6905 <- return t6903
applied left monad law for t6906 <- return s33
rewriting s33 @ [t6904]
applied left monad law for t6909 <- return t6908
applied left monad law for t6911 <- return hputs
rewriting hputs @ [t6903]
applied left monad law for t6913 <- return t6912
applied left monad law for t6914 <- return s34
rewriting s34 @ [t6904]
rewriting t6912 @ [t6915]
applied left monad law for t6917 <- return t6916
rewriting t6916 @ []
liveness replaced t6916 with a wildcard
liveness replaced t6912 with a wildcard
liveness replaced t6910 with a wildcard
deriving specialized block b583 for BlockCall to block b201
applied left monad law for t6905 <- return t6903
applied left monad law for t6906 <- return s33
rewriting s33 @ [t6904]
applied left monad law for t6909 <- return t6908
applied left monad law for t6911 <- return hputs
rewriting hputs @ [t6903]
applied left monad law for t6913 <- return t6912
applied left monad law for t6914 <- return s34
rewriting s34 @ [t6904]
rewriting t6912 @ [t6915]
applied left monad law for t6917 <- return t6916
rewriting t6916 @ []
liveness replaced t6916 with a wildcard
liveness replaced t6912 with a wildcard
liveness replaced t6910 with a wildcard
applied left monad law for t6919 <- return hputs
rewriting hputs @ [putchar]
deriving specialized closure definition k268 for ClosAlloc using k103
applied left monad law for t6929 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str0
rewriting t7723 @ [str0]
applied left monad law for t7721 <- return str0
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k269 for ClosAlloc using k102
deriving specialized block b587 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b586 for BlockCall to block b585
applied left monad law for t6931 <- return t6930
applied left monad law for t6933 <- return puts
replacing puts @ ... with block call
applied left monad law for t6935 <- return t6934
applied left monad law for t6937 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str1
rewriting t7723 @ [str1]
applied left monad law for t7721 <- return str1
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k270 for ClosAlloc using k102
deriving specialized block b590 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b589 for BlockCall to block b585
applied left monad law for t6939 <- return t6938
applied left monad law for t6941 <- return putUnsigned
replacing putUnsigned @ ... with block call
applied left monad law for t6943 <- return t6942
applied left monad law for t6945 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str2
rewriting t7723 @ [str2]
applied left monad law for t7721 <- return str2
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k271 for ClosAlloc using k102
deriving specialized block b594 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b593 for BlockCall to block b585
applied left monad law for t6947 <- return t6946
applied left monad law for t6949 <- return t6926
applied left monad law for t6951 <- return t6950
applied left monad law for t6953 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str3
rewriting t7723 @ [str3]
applied left monad law for t7721 <- return str3
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k272 for ClosAlloc using k102
deriving specialized block b597 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b596 for BlockCall to block b585
applied left monad law for t6955 <- return t6954
applied left monad law for t6957 <- return s24
applied left monad law for t6958 <- return +
rewriting + @ [t6928]
applied left monad law for t6960 <- return t6959
rewriting t6959 @ [1]
replacing s24 @ ... with block call
applied left monad law for t6963 <- return t6962
liveness replaced t6959 with a wildcard
liveness replaced t6956 with a wildcard
liveness replaced t6952 with a wildcard
liveness replaced t6948 with a wildcard
liveness replaced t6944 with a wildcard
liveness replaced t6940 with a wildcard
liveness replaced t6936 with a wildcard
liveness replaced t6932 with a wildcard
applied left monad law for t6989 <- return s24
replacing s24 @ ... with block call
applied left monad law for t6991 <- return t6990
applied left monad law for t6997 <- return t6995
liveness replaced t6996 with a wildcard
applied left monad law for t7005 <- return t7004
liveness replaced t7003 with a wildcard
applied left monad law for t7042 <- return t7040
applied left monad law for t7049 <- return t7047
applied left monad law for t7051 <- return t7050
applied left monad law for t7052 <- return s30
rewriting s30 @ [t7048]
applied left monad law for t7055 <- return t7054
applied left monad law for t7057 <- return s29
rewriting s29 @ [t7046]
applied left monad law for t7059 <- return t7058
rewriting t7058 @ [t7047]
applied left monad law for t7061 <- return t7060
rewriting t7060 @ [t7056]
applied left monad law for t7063 <- return t7062
applied left monad law for t7064 <- return s31
rewriting s31 @ [t7048]
rewriting t7062 @ [t7065]
applied left monad law for t7067 <- return t7066
rewriting t7066 @ []
liveness replaced t7066 with a wildcard
liveness replaced t7062 with a wildcard
liveness replaced t7060 with a wildcard
liveness replaced t7058 with a wildcard
deriving specialized block b601 for BlockCall to block b4351
applied left monad law for t7049 <- return t7047
applied left monad law for t7051 <- return t7050
applied left monad law for t7052 <- return s30
rewriting s30 @ [t7048]
applied left monad law for t7055 <- return t7054
applied left monad law for t7057 <- return s29
rewriting s29 @ [t7046]
applied left monad law for t7059 <- return t7058
rewriting t7058 @ [t7047]
applied left monad law for t7061 <- return t7060
rewriting t7060 @ [t7056]
applied left monad law for t7063 <- return t7062
applied left monad law for t7064 <- return s31
rewriting s31 @ [t7048]
rewriting t7062 @ [t7065]
applied left monad law for t7067 <- return t7066
rewriting t7066 @ []
liveness replaced t7066 with a wildcard
liveness replaced t7062 with a wildcard
liveness replaced t7060 with a wildcard
liveness replaced t7058 with a wildcard
applied left monad law for t7072 <- return s29
rewriting s29 @ [t7069]
applied left monad law for t7074 <- return t7073
rewriting t7073 @ [t7070]
applied left monad law for t7076 <- return t7075
rewriting t7075 @ [0]
applied left monad law for t7078 <- return t7077
rewriting t7077 @ [t7071]
applied left monad law for t7080 <- return t7079
rewriting t7079 @ []
applied left monad law for t7082 <- return return
replacing return @ ... with block call
deriving specialized block b515 for BlockCall to block b514
applied left monad law for t7084 <- return t7083
liveness replaced t7081 with a wildcard
liveness replaced t7079 with a wildcard
liveness replaced t7077 with a wildcard
liveness replaced t7075 with a wildcard
liveness replaced t7073 with a wildcard
deriving specialized closure definition k273 for ClosAlloc using k2121
liveness replaced t7092 with a wildcard
applied left monad law for t7115 <- return s23
applied left monad law for t7129 <- return s22
applied left monad law for t7130 <- return Pair
rewriting Pair @ [t7128]
applied left monad law for t7132 <- return t7131
applied left monad law for t7133 <- return +
rewriting + @ [t7128]
applied left monad law for t7135 <- return t7134
rewriting t7134 @ [t7125]
applied left monad law for t7137 <- return -
rewriting - @ [t7126]
applied left monad law for t7139 <- return t7138
rewriting t7138 @ [1]
rewriting t7131 @ [t7142]
rewriting s22 @ [t7143]
liveness replaced t7138 with a wildcard
liveness replaced t7134 with a wildcard
liveness replaced t7131 with a wildcard
applied left monad law for t7149 <- return ==
rewriting == @ [t7148]
applied left monad law for t7151 <- return t7150
rewriting t7150 @ [0]
liveness replaced t7150 with a wildcard
applied left monad law for t7159 <- return nextWordCursor
rewriting nextWordCursor @ [12]
applied left monad law for t7162 <- return t7160
applied left monad law for t7164 <- return t7161
applied left monad law for t7166 <- return t7165
applied left monad law for t7178 <- return nz16u
applied left monad law for t7179 <- return hputDigits
rewriting hputDigits @ [nz16]
applied left monad law for t6310 <- return nz16
deriving specialized closure definition k274 for ClosAlloc using k114
deriving specialized closure definition k275 for ClosAlloc using k253
applied left monad law for t6298 <- return nz16
deriving specialized closure definition k276 for ClosAlloc using k254
deriving specialized block b606 for BlockCall to block b554
deriving specialized block b603 for BlockCall to block b218
applied left monad law for t7180 <- return hputHex
replacing hputHex @ ... with block call
applied left monad law for t7733 <- return putchar
deriving specialized block b609 for BlockCall to block b608
applied left monad law for t7182 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str4
rewriting t7723 @ [str4]
applied left monad law for t7721 <- return str4
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k277 for ClosAlloc using k102
deriving specialized block b611 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b610 for BlockCall to block b585
applied left monad law for t7184 <- return t7183
applied left monad law for t7186 <- return s21
applied left monad law for t7187 <- return get5
rewriting s21 @ [t7189]
applied left monad law for t7191 <- return t7190
rewriting t7190 @ [putHex]
deriving specialized closure definition k278 for ClosAlloc using k523
applied left monad law for t7193 <- return t7192
rewriting t7192 @ []
applied left monad law for t7195 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str5
rewriting t7723 @ [str5]
applied left monad law for t7721 <- return str5
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k279 for ClosAlloc using k102
deriving specialized block b615 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b614 for BlockCall to block b585
applied left monad law for t7197 <- return t7196
applied left monad law for t7199 <- return s21
applied left monad law for t7200 <- return get5
rewriting s21 @ [t7202]
applied left monad law for t7204 <- return t7203
rewriting t7203 @ [putHex]
deriving specialized closure definition k278 for ClosAlloc using k523
applied left monad law for t7206 <- return t7205
rewriting t7205 @ []
applied left monad law for t7208 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str6
rewriting t7723 @ [str6]
applied left monad law for t7721 <- return str6
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k280 for ClosAlloc using k102
deriving specialized block b618 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b617 for BlockCall to block b585
applied left monad law for t7210 <- return t7209
applied left monad law for t7212 <- return s21
applied left monad law for t7213 <- return get5
rewriting s21 @ [t7215]
applied left monad law for t7217 <- return t7216
rewriting t7216 @ [putHex]
deriving specialized closure definition k278 for ClosAlloc using k523
applied left monad law for t7219 <- return t7218
rewriting t7218 @ []
liveness replaced t7218 with a wildcard
liveness replaced t7216 with a wildcard
liveness replaced t7211 with a wildcard
liveness replaced t7207 with a wildcard
liveness replaced t7205 with a wildcard
liveness replaced t7203 with a wildcard
liveness replaced t7198 with a wildcard
liveness replaced t7194 with a wildcard
liveness replaced t7192 with a wildcard
liveness replaced t7190 with a wildcard
liveness replaced t7185 with a wildcard
applied left monad law for t7227 <- return t7225
applied left monad law for t7229 <- return t7226
applied left monad law for t7231 <- return t7230
applied left monad law for t7245 <- return t7243
applied left monad law for t7247 <- return t7244
applied left monad law for t7249 <- return t7248
applied left monad law for t7262 <- return s26
applied left monad law for t7263 <- return get6
rewriting s26 @ [t7265]
applied left monad law for t7267 <- return t7266
rewriting t7266 @ [mimgMMapCursor]
deriving specialized closure definition k281 for ClosAlloc using k524
liveness replaced t7266 with a wildcard
applied left monad law for t7274 <- return puts
replacing puts @ ... with block call
deriving specialized block b586 for BlockCall to block b585
applied left monad law for t7276 <- return t7275
applied left monad law for t7278 <- return puts
replacing puts @ ... with block call
applied left monad law for t7280 <- return t7279
applied left monad law for t7282 <- return puts
replacing puts @ ... with block call
deriving specialized block b589 for BlockCall to block b585
applied left monad law for t7284 <- return t7283
applied left monad law for t7286 <- return putUnsigned
replacing putUnsigned @ ... with block call
applied left monad law for t7288 <- return t7287
applied left monad law for t7290 <- return puts
replacing puts @ ... with block call
deriving specialized block b593 for BlockCall to block b585
applied left monad law for t7292 <- return t7291
applied left monad law for t7294 <- return t7271
applied left monad law for t7296 <- return t7295
applied left monad law for t7298 <- return puts
replacing puts @ ... with block call
deriving specialized block b596 for BlockCall to block b585
applied left monad law for t7300 <- return t7299
applied left monad law for t7302 <- return s24
applied left monad law for t7303 <- return +
rewriting + @ [t7273]
applied left monad law for t7305 <- return t7304
rewriting t7304 @ [1]
replacing s24 @ ... with block call
applied left monad law for t7308 <- return t7307
liveness replaced t7304 with a wildcard
liveness replaced t7301 with a wildcard
liveness replaced t7297 with a wildcard
liveness replaced t7293 with a wildcard
liveness replaced t7289 with a wildcard
liveness replaced t7285 with a wildcard
liveness replaced t7281 with a wildcard
liveness replaced t7277 with a wildcard
applied left monad law for t7336 <- return t7334
liveness replaced t7335 with a wildcard
applied left monad law for t7344 <- return t7343
liveness replaced t7342 with a wildcard
applied left monad law for t7381 <- return t7379
applied left monad law for t7388 <- return t7386
applied left monad law for t7390 <- return t7389
applied left monad law for t7391 <- return fst
rewriting fst @ [t7387]
applied left monad law for t7394 <- return t7393
applied left monad law for t7396 <- return forallDoWith
rewriting forallDoWith @ [t7385]
applied left monad law for t7398 <- return t7397
rewriting t7397 @ [t7386]
applied left monad law for t7400 <- return t7399
rewriting t7399 @ [t7395]
applied left monad law for t7402 <- return t7401
applied left monad law for t7403 <- return snd
rewriting snd @ [t7387]
rewriting t7401 @ [t7404]
applied left monad law for t7406 <- return t7405
rewriting t7405 @ []
liveness replaced t7405 with a wildcard
liveness replaced t7401 with a wildcard
liveness replaced t7399 with a wildcard
liveness replaced t7397 with a wildcard
deriving specialized block b621 for BlockCall to block b435
applied left monad law for t7388 <- return t7386
applied left monad law for t7390 <- return t7389
applied left monad law for t7391 <- return fst
rewriting fst @ [t7387]
applied left monad law for t7394 <- return t7393
applied left monad law for t7396 <- return forallDoWith
rewriting forallDoWith @ [t7385]
applied left monad law for t7398 <- return t7397
rewriting t7397 @ [t7386]
applied left monad law for t7400 <- return t7399
rewriting t7399 @ [t7395]
applied left monad law for t7402 <- return t7401
applied left monad law for t7403 <- return snd
rewriting snd @ [t7387]
rewriting t7401 @ [t7404]
applied left monad law for t7406 <- return t7405
rewriting t7405 @ []
liveness replaced t7405 with a wildcard
liveness replaced t7401 with a wildcard
liveness replaced t7399 with a wildcard
liveness replaced t7397 with a wildcard
applied left monad law for t7411 <- return forallDoWith
rewriting forallDoWith @ [t7408]
applied left monad law for t7413 <- return t7412
rewriting t7412 @ [t7409]
applied left monad law for t7415 <- return t7414
rewriting t7414 @ [0]
applied left monad law for t7417 <- return t7416
rewriting t7416 @ [t7410]
applied left monad law for t7419 <- return t7418
rewriting t7418 @ []
applied left monad law for t7421 <- return return
replacing return @ ... with block call
deriving specialized block b515 for BlockCall to block b514
applied left monad law for t7423 <- return t7422
liveness replaced t7420 with a wildcard
liveness replaced t7418 with a wildcard
liveness replaced t7416 with a wildcard
liveness replaced t7414 with a wildcard
liveness replaced t7412 with a wildcard
deriving specialized closure definition k282 for ClosAlloc using k212
liveness replaced t7431 with a wildcard
applied left monad law for t7453 <- return nextWordCursor
rewriting nextWordCursor @ [8]
applied left monad law for t7455 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str7
rewriting t7723 @ [str7]
applied left monad law for t7721 <- return str7
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k283 for ClosAlloc using k102
deriving specialized block b624 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b623 for BlockCall to block b585
applied left monad law for t7457 <- return t7456
applied left monad law for t7459 <- return s21
applied left monad law for t7460 <- return get5
rewriting s21 @ [t7462]
applied left monad law for t7464 <- return t7463
rewriting t7463 @ [putHex]
deriving specialized closure definition k278 for ClosAlloc using k523
applied left monad law for t7466 <- return t7465
rewriting t7465 @ []
applied left monad law for t7468 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str8
rewriting t7723 @ [str8]
applied left monad law for t7721 <- return str8
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k284 for ClosAlloc using k102
deriving specialized block b627 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b626 for BlockCall to block b585
applied left monad law for t7470 <- return t7469
applied left monad law for t7472 <- return s21
applied left monad law for t7473 <- return get5
rewriting s21 @ [t7475]
applied left monad law for t7477 <- return t7476
rewriting t7476 @ [putHex]
deriving specialized closure definition k278 for ClosAlloc using k523
applied left monad law for t7479 <- return t7478
rewriting t7478 @ []
applied left monad law for t7481 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str9
rewriting t7723 @ [str9]
applied left monad law for t7721 <- return str9
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k285 for ClosAlloc using k102
deriving specialized block b630 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b629 for BlockCall to block b585
applied left monad law for t7483 <- return t7482
liveness replaced t7480 with a wildcard
liveness replaced t7478 with a wildcard
liveness replaced t7476 with a wildcard
liveness replaced t7471 with a wildcard
liveness replaced t7467 with a wildcard
liveness replaced t7465 with a wildcard
liveness replaced t7463 with a wildcard
liveness replaced t7458 with a wildcard
applied left monad law for t7491 <- return t7489
applied left monad law for t7493 <- return t7490
applied left monad law for t7495 <- return t7494
applied left monad law for t7509 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str17
rewriting t7723 @ [str17]
applied left monad law for t7721 <- return str17
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k286 for ClosAlloc using k102
deriving specialized block b633 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b632 for BlockCall to block b585
applied left monad law for t7511 <- return t7510
applied left monad law for t7513 <- return puts
replacing puts @ ... with block call
applied left monad law for t7515 <- return t7514
applied left monad law for t7517 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str18
rewriting t7723 @ [str18]
applied left monad law for t7721 <- return str18
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k287 for ClosAlloc using k102
deriving specialized block b636 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b635 for BlockCall to block b585
applied left monad law for t7519 <- return t7518
applied left monad law for t7521 <- return puts
replacing puts @ ... with block call
applied left monad law for t7523 <- return t7522
applied left monad law for t7525 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str19
rewriting t7723 @ [str19]
applied left monad law for t7721 <- return str19
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k288 for ClosAlloc using k102
deriving specialized block b639 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b638 for BlockCall to block b585
applied left monad law for t7527 <- return t7526
applied left monad law for t7529 <- return putHex
applied left monad law for t7530 <- return refToWord
replacing putHex @ ... with block call
applied left monad law for t7533 <- return t7532
applied left monad law for t7535 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str20
rewriting t7723 @ [str20]
applied left monad law for t7721 <- return str20
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k289 for ClosAlloc using k102
deriving specialized block b643 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b642 for BlockCall to block b585
applied left monad law for t7537 <- return t7536
liveness replaced t7534 with a wildcard
liveness replaced t7528 with a wildcard
liveness replaced t7524 with a wildcard
liveness replaced t7520 with a wildcard
liveness replaced t7516 with a wildcard
liveness replaced t7512 with a wildcard
applied left monad law for t7550 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str10
rewriting t7723 @ [str10]
applied left monad law for t7721 <- return str10
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k290 for ClosAlloc using k102
deriving specialized block b646 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b645 for BlockCall to block b585
applied left monad law for t7552 <- return t7551
applied left monad law for t7554 <- return >>=
applied left monad law for t7555 <- return mimgHeaders
rewriting mimgHeaders @ [t7549]
rewriting >>= @ [t7556]
applied left monad law for t7558 <- return t7557
applied left monad law for t7559 <- return forallDisplay
rewriting forallDisplay @ [nextMimgHeader]
deriving specialized closure definition k291 for ClosAlloc using k2181
applied left monad law for t7561 <- return t7560
rewriting t7560 @ [putHeader]
applied left monad law for t7739 <- return putHeader
applied left monad law for t7108 <- return nextMimgHeader
deriving specialized closure definition k292 for ClosAlloc using k2171
deriving specialized block b649 for BlockCall to block b648
applied left monad law for t7563 <- return t7562
rewriting t7557 @ [t7564]
applied left monad law for t7566 <- return t7565
rewriting t7565 @ []
applied left monad law for t7568 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str12
rewriting t7723 @ [str12]
applied left monad law for t7721 <- return str12
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k293 for ClosAlloc using k102
deriving specialized block b652 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b651 for BlockCall to block b585
applied left monad law for t7570 <- return t7569
applied left monad law for t7572 <- return s3
applied left monad law for t7573 <- return mimgMMap
rewriting mimgMMap @ [t7549]
rewriting s3 @ [t7574]
applied left monad law for t7576 <- return t7575
applied left monad law for t7577 <- return s4
rewriting s4 @ [nextMimgMMap]
deriving specialized closure definition k294 for ClosAlloc using k218
applied left monad law for t7579 <- return t7578
rewriting t7578 @ [putMMap]
applied left monad law for t7741 <- return putMMap
applied left monad law for t7447 <- return nextMimgMMap
deriving specialized closure definition k295 for ClosAlloc using k217
deriving specialized block b655 for BlockCall to block b654
applied left monad law for t7581 <- return t7580
rewriting t7575 @ [t7582]
applied left monad law for t7584 <- return t7583
rewriting t7583 @ []
applied left monad law for t7586 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str14
rewriting t7723 @ [str14]
applied left monad law for t7721 <- return str14
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k296 for ClosAlloc using k102
deriving specialized block b658 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b657 for BlockCall to block b585
applied left monad law for t7588 <- return t7587
applied left monad law for t7590 <- return s5
applied left monad law for t7591 <- return get
rewriting s5 @ [t7593]
applied left monad law for t7595 <- return t7594
applied left monad law for t7596 <- return showMimgString
rewriting showMimgString @ [str15]
deriving specialized closure definition k297 for ClosAlloc using k238
rewriting t7594 @ [t7597]
deriving specialized closure definition k298 for ClosAlloc using k522
applied left monad law for t7599 <- return t7598
rewriting t7598 @ []
applied left monad law for t7601 <- return s5
applied left monad law for t7602 <- return get
rewriting s5 @ [t7604]
applied left monad law for t7606 <- return t7605
applied left monad law for t7607 <- return showMimgString
rewriting showMimgString @ [str16]
deriving specialized closure definition k299 for ClosAlloc using k238
rewriting t7605 @ [t7608]
deriving specialized closure definition k300 for ClosAlloc using k522
applied left monad law for t7610 <- return t7609
rewriting t7609 @ []
liveness replaced t7609 with a wildcard
liveness replaced t7608 with a wildcard
liveness replaced t7605 with a wildcard
liveness replaced t7600 with a wildcard
liveness replaced t7598 with a wildcard
liveness replaced t7597 with a wildcard
liveness replaced t7594 with a wildcard
liveness replaced t7589 with a wildcard
liveness replaced t7585 with a wildcard
liveness replaced t7583 with a wildcard
liveness replaced t7578 with a wildcard
liveness replaced t7575 with a wildcard
liveness replaced t7571 with a wildcard
liveness replaced t7567 with a wildcard
liveness replaced t7565 with a wildcard
liveness replaced t7560 with a wildcard
liveness replaced t7557 with a wildcard
liveness replaced t7553 with a wildcard
applied left monad law for t7616 <- return clearScreen
replacing clearScreen @ ... with block call
applied left monad law for t7618 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str21
rewriting t7723 @ [str21]
applied left monad law for t7721 <- return str21
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k301 for ClosAlloc using k102
deriving specialized block b666 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b665 for BlockCall to block b585
applied left monad law for t7620 <- return t7619
applied left monad law for t7622 <- return putMimgBootData
rewriting putMimgBootData @ [bootdata]
deriving specialized closure definition k302 for ClosAlloc using k235
applied left monad law for t7624 <- return t7623
rewriting t7623 @ []
applied left monad law for t7626 <- return puts
replacing puts @ ... with block call
applied left monad law for t7722 <- return str22
rewriting t7723 @ [str22]
applied left monad law for t7721 <- return str22
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k303 for ClosAlloc using k102
deriving specialized block b670 for BlockCall to block b584
liveness replaced t7723 with a wildcard
deriving specialized block b669 for BlockCall to block b585
applied left monad law for t7628 <- return t7627
liveness replaced t7625 with a wildcard
liveness replaced t7623 with a wildcard
liveness replaced t7621 with a wildcard
liveness replaced t7617 with a wildcard
Flow pass finished, running shake.
Steps performed = 1709
-------------------------
inlining eliminated a wildcard binding in b334
inlining eliminated a wildcard binding in b334
prefixInline succeeded for call to block b331 from block b334
prefixInline succeeded for call to block b331 from block b334
inlining eliminated a wildcard binding in b425
prefixInline succeeded for call to block b530 from block b425
suffixInline succeeded for call to block b312 from block b314
inlining eliminated a wildcard binding in b347
prefixInline succeeded for call to block b315 from block b347
prefixInline succeeded for call to block b512 from block b517
applied right monad law in b516
applied right monad law in b295
prefixInline succeeded for call to block b515 from block b295
inlining eliminated a wildcard binding in b518
inlining eliminated a wildcard binding in b518
inlining eliminated a wildcard binding in b518
applied right monad law in b518
prefixInline succeeded for call to block b517 from block b296
inlining eliminated a wildcard binding in b340
inlining eliminated a wildcard binding in b340
inlining eliminated a wildcard binding in b519
inlining eliminated a wildcard binding in b519
inlining eliminated a wildcard binding in b519
inlining eliminated a wildcard binding in b349
inlining eliminated a wildcard binding in b349
inlining eliminated a wildcard binding in b349
elided call to goto block b349
prefixInline succeeded for call to block b523 from block b524
inlining eliminated a wildcard binding in b525
inlining eliminated a wildcard binding in b525
inlining eliminated a wildcard binding in b525
applied right monad law in b525
prefixInline succeeded for call to block b524 from block b2961
inlining eliminated a wildcard binding in b3401
inlining eliminated a wildcard binding in b3401
inlining eliminated a wildcard binding in b526
inlining eliminated a wildcard binding in b526
inlining eliminated a wildcard binding in b526
inlining eliminated a wildcard binding in b351
inlining eliminated a wildcard binding in b351
inlining eliminated a wildcard binding in b351
prefixInline succeeded for call to block b526 from block b351
suffixInline succeeded for call to block b351 from block b532
suffixInline succeeded for call to block b106 from block b561
inlining eliminated a wildcard binding in b268
suffixInline succeeded for call to block b561 from block b268
applied right monad law in b256
inlining eliminated a wildcard binding in b258
inlining eliminated a wildcard binding in b257
applied right monad law in b257
elided call to goto block b257
pushed case into call in b258
inlining eliminated a wildcard binding in b263
applied right monad law in b263
applied right monad law in b262
prefixInline succeeded for call to block b515 from block b262
inlining eliminated a wildcard binding in b264
inlining eliminated a wildcard binding in b264
prefixInline succeeded for call to block b258 from block b264
pushed case into call in b264
inlining eliminated a wildcard binding in b861
applied right monad law in b570
inlining eliminated a wildcard binding in b86
inlining eliminated a wildcard binding in b383
inlining eliminated a wildcard binding in b383
inlining eliminated a wildcard binding in b383
prefixInline succeeded for call to block b315 from block b383
prefixInline succeeded for call to block b315 from block b383
suffixInline succeeded for call to block b86 from block b383
inlining eliminated a wildcard binding in b562
inlining eliminated a wildcard binding in b562
inlining eliminated a wildcard binding in b562
inlining eliminated a wildcard binding in b385
inlining eliminated a wildcard binding in b385
inlining eliminated a wildcard binding in b385
elided call to goto block b385
inlining eliminated a wildcard binding in b381
prefixInline succeeded for call to block b315 from block b381
inlining eliminated a wildcard binding in b566
inlining eliminated a wildcard binding in b566
inlining eliminated a wildcard binding in b566
applied right monad law in b565
inlining eliminated a wildcard binding in b304
inlining eliminated a wildcard binding in b304
inlining eliminated a wildcard binding in b304
prefixInline succeeded for call to block b524 from block b306
pushed enter into call in b304
inlining eliminated a wildcard binding in b388
inlining eliminated a wildcard binding in b388
inlining eliminated a wildcard binding in b388
inlining eliminated a wildcard binding in b388
inlining eliminated a wildcard binding in b388
inlining eliminated a wildcard binding in b388
prefixInline succeeded for call to block b566 from block b388
prefixInline succeeded for call to block b569 from block b388
inlining eliminated a wildcard binding in b375
applied right monad law in b375
inlining eliminated a wildcard binding in b377
prefixInline succeeded for call to block b861 from block b377
prefixInline succeeded for call to block b524 from block b377
elided call to goto block b375
inlining eliminated a wildcard binding in b359
inlining eliminated a wildcard binding in b359
applied right monad law in b359
applied right monad law in b571
inlining eliminated a wildcard binding in b356
inlining eliminated a wildcard binding in b356
applied right monad law in b356
inlining eliminated a wildcard binding in b358
prefixInline succeeded for call to block b315 from block b358
prefixInline succeeded for call to block b312 from block b358
prefixInline succeeded for call to block b517 from block b358
elided call to goto block b356
inlining eliminated a wildcard binding in b361
elided call to goto block b359
pushed case into call in b361
inlining eliminated a wildcard binding in b363
inlining eliminated a wildcard binding in b363
elided call to goto block b362
pushed case into call in b363
applied right monad law in b578
applied right monad law in b124
prefixInline succeeded for call to block b577 from block b124
applied right monad law in b580
suffixInline succeeded for call to block b580 from block b582
inlining eliminated a wildcard binding in b581
inlining eliminated a wildcard binding in b123
inlining eliminated a wildcard binding in b123
inlining eliminated a wildcard binding in b123
applied right monad law in b123
prefixInline succeeded for call to block b581 from block b123
inlining eliminated a wildcard binding in b125
pushed case into call in b125
applied right monad law in b202
prefixInline succeeded for call to block b515 from block b202
inlining eliminated a wildcard binding in b752
inlining eliminated a wildcard binding in b792
applied right monad law in b792
inlining eliminated a wildcard binding in b583
inlining eliminated a wildcard binding in b583
applied right monad law in b583
prefixInline succeeded for call to block b752 from block b583
prefixInline succeeded for call to block b792 from block b583
inlining eliminated a wildcard binding in b665
inlining eliminated a wildcard binding in b645
applied right monad law in b536
suffixInline succeeded for call to block b536 from block b538
inlining eliminated a wildcard binding in b537
inlining eliminated a wildcard binding in b485
inlining eliminated a wildcard binding in b485
prefixInline succeeded for call to block b537 from block b485
suffixInline succeeded for call to block b826 from block b539
inlining eliminated a wildcard binding in b496
inlining eliminated a wildcard binding in b491
inlining eliminated a wildcard binding in b491
inlining eliminated a wildcard binding in b491
applied right monad law in b491
inlining eliminated a wildcard binding in b493
pushed case into call in b493
inlining eliminated a wildcard binding in b586
inlining eliminated a wildcard binding in b589
prefixInline succeeded for call to block b541 from block b542
applied right monad law in b178
prefixInline succeeded for call to block b515 from block b178
inlining eliminated a wildcard binding in b543
inlining eliminated a wildcard binding in b543
inlining eliminated a wildcard binding in b543
inlining eliminated a wildcard binding in b543
applied right monad law in b543
prefixInline succeeded for call to block b542 from block b179
prefixInline succeeded for call to block b545 from block b547
prefixInline succeeded for call to block b547 from block b164
applied right monad law in b170
prefixInline succeeded for call to block b515 from block b170
inlining eliminated a wildcard binding in b548
inlining eliminated a wildcard binding in b548
applied right monad law in b548
prefixInline succeeded for call to block b164 from block b171
inlining eliminated a wildcard binding in b220
inlining eliminated a wildcard binding in b220
inlining eliminated a wildcard binding in b220
inlining eliminated a wildcard binding in b220
inlining eliminated a wildcard binding in b220
inlining eliminated a wildcard binding in b220
inlining eliminated a wildcard binding in b549
inlining eliminated a wildcard binding in b550
inlining eliminated a wildcard binding in b550
inlining eliminated a wildcard binding in b550
inlining eliminated a wildcard binding in b232
pushed case into call in b232
applied right monad law in b191
applied right monad law in b189
inlining eliminated a wildcard binding in b551
inlining eliminated a wildcard binding in b188
inlining eliminated a wildcard binding in b188
inlining eliminated a wildcard binding in b188
inlining eliminated a wildcard binding in b188
inlining eliminated a wildcard binding in b188
applied right monad law in b188
prefixInline succeeded for call to block b232 from block b192
prefixInline succeeded for call to block b542 from block b192
elided call to goto block b188
pushed case into call in b551
inlining eliminated a wildcard binding in b223
inlining eliminated a wildcard binding in b223
inlining eliminated a wildcard binding in b223
prefixInline succeeded for call to block b552 from block b223
suffixInline succeeded for call to block b553 from block b558
suffixInline succeeded for call to block b555 from block b560
inlining eliminated a wildcard binding in b556
inlining eliminated a wildcard binding in b556
prefixInline succeeded for call to block b559 from block b556
prefixInline succeeded for call to block b556 from block b574
prefixInline succeeded for call to block b574 from block b592
inlining eliminated a wildcard binding in b593
inlining eliminated a wildcard binding in b596
inlining eliminated a wildcard binding in b4441
prefixInline succeeded for call to block b586 from block b4441
prefixInline succeeded for call to block b587 from block b4441
prefixInline succeeded for call to block b585 from block b4441
prefixInline succeeded for call to block b589 from block b4441
prefixInline succeeded for call to block b590 from block b4441
prefixInline succeeded for call to block b592 from block b4441
prefixInline succeeded for call to block b593 from block b4441
prefixInline succeeded for call to block b594 from block b4441
prefixInline succeeded for call to block b596 from block b4441
prefixInline succeeded for call to block b597 from block b4441
prefixInline succeeded for call to block b600 from block b4441
applied right monad law in b436
prefixInline succeeded for call to block b600 from block b436
inlining eliminated a wildcard binding in b751
inlining eliminated a wildcard binding in b791
applied right monad law in b791
inlining eliminated a wildcard binding in b601
inlining eliminated a wildcard binding in b601
inlining eliminated a wildcard binding in b601
inlining eliminated a wildcard binding in b601
applied right monad law in b601
prefixInline succeeded for call to block b751 from block b601
prefixInline succeeded for call to block b791 from block b601
inlining eliminated a wildcard binding in b4431
inlining eliminated a wildcard binding in b4431
inlining eliminated a wildcard binding in b4431
inlining eliminated a wildcard binding in b4431
prefixInline succeeded for call to block b515 from block b4431
suffixInline succeeded for call to block b4431 from block b602
inlining eliminated a wildcard binding in b4481
inlining eliminated a wildcard binding in b610
inlining eliminated a wildcard binding in b614
inlining eliminated a wildcard binding in b617
suffixInline succeeded for call to block b553 from block b605
suffixInline succeeded for call to block b555 from block b607
inlining eliminated a wildcard binding in b603
inlining eliminated a wildcard binding in b603
prefixInline succeeded for call to block b606 from block b603
prefixInline succeeded for call to block b603 from block b609
elided call to goto block b398
suffixInline succeeded for call to block b823 from block b613
inlining eliminated a wildcard binding in b479
inlining eliminated a wildcard binding in b479
inlining eliminated a wildcard binding in b479
inlining eliminated a wildcard binding in b479
inlining eliminated a wildcard binding in b479
inlining eliminated a wildcard binding in b479
prefixInline succeeded for call to block b610 from block b479
prefixInline succeeded for call to block b611 from block b479
prefixInline succeeded for call to block b613 from block b479
prefixInline succeeded for call to block b614 from block b479
prefixInline succeeded for call to block b615 from block b479
prefixInline succeeded for call to block b613 from block b479
prefixInline succeeded for call to block b617 from block b479
prefixInline succeeded for call to block b618 from block b479
suffixInline succeeded for call to block b613 from block b479
inlining eliminated a wildcard binding in b651
suffixInline succeeded for call to block b824 from block b620
inlining eliminated a wildcard binding in b498
inlining eliminated a wildcard binding in b444
prefixInline succeeded for call to block b586 from block b444
prefixInline succeeded for call to block b587 from block b444
prefixInline succeeded for call to block b585 from block b444
prefixInline succeeded for call to block b589 from block b444
prefixInline succeeded for call to block b590 from block b444
prefixInline succeeded for call to block b592 from block b444
prefixInline succeeded for call to block b593 from block b444
prefixInline succeeded for call to block b594 from block b444
prefixInline succeeded for call to block b596 from block b444
prefixInline succeeded for call to block b597 from block b444
prefixInline succeeded for call to block b600 from block b444
inlining eliminated a wildcard binding in b75
inlining eliminated a wildcard binding in b79
applied right monad law in b79
inlining eliminated a wildcard binding in b621
inlining eliminated a wildcard binding in b621
inlining eliminated a wildcard binding in b621
inlining eliminated a wildcard binding in b621
applied right monad law in b621
prefixInline succeeded for call to block b75 from block b621
prefixInline succeeded for call to block b79 from block b621
inlining eliminated a wildcard binding in b443
inlining eliminated a wildcard binding in b443
inlining eliminated a wildcard binding in b443
inlining eliminated a wildcard binding in b443
prefixInline succeeded for call to block b515 from block b443
suffixInline succeeded for call to block b443 from block b622
inlining eliminated a wildcard binding in b448
inlining eliminated a wildcard binding in b623
inlining eliminated a wildcard binding in b626
inlining eliminated a wildcard binding in b629
inlining eliminated a wildcard binding in b482
inlining eliminated a wildcard binding in b482
inlining eliminated a wildcard binding in b482
inlining eliminated a wildcard binding in b482
prefixInline succeeded for call to block b623 from block b482
prefixInline succeeded for call to block b624 from block b482
prefixInline succeeded for call to block b613 from block b482
prefixInline succeeded for call to block b626 from block b482
prefixInline succeeded for call to block b627 from block b482
prefixInline succeeded for call to block b613 from block b482
prefixInline succeeded for call to block b629 from block b482
prefixInline succeeded for call to block b630 from block b482
inlining eliminated a wildcard binding in b657
inlining eliminated a wildcard binding in b632
inlining eliminated a wildcard binding in b635
inlining eliminated a wildcard binding in b638
prefixInline succeeded for call to block b609 from block b641
inlining eliminated a wildcard binding in b642
prefixInline succeeded for call to block b632 from block b505
prefixInline succeeded for call to block b633 from block b505
prefixInline succeeded for call to block b585 from block b505
prefixInline succeeded for call to block b635 from block b505
prefixInline succeeded for call to block b636 from block b505
prefixInline succeeded for call to block b585 from block b505
prefixInline succeeded for call to block b638 from block b505
prefixInline succeeded for call to block b639 from block b505
prefixInline succeeded for call to block b641 from block b505
prefixInline succeeded for call to block b642 from block b505
prefixInline succeeded for call to block b643 from block b505
suffixInline succeeded for call to block b822 from block b661
suffixInline succeeded for call to block b822 from block b663
inlining eliminated a wildcard binding in b502
inlining eliminated a wildcard binding in b502
inlining eliminated a wildcard binding in b502
inlining eliminated a wildcard binding in b502
inlining eliminated a wildcard binding in b502
inlining eliminated a wildcard binding in b502
inlining eliminated a wildcard binding in b502
inlining eliminated a wildcard binding in b502
inlining eliminated a wildcard binding in b502
inlining eliminated a wildcard binding in b502
inlining eliminated a wildcard binding in b502
inlining eliminated a wildcard binding in b502
prefixInline succeeded for call to block b645 from block b502
prefixInline succeeded for call to block b646 from block b502
prefixInline succeeded for call to block b496 from block b502
prefixInline succeeded for call to block b649 from block b502
prefixInline succeeded for call to block b827 from block b502
prefixInline succeeded for call to block b651 from block b502
prefixInline succeeded for call to block b652 from block b502
prefixInline succeeded for call to block b498 from block b502
prefixInline succeeded for call to block b655 from block b502
prefixInline succeeded for call to block b825 from block b502
prefixInline succeeded for call to block b657 from block b502
prefixInline succeeded for call to block b658 from block b502
prefixInline succeeded for call to block b661 from block b502
suffixInline succeeded for call to block b663 from block b502
suffixInline succeeded for call to block b502 from block b668
inlining eliminated a wildcard binding in b669
inlining eliminated a wildcard binding in b509
prefixInline succeeded for call to block b664 from block b509
prefixInline succeeded for call to block b665 from block b509
prefixInline succeeded for call to block b666 from block b509
prefixInline succeeded for call to block b669 from block b509
prefixInline succeeded for call to block b670 from block b509
Inlining pass finished, running shake.
lifting static allocator to top-level s43
lifting static allocator to top-level s44
lifted allocator for t7801
lifted allocator for t7801
lifted allocator for t7801
lifted allocator for t7801
lifting static allocator to top-level s45
lifted allocator for t7811
lifting static allocator to top-level s46
lifted allocator for t7811
lifted allocator for t7811
lifted allocator for t7811
lifting static allocator to top-level s47
lifting static allocator to top-level s48
lifting static allocator to top-level s49
lifting static allocator to top-level s50
lifting static allocator to top-level s51
lifting static allocator to top-level s52
lifting static allocator to top-level s53
lifting static allocator to top-level s54
lifting static allocator to top-level s55
lifting static allocator to top-level s56
lifting static allocator to top-level s57
lifting static allocator to top-level s58
lifting static allocator to top-level s59
lifting static allocator to top-level s60
lifting static allocator to top-level s61
lifting static allocator to top-level s62
lifting static allocator to top-level s63
lifting static allocator to top-level s64
lifting static allocator to top-level s65
lifting static allocator to top-level s66
lifting static allocator to top-level s67
lifting static allocator to top-level s68
lifting static allocator to top-level s69
lifting static allocator to top-level s70
lifting static allocator to top-level s71
lifting static allocator to top-level s72
lifting static allocator to top-level s73
lifting static allocator to top-level s74
lifting static allocator to top-level s75
lifting static allocator to top-level s76
lifting static allocator to top-level s77
lifting static allocator to top-level s78
lifting static allocator to top-level s79
lifting static allocator to top-level s80
lifting static allocator to top-level s81
lifting static allocator to top-level s82
lifting static allocator to top-level s83
lifting static allocator to top-level s84
lifting static allocator to top-level s85
lifting static allocator to top-level s86
lifting static allocator to top-level s87
lifting static allocator to top-level s88
applied left monad law for t5824 <- return ix0
applied left monad law for t5823 <- return s6
deriving specialized closure definition k312 for ClosAlloc using k156
applied left monad law for t5840 <- return s43
rewriting s43 @ [maxBound]
applied left monad law for t7666 <- return maxBound
deriving specialized closure definition k313 for ClosAlloc using k312
deriving specialized block b688 for BlockCall to block b531
applied left monad law for t5510 <- return s44
rewriting s44 @ []
rewriting t5607 @ [t5605]
deriving specialized block b690 for BlockCall to block b296
liveness replaced t5618 with a wildcard
deriving specialized block b691 for BlockCall to block b518
liveness replaced t5607 with a wildcard
deriving specialized block b690 for BlockCall to block b296
liveness replaced t5602 with a wildcard
rewriting t5536 @ [t5534]
rewriting t5538 @ []
deriving specialized block b692 for BlockCall to block b2961
liveness replaced t5547 with a wildcard
deriving specialized block b693 for BlockCall to block b525
liveness replaced t5538 with a wildcard
liveness replaced t5536 with a wildcard
deriving specialized block b692 for BlockCall to block b2961
liveness replaced t5531 with a wildcard
applied left monad law for t5762 <- return console
rewriting t7795 @ []
liveness replaced t7795 with a wildcard
liveness replaced t7784 with a wildcard
liveness replaced t7780 with a wildcard
applied left monad law for t7798 <- return com1data
applied left monad law for t7806 <- return false
applied left monad law for t7804 <- return true
rewriting t7803 @ [true]
shorting out match on constructor True
liveness replaced t7803 with a wildcard
deriving specialized block b695 for BlockCall to block b674
rewriting t7805 @ [false]
shorting out match on constructor False
liveness replaced t7805 with a wildcard
deriving specialized block b696 for BlockCall to block b675
liveness replaced t7802 with a wildcard
deriving specialized block b694 for BlockCall to block b673
liveness replaced t7801 with a wildcard
applied left monad law for t6376 <- return s45
rewriting s45 @ []
deriving specialized block b694 for BlockCall to block b673
applied left monad law for t7812 <- return s46
applied left monad law for t7802 <- return s46
applied left monad law for t7803 <- return s46
rewriting s46 @ [true]
shorting out match on constructor True
deriving specialized block b698 for BlockCall to block b674
applied left monad law for t7805 <- return s46
rewriting s46 @ [false]
shorting out match on constructor False
deriving specialized block b699 for BlockCall to block b675
deriving specialized block b697 for BlockCall to block b673
liveness replaced t7811 with a wildcard
rewriting t5607 @ [t5605]
deriving specialized block b700 for BlockCall to block b296
liveness replaced t5618 with a wildcard
deriving specialized block b701 for BlockCall to block b518
liveness replaced t5607 with a wildcard
deriving specialized block b700 for BlockCall to block b296
liveness replaced t5602 with a wildcard
rewriting t5607 @ [t5605]
deriving specialized block b702 for BlockCall to block b296
liveness replaced t5618 with a wildcard
deriving specialized block b703 for BlockCall to block b518
liveness replaced t5607 with a wildcard
deriving specialized block b702 for BlockCall to block b296
liveness replaced t5602 with a wildcard
applied left monad law for t7828 <- return t6536
rewriting t7827 @ []
liveness replaced t7827 with a wildcard
deriving specialized block b704 for BlockCall to block b678
rewriting t7827 @ []
liveness replaced t7827 with a wildcard
deriving specialized closure definition k314 for ClosAlloc using k141
rewriting t6645 @ [t6608]
eliminating duplicate args in call within b705
liveness replaced t6645 with a wildcard
liveness replaced t7829 with a wildcard
liveness replaced t6639 with a wildcard
rewriting t6668 @ []
liveness replaced t6668 with a wildcard
rewriting Char 0 t6744 -> t7839
applied left monad law for t6745 <- return t7839
liveness replaced t6744 with a wildcard
rewriting t7803 @ [true]
shorting out match on constructor True
liveness replaced t7803 with a wildcard
deriving specialized block b708 for BlockCall to block b674
rewriting t7805 @ [false]
shorting out match on constructor False
liveness replaced t7805 with a wildcard
deriving specialized block b709 for BlockCall to block b675
liveness replaced t7802 with a wildcard
deriving specialized block b707 for BlockCall to block b673
eliminating duplicate args in call within b673
liveness replaced t7843 with a wildcard
rewriting t7803 @ [true]
shorting out match on constructor True
elided call to goto block b359
liveness replaced t7803 with a wildcard
deriving specialized block b712 for BlockCall to block b674
rewriting t7805 @ [false]
shorting out match on constructor False
liveness replaced t7805 with a wildcard
deriving specialized block b713 for BlockCall to block b675
liveness replaced t7802 with a wildcard
deriving specialized block b711 for BlockCall to block b673
eliminating duplicate args in call within b673
liveness replaced t7844 with a wildcard
applied left monad law for t6798 <- return console
deriving specialized closure definition k315 for ClosAlloc using k169
applied left monad law for t6818 <- return s47
rewriting s47 @ []
cse: using previously computed value t6845 for t7845
rewriting t6847 @ []
liveness replaced t6847 with a wildcard
liveness replaced t6845 with a wildcard
rewriting t7803 @ [true]
shorting out match on constructor True
liveness replaced t7803 with a wildcard
deriving specialized block b717 for BlockCall to block b674
rewriting t7805 @ [false]
shorting out match on constructor False
liveness replaced t7805 with a wildcard
deriving specialized block b718 for BlockCall to block b675
liveness replaced t7802 with a wildcard
deriving specialized block b716 for BlockCall to block b673
eliminating duplicate args in call within b673
liveness replaced t7846 with a wildcard
applied left monad law for t6866 <- return s48
rewriting s48 @ []
applied left monad law for t6907 <- return t7847
applied left monad law for t6895 <- return str21
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str21
applied left monad law for t6903 <- return putchar
rewriting putchar @ [t7847]
applied left monad law for t6897 <- return putchar
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b722 for BlockCall to block b203
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b720 for BlockCall to block b203
applied left monad law for t6895 <- return str10
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str10
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b723 for BlockCall to block b203
cse: using previously computed value t5911 for t7848
rewriting t5913 @ []
liveness replaced t5913 with a wildcard
liveness replaced t5911 with a wildcard
applied left monad law for t5872 <- return mimgHeaderCursor
applied left monad law for t6895 <- return str4
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str4
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b724 for BlockCall to block b203
applied left monad law for t6895 <- return str5
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str5
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b725 for BlockCall to block b203
applied left monad law for t6895 <- return str6
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str6
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b726 for BlockCall to block b203
applied left monad law for t5938 <- return s49
rewriting s49 @ []
applied left monad law for t6019 <- return s50
rewriting s50 @ []
rewriting t7803 @ [true]
shorting out match on constructor True
liveness replaced t7803 with a wildcard
deriving specialized block b728 for BlockCall to block b674
rewriting t7805 @ [false]
shorting out match on constructor False
liveness replaced t7805 with a wildcard
deriving specialized block b729 for BlockCall to block b675
liveness replaced t7802 with a wildcard
deriving specialized block b727 for BlockCall to block b673
eliminating duplicate args in call within b673
liveness replaced t7872 with a wildcard
rewriting t7803 @ [true]
shorting out match on constructor True
liveness replaced t7803 with a wildcard
deriving specialized block b732 for BlockCall to block b674
rewriting t7805 @ [false]
shorting out match on constructor False
liveness replaced t7805 with a wildcard
deriving specialized block b733 for BlockCall to block b675
liveness replaced t7867 with a wildcard
deriving specialized block b731 for BlockCall to block b685
eliminating duplicate args in call within b685
liveness replaced t7868 with a wildcard
deriving specialized closure definition k316 for ClosAlloc using k98
rewriting t6278 @ [s15]
applied left monad law for t8091 <- return s15
deriving specialized closure definition k317 for ClosAlloc using k97
liveness replaced t6186 with a wildcard
deriving specialized block b736 for BlockCall to block b735
liveness replaced t6278 with a wildcard
liveness replaced t7873 with a wildcard
applied left monad law for t6290 <- return nz16
applied left monad law for t7890 <- return s15
applied left monad law for t7891 <- return maxBound2
deriving specialized closure definition k318 for ClosAlloc using k111
applied left monad law for t7892 <- return s51
rewriting s51 @ [32]
applied left monad law for t7183 <- return s52
rewriting s52 @ []
applied left monad law for t7895 <- return putHex
replacing putHex @ ... with block call
applied left monad law for t7196 <- return s53
rewriting s53 @ []
applied left monad law for t7898 <- return putHex
replacing putHex @ ... with block call
applied left monad law for t7209 <- return s54
rewriting s54 @ []
applied left monad law for t7901 <- return putHex
replacing putHex @ ... with block call
rewriting t7803 @ [true]
shorting out match on constructor True
liveness replaced t7803 with a wildcard
deriving specialized block b741 for BlockCall to block b674
rewriting t7805 @ [false]
shorting out match on constructor False
liveness replaced t7805 with a wildcard
deriving specialized block b742 for BlockCall to block b675
liveness replaced t7802 with a wildcard
deriving specialized block b740 for BlockCall to block b673
eliminating duplicate args in call within b673
liveness replaced t7851 with a wildcard
applied left monad law for t6895 <- return str0
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str0
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b744 for BlockCall to block b203
applied left monad law for t6889 <- return putchar
deriving specialized closure definition k319 for ClosAlloc using k102
applied left monad law for t6895 <- return str1
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str1
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b746 for BlockCall to block b203
applied left monad law for t6290 <- return nz10
applied left monad law for t7875 <- return s15
applied left monad law for t7876 <- return maxBound2
deriving specialized closure definition k320 for ClosAlloc using k111
applied left monad law for t6895 <- return str2
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str2
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b748 for BlockCall to block b203
applied left monad law for t6895 <- return str3
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str3
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b749 for BlockCall to block b203
applied left monad law for t6930 <- return s55
rewriting s55 @ []
applied left monad law for t7880 <- return s56
rewriting s56 @ [t6925]
applied left monad law for t6938 <- return s57
rewriting s57 @ []
applied left monad law for t7881 <- return s58
rewriting s58 @ [32]
applied left monad law for t6946 <- return s59
rewriting s59 @ []
applied left monad law for t6954 <- return s60
rewriting s60 @ []
applied left monad law for t7884 <- return s25
rewriting s25 @ [t6961]
rewriting t6962 @ []
liveness replaced t6962 with a wildcard
applied left monad law for t7885 <- return s25
rewriting s25 @ [t6988]
rewriting t6990 @ []
liveness replaced t6990 with a wildcard
applied left monad law for t7053 <- return t7886
rewriting t7047 @ [t7045]
rewriting t7050 @ [t7886]
rewriting t7054 @ []
deriving specialized block b750 for BlockCall to block b4371
liveness replaced t7054 with a wildcard
liveness replaced t7050 with a wildcard
liveness replaced t7047 with a wildcard
deriving specialized block b751 for BlockCall to block b601
liveness replaced t7041 with a wildcard
deriving specialized block b750 for BlockCall to block b4371
applied left monad law for t7888 <- return s61
rewriting s61 @ []
liveness replaced t7887 with a wildcard
liveness replaced t7086 with a wildcard
applied left monad law for t7103 <- return putHeader
applied left monad law for t7102 <- return nextMimgHeader
deriving specialized closure definition k321 for ClosAlloc using k2161
applied left monad law for t6895 <- return str12
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str12
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b753 for BlockCall to block b203
applied left monad law for t7250 <- return mimgMMapCursor
applied left monad law for t6895 <- return str7
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str7
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b754 for BlockCall to block b203
applied left monad law for t6895 <- return str8
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str8
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b755 for BlockCall to block b203
applied left monad law for t6895 <- return str9
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str9
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b756 for BlockCall to block b203
applied left monad law for t7456 <- return s62
rewriting s62 @ []
applied left monad law for t7914 <- return putHex
replacing putHex @ ... with block call
applied left monad law for t7469 <- return s63
rewriting s63 @ []
applied left monad law for t7917 <- return putHex
replacing putHex @ ... with block call
applied left monad law for t7482 <- return s64
rewriting s64 @ []
applied left monad law for t7275 <- return s65
rewriting s65 @ []
applied left monad law for t7906 <- return s66
rewriting s66 @ [t7270]
applied left monad law for t7283 <- return s67
rewriting s67 @ []
applied left monad law for t7907 <- return s68
rewriting s68 @ [32]
applied left monad law for t7291 <- return s69
rewriting s69 @ []
applied left monad law for t7299 <- return s70
rewriting s70 @ []
applied left monad law for t7910 <- return s25
rewriting s25 @ [t7306]
rewriting t7307 @ []
liveness replaced t7307 with a wildcard
applied left monad law for t7392 <- return t7911
rewriting t7386 @ [t7384]
rewriting t7389 @ [t7911]
rewriting t7393 @ []
deriving specialized block b757 for BlockCall to block b437
liveness replaced t7393 with a wildcard
liveness replaced t7389 with a wildcard
liveness replaced t7386 with a wildcard
deriving specialized block b758 for BlockCall to block b621
liveness replaced t7380 with a wildcard
deriving specialized block b757 for BlockCall to block b437
applied left monad law for t7913 <- return s71
rewriting s71 @ []
liveness replaced t7912 with a wildcard
liveness replaced t7425 with a wildcard
applied left monad law for t7442 <- return putMMap
applied left monad law for t7441 <- return nextMimgMMap
deriving specialized closure definition k322 for ClosAlloc using k216
applied left monad law for t6895 <- return str14
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str14
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b760 for BlockCall to block b203
applied left monad law for t6895 <- return str17
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str17
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b761 for BlockCall to block b203
applied left monad law for t6895 <- return str18
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str18
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b762 for BlockCall to block b203
applied left monad law for t6895 <- return str19
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str19
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b763 for BlockCall to block b203
applied left monad law for t6895 <- return str20
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str20
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b764 for BlockCall to block b203
applied left monad law for t7510 <- return s72
rewriting s72 @ []
applied left monad law for t7922 <- return s73
rewriting s73 @ [t7507]
applied left monad law for t7518 <- return s74
rewriting s74 @ []
applied left monad law for t7923 <- return s75
rewriting s75 @ [t7508]
applied left monad law for t7526 <- return s76
rewriting s76 @ []
applied left monad law for t7924 <- return s77
rewriting s77 @ [32]
applied left monad law for t7536 <- return s78
rewriting s78 @ []
applied left monad law for t7543 <- return str15
deriving specialized closure definition k323 for ClosAlloc using k237
applied left monad law for t7543 <- return str16
deriving specialized closure definition k324 for ClosAlloc using k237
applied left monad law for t7611 <- return bootdata
applied left monad law for t7945 <- return s79
rewriting s79 @ []
applied left monad law for t7950 <- return s80
rewriting s80 @ [str11]
applied left monad law for t7740 <- return str11
deriving specialized closure definition k325 for ClosAlloc using k321
deriving specialized block b767 for BlockCall to block b650
rewriting t7949 @ []
applied left monad law for t7955 <- return s81
rewriting s81 @ []
applied left monad law for t7960 <- return s82
rewriting s82 @ [str13]
applied left monad law for t7742 <- return str13
deriving specialized closure definition k326 for ClosAlloc using k322
deriving specialized block b769 for BlockCall to block b656
rewriting t7959 @ []
applied left monad law for t7965 <- return s83
rewriting s83 @ []
applied left monad law for t7969 <- return s84
rewriting s84 @ [t7970]
applied left monad law for t7975 <- return s85
rewriting s85 @ [t7976]
liveness replaced t7972 with a wildcard
liveness replaced t7966 with a wildcard
liveness replaced t7964 with a wildcard
liveness replaced t7959 with a wildcard
liveness replaced t7956 with a wildcard
liveness replaced t7954 with a wildcard
liveness replaced t7949 with a wildcard
liveness replaced t7946 with a wildcard
applied left monad law for t6895 <- return str22
applied left monad law for t6894 <- return putchar
applied left monad law for t6897 <- return putchar
applied left monad law for t6896 <- return str22
deriving specialized block b721 for BlockCall to block b583
deriving specialized block b771 for BlockCall to block b203
applied left monad law for t7978 <- return s86
rewriting s86 @ []
applied left monad law for t7619 <- return s87
rewriting s87 @ []
applied left monad law for t7627 <- return s88
rewriting s88 @ []
Flow pass finished, running shake.
Steps performed = 900
-------------------------
suffixInline succeeded for call to block b687 from block b689
prefixInline succeeded for call to block b688 from block b425
inlining eliminated a wildcard binding in b691
inlining eliminated a wildcard binding in b690
pushed enter into call in b690
inlining eliminated a wildcard binding in b521
elided call to goto block b521
inlining eliminated a wildcard binding in b693
inlining eliminated a wildcard binding in b692
inlining eliminated a wildcard binding in b692
prefixInline succeeded for call to block b521 from block b692
inlining eliminated a wildcard binding in b528
elided call to goto block b528
inlining eliminated a wildcard binding in b532
elided call to goto block b528
inlining eliminated a wildcard binding in b123
inlining eliminated a wildcard binding in b123
suffixInline succeeded for call to block b582 from block b123
inlining eliminated a wildcard binding in b718
inlining eliminated a wildcard binding in b717
elided call to goto block b717
elided call to goto block b718
inlining eliminated a wildcard binding in b125
suffixInline succeeded for call to block b719 from block b125
inlining eliminated a wildcard binding in b696
inlining eliminated a wildcard binding in b694
inlining eliminated a wildcard binding in b695
inlining eliminated a wildcard binding in b258
elided call to goto block b695
elided call to goto block b696
elided call to goto block b698
elided call to goto block b699
inlining eliminated a wildcard binding in b264
suffixInline succeeded for call to block b697 from block b264
inlining eliminated a wildcard binding in b701
inlining eliminated a wildcard binding in b700
pushed enter into call in b700
inlining eliminated a wildcard binding in b568
elided call to goto block b568
inlining eliminated a wildcard binding in b703
inlining eliminated a wildcard binding in b702
pushed enter into call in b702
inlining eliminated a wildcard binding in b564
elided call to goto block b564
inlining eliminated a wildcard binding in b704
suffixInline succeeded for call to block b677 from block b304
suffixInline succeeded for call to block b306 from block b705
suffixInline succeeded for call to block b306 from block b706
inlining eliminated a wildcard binding in b388
inlining eliminated a wildcard binding in b388
inlining eliminated a wildcard binding in b388
pushed enter into call in b388
inlining eliminated a wildcard binding in b377
prefixInline succeeded for call to block b821 from block b377
inlining eliminated a wildcard binding in b358
inlining eliminated a wildcard binding in b709
inlining eliminated a wildcard binding in b708
elided call to goto block b708
elided call to goto block b709
inlining eliminated a wildcard binding in b361
elided call to goto block b359
elided call to goto block b361
inlining eliminated a wildcard binding in b713
inlining eliminated a wildcard binding in b712
elided call to goto block b712
elided call to goto block b713
inlining eliminated a wildcard binding in b363
suffixInline succeeded for call to block b714 from block b363
elided call to goto block b361
liveness replaced t8156 with a wildcard
pushed continuation into block call in b363
suffixInline succeeded for call to block b363 from block b715
prefixInline succeeded for call to block b572 from block b721
suffixInline succeeded for call to block b722 from block b721
inlining eliminated a wildcard binding in b485
inlining eliminated a wildcard binding in b485
suffixInline succeeded for call to block b538 from block b485
inlining eliminated a wildcard binding in b733
inlining eliminated a wildcard binding in b732
elided call to goto block b732
elided call to goto block b733
inlining eliminated a wildcard binding in b728
inlining eliminated a wildcard binding in b551
inlining eliminated a wildcard binding in b729
inlining eliminated a wildcard binding in b192
suffixInline succeeded for call to block b730 from block b551
elided call to goto block b728
elided call to goto block b729
elided call to goto block b728
elided call to goto block b729
pushed continuation into block call in b192
inlining eliminated a wildcard binding in b736
inlining eliminated a wildcard binding in b223
inlining eliminated a wildcard binding in b223
elided call to goto block b223
suffixInline succeeded for call to block b736 from block b738
prefixInline succeeded for call to block b607 from block b739
prefixInline succeeded for call to block b612 from block b479
prefixInline succeeded for call to block b739 from block b479
prefixInline succeeded for call to block b616 from block b479
prefixInline succeeded for call to block b739 from block b479
prefixInline succeeded for call to block b619 from block b479
prefixInline succeeded for call to block b739 from block b479
pushed continuation into block call in b479
pushed continuation into block call in b479
pushed continuation into block call in b479
inlining eliminated a wildcard binding in b742
inlining eliminated a wildcard binding in b741
elided call to goto block b741
elided call to goto block b742
inlining eliminated a wildcard binding in b493
suffixInline succeeded for call to block b743 from block b493
elided call to goto block b223
suffixInline succeeded for call to block b736 from block b747
inlining eliminated a wildcard binding in b4441
prefixInline succeeded for call to block b588 from block b4441
prefixInline succeeded for call to block b584 from block b4441
prefixInline succeeded for call to block b591 from block b4441
prefixInline succeeded for call to block b560 from block b4441
prefixInline succeeded for call to block b595 from block b4441
prefixInline succeeded for call to block b598 from block b4441
pushed continuation into block call in b4441
pushed continuation into block call in b4441
pushed continuation into block call in b4441
pushed continuation into block call in b4441
inlining eliminated a wildcard binding in b436
inlining eliminated a wildcard binding in b751
inlining eliminated a wildcard binding in b751
inlining eliminated a wildcard binding in b751
inlining eliminated a wildcard binding in b750
prefixInline succeeded for call to block b4441 from block b751
inlining eliminated a wildcard binding in b602
suffixInline succeeded for call to block b752 from block b768
prefixInline succeeded for call to block b625 from block b482
prefixInline succeeded for call to block b739 from block b482
prefixInline succeeded for call to block b628 from block b482
prefixInline succeeded for call to block b739 from block b482
elided call to goto block b631
suffixInline succeeded for call to block b756 from block b482
pushed continuation into block call in b482
pushed continuation into block call in b482
inlining eliminated a wildcard binding in b444
prefixInline succeeded for call to block b588 from block b444
prefixInline succeeded for call to block b584 from block b444
prefixInline succeeded for call to block b591 from block b444
prefixInline succeeded for call to block b560 from block b444
prefixInline succeeded for call to block b595 from block b444
prefixInline succeeded for call to block b598 from block b444
pushed continuation into block call in b444
pushed continuation into block call in b444
pushed continuation into block call in b444
pushed continuation into block call in b444
inlining eliminated a wildcard binding in b758
inlining eliminated a wildcard binding in b758
inlining eliminated a wildcard binding in b758
inlining eliminated a wildcard binding in b757
prefixInline succeeded for call to block b444 from block b758
inlining eliminated a wildcard binding in b622
suffixInline succeeded for call to block b759 from block b770
prefixInline succeeded for call to block b634 from block b505
prefixInline succeeded for call to block b584 from block b505
prefixInline succeeded for call to block b637 from block b505
prefixInline succeeded for call to block b584 from block b505
prefixInline succeeded for call to block b640 from block b505
prefixInline succeeded for call to block b607 from block b505
elided call to goto block b644
suffixInline succeeded for call to block b764 from block b505
pushed continuation into block call in b505
pushed continuation into block call in b505
pushed continuation into block call in b505
suffixInline succeeded for call to block b505 from block b765
suffixInline succeeded for call to block b505 from block b766
inlining eliminated a wildcard binding in b668
inlining eliminated a wildcard binding in b668
prefixInline succeeded for call to block b647 from block b668
prefixInline succeeded for call to block b767 from block b668
prefixInline succeeded for call to block b539 from block b668
prefixInline succeeded for call to block b653 from block b668
prefixInline succeeded for call to block b769 from block b668
prefixInline succeeded for call to block b620 from block b668
prefixInline succeeded for call to block b659 from block b668
prefixInline succeeded for call to block b660 from block b668
prefixInline succeeded for call to block b662 from block b668
pushed continuation into block call in b668
pushed continuation into block call in b668
pushed continuation into block call in b668
prefixInline succeeded for call to block b532 from block b509
prefixInline succeeded for call to block b667 from block b509
prefixInline succeeded for call to block b668 from block b509
elided call to goto block b671
suffixInline succeeded for call to block b771 from block b509
pushed continuation into block call in b509
Inlining pass finished, running shake.
lifting static allocator to top-level s89
lifted allocator for t8170
lifted allocator for t8170
lifted allocator for t6195
lifting static allocator to top-level s90
lifting static allocator to top-level s91
lifted allocator for t8182
lifted allocator for t8182
lifted allocator for t8182
lifted allocator for t8182
lifted allocator for t8182
lifted allocator for t8182
lifted allocator for t8182
lifting static allocator to top-level s92
lifted allocator for t8187
lifted allocator for t8187
lifted allocator for t8187
lifted allocator for t8187
lifted allocator for t8187
lifted allocator for t8187
lifted allocator for t8187
lifted allocator for t8193
lifted allocator for t8193
lifting static allocator to top-level s93
lifted allocator for t8195
lifted allocator for t8195
lifted allocator for t8195
lifted allocator for t8195
lifted allocator for t8197
lifting static allocator to top-level s94
lifting static allocator to top-level s95
lifted allocator for t8210
lifted allocator for t8210
lifted allocator for t8210
lifted allocator for t8210
lifted allocator for t8210
lifted allocator for t8210
lifted allocator for t8210
lifted allocator for t8214
lifted allocator for t8214
lifting static allocator to top-level s96
lifted allocator for t8215
lifted allocator for t8215
lifted allocator for t8215
lifted allocator for t8215
lifted allocator for t8216
lifting static allocator to top-level s97
lifted allocator for t8223
lifted allocator for t8225
lifting static allocator to top-level s98
lifting static allocator to top-level s99
lifting static allocator to top-level s100
lifting static allocator to top-level s101
lifting static allocator to top-level s102
lifting static allocator to top-level s103
applied left monad law for t5815 <- return maxBound
applied left monad law for t8130 <- return ix0
applied left monad law for t8131 <- return s6
deriving specialized closure definition k349 for ClosAlloc using k155
applied left monad law for t5842 <- return s89
rewriting s89 @ [maxBound1]
applied left monad law for t7980 <- return maxBound1
deriving specialized closure definition k350 for ClosAlloc using k349
deriving specialized block b823 for BlockCall to block b689
deriving specialized block b825 for BlockCall to block b691
deriving specialized block b826 for BlockCall to block b693
liveness replaced t8089 with a wildcard
liveness replaced t8168 with a wildcard
rewriting t8172 @ [t8173]
liveness replaced t8172 with a wildcard
deriving specialized block b828 for BlockCall to block b782
rewriting t8174 @ [t8175]
liveness replaced t8174 with a wildcard
deriving specialized block b829 for BlockCall to block b783
liveness replaced t8171 with a wildcard
deriving specialized block b827 for BlockCall to block b781
liveness replaced t8170 with a wildcard
applied left monad law for t6197 <- return s15
deriving specialized closure definition k351 for ClosAlloc using k96
liveness replaced t6195 with a wildcard
applied left monad law for t6282 <- return s15
applied left monad law for t6281 <- return maxBound2
applied left monad law for t6280 <- return nz16
deriving specialized closure definition k352 for ClosAlloc using k317
rewriting t8138 @ []
liveness replaced t8138 with a wildcard
deriving specialized block b832 for BlockCall to block b703
deriving specialized block b833 for BlockCall to block b701
deriving specialized closure definition k353 for ClosAlloc using k140
rewriting t6584 @ [t6586]
rewriting t6588 @ [t6582]
rewriting t6590 @ []
deriving specialized block b836 for BlockCall to block b304
liveness replaced t6572 with a wildcard
liveness replaced t6573 with a wildcard
deriving specialized block b837 for BlockCall to block b704
rewriting t6536 @ []
liveness replaced t6536 with a wildcard
deriving specialized block b838 for BlockCall to block b679
liveness replaced t6590 with a wildcard
liveness replaced t6588 with a wildcard
liveness replaced t6584 with a wildcard
liveness replaced t6585 with a wildcard
deriving specialized block b836 for BlockCall to block b304
liveness replaced t6572 with a wildcard
liveness replaced t6573 with a wildcard
deriving specialized block b834 for BlockCall to block b678
eliminating duplicate args in call within b678
deriving specialized block b838 for BlockCall to block b679
liveness replaced t8015 with a wildcard
liveness replaced t8014 with a wildcard
liveness replaced t8029 with a wildcard
applied left monad law for t8163 <- return Unit
applied left monad law for t6794 <- return console
deriving specialized closure definition k354 for ClosAlloc using k327
rewriting t8160 @ [t8161]
liveness replaced t8160 with a wildcard
deriving specialized block b842 for BlockCall to block b778
rewriting t8162 @ [Unit]
applied left monad law for t8334 <- return Unit
applied left monad law for t6777 <- return console
applied left monad law for t6777 <- return console
deriving specialized closure definition k355 for ClosAlloc using k307
applied left monad law for t6660 <- return console
applied left monad law for t6428 <- return console
deriving specialized block b848 for BlockCall to block b570
applied left monad law for t6602 <- return console
deriving specialized block b849 for BlockCall to block b388
deriving specialized block b847 for BlockCall to block b377
applied left monad law for t8027 <- return console
deriving specialized closure definition k356 for ClosAlloc using k306
deriving specialized block b847 for BlockCall to block b377
applied left monad law for t6723 <- return console
applied left monad law for t6704 <- return console
deriving specialized block b853 for BlockCall to block b571
deriving specialized block b847 for BlockCall to block b377
deriving specialized block b852 for BlockCall to block b358
deriving specialized block b850 for BlockCall to block b710
deriving specialized block b845 for BlockCall to block b776
deriving specialized block b844 for BlockCall to block b840
liveness replaced t8162 with a wildcard
deriving specialized block b843 for BlockCall to block b779
liveness replaced t8159 with a wildcard
deriving specialized block b841 for BlockCall to block b777
eliminating duplicate args in call within b777
liveness replaced t8164 with a wildcard
applied left monad law for t8180 <- return s90
rewriting s90 @ [putchar]
applied left monad law for t8099 <- return putchar
deriving specialized closure definition k357 for ClosAlloc using k352
deriving specialized block b855 for BlockCall to block b738
liveness replaced t8134 with a wildcard
applied left monad law for t8185 <- return Unit
rewriting t6908 @ []
rewriting t6908 @ []
deriving specialized block b857 for BlockCall to block b787
liveness replaced t6908 with a wildcard
deriving specialized block b857 for BlockCall to block b787
liveness replaced t6908 with a wildcard
deriving specialized block b857 for BlockCall to block b787
applied left monad law for t8178 <- return s91
rewriting s91 @ [putchar]
deriving specialized block b855 for BlockCall to block b738
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b859 for BlockCall to block b786
deriving specialized block b859 for BlockCall to block b786
deriving specialized block b860 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b860 for BlockCall to block b857
liveness replaced t8183 with a wildcard
deriving specialized block b858 for BlockCall to block b785
liveness replaced t8182 with a wildcard
deriving specialized block b857 for BlockCall to block b787
applied left monad law for t8176 <- return s92
rewriting s92 @ [putchar]
deriving specialized block b855 for BlockCall to block b738
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b862 for BlockCall to block b786
deriving specialized block b862 for BlockCall to block b786
deriving specialized block b863 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b863 for BlockCall to block b857
liveness replaced t8188 with a wildcard
deriving specialized block b861 for BlockCall to block b789
liveness replaced t8187 with a wildcard
deriving specialized block b857 for BlockCall to block b787
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b865 for BlockCall to block b786
deriving specialized block b865 for BlockCall to block b786
deriving specialized block b866 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b866 for BlockCall to block b857
liveness replaced t8190 with a wildcard
deriving specialized block b864 for BlockCall to block b791
liveness replaced t8189 with a wildcard
liveness replaced t8191 with a wildcard
applied left monad law for t6894 <- return putchar
deriving specialized block b722 for BlockCall to block b203
deriving specialized block b857 for BlockCall to block b787
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b868 for BlockCall to block b786
deriving specialized block b868 for BlockCall to block b786
deriving specialized block b869 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b869 for BlockCall to block b857
liveness replaced t8194 with a wildcard
deriving specialized block b867 for BlockCall to block b793
liveness replaced t8193 with a wildcard
applied left monad law for t6282 <- return s15
applied left monad law for t6281 <- return maxBound2
applied left monad law for t6280 <- return nz10
deriving specialized closure definition k358 for ClosAlloc using k317
deriving specialized block b857 for BlockCall to block b787
applied left monad law for t7882 <- return s93
rewriting s93 @ [putchar]
applied left monad law for t8117 <- return putchar
deriving specialized closure definition k359 for ClosAlloc using k358
deriving specialized block b871 for BlockCall to block b747
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b874 for BlockCall to block b786
deriving specialized block b874 for BlockCall to block b786
deriving specialized block b875 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b875 for BlockCall to block b857
liveness replaced t8196 with a wildcard
deriving specialized block b873 for BlockCall to block b795
liveness replaced t8195 with a wildcard
deriving specialized block b857 for BlockCall to block b787
rewriting t6934 @ []
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b877 for BlockCall to block b786
deriving specialized block b877 for BlockCall to block b786
deriving specialized block b878 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b878 for BlockCall to block b857
liveness replaced t8198 with a wildcard
deriving specialized block b876 for BlockCall to block b797
liveness replaced t8197 with a wildcard
liveness replaced t6934 with a wildcard
deriving specialized block b857 for BlockCall to block b787
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b880 for BlockCall to block b786
deriving specialized block b880 for BlockCall to block b786
deriving specialized block b881 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b881 for BlockCall to block b857
liveness replaced t8200 with a wildcard
deriving specialized block b879 for BlockCall to block b799
liveness replaced t8201 with a wildcard
deriving specialized block b882 for BlockCall to block b751
applied left monad law for t7095 <- return str11
applied left monad law for t8202 <- return putHeader
applied left monad law for t8203 <- return nextMimgHeader
deriving specialized closure definition k360 for ClosAlloc using k273
rewriting t6908 @ []
rewriting t6908 @ []
deriving specialized block b884 for BlockCall to block b721
liveness replaced t6908 with a wildcard
deriving specialized block b884 for BlockCall to block b721
liveness replaced t6908 with a wildcard
applied left monad law for t8206 <- return s94
rewriting s94 @ [putchar]
deriving specialized block b855 for BlockCall to block b738
deriving specialized block b884 for BlockCall to block b721
deriving specialized block b857 for BlockCall to block b787
applied left monad law for t8204 <- return s95
rewriting s95 @ [putchar]
deriving specialized block b855 for BlockCall to block b738
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b886 for BlockCall to block b786
deriving specialized block b886 for BlockCall to block b786
deriving specialized block b887 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b887 for BlockCall to block b857
liveness replaced t8211 with a wildcard
deriving specialized block b885 for BlockCall to block b801
liveness replaced t8210 with a wildcard
deriving specialized block b857 for BlockCall to block b787
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b889 for BlockCall to block b786
deriving specialized block b889 for BlockCall to block b786
deriving specialized block b890 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b890 for BlockCall to block b857
liveness replaced t8213 with a wildcard
deriving specialized block b888 for BlockCall to block b803
liveness replaced t8212 with a wildcard
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b892 for BlockCall to block b786
deriving specialized block b892 for BlockCall to block b786
deriving specialized block b893 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b893 for BlockCall to block b857
liveness replaced t8194 with a wildcard
deriving specialized block b891 for BlockCall to block b793
liveness replaced t8214 with a wildcard
applied left monad law for t7908 <- return s96
rewriting s96 @ [putchar]
deriving specialized block b871 for BlockCall to block b747
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b895 for BlockCall to block b786
deriving specialized block b895 for BlockCall to block b786
deriving specialized block b896 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b896 for BlockCall to block b857
liveness replaced t8196 with a wildcard
deriving specialized block b894 for BlockCall to block b795
liveness replaced t8215 with a wildcard
rewriting t7279 @ []
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b898 for BlockCall to block b786
deriving specialized block b898 for BlockCall to block b786
deriving specialized block b899 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b899 for BlockCall to block b857
liveness replaced t8198 with a wildcard
deriving specialized block b897 for BlockCall to block b797
liveness replaced t8216 with a wildcard
liveness replaced t7279 with a wildcard
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b901 for BlockCall to block b786
deriving specialized block b901 for BlockCall to block b786
deriving specialized block b902 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b902 for BlockCall to block b857
liveness replaced t8200 with a wildcard
deriving specialized block b900 for BlockCall to block b799
liveness replaced t8218 with a wildcard
deriving specialized block b903 for BlockCall to block b758
applied left monad law for t7434 <- return str13
applied left monad law for t8219 <- return putMMap
applied left monad law for t8220 <- return nextMimgMMap
deriving specialized closure definition k361 for ClosAlloc using k282
applied left monad law for t7925 <- return s97
rewriting s97 @ [putchar]
deriving specialized block b855 for BlockCall to block b738
deriving specialized block b884 for BlockCall to block b721
deriving specialized block b857 for BlockCall to block b787
rewriting t7522 @ []
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b906 for BlockCall to block b786
deriving specialized block b906 for BlockCall to block b786
deriving specialized block b907 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b907 for BlockCall to block b857
liveness replaced t8224 with a wildcard
deriving specialized block b905 for BlockCall to block b809
liveness replaced t8223 with a wildcard
liveness replaced t7522 with a wildcard
deriving specialized block b857 for BlockCall to block b787
rewriting t7514 @ []
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b909 for BlockCall to block b786
deriving specialized block b909 for BlockCall to block b786
deriving specialized block b910 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b910 for BlockCall to block b857
liveness replaced t8226 with a wildcard
deriving specialized block b908 for BlockCall to block b811
liveness replaced t8225 with a wildcard
liveness replaced t7514 with a wildcard
deriving specialized block b857 for BlockCall to block b787
applied left monad law for t7539 <- return str15
deriving specialized closure definition k362 for ClosAlloc using k344
rewriting t8184 @ [Unit]
applied left monad law for t8438 <- return Unit
applied left monad law for t7507 <- return str15
applied left monad law for t7507 <- return str15
deriving specialized closure definition k363 for ClosAlloc using k319
applied left monad law for t6895 <- return str15
applied left monad law for t6896 <- return str15
deriving specialized block b884 for BlockCall to block b721
deriving specialized block b918 for BlockCall to block b722
deriving specialized block b917 for BlockCall to block b745
deriving specialized block b915 for BlockCall to block b812
deriving specialized block b914 for BlockCall to block b911
liveness replaced t8184 with a wildcard
deriving specialized block b913 for BlockCall to block b786
deriving specialized block b913 for BlockCall to block b786
deriving specialized block b919 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b919 for BlockCall to block b857
liveness replaced t8228 with a wildcard
deriving specialized block b912 for BlockCall to block b813
liveness replaced t8229 with a wildcard
applied left monad law for t7539 <- return str16
deriving specialized closure definition k364 for ClosAlloc using k344
rewriting t8184 @ [Unit]
applied left monad law for t8442 <- return Unit
applied left monad law for t7507 <- return str16
applied left monad law for t7507 <- return str16
deriving specialized closure definition k365 for ClosAlloc using k319
applied left monad law for t6895 <- return str16
applied left monad law for t6896 <- return str16
deriving specialized block b884 for BlockCall to block b721
deriving specialized block b927 for BlockCall to block b722
deriving specialized block b926 for BlockCall to block b745
deriving specialized block b924 for BlockCall to block b812
deriving specialized block b923 for BlockCall to block b920
liveness replaced t8184 with a wildcard
deriving specialized block b922 for BlockCall to block b786
deriving specialized block b922 for BlockCall to block b786
deriving specialized block b928 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b928 for BlockCall to block b857
liveness replaced t8228 with a wildcard
deriving specialized block b921 for BlockCall to block b813
liveness replaced t8230 with a wildcard
rewriting t7971 @ []
rewriting t7977 @ []
liveness replaced t7977 with a wildcard
liveness replaced t7971 with a wildcard
deriving specialized block b857 for BlockCall to block b787
applied left monad law for t7961 <- return s98
rewriting s98 @ [t7962]
applied left monad law for t8235 <- return s99
applied left monad law for t8236 <- return s99
applied left monad law for t8184 <- return s99
rewriting s99 @ [Unit]
deriving specialized block b930 for BlockCall to block b786
applied left monad law for t8186 <- return s99
deriving specialized block b930 for BlockCall to block b786
deriving specialized block b931 for BlockCall to block b857
deriving specialized block b931 for BlockCall to block b857
deriving specialized block b929 for BlockCall to block b815
deriving specialized block b857 for BlockCall to block b787
applied left monad law for t7951 <- return s100
rewriting s100 @ [t7952]
applied left monad law for t8237 <- return s101
applied left monad law for t8238 <- return s101
applied left monad law for t8184 <- return s101
rewriting s101 @ [Unit]
deriving specialized block b933 for BlockCall to block b786
applied left monad law for t8186 <- return s101
deriving specialized block b933 for BlockCall to block b786
deriving specialized block b934 for BlockCall to block b857
deriving specialized block b934 for BlockCall to block b857
deriving specialized block b932 for BlockCall to block b817
deriving specialized block b857 for BlockCall to block b787
applied left monad law for t8267 <- return s102
applied left monad law for t8240 <- return s102
applied left monad law for t8184 <- return s102
rewriting s102 @ [Unit]
deriving specialized block b936 for BlockCall to block b786
applied left monad law for t8186 <- return s102
deriving specialized block b936 for BlockCall to block b786
deriving specialized block b937 for BlockCall to block b857
deriving specialized block b937 for BlockCall to block b857
deriving specialized block b935 for BlockCall to block b819
deriving specialized block b884 for BlockCall to block b721
deriving specialized block b857 for BlockCall to block b787
applied left monad law for t8270 <- return s103
applied left monad law for t8271 <- return s103
applied left monad law for t8184 <- return s103
rewriting s103 @ [Unit]
deriving specialized block b939 for BlockCall to block b786
applied left monad law for t8186 <- return s103
deriving specialized block b939 for BlockCall to block b786
deriving specialized block b940 for BlockCall to block b857
deriving specialized block b940 for BlockCall to block b857
deriving specialized block b938 for BlockCall to block b821
liveness replaced t8256 with a wildcard
liveness replaced t8252 with a wildcard
Flow pass finished, running shake.
Steps performed = 670
-------------------------
suffixInline succeeded for call to block b334 from block b822
suffixInline succeeded for call to block b822 from block b824
prefixInline succeeded for call to block b823 from block b425
prefixInline succeeded for call to block b772 from block b690
inlining eliminated a wildcard binding in b125
inlining eliminated a wildcard binding in b493
inlining eliminated a wildcard binding in b774
suffixInline succeeded for call to block b82 from block b774
prefixInline succeeded for call to block b774 from block b702
prefixInline succeeded for call to block b773 from block b700
inlining eliminated a wildcard binding in b838
inlining eliminated a wildcard binding in b837
inlining eliminated a wildcard binding in b837
inlining eliminated a wildcard binding in b836
inlining eliminated a wildcard binding in b836
inlining eliminated a wildcard binding in b836
inlining eliminated a wildcard binding in b836
elided call to goto block b838
inlining eliminated a wildcard binding in b775
inlining eliminated a wildcard binding in b775
elided call to goto block b838
suffixInline succeeded for call to block b775 from block b388
inlining eliminated a wildcard binding in b710
inlining eliminated a wildcard binding in b776
suffixInline succeeded for call to block b776 from block b840
suffixInline succeeded for call to block b681 from block b846
suffixInline succeeded for call to block b680 from block b851
suffixInline succeeded for call to block b775 from block b849
inlining eliminated a wildcard binding in b850
inlining eliminated a wildcard binding in b845
inlining eliminated a wildcard binding in b843
inlining eliminated a wildcard binding in b842
prefixInline succeeded for call to block b258 from block b842
elided call to goto block b843
inlining eliminated a wildcard binding in b715
elided call to goto block b715
inlining eliminated a wildcard binding in b829
inlining eliminated a wildcard binding in b827
inlining eliminated a wildcard binding in b827
inlining eliminated a wildcard binding in b828
inlining eliminated a wildcard binding in b551
inlining eliminated a wildcard binding in b192
suffixInline succeeded for call to block b827 from block b192
inlining eliminated a wildcard binding in b737
suffixInline succeeded for call to block b737 from block b831
suffixInline succeeded for call to block b831 from block b856
prefixInline succeeded for call to block b855 from block b784
inlining eliminated a wildcard binding in b859
inlining eliminated a wildcard binding in b860
inlining eliminated a wildcard binding in b860
prefixInline succeeded for call to block b715 from block b860
elided call to goto block b859
pushed continuation into block call in b860
inlining eliminated a wildcard binding in b858
elided call to goto block b859
inlining eliminated a wildcard binding in b788
prefixInline succeeded for call to block b855 from block b788
suffixInline succeeded for call to block b858 from block b788
inlining eliminated a wildcard binding in b862
inlining eliminated a wildcard binding in b863
inlining eliminated a wildcard binding in b863
prefixInline succeeded for call to block b715 from block b863
elided call to goto block b862
pushed continuation into block call in b863
inlining eliminated a wildcard binding in b861
elided call to goto block b862
inlining eliminated a wildcard binding in b790
prefixInline succeeded for call to block b855 from block b790
suffixInline succeeded for call to block b861 from block b790
inlining eliminated a wildcard binding in b865
inlining eliminated a wildcard binding in b866
inlining eliminated a wildcard binding in b866
prefixInline succeeded for call to block b715 from block b866
elided call to goto block b865
pushed continuation into block call in b866
inlining eliminated a wildcard binding in b864
elided call to goto block b865
inlining eliminated a wildcard binding in b479
elided call to goto block b479
inlining eliminated a wildcard binding in b884
prefixInline succeeded for call to block b715 from block b884
pushed continuation into block call in b884
inlining eliminated a wildcard binding in b721
prefixInline succeeded for call to block b715 from block b721
pushed continuation into block call in b721
elided call to goto block b745
applied right monad law in b792
inlining eliminated a wildcard binding in b868
inlining eliminated a wildcard binding in b869
inlining eliminated a wildcard binding in b869
prefixInline succeeded for call to block b715 from block b869
elided call to goto block b868
pushed continuation into block call in b869
inlining eliminated a wildcard binding in b867
elided call to goto block b868
inlining eliminated a wildcard binding in b794
suffixInline succeeded for call to block b867 from block b794
suffixInline succeeded for call to block b737 from block b870
suffixInline succeeded for call to block b870 from block b872
inlining eliminated a wildcard binding in b874
inlining eliminated a wildcard binding in b875
inlining eliminated a wildcard binding in b875
prefixInline succeeded for call to block b715 from block b875
elided call to goto block b874
pushed continuation into block call in b875
inlining eliminated a wildcard binding in b873
elided call to goto block b874
inlining eliminated a wildcard binding in b796
prefixInline succeeded for call to block b871 from block b796
suffixInline succeeded for call to block b873 from block b796
inlining eliminated a wildcard binding in b877
inlining eliminated a wildcard binding in b878
inlining eliminated a wildcard binding in b878
prefixInline succeeded for call to block b715 from block b878
elided call to goto block b877
pushed continuation into block call in b878
inlining eliminated a wildcard binding in b876
elided call to goto block b877
inlining eliminated a wildcard binding in b798
inlining eliminated a wildcard binding in b798
prefixInline succeeded for call to block b745 from block b798
suffixInline succeeded for call to block b876 from block b798
pushed continuation into block call in b798
inlining eliminated a wildcard binding in b880
inlining eliminated a wildcard binding in b881
inlining eliminated a wildcard binding in b881
prefixInline succeeded for call to block b715 from block b881
elided call to goto block b880
pushed continuation into block call in b881
inlining eliminated a wildcard binding in b879
elided call to goto block b880
inlining eliminated a wildcard binding in b882
pushed continuation into block call in b882
suffixInline succeeded for call to block b602 from block b883
prefixInline succeeded for call to block b855 from block b800
inlining eliminated a wildcard binding in b886
inlining eliminated a wildcard binding in b887
inlining eliminated a wildcard binding in b887
prefixInline succeeded for call to block b715 from block b887
elided call to goto block b886
pushed continuation into block call in b887
inlining eliminated a wildcard binding in b885
elided call to goto block b886
inlining eliminated a wildcard binding in b802
prefixInline succeeded for call to block b855 from block b802
suffixInline succeeded for call to block b885 from block b802
inlining eliminated a wildcard binding in b889
inlining eliminated a wildcard binding in b890
inlining eliminated a wildcard binding in b890
prefixInline succeeded for call to block b715 from block b890
elided call to goto block b889
pushed continuation into block call in b890
inlining eliminated a wildcard binding in b888
elided call to goto block b889
inlining eliminated a wildcard binding in b482
elided call to goto block b482
applied right monad law in b804
inlining eliminated a wildcard binding in b892
inlining eliminated a wildcard binding in b893
inlining eliminated a wildcard binding in b893
prefixInline succeeded for call to block b715 from block b893
elided call to goto block b892
pushed continuation into block call in b893
inlining eliminated a wildcard binding in b891
elided call to goto block b892
inlining eliminated a wildcard binding in b805
suffixInline succeeded for call to block b891 from block b805
inlining eliminated a wildcard binding in b895
inlining eliminated a wildcard binding in b896
inlining eliminated a wildcard binding in b896
prefixInline succeeded for call to block b715 from block b896
elided call to goto block b895
pushed continuation into block call in b896
inlining eliminated a wildcard binding in b894
elided call to goto block b895
inlining eliminated a wildcard binding in b806
prefixInline succeeded for call to block b871 from block b806
suffixInline succeeded for call to block b894 from block b806
inlining eliminated a wildcard binding in b898
inlining eliminated a wildcard binding in b899
inlining eliminated a wildcard binding in b899
prefixInline succeeded for call to block b715 from block b899
elided call to goto block b898
pushed continuation into block call in b899
inlining eliminated a wildcard binding in b897
elided call to goto block b898
inlining eliminated a wildcard binding in b807
inlining eliminated a wildcard binding in b807
prefixInline succeeded for call to block b745 from block b807
suffixInline succeeded for call to block b897 from block b807
pushed continuation into block call in b807
inlining eliminated a wildcard binding in b901
inlining eliminated a wildcard binding in b902
inlining eliminated a wildcard binding in b902
prefixInline succeeded for call to block b715 from block b902
elided call to goto block b901
pushed continuation into block call in b902
inlining eliminated a wildcard binding in b900
elided call to goto block b901
inlining eliminated a wildcard binding in b903
pushed continuation into block call in b903
suffixInline succeeded for call to block b622 from block b904
prefixInline succeeded for call to block b855 from block b808
inlining eliminated a wildcard binding in b906
inlining eliminated a wildcard binding in b907
inlining eliminated a wildcard binding in b907
prefixInline succeeded for call to block b715 from block b907
elided call to goto block b906
pushed continuation into block call in b907
inlining eliminated a wildcard binding in b905
elided call to goto block b906
inlining eliminated a wildcard binding in b810
inlining eliminated a wildcard binding in b810
prefixInline succeeded for call to block b745 from block b810
suffixInline succeeded for call to block b905 from block b810
pushed continuation into block call in b810
inlining eliminated a wildcard binding in b909
inlining eliminated a wildcard binding in b910
inlining eliminated a wildcard binding in b910
prefixInline succeeded for call to block b715 from block b910
elided call to goto block b909
pushed continuation into block call in b910
inlining eliminated a wildcard binding in b908
elided call to goto block b909
inlining eliminated a wildcard binding in b812
inlining eliminated a wildcard binding in b812
prefixInline succeeded for call to block b745 from block b812
suffixInline succeeded for call to block b908 from block b812
pushed continuation into block call in b812
suffixInline succeeded for call to block b812 from block b911
elided call to goto block b745
suffixInline succeeded for call to block b722 from block b916
inlining eliminated a wildcard binding in b915
inlining eliminated a wildcard binding in b915
prefixInline succeeded for call to block b917 from block b915
suffixInline succeeded for call to block b908 from block b915
pushed continuation into block call in b915
inlining eliminated a wildcard binding in b913
inlining eliminated a wildcard binding in b919
inlining eliminated a wildcard binding in b919
prefixInline succeeded for call to block b715 from block b919
elided call to goto block b913
pushed continuation into block call in b919
inlining eliminated a wildcard binding in b912
elided call to goto block b913
inlining eliminated a wildcard binding in b765
elided call to goto block b765
suffixInline succeeded for call to block b812 from block b920
elided call to goto block b745
suffixInline succeeded for call to block b722 from block b925
inlining eliminated a wildcard binding in b924
inlining eliminated a wildcard binding in b924
prefixInline succeeded for call to block b926 from block b924
suffixInline succeeded for call to block b908 from block b924
pushed continuation into block call in b924
inlining eliminated a wildcard binding in b922
inlining eliminated a wildcard binding in b928
inlining eliminated a wildcard binding in b928
prefixInline succeeded for call to block b715 from block b928
elided call to goto block b922
pushed continuation into block call in b928
inlining eliminated a wildcard binding in b921
elided call to goto block b922
inlining eliminated a wildcard binding in b766
elided call to goto block b766
inlining eliminated a wildcard binding in b814
inlining eliminated a wildcard binding in b814
prefixInline succeeded for call to block b765 from block b814
elided call to goto block b766
suffixInline succeeded for call to block b921 from block b814
elided call to goto block b923
pushed continuation into block call in b814
inlining eliminated a wildcard binding in b931
prefixInline succeeded for call to block b715 from block b931
elided call to goto block b930
pushed continuation into block call in b931
elided call to goto block b930
prefixInline succeeded for call to block b770 from block b816
suffixInline succeeded for call to block b929 from block b816
inlining eliminated a wildcard binding in b934
prefixInline succeeded for call to block b715 from block b934
elided call to goto block b933
pushed continuation into block call in b934
elided call to goto block b933
prefixInline succeeded for call to block b768 from block b818
suffixInline succeeded for call to block b932 from block b818
inlining eliminated a wildcard binding in b937
prefixInline succeeded for call to block b715 from block b937
elided call to goto block b936
pushed continuation into block call in b937
elided call to goto block b936
pushed continuation into block call in b820
inlining eliminated a wildcard binding in b940
prefixInline succeeded for call to block b715 from block b940
elided call to goto block b939
pushed continuation into block call in b940
elided call to goto block b939
suffixInline succeeded for call to block b938 from block b509
Inlining pass finished, running shake.
lifting static allocator to top-level s104
lifted allocator for t6206
lifting static allocator to top-level s105
lifting static allocator to top-level s106
lifting static allocator to top-level s107
lifting static allocator to top-level s108
lifting static allocator to top-level s109
lifting static allocator to top-level s110
lifting static allocator to top-level s111
lifting static allocator to top-level s112
lifting static allocator to top-level s113
lifting static allocator to top-level s114
lifting static allocator to top-level s115
Rewrote block b840 to eliminate 1 unused parameters
removing unused argument t8334 from b840
applied left monad law for t5805 <- return maxBound1
applied left monad law for t8463 <- return ix0
applied left monad law for t8464 <- return s6
applied left monad law for t8465 <- return maxBound
applied left monad law for t5844 <- return s104
rewriting s104 @ [X0a]
applied left monad law for t8273 <- return X0a
deriving specialized block b997 for BlockCall to block b824
deriving specialized block b836 for BlockCall to block b304
liveness replaced t6578 with a wildcard
liveness replaced t6579 with a wildcard
deriving specialized block b998 for BlockCall to block b837
eliminating duplicate args in call within b836
liveness replaced t8333 with a wildcard
liveness replaced t8331 with a wildcard
liveness replaced t8330 with a wildcard
deriving specialized block b1000 for BlockCall to block b839
applied left monad law for t6777 <- return console
deriving specialized block b847 for BlockCall to block b377
deriving specialized block b850 for BlockCall to block b710
deriving specialized block b1000 for BlockCall to block b839
deriving specialized block b1001 for BlockCall to block b848
deriving specialized block b1002 for BlockCall to block b853
liveness replaced t8161 with a wildcard
liveness replaced t8346 with a wildcard
liveness replaced t8341 with a wildcard
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1004 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1005 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1003 for BlockCall to block b942
liveness replaced t8550 with a wildcard
liveness replaced t8161 with a wildcard
liveness replaced t8346 with a wildcard
liveness replaced t8341 with a wildcard
applied left monad law for t6208 <- return s15
applied left monad law for t6211 <- return s15
applied left monad law for t8284 <- return s15
applied left monad law for t6211 <- return s15
applied left monad law for t6144 <- return s15
rewriting t6143 @ [s15]
deriving specialized closure definition k399 for ClosAlloc using k109
rewriting t6146 @ []
liveness replaced t6146 with a wildcard
liveness replaced t6143 with a wildcard
deriving specialized block b1009 for BlockCall to block b191
applied left monad law for t6237 <- return s15
applied left monad law for t6161 <- return s15
rewriting t6160 @ [s15]
deriving specialized closure definition k399 for ClosAlloc using k109
rewriting t6163 @ []
liveness replaced t6163 with a wildcard
liveness replaced t6160 with a wildcard
deriving specialized block b1012 for BlockCall to block b189
rewriting t6143 @ [t6144]
rewriting t6146 @ []
liveness replaced t6146 with a wildcard
liveness replaced t6143 with a wildcard
deriving specialized block b1016 for BlockCall to block b191
rewriting t6160 @ [t6161]
rewriting t6163 @ []
liveness replaced t6163 with a wildcard
liveness replaced t6160 with a wildcard
deriving specialized block b1018 for BlockCall to block b189
deriving specialized block b1013 for BlockCall to block b192
liveness replaced t6239 with a wildcard
deriving specialized block b1017 for BlockCall to block b551
liveness replaced t6213 with a wildcard
deriving specialized block b1015 for BlockCall to block b780
liveness replaced t8285 with a wildcard
deriving specialized block b1014 for BlockCall to block b828
deriving specialized block b1015 for BlockCall to block b780
liveness replaced t8291 with a wildcard
deriving specialized block b1019 for BlockCall to block b829
liveness replaced t6213 with a wildcard
deriving specialized block b1013 for BlockCall to block b192
liveness replaced t6239 with a wildcard
deriving specialized block b1011 for BlockCall to block b551
liveness replaced t6213 with a wildcard
deriving specialized block b1008 for BlockCall to block b780
liveness replaced t8285 with a wildcard
deriving specialized block b1007 for BlockCall to block b828
applied left monad law for t8290 <- return s15
deriving specialized block b1008 for BlockCall to block b780
liveness replaced t8291 with a wildcard
deriving specialized block b1020 for BlockCall to block b829
liveness replaced t6213 with a wildcard
deriving specialized block b1006 for BlockCall to block b192
liveness replaced t6206 with a wildcard
applied left monad law for t8096 <- return putchar
applied left monad law for t8535 <- return maxBound2
applied left monad law for t8536 <- return s15
applied left monad law for t8537 <- return nz16
deriving specialized closure definition k400 for ClosAlloc using k351
applied left monad law for t8181 <- return s105
rewriting s105 @ [t7902]
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1024 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1025 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1023 for BlockCall to block b942
liveness replaced t8538 with a wildcard
deriving specialized block b1022 for BlockCall to block b860
deriving specialized block b1023 for BlockCall to block b942
liveness replaced t8538 with a wildcard
applied left monad law for t8179 <- return s106
rewriting s106 @ [t7899]
deriving specialized block b1022 for BlockCall to block b860
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1028 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1029 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1027 for BlockCall to block b942
liveness replaced t8546 with a wildcard
deriving specialized block b1026 for BlockCall to block b863
deriving specialized block b1027 for BlockCall to block b942
liveness replaced t8546 with a wildcard
applied left monad law for t8177 <- return s107
rewriting s107 @ [t7896]
deriving specialized block b1026 for BlockCall to block b863
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1032 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1033 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1031 for BlockCall to block b942
liveness replaced t8549 with a wildcard
deriving specialized block b1030 for BlockCall to block b866
deriving specialized block b1031 for BlockCall to block b942
liveness replaced t8549 with a wildcard
deriving specialized block b1030 for BlockCall to block b866
applied left monad law for t8096 <- return putchar
applied left monad law for t8555 <- return maxBound2
applied left monad law for t8556 <- return s15
applied left monad law for t8557 <- return nz10
deriving specialized closure definition k401 for ClosAlloc using k351
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1037 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1038 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1036 for BlockCall to block b942
liveness replaced t8552 with a wildcard
deriving specialized block b1035 for BlockCall to block b869
deriving specialized block b1036 for BlockCall to block b942
liveness replaced t8552 with a wildcard
deriving specialized block b1035 for BlockCall to block b869
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1041 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1042 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1040 for BlockCall to block b942
liveness replaced t8558 with a wildcard
deriving specialized block b1039 for BlockCall to block b875
deriving specialized block b1040 for BlockCall to block b942
liveness replaced t8558 with a wildcard
applied left monad law for t7883 <- return s108
rewriting s108 @ [t6928]
deriving specialized block b1039 for BlockCall to block b875
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1045 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1046 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1044 for BlockCall to block b942
liveness replaced t8561 with a wildcard
deriving specialized block b1043 for BlockCall to block b878
deriving specialized block b1044 for BlockCall to block b942
liveness replaced t8561 with a wildcard
deriving specialized block b1043 for BlockCall to block b878
deriving specialized block b857 for BlockCall to block b787
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b1048 for BlockCall to block b786
deriving specialized block b1048 for BlockCall to block b786
deriving specialized block b1049 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b1049 for BlockCall to block b857
liveness replaced t8565 with a wildcard
deriving specialized block b1047 for BlockCall to block b953
liveness replaced t8564 with a wildcard
deriving specialized block b1047 for BlockCall to block b953
liveness replaced t8564 with a wildcard
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1052 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1053 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1051 for BlockCall to block b942
liveness replaced t8566 with a wildcard
deriving specialized block b1050 for BlockCall to block b881
deriving specialized block b1051 for BlockCall to block b942
liveness replaced t8566 with a wildcard
deriving specialized block b1051 for BlockCall to block b942
liveness replaced t8566 with a wildcard
deriving specialized block b1054 for BlockCall to block b958
rewriting t8569 @ [t8570]
liveness replaced t8569 with a wildcard
deriving specialized block b1056 for BlockCall to block b957
deriving specialized block b1055 for BlockCall to block b956
eliminating duplicate args in call within b956
liveness replaced t8567 with a wildcard
applied left monad law for t7087 <- return nextMimgHeader
applied left monad law for t7729 <- return str11
applied left monad law for t7728 <- return putHeader
applied left monad law for t8119 <- return str11
applied left monad law for t8118 <- return putHeader
applied left monad law for t7040 <- return nextMimgHeader
applied left monad law for t8121 <- return str11
applied left monad law for t8120 <- return putHeader
applied left monad law for t7046 <- return nextMimgHeader
deriving specialized closure definition k402 for ClosAlloc using k376
applied left monad law for t8794 <- return nextMimgHeader
applied left monad law for t8790 <- return putHeader
applied left monad law for t8789 <- return str11
deriving specialized closure definition k402 for ClosAlloc using k376
applied left monad law for t8788 <- return nextMimgHeader
applied left monad law for t8787 <- return putHeader
applied left monad law for t8786 <- return str11
applied left monad law for t6926 <- return putHeader
applied left monad law for t6925 <- return str11
deriving specialized closure definition k402 for ClosAlloc using k376
deriving specialized closure definition k403 for ClosAlloc using k374
applied left monad law for t8757 <- return putHeader
applied left monad law for t6896 <- return str11
deriving specialized closure definition k403 for ClosAlloc using k374
applied left monad law for t8760 <- return putHeader
deriving specialized closure definition k403 for ClosAlloc using k374
applied left monad law for t6926 <- return putHeader
applied left monad law for t6926 <- return putHeader
applied left monad law for t6926 <- return putHeader
rewriting putHeader @ [t6927]
rewriting t6950 @ []
liveness replaced t6950 with a wildcard
deriving specialized block b1068 for BlockCall to block b794
applied left monad law for t8369 <- return putHeader
deriving specialized closure definition k404 for ClosAlloc using k372
applied left monad law for t8736 <- return putHeader
deriving specialized closure definition k404 for ClosAlloc using k372
applied left monad law for t8740 <- return putHeader
deriving specialized closure definition k404 for ClosAlloc using k372
applied left monad law for t8369 <- return putHeader
deriving specialized block b1068 for BlockCall to block b794
deriving specialized block b1069 for BlockCall to block b1039
deriving specialized block b1073 for BlockCall to block b950
deriving specialized block b1072 for BlockCall to block b1041
applied left monad law for t8744 <- return putHeader
deriving specialized closure definition k404 for ClosAlloc using k372
deriving specialized block b1073 for BlockCall to block b950
deriving specialized block b1074 for BlockCall to block b1042
deriving specialized block b1071 for BlockCall to block b1040
deriving specialized block b1069 for BlockCall to block b1039
deriving specialized block b1067 for BlockCall to block b796
applied left monad law for t8380 <- return putHeader
deriving specialized closure definition k405 for ClosAlloc using k373
applied left monad law for t8746 <- return putHeader
deriving specialized closure definition k405 for ClosAlloc using k373
applied left monad law for t8750 <- return putHeader
deriving specialized closure definition k405 for ClosAlloc using k373
applied left monad law for t8380 <- return putHeader
deriving specialized block b1067 for BlockCall to block b796
deriving specialized block b1075 for BlockCall to block b1043
deriving specialized block b1079 for BlockCall to block b951
deriving specialized block b1078 for BlockCall to block b1045
applied left monad law for t8754 <- return putHeader
deriving specialized closure definition k405 for ClosAlloc using k373
deriving specialized block b1079 for BlockCall to block b951
deriving specialized block b1080 for BlockCall to block b1046
deriving specialized block b1077 for BlockCall to block b1044
deriving specialized block b1075 for BlockCall to block b1043
deriving specialized block b1066 for BlockCall to block b952
deriving specialized block b1065 for BlockCall to block b1048
applied left monad law for t8763 <- return putHeader
deriving specialized closure definition k403 for ClosAlloc using k374
deriving specialized block b1065 for BlockCall to block b1048
deriving specialized block b1081 for BlockCall to block b1049
deriving specialized block b1081 for BlockCall to block b1049
deriving specialized block b1064 for BlockCall to block b1047
applied left monad law for t7046 <- return nextMimgHeader
applied left monad law for t8120 <- return putHeader
applied left monad law for t8121 <- return str11
deriving specialized block b1058 for BlockCall to block b750
deriving specialized block b1082 for BlockCall to block b955
deriving specialized block b1062 for BlockCall to block b1056
applied left monad law for t8390 <- return putHeader
applied left monad law for t8389 <- return str11
deriving specialized closure definition k406 for ClosAlloc using k375
applied left monad law for t8770 <- return str11
applied left monad law for t8769 <- return putHeader
deriving specialized closure definition k406 for ClosAlloc using k375
applied left monad law for t8775 <- return str11
applied left monad law for t8774 <- return putHeader
deriving specialized closure definition k406 for ClosAlloc using k375
applied left monad law for t8389 <- return str11
applied left monad law for t8390 <- return putHeader
applied left monad law for t6926 <- return putHeader
applied left monad law for t6925 <- return str11
deriving specialized closure definition k403 for ClosAlloc using k374
deriving specialized block b1064 for BlockCall to block b1047
deriving specialized block b1088 for BlockCall to block b798
applied left monad law for t8390 <- return putHeader
applied left monad law for t8389 <- return str11
deriving specialized closure definition k406 for ClosAlloc using k375
deriving specialized block b1085 for BlockCall to block b1051
deriving specialized block b1089 for BlockCall to block b1050
deriving specialized block b1087 for BlockCall to block b954
deriving specialized block b1086 for BlockCall to block b1052
applied left monad law for t8780 <- return str11
applied left monad law for t8779 <- return putHeader
deriving specialized closure definition k406 for ClosAlloc using k375
deriving specialized block b1087 for BlockCall to block b954
deriving specialized block b1090 for BlockCall to block b1053
deriving specialized block b1085 for BlockCall to block b1051
rewriting t8571 @ [t8572]
liveness replaced t8571 with a wildcard
deriving specialized block b1083 for BlockCall to block b1054
liveness replaced t8795 with a wildcard
deriving specialized block b1061 for BlockCall to block b1057
deriving specialized block b1059 for BlockCall to block b882
deriving specialized block b1058 for BlockCall to block b750
liveness replaced t8573 with a wildcard
applied left monad law for t8207 <- return s109
rewriting s109 @ [t7918]
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1093 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1094 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1092 for BlockCall to block b942
liveness replaced t8574 with a wildcard
deriving specialized block b1091 for BlockCall to block b887
deriving specialized block b1092 for BlockCall to block b942
liveness replaced t8574 with a wildcard
applied left monad law for t8205 <- return s110
rewriting s110 @ [t7915]
deriving specialized block b1091 for BlockCall to block b887
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1097 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1098 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1096 for BlockCall to block b942
liveness replaced t8577 with a wildcard
deriving specialized block b1095 for BlockCall to block b890
deriving specialized block b1096 for BlockCall to block b942
liveness replaced t8577 with a wildcard
deriving specialized block b1095 for BlockCall to block b890
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1101 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1102 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1100 for BlockCall to block b942
liveness replaced t8578 with a wildcard
deriving specialized block b1099 for BlockCall to block b893
deriving specialized block b1100 for BlockCall to block b942
liveness replaced t8578 with a wildcard
deriving specialized block b1099 for BlockCall to block b893
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1105 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1106 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1104 for BlockCall to block b942
liveness replaced t8581 with a wildcard
deriving specialized block b1103 for BlockCall to block b896
deriving specialized block b1104 for BlockCall to block b942
liveness replaced t8581 with a wildcard
applied left monad law for t7909 <- return s111
rewriting s111 @ [t7273]
deriving specialized block b1103 for BlockCall to block b896
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1109 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1110 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1108 for BlockCall to block b942
liveness replaced t8584 with a wildcard
deriving specialized block b1107 for BlockCall to block b899
deriving specialized block b1108 for BlockCall to block b942
liveness replaced t8584 with a wildcard
deriving specialized block b1107 for BlockCall to block b899
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b1112 for BlockCall to block b786
deriving specialized block b1112 for BlockCall to block b786
deriving specialized block b1113 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b1113 for BlockCall to block b857
liveness replaced t8565 with a wildcard
deriving specialized block b1111 for BlockCall to block b953
liveness replaced t8587 with a wildcard
deriving specialized block b1111 for BlockCall to block b953
liveness replaced t8587 with a wildcard
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1116 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1117 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1115 for BlockCall to block b942
liveness replaced t8588 with a wildcard
deriving specialized block b1114 for BlockCall to block b902
deriving specialized block b1115 for BlockCall to block b942
liveness replaced t8588 with a wildcard
deriving specialized block b1115 for BlockCall to block b942
liveness replaced t8588 with a wildcard
deriving specialized block b1118 for BlockCall to block b969
rewriting t8591 @ [t8592]
liveness replaced t8591 with a wildcard
deriving specialized block b1120 for BlockCall to block b968
deriving specialized block b1119 for BlockCall to block b967
eliminating duplicate args in call within b967
liveness replaced t8589 with a wildcard
applied left monad law for t7426 <- return nextMimgMMap
applied left monad law for t7736 <- return str13
applied left monad law for t7735 <- return putMMap
applied left monad law for t8124 <- return str13
applied left monad law for t8123 <- return putMMap
applied left monad law for t7379 <- return nextMimgMMap
applied left monad law for t8126 <- return str13
applied left monad law for t8125 <- return putMMap
applied left monad law for t7385 <- return nextMimgMMap
deriving specialized closure definition k407 for ClosAlloc using k384
applied left monad law for t8883 <- return nextMimgMMap
applied left monad law for t8879 <- return putMMap
applied left monad law for t8878 <- return str13
deriving specialized closure definition k407 for ClosAlloc using k384
applied left monad law for t8877 <- return nextMimgMMap
applied left monad law for t8876 <- return putMMap
applied left monad law for t8875 <- return str13
applied left monad law for t7271 <- return putMMap
applied left monad law for t7270 <- return str13
deriving specialized closure definition k407 for ClosAlloc using k384
deriving specialized closure definition k408 for ClosAlloc using k382
applied left monad law for t8846 <- return putMMap
applied left monad law for t6896 <- return str13
deriving specialized closure definition k408 for ClosAlloc using k382
applied left monad law for t8849 <- return putMMap
deriving specialized closure definition k408 for ClosAlloc using k382
applied left monad law for t7271 <- return putMMap
applied left monad law for t7271 <- return putMMap
applied left monad law for t7271 <- return putMMap
rewriting putMMap @ [t7272]
rewriting t7295 @ []
liveness replaced t7295 with a wildcard
deriving specialized block b1132 for BlockCall to block b805
applied left monad law for t8408 <- return putMMap
deriving specialized closure definition k409 for ClosAlloc using k380
applied left monad law for t8825 <- return putMMap
deriving specialized closure definition k409 for ClosAlloc using k380
applied left monad law for t8829 <- return putMMap
deriving specialized closure definition k409 for ClosAlloc using k380
applied left monad law for t8408 <- return putMMap
deriving specialized block b1132 for BlockCall to block b805
deriving specialized block b1133 for BlockCall to block b1103
deriving specialized block b1137 for BlockCall to block b962
deriving specialized block b1136 for BlockCall to block b1105
applied left monad law for t8833 <- return putMMap
deriving specialized closure definition k409 for ClosAlloc using k380
deriving specialized block b1137 for BlockCall to block b962
deriving specialized block b1138 for BlockCall to block b1106
deriving specialized block b1135 for BlockCall to block b1104
deriving specialized block b1133 for BlockCall to block b1103
deriving specialized block b1131 for BlockCall to block b806
applied left monad law for t8419 <- return putMMap
deriving specialized closure definition k410 for ClosAlloc using k381
applied left monad law for t8835 <- return putMMap
deriving specialized closure definition k410 for ClosAlloc using k381
applied left monad law for t8839 <- return putMMap
deriving specialized closure definition k410 for ClosAlloc using k381
applied left monad law for t8419 <- return putMMap
deriving specialized block b1131 for BlockCall to block b806
deriving specialized block b1139 for BlockCall to block b1107
deriving specialized block b1143 for BlockCall to block b963
deriving specialized block b1142 for BlockCall to block b1109
applied left monad law for t8843 <- return putMMap
deriving specialized closure definition k410 for ClosAlloc using k381
deriving specialized block b1143 for BlockCall to block b963
deriving specialized block b1144 for BlockCall to block b1110
deriving specialized block b1141 for BlockCall to block b1108
deriving specialized block b1139 for BlockCall to block b1107
deriving specialized block b1130 for BlockCall to block b964
deriving specialized block b1129 for BlockCall to block b1112
applied left monad law for t8852 <- return putMMap
deriving specialized closure definition k408 for ClosAlloc using k382
deriving specialized block b1129 for BlockCall to block b1112
deriving specialized block b1145 for BlockCall to block b1113
deriving specialized block b1145 for BlockCall to block b1113
deriving specialized block b1128 for BlockCall to block b1111
applied left monad law for t7385 <- return nextMimgMMap
applied left monad law for t8125 <- return putMMap
applied left monad law for t8126 <- return str13
deriving specialized block b1122 for BlockCall to block b757
deriving specialized block b1146 for BlockCall to block b966
deriving specialized block b1126 for BlockCall to block b1120
applied left monad law for t8429 <- return putMMap
applied left monad law for t8428 <- return str13
deriving specialized closure definition k411 for ClosAlloc using k383
applied left monad law for t8859 <- return str13
applied left monad law for t8858 <- return putMMap
deriving specialized closure definition k411 for ClosAlloc using k383
applied left monad law for t8864 <- return str13
applied left monad law for t8863 <- return putMMap
deriving specialized closure definition k411 for ClosAlloc using k383
applied left monad law for t8428 <- return str13
applied left monad law for t8429 <- return putMMap
applied left monad law for t7271 <- return putMMap
applied left monad law for t7270 <- return str13
deriving specialized closure definition k408 for ClosAlloc using k382
deriving specialized block b1128 for BlockCall to block b1111
deriving specialized block b1152 for BlockCall to block b807
applied left monad law for t8429 <- return putMMap
applied left monad law for t8428 <- return str13
deriving specialized closure definition k411 for ClosAlloc using k383
deriving specialized block b1149 for BlockCall to block b1115
deriving specialized block b1153 for BlockCall to block b1114
deriving specialized block b1151 for BlockCall to block b965
deriving specialized block b1150 for BlockCall to block b1116
applied left monad law for t8869 <- return str13
applied left monad law for t8868 <- return putMMap
deriving specialized closure definition k411 for ClosAlloc using k383
deriving specialized block b1151 for BlockCall to block b965
deriving specialized block b1154 for BlockCall to block b1117
deriving specialized block b1149 for BlockCall to block b1115
rewriting t8593 @ [t8594]
liveness replaced t8593 with a wildcard
deriving specialized block b1147 for BlockCall to block b1118
liveness replaced t8884 with a wildcard
deriving specialized block b1125 for BlockCall to block b1121
deriving specialized block b1123 for BlockCall to block b903
deriving specialized block b1122 for BlockCall to block b757
liveness replaced t8595 with a wildcard
applied left monad law for t7926 <- return s112
rewriting s112 @ [t7531]
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1157 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1158 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1156 for BlockCall to block b942
liveness replaced t8596 with a wildcard
deriving specialized block b1155 for BlockCall to block b907
deriving specialized block b1156 for BlockCall to block b942
liveness replaced t8596 with a wildcard
deriving specialized block b1155 for BlockCall to block b907
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b1160 for BlockCall to block b786
deriving specialized block b1160 for BlockCall to block b786
deriving specialized block b1161 for BlockCall to block b857
liveness replaced t8186 with a wildcard
deriving specialized block b1161 for BlockCall to block b857
liveness replaced t8565 with a wildcard
deriving specialized block b1159 for BlockCall to block b953
eliminating duplicate args in call within b953
liveness replaced t8599 with a wildcard
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1165 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1166 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1164 for BlockCall to block b942
liveness replaced t8600 with a wildcard
deriving specialized block b1163 for BlockCall to block b910
deriving specialized block b1164 for BlockCall to block b942
liveness replaced t8600 with a wildcard
deriving specialized block b1163 for BlockCall to block b910
deriving specialized block b1003 for BlockCall to block b942
liveness replaced t8550 with a wildcard
deriving specialized block b1167 for BlockCall to block b976
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b1169 for BlockCall to block b786
rewriting t8611 @ [t8612]
liveness replaced t8612 with a wildcard
liveness replaced t8611 with a wildcard
deriving specialized block b1170 for BlockCall to block b1167
liveness replaced t8620 with a wildcard
deriving specialized block b1168 for BlockCall to block b979
liveness replaced t8619 with a wildcard
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1173 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1174 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1172 for BlockCall to block b942
liveness replaced t8621 with a wildcard
deriving specialized block b1171 for BlockCall to block b928
deriving specialized block b1172 for BlockCall to block b942
liveness replaced t8621 with a wildcard
deriving specialized block b1171 for BlockCall to block b928
deriving specialized block b1163 for BlockCall to block b910
deriving specialized block b1167 for BlockCall to block b976
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b1176 for BlockCall to block b786
rewriting t8611 @ [t8612]
liveness replaced t8612 with a wildcard
liveness replaced t8611 with a wildcard
deriving specialized block b1177 for BlockCall to block b1167
liveness replaced t8610 with a wildcard
deriving specialized block b1175 for BlockCall to block b975
liveness replaced t8609 with a wildcard
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1180 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1181 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1179 for BlockCall to block b942
liveness replaced t8613 with a wildcard
deriving specialized block b1178 for BlockCall to block b919
deriving specialized block b1179 for BlockCall to block b942
liveness replaced t8613 with a wildcard
deriving specialized block b1179 for BlockCall to block b942
liveness replaced t8613 with a wildcard
deriving specialized block b1182 for BlockCall to block b984
applied left monad law for t8624 <- return s113
applied left monad law for t8625 <- return s113
applied left monad law for t8626 <- return s113
rewriting s113 @ [t8627]
liveness replaced t8627 with a wildcard
deriving specialized block b1184 for BlockCall to block b983
applied left monad law for t8628 <- return s113
rewriting s113 @ [t8629]
liveness replaced t8629 with a wildcard
deriving specialized block b1185 for BlockCall to block b1182
deriving specialized block b1183 for BlockCall to block b982
applied left monad law for t8624 <- return s114
deriving specialized block b1183 for BlockCall to block b982
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1188 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1189 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1187 for BlockCall to block b942
liveness replaced t8630 with a wildcard
deriving specialized block b1186 for BlockCall to block b931
deriving specialized block b1187 for BlockCall to block b942
liveness replaced t8630 with a wildcard
deriving specialized block b1187 for BlockCall to block b942
liveness replaced t8630 with a wildcard
rewriting t7963 @ []
deriving specialized block b1190 for BlockCall to block b993
liveness replaced t7963 with a wildcard
rewriting t7963 @ []
deriving specialized block b1186 for BlockCall to block b931
liveness replaced t7963 with a wildcard
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1193 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1194 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1192 for BlockCall to block b942
liveness replaced t8633 with a wildcard
deriving specialized block b1191 for BlockCall to block b934
deriving specialized block b1192 for BlockCall to block b942
liveness replaced t8633 with a wildcard
deriving specialized block b1192 for BlockCall to block b942
liveness replaced t8633 with a wildcard
rewriting t7953 @ []
deriving specialized block b1195 for BlockCall to block b994
liveness replaced t7953 with a wildcard
rewriting t7953 @ []
deriving specialized block b1191 for BlockCall to block b934
liveness replaced t7953 with a wildcard
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1198 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1199 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1197 for BlockCall to block b942
liveness replaced t8636 with a wildcard
deriving specialized block b1196 for BlockCall to block b937
deriving specialized block b1197 for BlockCall to block b942
liveness replaced t8636 with a wildcard
deriving specialized block b1197 for BlockCall to block b942
liveness replaced t8636 with a wildcard
deriving specialized block b1200 for BlockCall to block b995
applied left monad law for t8637 <- return s115
applied left monad law for t8638 <- return s115
applied left monad law for t8639 <- return s115
applied left monad law for t8640 <- return s115
applied left monad law for t8641 <- return s115
rewriting s115 @ [t8642]
liveness replaced t8642 with a wildcard
deriving specialized block b1204 for BlockCall to block b992
applied left monad law for t8643 <- return s115
rewriting s115 @ [t8644]
liveness replaced t8644 with a wildcard
deriving specialized block b1205 for BlockCall to block b1190
deriving specialized block b1203 for BlockCall to block b991
applied left monad law for t8645 <- return s115
rewriting s115 @ [t8646]
liveness replaced t8646 with a wildcard
deriving specialized block b1206 for BlockCall to block b1195
deriving specialized block b1202 for BlockCall to block b990
applied left monad law for t8647 <- return s115
rewriting s115 @ [t8648]
liveness replaced t8648 with a wildcard
deriving specialized block b1207 for BlockCall to block b1200
deriving specialized block b1201 for BlockCall to block b989
rewriting t8540 @ [t8541]
liveness replaced t8541 with a wildcard
liveness replaced t8540 with a wildcard
deriving specialized block b1210 for BlockCall to block b943
rewriting t8542 @ [t8543]
liveness replaced t8543 with a wildcard
liveness replaced t8542 with a wildcard
deriving specialized block b1211 for BlockCall to block b944
liveness replaced t8539 with a wildcard
deriving specialized block b1209 for BlockCall to block b942
liveness replaced t8649 with a wildcard
deriving specialized block b1208 for BlockCall to block b940
deriving specialized block b1209 for BlockCall to block b942
liveness replaced t8649 with a wildcard
deriving specialized block b1208 for BlockCall to block b940
Flow pass finished, running shake.
Steps performed = 1117
-------------------------
elided call to goto block b425
inlining eliminated a wildcard binding in b835
inlining eliminated a wildcard binding in b835
elided call to goto block b835
inlining eliminated a wildcard binding in b1000
inlining eliminated a wildcard binding in b1000
inlining eliminated a wildcard binding in b1000
suffixInline succeeded for call to block b999 from block b1000
suffixInline succeeded for call to block b840 from block b842
inlining eliminated a wildcard binding in b854
elided call to goto block b844
suffixInline succeeded for call to block b220 from block b1010
inlining eliminated a wildcard binding in b1009
inlining eliminated a wildcard binding in b1009
inlining eliminated a wildcard binding in b1016
inlining eliminated a wildcard binding in b1016
inlining eliminated a wildcard binding in b1018
inlining eliminated a wildcard binding in b1018
inlining eliminated a wildcard binding in b1019
inlining eliminated a wildcard binding in b1014
inlining eliminated a wildcard binding in b1015
inlining eliminated a wildcard binding in b1017
inlining eliminated a wildcard binding in b1013
elided call to goto block b1016
elided call to goto block b1018
inlining eliminated a wildcard binding in b1012
inlining eliminated a wildcard binding in b1012
inlining eliminated a wildcard binding in b1011
elided call to goto block b1012
inlining eliminated a wildcard binding in b1008
elided call to goto block b1009
inlining eliminated a wildcard binding in b1020
inlining eliminated a wildcard binding in b1007
inlining eliminated a wildcard binding in b1006
inlining eliminated a wildcard binding in b830
elided call to goto block b830
suffixInline succeeded for call to block b1006 from block b1021
prefixInline succeeded for call to block b856 from block b784
inlining eliminated a wildcard binding in b1025
inlining eliminated a wildcard binding in b1023
inlining eliminated a wildcard binding in b1023
inlining eliminated a wildcard binding in b1024
inlining eliminated a wildcard binding in b1022
suffixInline succeeded for call to block b1023 from block b1022
prefixInline succeeded for call to block b856 from block b788
inlining eliminated a wildcard binding in b1029
inlining eliminated a wildcard binding in b1027
inlining eliminated a wildcard binding in b1027
inlining eliminated a wildcard binding in b1028
inlining eliminated a wildcard binding in b1026
suffixInline succeeded for call to block b1027 from block b1026
prefixInline succeeded for call to block b856 from block b790
inlining eliminated a wildcard binding in b1033
inlining eliminated a wildcard binding in b1031
inlining eliminated a wildcard binding in b1031
inlining eliminated a wildcard binding in b1032
inlining eliminated a wildcard binding in b1030
suffixInline succeeded for call to block b1031 from block b1030
elided call to goto block b830
suffixInline succeeded for call to block b1006 from block b1034
inlining eliminated a wildcard binding in b1038
inlining eliminated a wildcard binding in b1036
inlining eliminated a wildcard binding in b1036
inlining eliminated a wildcard binding in b1037
inlining eliminated a wildcard binding in b1035
suffixInline succeeded for call to block b1036 from block b1035
inlining eliminated a wildcard binding in b1042
inlining eliminated a wildcard binding in b1040
inlining eliminated a wildcard binding in b1040
inlining eliminated a wildcard binding in b1041
inlining eliminated a wildcard binding in b1039
suffixInline succeeded for call to block b1040 from block b1039
prefixInline succeeded for call to block b872 from block b796
inlining eliminated a wildcard binding in b1046
inlining eliminated a wildcard binding in b1044
inlining eliminated a wildcard binding in b1044
inlining eliminated a wildcard binding in b1045
inlining eliminated a wildcard binding in b1043
suffixInline succeeded for call to block b1044 from block b1043
inlining eliminated a wildcard binding in b1048
inlining eliminated a wildcard binding in b1049
inlining eliminated a wildcard binding in b1049
prefixInline succeeded for call to block b715 from block b1049
elided call to goto block b1048
inlining eliminated a wildcard binding in b1047
elided call to goto block b1048
inlining eliminated a wildcard binding in b798
inlining eliminated a wildcard binding in b1053
inlining eliminated a wildcard binding in b1051
inlining eliminated a wildcard binding in b1051
inlining eliminated a wildcard binding in b1052
inlining eliminated a wildcard binding in b1050
elided call to goto block b798
inlining eliminated a wildcard binding in b1054
inlining eliminated a wildcard binding in b882
inlining eliminated a wildcard binding in b1056
inlining eliminated a wildcard binding in b1056
suffixInline succeeded for call to block b1057 from block b882
suffixInline succeeded for call to block b750 from block b955
suffixInline succeeded for call to block b952 from block b1063
inlining eliminated a wildcard binding in b1068
inlining eliminated a wildcard binding in b1074
inlining eliminated a wildcard binding in b1071
inlining eliminated a wildcard binding in b1071
inlining eliminated a wildcard binding in b1072
inlining eliminated a wildcard binding in b1069
suffixInline succeeded for call to block b1071 from block b1069
prefixInline succeeded for call to block b872 from block b1067
inlining eliminated a wildcard binding in b1080
inlining eliminated a wildcard binding in b1077
inlining eliminated a wildcard binding in b1077
inlining eliminated a wildcard binding in b1078
inlining eliminated a wildcard binding in b1075
suffixInline succeeded for call to block b1077 from block b1075
inlining eliminated a wildcard binding in b1065
inlining eliminated a wildcard binding in b1081
inlining eliminated a wildcard binding in b1081
prefixInline succeeded for call to block b715 from block b1081
elided call to goto block b1065
inlining eliminated a wildcard binding in b1064
elided call to goto block b1065
inlining eliminated a wildcard binding in b1088
inlining eliminated a wildcard binding in b1090
inlining eliminated a wildcard binding in b1086
inlining eliminated a wildcard binding in b1089
inlining eliminated a wildcard binding in b1085
inlining eliminated a wildcard binding in b1085
elided call to goto block b1088
inlining eliminated a wildcard binding in b1083
inlining eliminated a wildcard binding in b1083
suffixInline succeeded for call to block b1060 from block b1083
inlining eliminated a wildcard binding in b1059
inlining eliminated a wildcard binding in b1061
inlining eliminated a wildcard binding in b1062
inlining eliminated a wildcard binding in b1062
suffixInline succeeded for call to block b1061 from block b1059
suffixInline succeeded for call to block b1082 from block b1062
inlining eliminated a wildcard binding in b1005
inlining eliminated a wildcard binding in b1003
inlining eliminated a wildcard binding in b1003
inlining eliminated a wildcard binding in b1004
inlining eliminated a wildcard binding in b884
prefixInline succeeded for call to block b856 from block b800
inlining eliminated a wildcard binding in b1094
inlining eliminated a wildcard binding in b1092
inlining eliminated a wildcard binding in b1092
inlining eliminated a wildcard binding in b1093
inlining eliminated a wildcard binding in b1091
suffixInline succeeded for call to block b1092 from block b1091
prefixInline succeeded for call to block b856 from block b802
inlining eliminated a wildcard binding in b1098
inlining eliminated a wildcard binding in b1096
inlining eliminated a wildcard binding in b1096
inlining eliminated a wildcard binding in b1097
inlining eliminated a wildcard binding in b1095
suffixInline succeeded for call to block b1096 from block b1095
inlining eliminated a wildcard binding in b1102
inlining eliminated a wildcard binding in b1100
inlining eliminated a wildcard binding in b1100
inlining eliminated a wildcard binding in b1101
inlining eliminated a wildcard binding in b1099
suffixInline succeeded for call to block b1100 from block b1099
inlining eliminated a wildcard binding in b1106
inlining eliminated a wildcard binding in b1104
inlining eliminated a wildcard binding in b1104
inlining eliminated a wildcard binding in b1105
inlining eliminated a wildcard binding in b1103
suffixInline succeeded for call to block b1104 from block b1103
prefixInline succeeded for call to block b872 from block b806
inlining eliminated a wildcard binding in b1110
inlining eliminated a wildcard binding in b1108
inlining eliminated a wildcard binding in b1108
inlining eliminated a wildcard binding in b1109
inlining eliminated a wildcard binding in b1107
suffixInline succeeded for call to block b1108 from block b1107
inlining eliminated a wildcard binding in b1112
inlining eliminated a wildcard binding in b1113
inlining eliminated a wildcard binding in b1113
prefixInline succeeded for call to block b715 from block b1113
elided call to goto block b1112
inlining eliminated a wildcard binding in b1111
elided call to goto block b1112
inlining eliminated a wildcard binding in b807
inlining eliminated a wildcard binding in b1117
inlining eliminated a wildcard binding in b1115
inlining eliminated a wildcard binding in b1115
inlining eliminated a wildcard binding in b1116
inlining eliminated a wildcard binding in b1114
elided call to goto block b807
inlining eliminated a wildcard binding in b1118
inlining eliminated a wildcard binding in b903
inlining eliminated a wildcard binding in b1120
inlining eliminated a wildcard binding in b1120
suffixInline succeeded for call to block b1121 from block b903
suffixInline succeeded for call to block b757 from block b966
suffixInline succeeded for call to block b964 from block b1127
inlining eliminated a wildcard binding in b1132
inlining eliminated a wildcard binding in b1138
inlining eliminated a wildcard binding in b1135
inlining eliminated a wildcard binding in b1135
inlining eliminated a wildcard binding in b1136
inlining eliminated a wildcard binding in b1133
suffixInline succeeded for call to block b1135 from block b1133
prefixInline succeeded for call to block b872 from block b1131
inlining eliminated a wildcard binding in b1144
inlining eliminated a wildcard binding in b1141
inlining eliminated a wildcard binding in b1141
inlining eliminated a wildcard binding in b1142
inlining eliminated a wildcard binding in b1139
suffixInline succeeded for call to block b1141 from block b1139
inlining eliminated a wildcard binding in b1129
inlining eliminated a wildcard binding in b1145
inlining eliminated a wildcard binding in b1145
prefixInline succeeded for call to block b715 from block b1145
elided call to goto block b1129
inlining eliminated a wildcard binding in b1128
elided call to goto block b1129
inlining eliminated a wildcard binding in b1152
inlining eliminated a wildcard binding in b1154
inlining eliminated a wildcard binding in b1150
inlining eliminated a wildcard binding in b1153
inlining eliminated a wildcard binding in b1149
inlining eliminated a wildcard binding in b1149
elided call to goto block b1152
inlining eliminated a wildcard binding in b1147
inlining eliminated a wildcard binding in b1147
suffixInline succeeded for call to block b1124 from block b1147
inlining eliminated a wildcard binding in b1123
inlining eliminated a wildcard binding in b1125
inlining eliminated a wildcard binding in b1126
inlining eliminated a wildcard binding in b1126
suffixInline succeeded for call to block b1125 from block b1123
suffixInline succeeded for call to block b1146 from block b1126
prefixInline succeeded for call to block b856 from block b808
inlining eliminated a wildcard binding in b1158
inlining eliminated a wildcard binding in b1156
inlining eliminated a wildcard binding in b1156
inlining eliminated a wildcard binding in b1157
inlining eliminated a wildcard binding in b1155
suffixInline succeeded for call to block b1156 from block b1155
inlining eliminated a wildcard binding in b1160
inlining eliminated a wildcard binding in b1161
inlining eliminated a wildcard binding in b1161
prefixInline succeeded for call to block b715 from block b1161
elided call to goto block b1160
elided call to goto block b1160
inlining eliminated a wildcard binding in b810
inlining eliminated a wildcard binding in b1166
inlining eliminated a wildcard binding in b1164
inlining eliminated a wildcard binding in b1164
inlining eliminated a wildcard binding in b1165
inlining eliminated a wildcard binding in b1163
elided call to goto block b810
suffixInline succeeded for call to block b1164 from block b1163
elided call to goto block b810
inlining eliminated a wildcard binding in b1176
inlining eliminated a wildcard binding in b1177
inlining eliminated a wildcard binding in b1177
suffixInline succeeded for call to block b974 from block b1177
inlining eliminated a wildcard binding in b1175
elided call to goto block b1176
inlining eliminated a wildcard binding in b915
elided call to goto block b810
inlining eliminated a wildcard binding in b1169
inlining eliminated a wildcard binding in b1170
inlining eliminated a wildcard binding in b1170
suffixInline succeeded for call to block b978 from block b1170
inlining eliminated a wildcard binding in b1168
elided call to goto block b1169
inlining eliminated a wildcard binding in b924
inlining eliminated a wildcard binding in b1174
inlining eliminated a wildcard binding in b1172
inlining eliminated a wildcard binding in b1172
inlining eliminated a wildcard binding in b1173
inlining eliminated a wildcard binding in b1171
elided call to goto block b923
suffixInline succeeded for call to block b1172 from block b1171
elided call to goto block b924
prefixInline succeeded for call to block b915 from block b1184
suffixInline succeeded for call to block b981 from block b1184
pushed continuation into block call in b1184
inlining eliminated a wildcard binding in b1181
inlining eliminated a wildcard binding in b1179
inlining eliminated a wildcard binding in b1179
inlining eliminated a wildcard binding in b1180
inlining eliminated a wildcard binding in b1178
elided call to goto block b914
inlining eliminated a wildcard binding in b1185
suffixInline succeeded for call to block b981 from block b1185
suffixInline succeeded for call to block b988 from block b1204
suffixInline succeeded for call to block b1183 from block b814
inlining eliminated a wildcard binding in b1189
inlining eliminated a wildcard binding in b1187
inlining eliminated a wildcard binding in b1187
inlining eliminated a wildcard binding in b1188
inlining eliminated a wildcard binding in b1186
inlining eliminated a wildcard binding in b1205
suffixInline succeeded for call to block b988 from block b1205
inlining eliminated a wildcard binding in b1203
prefixInline succeeded for call to block b904 from block b1203
inlining eliminated a wildcard binding in b816
prefixInline succeeded for call to block b904 from block b816
inlining eliminated a wildcard binding in b1194
inlining eliminated a wildcard binding in b1192
inlining eliminated a wildcard binding in b1192
inlining eliminated a wildcard binding in b1193
inlining eliminated a wildcard binding in b1191
inlining eliminated a wildcard binding in b1206
suffixInline succeeded for call to block b988 from block b1206
inlining eliminated a wildcard binding in b1202
prefixInline succeeded for call to block b883 from block b1202
inlining eliminated a wildcard binding in b818
prefixInline succeeded for call to block b883 from block b818
inlining eliminated a wildcard binding in b1199
inlining eliminated a wildcard binding in b1197
inlining eliminated a wildcard binding in b1197
inlining eliminated a wildcard binding in b1198
inlining eliminated a wildcard binding in b1196
inlining eliminated a wildcard binding in b1207
suffixInline succeeded for call to block b988 from block b1207
inlining eliminated a wildcard binding in b1211
inlining eliminated a wildcard binding in b1209
inlining eliminated a wildcard binding in b1209
inlining eliminated a wildcard binding in b1210
inlining eliminated a wildcard binding in b1208
elided call to goto block b820
suffixInline succeeded for call to block b1209 from block b1208
elided call to goto block b820
Inlining pass finished, running shake.
lifting static allocator to top-level s116
eliminating duplicate args in call within b998
liveness replaced t8942 with a wildcard
applied left monad law for t6080 <- return s15
applied left monad law for t5973 <- return s15
deriving specialized block b1227 for BlockCall to block b179
applied left monad law for t6034 <- return s15
deriving specialized block b1228 for BlockCall to block b171
liveness replaced t8953 with a wildcard
deriving specialized block b1229 for BlockCall to block b1017
deriving specialized block b1230 for BlockCall to block b1011
applied left monad law for t6207 <- return maxBound2
applied left monad law for t8294 <- return s15
applied left monad law for t8292 <- return putchar
applied left monad law for t6205 <- return nz10
applied left monad law for t8672 <- return s15
applied left monad law for t8670 <- return putchar
applied left monad law for t8282 <- return maxBound2
applied left monad law for t8281 <- return nz10
applied left monad law for t8675 <- return s15
applied left monad law for t8673 <- return putchar
applied left monad law for t6212 <- return maxBound2
applied left monad law for t6214 <- return nz10
applied left monad law for t6083 <- return s15
applied left monad law for t6081 <- return putchar
applied left monad law for t5976 <- return putchar
applied left monad law for t5974 <- return s15
applied left monad law for t5984 <- return putchar
applied left monad law for t5982 <- return s15
rewriting putchar @ [t5983]
rewriting t5987 @ []
applied left monad law for t5976 <- return putchar
applied left monad law for t5974 <- return s15
deriving specialized block b1235 for BlockCall to block b543
deriving specialized block b1236 for BlockCall to block b179
liveness replaced t5987 with a wildcard
deriving specialized block b1235 for BlockCall to block b543
deriving specialized block b1234 for BlockCall to block b1227
applied left monad law for t6035 <- return putchar
rewriting putchar @ [t6046]
rewriting t6047 @ []
applied left monad law for t6053 <- return putchar
applied left monad law for t6035 <- return putchar
rewriting putchar @ [t6046]
rewriting t6047 @ []
deriving specialized block b1238 for BlockCall to block b548
liveness replaced t6047 with a wildcard
deriving specialized block b1239 for BlockCall to block b171
deriving specialized block b1238 for BlockCall to block b548
liveness replaced t6047 with a wildcard
deriving specialized block b1237 for BlockCall to block b1228
deriving specialized block b1233 for BlockCall to block b1010
applied left monad law for t6240 <- return nz10
applied left monad law for t8681 <- return s15
applied left monad law for t8679 <- return putchar
applied left monad law for t6238 <- return maxBound2
deriving specialized block b1233 for BlockCall to block b1010
applied left monad law for t6214 <- return nz10
applied left monad law for t8687 <- return s15
applied left monad law for t8685 <- return putchar
applied left monad law for t6212 <- return maxBound2
applied left monad law for t8690 <- return s15
applied left monad law for t8688 <- return putchar
applied left monad law for t8282 <- return maxBound2
applied left monad law for t8281 <- return nz10
applied left monad law for t8693 <- return s15
applied left monad law for t8691 <- return putchar
applied left monad law for t6212 <- return maxBound2
applied left monad law for t6214 <- return nz10
applied left monad law for t6063 <- return putchar
applied left monad law for t6061 <- return s15
deriving specialized block b1236 for BlockCall to block b179
deriving specialized block b1239 for BlockCall to block b171
deriving specialized block b1244 for BlockCall to block b220
applied left monad law for t6240 <- return nz10
applied left monad law for t8699 <- return s15
applied left monad law for t8697 <- return putchar
applied left monad law for t6238 <- return maxBound2
deriving specialized block b1244 for BlockCall to block b220
deriving specialized block b1241 for BlockCall to block b1013
deriving specialized block b1245 for BlockCall to block b1229
deriving specialized block b1243 for BlockCall to block b1015
deriving specialized block b1242 for BlockCall to block b1014
applied left monad law for t8705 <- return s15
applied left monad law for t8703 <- return putchar
applied left monad law for t8288 <- return maxBound2
applied left monad law for t8287 <- return nz10
deriving specialized block b1243 for BlockCall to block b1015
deriving specialized block b1246 for BlockCall to block b1019
deriving specialized block b1241 for BlockCall to block b1013
deriving specialized block b1240 for BlockCall to block b1230
deriving specialized block b1232 for BlockCall to block b1008
deriving specialized block b1231 for BlockCall to block b1007
applied left monad law for t8708 <- return s15
applied left monad law for t8706 <- return putchar
applied left monad law for t8288 <- return maxBound2
applied left monad law for t8287 <- return nz10
deriving specialized block b1232 for BlockCall to block b1008
deriving specialized block b1247 for BlockCall to block b1020
applied left monad law for t6207 <- return maxBound2
applied left monad law for t8294 <- return s15
applied left monad law for t8292 <- return putchar
applied left monad law for t6205 <- return nz16
applied left monad law for t8672 <- return s15
applied left monad law for t8670 <- return putchar
applied left monad law for t8282 <- return maxBound2
applied left monad law for t8281 <- return nz16
applied left monad law for t8675 <- return s15
applied left monad law for t8673 <- return putchar
applied left monad law for t6212 <- return maxBound2
applied left monad law for t6214 <- return nz16
deriving specialized block b1233 for BlockCall to block b1010
applied left monad law for t6240 <- return nz16
applied left monad law for t8681 <- return s15
applied left monad law for t8679 <- return putchar
applied left monad law for t6238 <- return maxBound2
deriving specialized block b1233 for BlockCall to block b1010
applied left monad law for t6214 <- return nz16
applied left monad law for t8687 <- return s15
applied left monad law for t8685 <- return putchar
applied left monad law for t6212 <- return maxBound2
applied left monad law for t8690 <- return s15
applied left monad law for t8688 <- return putchar
applied left monad law for t8282 <- return maxBound2
applied left monad law for t8281 <- return nz16
applied left monad law for t8693 <- return s15
applied left monad law for t8691 <- return putchar
applied left monad law for t6212 <- return maxBound2
applied left monad law for t6214 <- return nz16
deriving specialized block b1244 for BlockCall to block b220
applied left monad law for t6240 <- return nz16
applied left monad law for t8699 <- return s15
applied left monad law for t8697 <- return putchar
applied left monad law for t6238 <- return maxBound2
deriving specialized block b1244 for BlockCall to block b220
deriving specialized block b1251 for BlockCall to block b1013
deriving specialized block b1254 for BlockCall to block b1229
deriving specialized block b1253 for BlockCall to block b1015
deriving specialized block b1252 for BlockCall to block b1014
applied left monad law for t8705 <- return s15
applied left monad law for t8703 <- return putchar
applied left monad law for t8288 <- return maxBound2
applied left monad law for t8287 <- return nz16
deriving specialized block b1253 for BlockCall to block b1015
deriving specialized block b1255 for BlockCall to block b1019
deriving specialized block b1251 for BlockCall to block b1013
deriving specialized block b1250 for BlockCall to block b1230
deriving specialized block b1249 for BlockCall to block b1008
deriving specialized block b1248 for BlockCall to block b1007
applied left monad law for t8708 <- return s15
applied left monad law for t8706 <- return putchar
applied left monad law for t8288 <- return maxBound2
applied left monad law for t8287 <- return nz16
deriving specialized block b1249 for BlockCall to block b1008
deriving specialized block b1256 for BlockCall to block b1020
rewriting t7903 @ []
liveness replaced t7903 with a wildcard
liveness replaced t8964 with a wildcard
rewriting t7900 @ []
liveness replaced t7900 with a wildcard
liveness replaced t8970 with a wildcard
rewriting t7897 @ []
liveness replaced t7897 with a wildcard
liveness replaced t8976 with a wildcard
liveness replaced t8988 with a wildcard
liveness replaced t9012 with a wildcard
deriving specialized block b1257 for BlockCall to block b1069
liveness replaced t9012 with a wildcard
rewriting t6942 @ []
deriving specialized block b1257 for BlockCall to block b1069
liveness replaced t6942 with a wildcard
liveness replaced t9018 with a wildcard
deriving specialized block b1258 for BlockCall to block b1075
liveness replaced t9018 with a wildcard
deriving specialized block b1258 for BlockCall to block b1075
deriving specialized block b1259 for BlockCall to block b1081
deriving specialized block b1259 for BlockCall to block b1081
deriving specialized block b1259 for BlockCall to block b1081
deriving specialized block b1260 for BlockCall to block b1089
liveness replaced t8994 with a wildcard
rewriting t6942 @ []
liveness replaced t6942 with a wildcard
liveness replaced t9000 with a wildcard
deriving specialized block b1261 for BlockCall to block b1049
deriving specialized block b1261 for BlockCall to block b1049
deriving specialized block b1261 for BlockCall to block b1049
eliminating duplicate args in call within b1056
rewriting t8571 @ [t8572]
liveness replaced t8571 with a wildcard
deriving specialized block b1263 for BlockCall to block b1054
eliminating duplicate args in call within b1054
liveness replaced t9002 with a wildcard
applied left monad law for t9020 <- return nextMimgHeader
applied left monad law for t9021 <- return putHeader
applied left monad law for t9022 <- return str11
deriving specialized block b1082 for BlockCall to block b955
deriving specialized block b1265 for BlockCall to block b1083
deriving specialized block b1266 for BlockCall to block b1059
rewriting t7919 @ []
liveness replaced t7919 with a wildcard
liveness replaced t9030 with a wildcard
rewriting t7916 @ []
liveness replaced t7916 with a wildcard
liveness replaced t9036 with a wildcard
liveness replaced t9042 with a wildcard
liveness replaced t9066 with a wildcard
deriving specialized block b1267 for BlockCall to block b1133
liveness replaced t9066 with a wildcard
rewriting t7287 @ []
deriving specialized block b1267 for BlockCall to block b1133
liveness replaced t7287 with a wildcard
liveness replaced t9072 with a wildcard
deriving specialized block b1268 for BlockCall to block b1139
liveness replaced t9072 with a wildcard
deriving specialized block b1268 for BlockCall to block b1139
deriving specialized block b1269 for BlockCall to block b1145
deriving specialized block b1269 for BlockCall to block b1145
deriving specialized block b1269 for BlockCall to block b1145
deriving specialized block b1270 for BlockCall to block b1153
liveness replaced t9048 with a wildcard
rewriting t7287 @ []
liveness replaced t7287 with a wildcard
liveness replaced t9054 with a wildcard
deriving specialized block b1271 for BlockCall to block b1113
deriving specialized block b1271 for BlockCall to block b1113
deriving specialized block b1271 for BlockCall to block b1113
eliminating duplicate args in call within b1120
rewriting t8593 @ [t8594]
liveness replaced t8593 with a wildcard
deriving specialized block b1273 for BlockCall to block b1118
eliminating duplicate args in call within b1118
liveness replaced t9056 with a wildcard
applied left monad law for t9074 <- return nextMimgMMap
applied left monad law for t9075 <- return putMMap
applied left monad law for t9076 <- return str13
deriving specialized block b1146 for BlockCall to block b966
deriving specialized block b1275 for BlockCall to block b1147
deriving specialized block b1276 for BlockCall to block b1123
rewriting t7532 @ []
liveness replaced t7532 with a wildcard
liveness replaced t9084 with a wildcard
deriving specialized block b1277 for BlockCall to block b1161
deriving specialized block b1277 for BlockCall to block b1161
deriving specialized block b1277 for BlockCall to block b1161
liveness replaced t8903 with a wildcard
liveness replaced t9090 with a wildcard
deriving specialized block b1278 for BlockCall to block b1170
liveness replaced t9100 with a wildcard
rewriting t7532 @ []
deriving specialized block b1167 for BlockCall to block b976
liveness replaced t7532 with a wildcard
liveness replaced t9084 with a wildcard
deriving specialized block b1279 for BlockCall to block b1218
deriving specialized block b1280 for BlockCall to block b1221
deriving specialized block b1280 for BlockCall to block b1221
deriving specialized block b1280 for BlockCall to block b1221
liveness replaced t8903 with a wildcard
liveness replaced t9090 with a wildcard
deriving specialized block b1281 for BlockCall to block b1222
deriving specialized block b1281 for BlockCall to block b1222
deriving specialized block b1282 for BlockCall to block b1225
applied left monad law for t9107 <- return s116
applied left monad law for t9108 <- return s116
applied left monad law for t9109 <- return s116
applied left monad law for t9110 <- return s116
applied left monad law for t9111 <- return s116
applied left monad law for t9112 <- return s116
applied left monad law for t8184 <- return s116
rewriting s116 @ [Unit]
deriving specialized block b1288 for BlockCall to block b786
applied left monad law for t8611 <- return s116
rewriting s116 @ [t8612]
liveness replaced t8612 with a wildcard
deriving specialized block b1289 for BlockCall to block b1167
deriving specialized block b1287 for BlockCall to block b1217
applied left monad law for t9113 <- return s116
applied left monad law for t9114 <- return s116
rewriting s116 @ [t9115]
liveness replaced t9115 with a wildcard
deriving specialized block b1291 for BlockCall to block b1219
applied left monad law for t9116 <- return s116
rewriting s116 @ [t9117]
liveness replaced t9117 with a wildcard
deriving specialized block b1292 for BlockCall to block b1220
deriving specialized block b1290 for BlockCall to block b1279
deriving specialized block b1286 for BlockCall to block b1216
applied left monad law for t9118 <- return s116
deriving specialized block b1286 for BlockCall to block b1216
deriving specialized block b1293 for BlockCall to block b1280
deriving specialized block b1293 for BlockCall to block b1280
deriving specialized block b1285 for BlockCall to block b1215
applied left monad law for t9119 <- return s116
applied left monad law for t9120 <- return s116
rewriting s116 @ [t9121]
liveness replaced t9121 with a wildcard
deriving specialized block b1295 for BlockCall to block b1223
applied left monad law for t9122 <- return s116
rewriting s116 @ [t9123]
liveness replaced t9123 with a wildcard
deriving specialized block b1296 for BlockCall to block b1224
deriving specialized block b1294 for BlockCall to block b1281
deriving specialized block b1284 for BlockCall to block b1214
applied left monad law for t9124 <- return s116
deriving specialized block b1285 for BlockCall to block b1215
deriving specialized block b1294 for BlockCall to block b1281
deriving specialized block b1297 for BlockCall to block b1282
deriving specialized block b1283 for BlockCall to block b1213
deriving specialized block b1298 for BlockCall to block b1177
deriving specialized block b1299 for BlockCall to block b1185
deriving specialized block b1299 for BlockCall to block b1185
applied left monad law for _ <- return Unit
deriving specialized block b1300 for BlockCall to block b1205
liveness replaced t9136 with a wildcard
applied left monad law for _ <- return Unit
liveness replaced t9137 with a wildcard
applied left monad law for _ <- return Unit
deriving specialized block b1301 for BlockCall to block b1206
liveness replaced t9140 with a wildcard
applied left monad law for _ <- return Unit
liveness replaced t9141 with a wildcard
deriving specialized block b1302 for BlockCall to block b1207
liveness replaced t9148 with a wildcard
Flow pass finished, running shake.
Steps performed = 650
-------------------------
inlining eliminated a wildcard binding in b1235
inlining eliminated a wildcard binding in b1239
inlining eliminated a wildcard binding in b1237
suffixInline succeeded for call to block b1237 from block b1233
liveness replaced t9206 with a wildcard
pushed continuation into block call in b1233
inlining eliminated a wildcard binding in b784
inlining eliminated a wildcard binding in b788
inlining eliminated a wildcard binding in b790
pushed continuation into block call in b1068
inlining eliminated a wildcard binding in b1067
suffixInline succeeded for call to block b1082 from block b1265
inlining eliminated a wildcard binding in b800
inlining eliminated a wildcard binding in b802
pushed continuation into block call in b1132
inlining eliminated a wildcard binding in b1131
suffixInline succeeded for call to block b1146 from block b1275
inlining eliminated a wildcard binding in b808
inlining eliminated a wildcard binding in b1162
elided call to goto block b924
inlining eliminated a wildcard binding in b1289
suffixInline succeeded for call to block b1212 from block b1289
inlining eliminated a wildcard binding in b1287
elided call to goto block b1288
suffixInline succeeded for call to block b1212 from block b1292
suffixInline succeeded for call to block b1212 from block b1291
inlining eliminated a wildcard binding in b1285
suffixInline succeeded for call to block b1212 from block b1296
suffixInline succeeded for call to block b1212 from block b1295
elided call to goto block b915
elided call to goto block b1184
pushed continuation into block call in b1204
elided call to goto block b1184
Inlining pass finished, running shake.
lifting static allocator to top-level s117
lifting static allocator to top-level s118
eliminating duplicate args in call within b836
deriving specialized block b1355 for BlockCall to block b1226
deriving specialized block b1356 for BlockCall to block b1238
deriving specialized block b1356 for BlockCall to block b1238
applied left monad law for t9215 <- return Unit
deriving specialized block b1357 for BlockCall to block b1235
deriving specialized block b1358 for BlockCall to block b1306
applied left monad law for t9212 <- return s117
applied left monad law for t9213 <- return s117
applied left monad law for t9214 <- return s117
rewriting s117 @ [Unit]
deriving specialized block b1360 for BlockCall to block b1305
applied left monad law for t9216 <- return s117
rewriting s117 @ [t9217]
liveness replaced t9217 with a wildcard
deriving specialized block b1361 for BlockCall to block b1358
deriving specialized block b1359 for BlockCall to block b1304
deriving specialized block b1362 for BlockCall to block b1245
deriving specialized block b1363 for BlockCall to block b1240
deriving specialized block b1364 for BlockCall to block b1254
deriving specialized block b1365 for BlockCall to block b1250
deriving specialized block b1366 for BlockCall to block b1312
deriving specialized block b1367 for BlockCall to block b1315
deriving specialized block b1368 for BlockCall to block b1318
rewriting t9222 @ [t9223]
liveness replaced t9223 with a wildcard
liveness replaced t9222 with a wildcard
deriving specialized block b1372 for BlockCall to block b1311
rewriting t9225 @ [t9226]
liveness replaced t9226 with a wildcard
liveness replaced t9225 with a wildcard
deriving specialized block b1374 for BlockCall to block b1313
rewriting t9227 @ [t9228]
liveness replaced t9228 with a wildcard
liveness replaced t9227 with a wildcard
deriving specialized block b1375 for BlockCall to block b1314
liveness replaced t9224 with a wildcard
deriving specialized block b1373 for BlockCall to block b1366
liveness replaced t9221 with a wildcard
deriving specialized block b1371 for BlockCall to block b1310
rewriting t9230 @ [t9231]
liveness replaced t9231 with a wildcard
liveness replaced t9230 with a wildcard
deriving specialized block b1377 for BlockCall to block b1316
rewriting t9232 @ [t9233]
liveness replaced t9233 with a wildcard
liveness replaced t9232 with a wildcard
deriving specialized block b1378 for BlockCall to block b1317
liveness replaced t9229 with a wildcard
deriving specialized block b1376 for BlockCall to block b1367
liveness replaced t9220 with a wildcard
deriving specialized block b1370 for BlockCall to block b1309
rewriting t9235 @ [t9236]
liveness replaced t9236 with a wildcard
liveness replaced t9235 with a wildcard
deriving specialized block b1380 for BlockCall to block b1319
rewriting t9237 @ [t9238]
liveness replaced t9238 with a wildcard
liveness replaced t9237 with a wildcard
deriving specialized block b1381 for BlockCall to block b1320
liveness replaced t9234 with a wildcard
deriving specialized block b1379 for BlockCall to block b1368
liveness replaced t9219 with a wildcard
deriving specialized block b1369 for BlockCall to block b1308
liveness replaced t9218 with a wildcard
deriving specialized block b1167 for BlockCall to block b976
deriving specialized block b1382 for BlockCall to block b1325
deriving specialized block b1383 for BlockCall to block b1328
rewriting t8184 @ [Unit]
liveness replaced t8184 with a wildcard
deriving specialized block b1387 for BlockCall to block b786
rewriting t8611 @ [t8612]
liveness replaced t8612 with a wildcard
liveness replaced t8611 with a wildcard
deriving specialized block b1388 for BlockCall to block b1167
liveness replaced t9243 with a wildcard
deriving specialized block b1386 for BlockCall to block b1324
rewriting t9245 @ [t9246]
liveness replaced t9246 with a wildcard
liveness replaced t9245 with a wildcard
deriving specialized block b1390 for BlockCall to block b1326
rewriting t9247 @ [t9248]
liveness replaced t9248 with a wildcard
liveness replaced t9247 with a wildcard
deriving specialized block b1391 for BlockCall to block b1327
liveness replaced t9244 with a wildcard
deriving specialized block b1389 for BlockCall to block b1382
liveness replaced t9242 with a wildcard
deriving specialized block b1385 for BlockCall to block b1323
rewriting t9250 @ [t9251]
liveness replaced t9251 with a wildcard
liveness replaced t9250 with a wildcard
deriving specialized block b1393 for BlockCall to block b1329
rewriting t9252 @ [t9253]
liveness replaced t9253 with a wildcard
liveness replaced t9252 with a wildcard
deriving specialized block b1394 for BlockCall to block b1330
liveness replaced t9249 with a wildcard
deriving specialized block b1392 for BlockCall to block b1383
liveness replaced t9241 with a wildcard
deriving specialized block b1384 for BlockCall to block b1322
liveness replaced t9240 with a wildcard
deriving specialized block b1281 for BlockCall to block b1222
deriving specialized block b1281 for BlockCall to block b1222
deriving specialized block b1395 for BlockCall to block b1341
deriving specialized block b1396 for BlockCall to block b1342
deriving specialized block b1396 for BlockCall to block b1342
deriving specialized block b1397 for BlockCall to block b1345
deriving specialized block b1396 for BlockCall to block b1342
deriving specialized block b1396 for BlockCall to block b1342
deriving specialized block b1398 for BlockCall to block b1346
deriving specialized block b1399 for BlockCall to block b1349
deriving specialized block b1399 for BlockCall to block b1349
deriving specialized block b1399 for BlockCall to block b1349
deriving specialized block b1396 for BlockCall to block b1342
deriving specialized block b1396 for BlockCall to block b1342
deriving specialized block b1400 for BlockCall to block b1350
deriving specialized block b1400 for BlockCall to block b1350
deriving specialized block b1401 for BlockCall to block b1353
deriving specialized block b1396 for BlockCall to block b1342
deriving specialized block b1402 for BlockCall to block b1354
applied left monad law for t9280 <- return s118
applied left monad law for t9281 <- return s118
applied left monad law for t9282 <- return s118
applied left monad law for t9283 <- return s118
applied left monad law for t9284 <- return s118
applied left monad law for t9285 <- return s118
applied left monad law for t9286 <- return s118
applied left monad law for t9287 <- return s118
applied left monad law for t9288 <- return s118
applied left monad law for t9289 <- return s118
applied left monad law for t9110 <- return s118
applied left monad law for t9111 <- return s118
applied left monad law for t9112 <- return s118
applied left monad law for t8184 <- return s118
rewriting s118 @ [Unit]
deriving specialized block b1415 for BlockCall to block b786
applied left monad law for t8611 <- return s118
rewriting s118 @ [t8612]
liveness replaced t8612 with a wildcard
deriving specialized block b1416 for BlockCall to block b1167
deriving specialized block b1414 for BlockCall to block b1217
applied left monad law for t9113 <- return s118
applied left monad law for t9114 <- return s118
rewriting s118 @ [t9115]
liveness replaced t9115 with a wildcard
deriving specialized block b1418 for BlockCall to block b1219
applied left monad law for t9116 <- return s118
rewriting s118 @ [t9117]
liveness replaced t9117 with a wildcard
deriving specialized block b1419 for BlockCall to block b1220
deriving specialized block b1417 for BlockCall to block b1279
deriving specialized block b1413 for BlockCall to block b1216
applied left monad law for t9118 <- return s118
deriving specialized block b1413 for BlockCall to block b1216
deriving specialized block b1420 for BlockCall to block b1280
deriving specialized block b1420 for BlockCall to block b1280
deriving specialized block b1412 for BlockCall to block b1215
applied left monad law for t9119 <- return s118
applied left monad law for t9120 <- return s118
rewriting s118 @ [t9121]
liveness replaced t9121 with a wildcard
deriving specialized block b1422 for BlockCall to block b1223
applied left monad law for t9122 <- return s118
rewriting s118 @ [t9123]
liveness replaced t9123 with a wildcard
deriving specialized block b1423 for BlockCall to block b1224
deriving specialized block b1421 for BlockCall to block b1281
deriving specialized block b1411 for BlockCall to block b1340
applied left monad law for t9290 <- return s118
deriving specialized block b1412 for BlockCall to block b1215
deriving specialized block b1421 for BlockCall to block b1281
deriving specialized block b1424 for BlockCall to block b1395
deriving specialized block b1410 for BlockCall to block b1339
applied left monad law for t9291 <- return s118
applied left monad law for t9292 <- return s118
rewriting s118 @ [t9293]
liveness replaced t9293 with a wildcard
deriving specialized block b1426 for BlockCall to block b1343
applied left monad law for t9294 <- return s118
rewriting s118 @ [t9295]
liveness replaced t9295 with a wildcard
deriving specialized block b1427 for BlockCall to block b1344
deriving specialized block b1425 for BlockCall to block b1396
deriving specialized block b1409 for BlockCall to block b1338
applied left monad law for t9296 <- return s118
deriving specialized block b1410 for BlockCall to block b1339
deriving specialized block b1425 for BlockCall to block b1396
deriving specialized block b1428 for BlockCall to block b1397
deriving specialized block b1408 for BlockCall to block b1337
applied left monad law for t9297 <- return s118
applied left monad law for t9298 <- return s118
deriving specialized block b1410 for BlockCall to block b1339
deriving specialized block b1425 for BlockCall to block b1396
deriving specialized block b1430 for BlockCall to block b1347
applied left monad law for t9299 <- return s118
deriving specialized block b1410 for BlockCall to block b1339
deriving specialized block b1425 for BlockCall to block b1396
deriving specialized block b1431 for BlockCall to block b1348
deriving specialized block b1429 for BlockCall to block b1398
deriving specialized block b1407 for BlockCall to block b1336
applied left monad law for t9300 <- return s118
deriving specialized block b1407 for BlockCall to block b1336
deriving specialized block b1432 for BlockCall to block b1399
deriving specialized block b1432 for BlockCall to block b1399
deriving specialized block b1406 for BlockCall to block b1335
applied left monad law for t9301 <- return s118
applied left monad law for t9302 <- return s118
deriving specialized block b1410 for BlockCall to block b1339
deriving specialized block b1425 for BlockCall to block b1396
deriving specialized block b1434 for BlockCall to block b1351
applied left monad law for t9303 <- return s118
deriving specialized block b1410 for BlockCall to block b1339
deriving specialized block b1425 for BlockCall to block b1396
deriving specialized block b1435 for BlockCall to block b1352
deriving specialized block b1433 for BlockCall to block b1400
deriving specialized block b1405 for BlockCall to block b1334
applied left monad law for t9304 <- return s118
deriving specialized block b1406 for BlockCall to block b1335
deriving specialized block b1433 for BlockCall to block b1400
deriving specialized block b1436 for BlockCall to block b1401
deriving specialized block b1404 for BlockCall to block b1333
applied left monad law for t9305 <- return s118
deriving specialized block b1410 for BlockCall to block b1339
deriving specialized block b1425 for BlockCall to block b1396
deriving specialized block b1437 for BlockCall to block b1402
deriving specialized block b1403 for BlockCall to block b1332
deriving specialized block b1438 for BlockCall to block b1289
deriving specialized block b1439 for BlockCall to block b1290
deriving specialized block b1440 for BlockCall to block b1293
deriving specialized block b1440 for BlockCall to block b1293
deriving specialized block b1440 for BlockCall to block b1293
deriving specialized block b1441 for BlockCall to block b1294
deriving specialized block b1441 for BlockCall to block b1294
deriving specialized block b1442 for BlockCall to block b1297
Flow pass finished, running shake.
Steps performed = 270
-------------------------
suffixInline succeeded for call to block b836 from block b998
suffixInline succeeded for call to block b999 from block b1355
elided call to goto block b1360
elided call to goto block b1233
elided call to goto block b1233
elided call to goto block b1233
elided call to goto block b1233
inlining eliminated a wildcard binding in b1372
suffixInline succeeded for call to block b1307 from block b1372
inlining eliminated a wildcard binding in b1375
suffixInline succeeded for call to block b1307 from block b1375
inlining eliminated a wildcard binding in b1374
suffixInline succeeded for call to block b1307 from block b1374
inlining eliminated a wildcard binding in b1373
inlining eliminated a wildcard binding in b1371
inlining eliminated a wildcard binding in b1378
suffixInline succeeded for call to block b1307 from block b1378
inlining eliminated a wildcard binding in b1377
suffixInline succeeded for call to block b1307 from block b1377
inlining eliminated a wildcard binding in b1376
inlining eliminated a wildcard binding in b1370
inlining eliminated a wildcard binding in b1381
suffixInline succeeded for call to block b1307 from block b1381
inlining eliminated a wildcard binding in b1380
suffixInline succeeded for call to block b1307 from block b1380
inlining eliminated a wildcard binding in b1379
inlining eliminated a wildcard binding in b1369
inlining eliminated a wildcard binding in b1068
elided call to goto block b1068
elided call to goto block b1068
inlining eliminated a wildcard binding in b1387
inlining eliminated a wildcard binding in b1388
inlining eliminated a wildcard binding in b1388
suffixInline succeeded for call to block b1321 from block b1388
inlining eliminated a wildcard binding in b1386
elided call to goto block b1387
inlining eliminated a wildcard binding in b1391
suffixInline succeeded for call to block b1321 from block b1391
inlining eliminated a wildcard binding in b1390
suffixInline succeeded for call to block b1321 from block b1390
inlining eliminated a wildcard binding in b1389
inlining eliminated a wildcard binding in b1385
inlining eliminated a wildcard binding in b1394
suffixInline succeeded for call to block b1321 from block b1394
inlining eliminated a wildcard binding in b1393
suffixInline succeeded for call to block b1321 from block b1393
inlining eliminated a wildcard binding in b1392
inlining eliminated a wildcard binding in b1384
inlining eliminated a wildcard binding in b1132
elided call to goto block b1132
elided call to goto block b1132
inlining eliminated a wildcard binding in b1416
suffixInline succeeded for call to block b1331 from block b1416
inlining eliminated a wildcard binding in b1414
elided call to goto block b1415
suffixInline succeeded for call to block b1331 from block b1419
suffixInline succeeded for call to block b1331 from block b1418
inlining eliminated a wildcard binding in b1412
suffixInline succeeded for call to block b1331 from block b1423
suffixInline succeeded for call to block b1331 from block b1422
suffixInline succeeded for call to block b1331 from block b1427
suffixInline succeeded for call to block b1331 from block b1426
suffixInline succeeded for call to block b1403 from block b1204
Inlining pass finished, running shake.
liveness replaced t9330 with a wildcard
eliminating duplicate args in call within b998
liveness replaced t9336 with a wildcard
deriving specialized block b1443 for BlockCall to block b1361
deriving specialized block b1444 for BlockCall to block b1373
deriving specialized block b1445 for BlockCall to block b1376
deriving specialized block b1446 for BlockCall to block b1379
deriving specialized block b1447 for BlockCall to block b1388
deriving specialized block b1448 for BlockCall to block b1389
deriving specialized block b1449 for BlockCall to block b1392
deriving specialized block b1450 for BlockCall to block b1416
deriving specialized block b1451 for BlockCall to block b1417
deriving specialized block b1452 for BlockCall to block b1420
deriving specialized block b1452 for BlockCall to block b1420
deriving specialized block b1452 for BlockCall to block b1420
deriving specialized block b1453 for BlockCall to block b1421
deriving specialized block b1453 for BlockCall to block b1421
deriving specialized block b1454 for BlockCall to block b1424
deriving specialized block b1455 for BlockCall to block b1425
deriving specialized block b1455 for BlockCall to block b1425
deriving specialized block b1456 for BlockCall to block b1428
deriving specialized block b1455 for BlockCall to block b1425
deriving specialized block b1455 for BlockCall to block b1425
deriving specialized block b1457 for BlockCall to block b1429
deriving specialized block b1458 for BlockCall to block b1432
deriving specialized block b1458 for BlockCall to block b1432
deriving specialized block b1458 for BlockCall to block b1432
deriving specialized block b1455 for BlockCall to block b1425
deriving specialized block b1455 for BlockCall to block b1425
deriving specialized block b1459 for BlockCall to block b1433
deriving specialized block b1459 for BlockCall to block b1433
deriving specialized block b1460 for BlockCall to block b1436
deriving specialized block b1455 for BlockCall to block b1425
deriving specialized block b1461 for BlockCall to block b1437
Flow pass finished, running shake.
Steps performed = 97
-------------------------
suffixInline succeeded for call to block b999 from block b1226
Inlining pass finished, running shake.
eliminating duplicate args in call within b998
liveness replaced t9382 with a wildcard
deriving specialized block b1355 for BlockCall to block b1226
Flow pass finished, running shake.
Steps performed = 4
-------------------------
Inlining pass finished, running shake.
Flow pass finished, running shake.
Steps performed = 0
-------------------------
Replacing k230 with k44
Replacing b1000 with b1355
Replacing b170 with b295
Replacing b178 with b295
Replacing b840 with b845
Replacing b804 with b792
Replacing b202 with b295
Replacing b974 with b978
Replacing b1298 with b1278
Cleanup steps performed = 9
-------------------------
Identifying topdefn refToWord_imp with ptrToWordImp
Cleanup steps performed = 1
-------------------------
Cleanup steps performed = 0
TOTAL steps performed = 5427
Running type checker ...
generics for Unit: [] in type [Unit]
TopLevel group inferred Unit :: [Unit]
Generalizing definition for: Unit with generics []
Inferred Unit :: Unit
generics for ix0: [] in type [Ix 25]
TopLevel group inferred ix0 :: [Ix 25]
Generalizing definition for: ix0 with generics []
Inferred ix0 :: Ix 25
generics for s6: [] in type [Ix 80]
TopLevel group inferred s6 :: [Ix 80]
Generalizing definition for: s6 with generics []
Inferred s6 :: Ix 80
Inferred b997 :: [] >>= [Init Window]
generics for s2: [] in type [Init Window]
TopLevel group inferred s2 :: [Init Window]
Generalizing definition for: s2 with generics []
Inferred s2 :: Init Window
Inferred b314 :: [] >>= [Char]
generics for blank: [] in type [Char]
TopLevel group inferred blank :: [Char]
Generalizing definition for: blank with generics []
Inferred blank :: Char
generics for s13: [] in type [Maybe0]
TopLevel group inferred s13 :: [Maybe0]
Generalizing definition for: s13 with generics []
Inferred s13 :: Maybe0
Inferred k51 :: {} [Ix 80] ->> [Maybe0]
generics for s14: [] in type [[Ix 80] ->> [Maybe0]]
TopLevel group inferred s14 :: [[Ix 80] ->> [Maybe0]]
Generalizing definition for: s14 with generics []
Inferred s14 :: [Ix 80] ->> [Maybe0]
generics for s12: [] in type [Ix 80]
TopLevel group inferred s12 :: [Ix 80]
Generalizing definition for: s12 with generics []
Inferred s12 :: Ix 80
Inferred b295 :: [] >>= [Unit]
Inferred b825 :: [Maybe0, Ix 80, Bit 8, Ix 25] >>= [Unit]
Inferred b690 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit]
generics for Nothing: [] in type [Maybe1]
TopLevel group inferred Nothing :: [Maybe1]
Generalizing definition for: Nothing with generics []
Inferred Nothing :: Maybe1
Inferred k5 :: {} [Ix 25] ->> [Maybe1]
generics for Just: [] in type [[Ix 25] ->> [Maybe1]]
TopLevel group inferred Just :: [[Ix 25] ->> [Maybe1]]
Generalizing definition for: Just with generics []
Inferred Just :: [Ix 25] ->> [Maybe1]
generics for ix1: [] in type [Ix 25]
TopLevel group inferred ix1 :: [Ix 25]
Generalizing definition for: ix1 with generics []
Inferred ix1 :: Ix 25
Inferred b826 :: [Maybe1, Ix 25, Bit 8, Ix 80, Ix 80] >>= [Unit]
Inferred b692 :: [Ix 25, Ix 25, Bit 8, Ix 80, Ix 80] >>= [Unit]
Inferred loadCharImp1 :: {Addr} [] ->> [Bit 8]
Inferred k45 :: {} [Addr] ->> [[] ->> [Bit 8]]
generics for loadCharImp: [] in type [[Addr] ->> [[] ->> [Bit 8]]]
TopLevel group inferred loadCharImp :: [[Addr] ->> [[] ->> [Bit 8]]]
Generalizing definition for: loadCharImp with generics []
Inferred loadCharImp :: [Addr] ->> [[] ->> [Bit 8]]
Inferred k44 :: {} [Bit 32] ->> [Bit 32]
generics for ptrToWordImp: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred ptrToWordImp :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: ptrToWordImp with generics []
Inferred ptrToWordImp :: [Bit 32] ->> [Bit 32]
Inferred b123 :: [Bit 32, Ref String] >>= [Maybe12]
generics for s39: [] in type [Maybe12]
TopLevel group inferred s39 :: [Maybe12]
Generalizing definition for: s39 with generics []
Inferred s39 :: Maybe12
Inferred b124 :: [] >>= [Maybe12]
Inferred b125 :: [Ref String] >>= [Maybe12]
Inferred k75 :: {Ref String} [] ->> [Maybe12]
Inferred k76 :: {} [Ref String] ->> [[] ->> [Maybe12]]
generics for nextCharImp: [] in type [[Ref String] ->> [[] ->> [Maybe12]]]
TopLevel group inferred nextCharImp :: [[Ref String] ->> [[] ->> [Maybe12]]]
Generalizing definition for: nextCharImp with generics []
Inferred nextCharImp :: [Ref String] ->> [[] ->> [Maybe12]]
generics for refToWord_imp: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred refToWord_imp :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: refToWord_imp with generics []
Inferred refToWord_imp :: [Bit 32] ->> [Bit 32]
Inferred b485 :: [Ref (Stored (Bit 32))] >>= [WordCursor]
Inferred k228 :: {Ref (Stored (Bit 32))} [] ->> [WordCursor]
Inferred k229 :: {} [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]
generics for wordCursor: [] in type [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
TopLevel group inferred wordCursor :: [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
Generalizing definition for: wordCursor with generics []
Inferred wordCursor :: [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]
Inferred b491 :: [WordCursor, Bit 32, Bit 32] >>= [Maybe4]
generics for s23: [] in type [Maybe4]
TopLevel group inferred s23 :: [Maybe4]
Generalizing definition for: s23 with generics []
Inferred s23 :: Maybe4
Inferred b492 :: [] >>= [Maybe4]
Inferred b493 :: [WordCursor, Bit 32] >>= [Maybe4]
Inferred k231 :: {Bit 32} [WordCursor] ->> [Maybe4]
generics for nextMimgHeader_imp: [] in type [[WordCursor] ->> [Maybe4]]
TopLevel group inferred nextMimgHeader_imp :: [[WordCursor] ->> [Maybe4]]
Generalizing definition for: nextMimgHeader_imp with generics []
Inferred nextMimgHeader_imp :: [WordCursor] ->> [Maybe4]
Inferred b436 :: [Bit 32] >>= [Bit 32]
generics for bit0: [] in type [Bit 8]
TopLevel group inferred bit0 :: [Bit 8]
Generalizing definition for: bit0 with generics []
Inferred bit0 :: Bit 8
Inferred k126 :: {} [Ix 32] ->> [Init (Stored (Bit 8))]
generics for s42: [] in type [[Ix 32] ->> [Init (Stored (Bit 8))]]
TopLevel group inferred s42 :: [[Ix 32] ->> [Init (Stored (Bit 8))]]
Generalizing definition for: s42 with generics []
Inferred s42 :: [Ix 32] ->> [Init (Stored (Bit 8))]
generics for s1: [] in type [Init (Array 32 (Stored (Bit 8)))]
TopLevel group inferred s1 :: [Init (Array 32 (Stored (Bit 8)))]
Generalizing definition for: s1 with generics []
Inferred s1 :: Init (Array 32 (Stored (Bit 8)))
generics for s15: [] in type [Ix 32]
TopLevel group inferred s15 :: [Ix 32]
Generalizing definition for: s15 with generics []
Inferred s15 :: Ix 32
generics for nz10: [] in type [NZBit 32]
TopLevel group inferred nz10 :: [NZBit 32]
Generalizing definition for: nz10 with generics []
Inferred nz10 :: NZBit 32
generics for s19: [] in type [Maybe2]
TopLevel group inferred s19 :: [Maybe2]
Generalizing definition for: s19 with generics []
Inferred s19 :: Maybe2
Inferred k52 :: {} [Ix 32] ->> [Maybe2]
generics for s20: [] in type [[Ix 32] ->> [Maybe2]]
TopLevel group inferred s20 :: [[Ix 32] ->> [Maybe2]]
Generalizing definition for: s20 with generics []
Inferred s20 :: [Ix 32] ->> [Maybe2]
generics for s18: [] in type [Ix 32]
TopLevel group inferred s18 :: [Ix 32]
Generalizing definition for: s18 with generics []
Inferred s18 :: Ix 32
generics for com1data: [] in type [Bit 16]
TopLevel group inferred com1data :: [Bit 16]
Generalizing definition for: com1data with generics []
Inferred com1data :: Bit 16
Inferred b268 :: [] >>= [Bit 16]
generics for com1ctrl: [] in type [Bit 16]
TopLevel group inferred com1ctrl :: [Bit 16]
Generalizing definition for: com1ctrl with generics []
Inferred com1ctrl :: Bit 16
Inferred b256 :: [Bit 32] >>= [Unit]
Inferred b258 :: [Bit 32] >>= [Unit]
Inferred b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b1002 :: [Maybe0] >>= [Unit]
Inferred b1001 :: [Maybe1] >>= [Unit]
Inferred b832 :: [Maybe0, Ix 80, Ix 25, Ix 25] >>= [Unit]
Inferred b702 :: [Ix 80, Ix 80, Ix 25, Ix 25] >>= [Unit]
Inferred b833 :: [Maybe0, Ix 80, Bit 8, Ix 25] >>= [Unit]
Inferred b700 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit]
Inferred b1355 :: [Maybe1, Ix 25, Ix 25, Ix 80, Ix 80, Bit 8] >>= [Unit]
Inferred b849 :: [] >>= [Unit]
Inferred b847 :: [Ix 25] >>= [Unit]
Inferred b852 :: [Bit 32, Ix 25] >>= [Unit]
Inferred b850 :: [Word, Word, Ix 25] >>= [Unit]
Inferred b845 :: [Word] >>= [Unit]
Inferred b842 :: [Word] >>= [Unit]
Inferred b854 :: [Bit 32] >>= [Unit]
Inferred b1239 :: [Ix 32] >>= [Unit]
Inferred b1356 :: [Maybe2] >>= [Unit]
Inferred b1303 :: [] >>= [Unit]
Inferred b1357 :: [Maybe2, Bit 32] >>= [Unit]
Inferred b1236 :: [Ix 32, Bit 32] >>= [Unit]
Inferred b1443 :: [Maybe2, Bit 32] >>= [Unit]
Inferred b1359 :: [Bit 32] >>= [Unit]
Inferred b1244 :: [Bit 32, Ix 32] >>= [Unit]
Inferred b1246 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1242 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1243 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1362 :: [Maybe2, Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1241 :: [Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1363 :: [Maybe2, Bit 32, Bit 32] >>= [Unit]
Inferred b1232 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [b]], a, Bit 32, Bit 32] >>= [Unit]
Inferred b1247 :: forall (a :: *). [Word, [Bit 8] ->> [[] ->> [a]], Bit 32, Bit 32] >>= [Unit]
Inferred b1231 :: forall (a :: *). [Word, [Bit 8] ->> [[] ->> [a]], Bit 32, Bit 32] >>= [Unit]
Inferred b1034 :: [Bit 32, Bit 32] >>= [Unit]
generics for nz16: [] in type [NZBit 32]
TopLevel group inferred nz16 :: [NZBit 32]
Generalizing definition for: nz16 with generics []
Inferred nz16 :: NZBit 32
Inferred b1255 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1252 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1253 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1364 :: [Maybe2, Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1251 :: [Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1365 :: [Maybe2, Bit 32, Bit 32] >>= [Unit]
Inferred b1249 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [b]], a, Bit 32, Bit 32] >>= [Unit]
Inferred b1256 :: forall (a :: *). [Word, [Bit 8] ->> [[] ->> [a]], Bit 32, Bit 32] >>= [Unit]
Inferred b1248 :: forall (a :: *). [Word, [Bit 8] ->> [[] ->> [a]], Bit 32, Bit 32] >>= [Unit]
Inferred b1021 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b792 :: [Word] >>= [Word]
Inferred b1038 :: [Word, Pair9, Word] >>= [Word]
Inferred b1037 :: [Word, Pair9, Word] >>= [Word]
Inferred b949 :: [Pair9, Word] >>= [Word]
Inferred b1035 :: [Maybe10, Word] >>= [Word]
Inferred b1372 :: [Ref MimgHeader, Word] >>= [Word]
Inferred b784 :: [Ref MimgHeader] >>= [Unit]
Inferred b1025 :: [Word, Pair9, Ref MimgHeader] >>= [Unit]
Inferred b1022 :: [Maybe10, Ref MimgHeader] >>= [Unit]
Inferred b1024 :: [Bit 32, Pair9, Ref MimgHeader] >>= [Unit]
Inferred b941 :: [Pair9, Ref MimgHeader] >>= [Unit]
Inferred b1375 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]
Inferred b1374 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]
Inferred b1444 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]
Inferred b1371 :: [Ref MimgHeader, Word] >>= [Word]
Inferred b788 :: [Ref MimgHeader] >>= [Unit]
Inferred b1029 :: [Word, Pair9, Ref MimgHeader] >>= [Unit]
Inferred b1026 :: [Maybe10, Ref MimgHeader] >>= [Unit]
Inferred b1028 :: [Bit 32, Pair9, Ref MimgHeader] >>= [Unit]
Inferred b945 :: [Pair9, Ref MimgHeader] >>= [Unit]
Inferred b1378 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]
Inferred b1377 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]
Inferred b1445 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]
Inferred b1370 :: [Ref MimgHeader, Word] >>= [Word]
Inferred b790 :: [Ref MimgHeader] >>= [Unit]
Inferred b1033 :: [Word, Pair9, Ref MimgHeader] >>= [Unit]
Inferred b1030 :: [Maybe10, Ref MimgHeader] >>= [Unit]
Inferred b1032 :: [Bit 32, Pair9, Ref MimgHeader] >>= [Unit]
Inferred b946 :: [Pair9, Ref MimgHeader] >>= [Unit]
Inferred b1381 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]
Inferred b1380 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]
Inferred b1446 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]
Inferred b1369 :: [Ref MimgHeader, Word] >>= [Word]
Inferred b1074 :: [Word, Pair9, Word, Ref MimgHeader] >>= [Word]
Inferred b1072 :: [Word, Pair9, Word, Ref MimgHeader] >>= [Word]
Inferred b1073 :: [Pair9, Word, Ref MimgHeader] >>= [Word]
Inferred b1257 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]
Inferred b1067 :: [Bit 32, Ref MimgHeader] >>= [Word]
Inferred b1080 :: [Word, Pair9, Ref MimgHeader, Bit 32] >>= [Word]
Inferred b1078 :: [Word, Pair9, Ref MimgHeader, Bit 32] >>= [Word]
Inferred b1079 :: [Pair9, Ref MimgHeader, Bit 32] >>= [Word]
Inferred b1258 :: [Maybe10, Bit 32, Ref MimgHeader] >>= [Word]
Inferred b1066 :: [Ref MimgHeader, Bit 32] >>= [Word]
Inferred b1259 :: [Maybe10, Ref MimgHeader, Bit 32] >>= [Word]
Inferred b1064 :: [Ref MimgHeader, Bit 32] >>= [Word]
Inferred b1090 :: [Word, Pair9, Bit 32, Ref MimgHeader] >>= [Word]
Inferred b1086 :: [Word, Pair9, Bit 32, Ref MimgHeader] >>= [Word]
Inferred b1087 :: [Pair9, Bit 32, Ref MimgHeader] >>= [Word]
Inferred b1260 :: [Maybe10, Ref MimgHeader, Bit 32] >>= [Word]
Inferred b1085 :: [Bit 32, Pair9, Bit 32, Ref MimgHeader] >>= [Word]
Inferred b1062 :: [Ref MimgHeader, Bit 32, Pair7] >>= [Bit 32]
Inferred b1266 :: [Maybe8, Bit 32] >>= [Bit 32]
Inferred b1265 :: [Maybe10, Ref MimgHeader, Bit 32, Pair7] >>= [Bit 32]
Inferred b1058 :: [MimgHeaderCursor, Word] >>= [Bit 32]
generics for nextMimgMMap_imp: [] in type [[WordCursor] ->> [Maybe4]]
TopLevel group inferred nextMimgMMap_imp :: [[WordCursor] ->> [Maybe4]]
Generalizing definition for: nextMimgMMap_imp with generics []
Inferred nextMimgMMap_imp :: [WordCursor] ->> [Maybe4]
Inferred b1102 :: [Word, Pair9, Word] >>= [Word]
Inferred b1101 :: [Word, Pair9, Word] >>= [Word]
Inferred b961 :: [Pair9, Word] >>= [Word]
Inferred b1099 :: [Maybe10, Word] >>= [Word]
Inferred b1321 :: [Word] >>= [Word]
Inferred b1005 :: [Word, Pair9] >>= [Unit]
Inferred b1004 :: [Word, Pair9] >>= [Unit]
Inferred b947 :: [Pair9] >>= [Unit]
Inferred b884 :: [Maybe10] >>= [Unit]
Inferred b1003 :: [Bit 32, Pair9] >>= [Unit]
Inferred b1447 :: [Maybe10, Word] >>= [Word]
Inferred b1386 :: [Ref MimgMMap, Word] >>= [Word]
Inferred b800 :: [Ref MimgMMap] >>= [Unit]
Inferred b1094 :: [Word, Pair9, Ref MimgMMap] >>= [Unit]
Inferred b1091 :: [Maybe10, Ref MimgMMap] >>= [Unit]
Inferred b1093 :: [Bit 32, Pair9, Ref MimgMMap] >>= [Unit]
Inferred b959 :: [Pair9, Ref MimgMMap] >>= [Unit]
Inferred b1391 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word]
Inferred b1390 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word]
Inferred b1448 :: [Maybe10, Ref MimgMMap, Word] >>= [Word]
Inferred b1385 :: [Ref MimgMMap, Word] >>= [Word]
Inferred b802 :: [Ref MimgMMap] >>= [Unit]
Inferred b1098 :: [Word, Pair9, Ref MimgMMap] >>= [Unit]
Inferred b1095 :: [Maybe10, Ref MimgMMap] >>= [Unit]
Inferred b1097 :: [Bit 32, Pair9, Ref MimgMMap] >>= [Unit]
Inferred b960 :: [Pair9, Ref MimgMMap] >>= [Unit]
Inferred b1394 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word]
Inferred b1393 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word]
Inferred b1449 :: [Maybe10, Ref MimgMMap, Word] >>= [Word]
Inferred b1384 :: [Ref MimgMMap, Word] >>= [Word]
Inferred b1138 :: [Word, Pair9, Word, Ref MimgMMap] >>= [Word]
Inferred b1136 :: [Word, Pair9, Word, Ref MimgMMap] >>= [Word]
Inferred b1137 :: [Pair9, Word, Ref MimgMMap] >>= [Word]
Inferred b1267 :: [Maybe10, Ref MimgMMap, Word] >>= [Word]
Inferred b1131 :: [Bit 32, Ref MimgMMap] >>= [Word]
Inferred b1144 :: [Word, Pair9, Ref MimgMMap, Bit 32] >>= [Word]
Inferred b1142 :: [Word, Pair9, Ref MimgMMap, Bit 32] >>= [Word]
Inferred b1143 :: [Pair9, Ref MimgMMap, Bit 32] >>= [Word]
Inferred b1268 :: [Maybe10, Bit 32, Ref MimgMMap] >>= [Word]
Inferred b1130 :: [Ref MimgMMap, Bit 32] >>= [Word]
Inferred b1269 :: [Maybe10, Ref MimgMMap, Bit 32] >>= [Word]
Inferred b1128 :: [Ref MimgMMap, Bit 32] >>= [Word]
Inferred b1154 :: [Word, Pair9, Bit 32, Ref MimgMMap] >>= [Word]
Inferred b1150 :: [Word, Pair9, Bit 32, Ref MimgMMap] >>= [Word]
Inferred b1151 :: [Pair9, Bit 32, Ref MimgMMap] >>= [Word]
Inferred b1270 :: [Maybe10, Ref MimgMMap, Bit 32] >>= [Word]
Inferred b1149 :: [Bit 32, Pair9, Bit 32, Ref MimgMMap] >>= [Word]
Inferred b1126 :: [Ref MimgMMap, Bit 32, Pair5] >>= [Bit 32]
Inferred b1276 :: [Maybe6, Bit 32] >>= [Bit 32]
Inferred b1275 :: [Maybe10, Ref MimgMMap, Bit 32, Pair5] >>= [Bit 32]
Inferred b1122 :: [MimgMMapCursor, Word] >>= [Bit 32]
Inferred b1331 :: [] >>= [Unit]
Inferred b1450 :: [Maybe10] >>= [Unit]
Inferred b1414 :: [Ref String] >>= [Unit]
Inferred b808 :: [Ref String] >>= [Unit]
Inferred b1158 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1155 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1157 :: [Bit 32, Pair9, Ref String] >>= [Unit]
Inferred b970 :: [Pair9, Ref String] >>= [Unit]
Inferred b1419 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1418 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1451 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1413 :: [Ref String] >>= [Unit]
Inferred b1452 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1412 :: [Ref String] >>= [Unit]
Inferred b971 :: [Ref String] >>= [Unit]
Inferred b1277 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1162 :: [Ref String] >>= [Unit]
Inferred b1166 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1163 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1165 :: [Bit 32, Pair9, Ref String] >>= [Unit]
Inferred b972 :: [Pair9, Ref String] >>= [Unit]
Inferred b1423 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1422 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1453 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1411 :: [Ref String] >>= [Unit]
Inferred b1454 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1410 :: [Ref String] >>= [Unit]
Inferred b978 :: [Ref String] >>= [Unit]
Inferred b1278 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1168 :: [Ref String] >>= [Unit]
Inferred b1174 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1171 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1173 :: [Bit 32, Pair9, Ref String] >>= [Unit]
Inferred b980 :: [Pair9, Ref String] >>= [Unit]
Inferred b1427 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1426 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1455 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1409 :: [] >>= [Unit]
Inferred b1456 :: [Maybe10] >>= [Unit]
Inferred b1408 :: [Ref String] >>= [Unit]
Inferred b1431 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1430 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1457 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1407 :: [Ref String] >>= [Unit]
Inferred b1458 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1406 :: [Ref String] >>= [Unit]
Inferred b1435 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1434 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1459 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1405 :: [Ref String] >>= [Unit]
Inferred b1460 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1404 :: [Ref String] >>= [Unit]
Inferred b1175 :: [Ref String] >>= [Unit]
Inferred b1181 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1180 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b977 :: [Pair9, Ref String] >>= [Unit]
Inferred b1178 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1179 :: [Bit 32, Pair9, Ref String] >>= [Unit]
Inferred b1461 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1204 :: [] >>= [Unit]
Inferred b1212 :: [] >>= [Unit]
Inferred b1438 :: [Maybe10] >>= [Unit]
Inferred b1287 :: [Ref String] >>= [Unit]
Inferred b1292 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1291 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1439 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1286 :: [Ref String] >>= [Unit]
Inferred b1440 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1285 :: [Ref String] >>= [Unit]
Inferred b1296 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1295 :: [Word, Pair9, Ref String] >>= [Unit]
Inferred b1441 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1284 :: [Ref String] >>= [Unit]
Inferred b1442 :: [Maybe10, Ref String] >>= [Unit]
Inferred b1283 :: [Ref String] >>= [Unit]
Inferred b1299 :: [Maybe10, Ref String] >>= [Unit]
Inferred b814 :: [] >>= [Unit]
Inferred b1189 :: [Word, Pair9] >>= [Unit]
Inferred b1188 :: [Word, Pair9] >>= [Unit]
Inferred b985 :: [Pair9] >>= [Unit]
Inferred b1186 :: [Maybe10] >>= [Unit]
Inferred b1187 :: [Bit 32, Pair9] >>= [Unit]
Inferred b1300 :: [Maybe10] >>= [Unit]
Inferred b1203 :: [] >>= [Unit]
Inferred b816 :: [] >>= [Unit]
Inferred b1194 :: [Word, Pair9] >>= [Unit]
Inferred b1193 :: [Word, Pair9] >>= [Unit]
Inferred b986 :: [Pair9] >>= [Unit]
Inferred b1191 :: [Maybe10] >>= [Unit]
Inferred b1192 :: [Bit 32, Pair9] >>= [Unit]
Inferred b1301 :: [Maybe10] >>= [Unit]
Inferred b1202 :: [] >>= [Unit]
Inferred b818 :: [] >>= [Unit]
Inferred b1199 :: [Word, Pair9] >>= [Unit]
Inferred b1198 :: [Word, Pair9] >>= [Unit]
Inferred b987 :: [Pair9] >>= [Unit]
Inferred b1196 :: [Maybe10] >>= [Unit]
Inferred b1197 :: [Bit 32, Pair9] >>= [Unit]
Inferred b1302 :: [Maybe10] >>= [Unit]
Inferred b1201 :: [] >>= [Unit]
Inferred b1211 :: [Word, Pair9] >>= [Unit]
Inferred b1210 :: [Word, Pair9] >>= [Unit]
Inferred b996 :: [Pair9] >>= [Unit]
Inferred b1208 :: [Maybe10] >>= [Unit]
Inferred b509 :: [] >>= [Unit]
Inferred k240 :: {} [] ->> [Unit]
generics for kernel: [] in type [[] ->> [Unit]]
TopLevel group inferred kernel :: [[] ->> [Unit]]
Generalizing definition for: kernel with generics []
Inferred kernel :: [] ->> [Unit]
Running specializer ...
Requesting specialization of kernel :: [[] ->> [Unit]]
TopLevel specialize: kernel :: [[] ->> [Unit]]  ~~>  kernel :: [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k240 :: {} [] ->> [Unit]
ClosureDefn specialize: k240 :: {} [] ->> [Unit]  ~~>  k240 :: {} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b509 :: [] >>= [Unit]
Block specialize: b509 :: [] >>= [Unit]  ~~>  b509 :: [] >>= [Unit], generics=[], substitution=null
making new version of structure type Window
new version of StructType Window is Window
making new version of structure type Coord
new version of StructType Coord is Coord
new version of primitive select_row :: [Ref Coord] >>= [Ref (Stored (Ix 25))]
         old version was select_row :: [Ref Coord] >>= [Ref (Stored (Ix 25))]
new version of primitive select_col :: [Ref Coord] >>= [Ref (Stored (Ix 80))]
         old version was select_col :: [Ref Coord] >>= [Ref (Stored (Ix 80))]
new version of primitive select_topleft :: [Ref Window] >>= [Ref Coord]
         old version was select_topleft :: [Ref Window] >>= [Ref Coord]
new version of primitive select_bottomright :: [Ref Window] >>= [Ref Coord]
         old version was select_bottomright :: [Ref Window] >>= [Ref Coord]
new version of primitive select_current :: [Ref Window] >>= [Ref Coord]
         old version was select_current :: [Ref Window] >>= [Ref Coord]
new version of primitive select_attr :: [Ref Window] >>= [Ref (Stored (Bit 8))]
         old version was select_attr :: [Ref Window] >>= [Ref (Stored (Bit 8))]
specialized version of primitive select_topleft :: [Ref Window] >>= [Ref Coord]
            original version was select_topleft :: [Ref Window] >>= [Ref Coord]
Requesting specialization of console :: Ref Window
specialized version of primitive select_row :: [Ref Coord] >>= [Ref (Stored (Ix 25))]
            original version was select_row :: [Ref Coord] >>= [Ref (Stored (Ix 25))]
Requesting specialization of get1 :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
specialized version of primitive select_col :: [Ref Coord] >>= [Ref (Stored (Ix 80))]
            original version was select_col :: [Ref Coord] >>= [Ref (Stored (Ix 80))]
Requesting specialization of get2 :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
specialized version of primitive select_current :: [Ref Window] >>= [Ref Coord]
            original version was select_current :: [Ref Window] >>= [Ref Coord]
Requesting specialization of console :: Ref Window
Requesting specialization of set1 :: [Ref (Stored (Ix 25))] ->> [[Ix 25] ->> [[] ->> [Unit]]]
Requesting specialization of set2 :: [Ref (Stored (Ix 80))] ->> [[Ix 80] ->> [[] ->> [Unit]]]
specialized version of primitive select_bottomright :: [Ref Window] >>= [Ref Coord]
            original version was select_bottomright :: [Ref Window] >>= [Ref Coord]
Requesting specialization of console :: Ref Window
Requesting specialization of get1 :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
Requesting specialization of get2 :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
specialized version of primitive select_attr :: [Ref Window] >>= [Ref (Stored (Bit 8))]
            original version was select_attr :: [Ref Window] >>= [Ref (Stored (Bit 8))]
Requesting specialization of console :: Ref Window
Requesting specialization of get3 :: [Ref (Stored (Bit 8))] ->> [[] ->> [Bit 8]]
Requesting specialization of b692 :: [Ix 25, Ix 25, Bit 8, Ix 80, Ix 80] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Maybe1013 is a specialized DataType for Maybe10
Pair914 is a specialized DataType for Pair9
Requesting specialization of b1201 :: [] >>= [Unit]
Requesting specialization of b1208 :: [Maybe10] >>= [Unit]
Block specialize: b1208 :: [Maybe10] >>= [Unit]  ~~>  b1208 :: [Maybe10] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1210 :: [Word, Pair9] >>= [Unit]
Requesting specialization of b1211 :: [Word, Pair9] >>= [Unit]
Block specialize: b1211 :: [Word, Pair9] >>= [Unit]  ~~>  b1211 :: [Word, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b996 :: [Pair9] >>= [Unit]
Block specialize: b996 :: [Pair9] >>= [Unit]  ~~>  b996 :: [Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1201 :: [] >>= [Unit]
Requesting specialization of b1208 :: [Maybe10] >>= [Unit]
Block specialize: b845 :: [Word] >>= [Unit]  ~~>  b845 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Ref Window
Requesting specialization of get1 :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
Requesting specialization of b847 :: [Ix 25] >>= [Unit]
Requesting specialization of b850 :: [Word, Word, Ix 25] >>= [Unit]
Block specialize: b850 :: [Word, Word, Ix 25] >>= [Unit]  ~~>  b850 :: [Word, Word, Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of b847 :: [Ix 25] >>= [Unit]
Requesting specialization of b852 :: [Bit 32, Ix 25] >>= [Unit]
Block specialize: b852 :: [Bit 32, Ix 25] >>= [Unit]  ~~>  b852 :: [Bit 32, Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Ref Window
Requesting specialization of get2 :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
Requesting specialization of console :: Ref Window
Requesting specialization of get3 :: [Ref (Stored (Bit 8))] ->> [[] ->> [Bit 8]]
Requesting specialization of @1 :: [Ref (Array 25 (Array 80 (Stored Char)))] ->> [[Ix 25] ->> [Ref (Array 80 (Stored Char))]]
Requesting specialization of vram :: Ref (Array 25 (Array 80 (Stored Char)))
Requesting specialization of @ :: [Ref (Array 80 (Stored Char))] ->> [[Ix 80] ->> [Ref (Stored Char)]]
Requesting specialization of set :: [Ref (Stored Char)] ->> [[Char] ->> [[] ->> [Unit]]]
Requesting specialization of wordToByte :: [Bit 32] ->> [Bit 8]
new version of BitdataType Char is Char
    orig: Char :: {Char.Char} Char
    new:  Char :: {Char.Char} Char
new version of primitive update_attr :: [Char.Char, Bit 8] >>= [Char.Char]
         old version was update_attr :: [Char.Char, Bit 8] >>= [Char.Char]
new version of primitive update_char :: [Char.Char, Bit 8] >>= [Char.Char]
         old version was update_char :: [Char.Char, Bit 8] >>= [Char.Char]
specialized version of primitive update_attr :: [Char.Char, Bit 8] >>= [Char.Char]
            original version was update_attr :: [Char.Char, Bit 8] >>= [Char.Char]
Requesting specialization of console :: Ref Window
Requesting specialization of get2 :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
Requesting specialization of genLtInc1 :: [Maybe0] ->> [[[Ix 80] ->> [Maybe0]] ->> [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]]]
Requesting specialization of s13 :: [Maybe0]
Requesting specialization of s14 :: [[Ix 80] ->> [Maybe0]]
Requesting specialization of s12 :: [Ix 80]
Maybe015 is a specialized DataType for Maybe0
Requesting specialization of b1002 :: [Maybe0] >>= [Unit]
Requesting specialization of b847 :: [Ix 25] >>= [Unit]
Block specialize: b1002 :: [Maybe0] >>= [Unit]  ~~>  b1002 :: [Maybe0] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Ref Window
Requesting specialization of set2 :: [Ref (Stored (Ix 80))] ->> [[Ix 80] ->> [[] ->> [Unit]]]
TopLevel specialize: s12 :: [Ix 80]  ~~>  s12 :: [Ix 80], generics=[], substitution=null
Requesting specialization of ix1u1 :: [Unit] ->> [Ix 80]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: Unit :: [Unit]  ~~>  Unit :: [Unit], generics=[], substitution=null
External specialize: ix1u1 :: [Unit] ->> [Ix 80]  ~~>  ix1u1 :: [Unit] ->> [Ix 80]
TopLevel specialize: s14 :: [[Ix 80] ->> [Maybe0]]  ~~>  s14 :: [[Ix 80] ->> [Maybe0]], generics=[], substitution=null
Requesting specialization of k51 :: {} [Ix 80] ->> [Maybe0]
ClosureDefn specialize: k51 :: {} [Ix 80] ->> [Maybe0]  ~~>  k51 :: {} [Ix 80] ->> [Maybe0], generics=[], substitution=null
TopLevel specialize: s13 :: [Maybe0]  ~~>  s13 :: [Maybe0], generics=[], substitution=null
External specialize: genLtInc1 :: [Maybe0] ->> [[[Ix 80] ->> [Maybe0]] ->> [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]]]  ~~>  genLtInc1 :: [Maybe0] ->> [[[Ix 80] ->> [Maybe0]] ->> [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]]]
External specialize: wordToByte :: [Bit 32] ->> [Bit 8]  ~~>  wordToByte :: [Bit 32] ->> [Bit 8]
External specialize: set :: [Ref (Stored Char)] ->> [[Char] ->> [[] ->> [Unit]]]  ~~>  set :: [Ref (Stored Char)] ->> [[Char] ->> [[] ->> [Unit]]]
External specialize: @ :: [Ref (Array 80 (Stored Char))] ->> [[Ix 80] ->> [Ref (Stored Char)]]  ~~>  @ :: [Ref (Array 80 (Stored Char))] ->> [[Ix 80] ->> [Ref (Stored Char)]]
External specialize: vram :: Ref (Array 25 (Array 80 (Stored Char)))  ~~>  vram :: Ref (Array 25 (Array 80 (Stored Char)))
External specialize: @1 :: [Ref (Array 25 (Array 80 (Stored Char)))] ->> [[Ix 25] ->> [Ref (Array 80 (Stored Char))]]  ~~>  @1 :: [Ref (Array 25 (Array 80 (Stored Char)))] ->> [[Ix 25] ->> [Ref (Array 80 (Stored Char))]]
Block specialize: b847 :: [Ix 25] >>= [Unit]  ~~>  b847 :: [Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Ref Window
Requesting specialization of console :: Ref Window
Requesting specialization of get2 :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
Requesting specialization of set2 :: [Ref (Stored (Ix 80))] ->> [[Ix 80] ->> [[] ->> [Unit]]]
Requesting specialization of console :: Ref Window
Requesting specialization of get1 :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
Requesting specialization of genLtInc :: [Maybe1] ->> [[[Ix 25] ->> [Maybe1]] ->> [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]]]
Requesting specialization of Nothing :: [Maybe1]
Requesting specialization of Just :: [[Ix 25] ->> [Maybe1]]
Requesting specialization of ix1 :: [Ix 25]
Maybe116 is a specialized DataType for Maybe1
Requesting specialization of b1001 :: [Maybe1] >>= [Unit]
Requesting specialization of b849 :: [] >>= [Unit]
Block specialize: b849 :: [] >>= [Unit]  ~~>  b849 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Ref Window
Requesting specialization of get1 :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
Requesting specialization of get2 :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
Requesting specialization of console :: Ref Window
Requesting specialization of get1 :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
Requesting specialization of get2 :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
Requesting specialization of console :: Ref Window
Requesting specialization of get3 :: [Ref (Stored (Bit 8))] ->> [[] ->> [Bit 8]]
Requesting specialization of genLtInc :: [Maybe1] ->> [[[Ix 25] ->> [Maybe1]] ->> [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]]]
Requesting specialization of Nothing :: [Maybe1]
Requesting specialization of Just :: [[Ix 25] ->> [Maybe1]]
Requesting specialization of ix1 :: [Ix 25]
Requesting specialization of b1355 :: [Maybe1, Ix 25, Ix 25, Ix 80, Ix 80, Bit 8] >>= [Unit]
Requesting specialization of b700 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit]
Block specialize: b700 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit]  ~~>  b700 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of @1 :: [Ref (Array 25 (Array 80 (Stored Char)))] ->> [[Ix 25] ->> [Ref (Array 80 (Stored Char))]]
Requesting specialization of vram :: Ref (Array 25 (Array 80 (Stored Char)))
Requesting specialization of @ :: [Ref (Array 80 (Stored Char))] ->> [[Ix 80] ->> [Ref (Stored Char)]]
Requesting specialization of set :: [Ref (Stored Char)] ->> [[Char] ->> [[] ->> [Unit]]]
Requesting specialization of blank :: [Char]
Requesting specialization of genLtInc1 :: [Maybe0] ->> [[[Ix 80] ->> [Maybe0]] ->> [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]]]
Requesting specialization of s13 :: [Maybe0]
Requesting specialization of s14 :: [[Ix 80] ->> [Maybe0]]
Requesting specialization of s12 :: [Ix 80]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b833 :: [Maybe0, Ix 80, Bit 8, Ix 25] >>= [Unit]
Block specialize: b833 :: [Maybe0, Ix 80, Bit 8, Ix 25] >>= [Unit]  ~~>  b833 :: [Maybe0, Ix 80, Bit 8, Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of b700 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit]
Block specialize: b295 :: [] >>= [Unit]  ~~>  b295 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of Unit :: [Unit]
TopLevel specialize: blank :: [Char]  ~~>  blank :: [Char], generics=[], substitution=null
Requesting specialization of b314 :: [] >>= [Char]
Block specialize: b314 :: [] >>= [Char]  ~~>  b314 :: [] >>= [Char], generics=[], substitution=null
Requesting specialization of wordToByte :: [Bit 32] ->> [Bit 8]
Block specialize: b1355 :: [Maybe1, Ix 25, Ix 25, Ix 80, Ix 80, Bit 8] >>= [Unit]  ~~>  b1355 :: [Maybe1, Ix 25, Ix 25, Ix 80, Ix 80, Bit 8] >>= [Unit], generics=[], substitution=null
Requesting specialization of b702 :: [Ix 80, Ix 80, Ix 25, Ix 25] >>= [Unit]
Requesting specialization of genLtInc :: [Maybe1] ->> [[[Ix 25] ->> [Maybe1]] ->> [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]]]
Requesting specialization of Nothing :: [Maybe1]
Requesting specialization of Just :: [[Ix 25] ->> [Maybe1]]
Requesting specialization of ix1 :: [Ix 25]
Requesting specialization of b1355 :: [Maybe1, Ix 25, Ix 25, Ix 80, Ix 80, Bit 8] >>= [Unit]
Requesting specialization of b700 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit]
Block specialize: b702 :: [Ix 80, Ix 80, Ix 25, Ix 25] >>= [Unit]  ~~>  b702 :: [Ix 80, Ix 80, Ix 25, Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of @1 :: [Ref (Array 25 (Array 80 (Stored Char)))] ->> [[Ix 25] ->> [Ref (Array 80 (Stored Char))]]
Requesting specialization of vram :: Ref (Array 25 (Array 80 (Stored Char)))
Requesting specialization of @ :: [Ref (Array 80 (Stored Char))] ->> [[Ix 80] ->> [Ref (Stored Char)]]
Requesting specialization of @1 :: [Ref (Array 25 (Array 80 (Stored Char)))] ->> [[Ix 25] ->> [Ref (Array 80 (Stored Char))]]
Requesting specialization of vram :: Ref (Array 25 (Array 80 (Stored Char)))
Requesting specialization of @ :: [Ref (Array 80 (Stored Char))] ->> [[Ix 80] ->> [Ref (Stored Char)]]
Requesting specialization of get4 :: [Ref (Stored Char)] ->> [[] ->> [Char]]
Requesting specialization of set :: [Ref (Stored Char)] ->> [[Char] ->> [[] ->> [Unit]]]
Requesting specialization of genLtInc1 :: [Maybe0] ->> [[[Ix 80] ->> [Maybe0]] ->> [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]]]
Requesting specialization of s13 :: [Maybe0]
Requesting specialization of s14 :: [[Ix 80] ->> [Maybe0]]
Requesting specialization of s12 :: [Ix 80]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b832 :: [Maybe0, Ix 80, Ix 25, Ix 25] >>= [Unit]
Block specialize: b832 :: [Maybe0, Ix 80, Ix 25, Ix 25] >>= [Unit]  ~~>  b832 :: [Maybe0, Ix 80, Ix 25, Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of b702 :: [Ix 80, Ix 80, Ix 25, Ix 25] >>= [Unit]
External specialize: get4 :: [Ref (Stored Char)] ->> [[] ->> [Char]]  ~~>  get4 :: [Ref (Stored Char)] ->> [[] ->> [Char]]
Block specialize: b1001 :: [Maybe1] >>= [Unit]  ~~>  b1001 :: [Maybe1] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Ref Window
Requesting specialization of set1 :: [Ref (Stored (Ix 25))] ->> [[Ix 25] ->> [[] ->> [Unit]]]
TopLevel specialize: ix1 :: [Ix 25]  ~~>  ix1 :: [Ix 25], generics=[], substitution=null
Requesting specialization of ix1u :: [Unit] ->> [Ix 25]
Requesting specialization of Unit :: [Unit]
External specialize: ix1u :: [Unit] ->> [Ix 25]  ~~>  ix1u :: [Unit] ->> [Ix 25]
TopLevel specialize: Just :: [[Ix 25] ->> [Maybe1]]  ~~>  Just :: [[Ix 25] ->> [Maybe1]], generics=[], substitution=null
Requesting specialization of k5 :: {} [Ix 25] ->> [Maybe1]
ClosureDefn specialize: k5 :: {} [Ix 25] ->> [Maybe1]  ~~>  k5 :: {} [Ix 25] ->> [Maybe1], generics=[], substitution=null
TopLevel specialize: Nothing :: [Maybe1]  ~~>  Nothing :: [Maybe1], generics=[], substitution=null
External specialize: genLtInc :: [Maybe1] ->> [[[Ix 25] ->> [Maybe1]] ->> [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]]]  ~~>  genLtInc :: [Maybe1] ->> [[[Ix 25] ->> [Maybe1]] ->> [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]]]
Block specialize: b1210 :: [Word, Pair9] >>= [Unit]  ~~>  b1210 :: [Word, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b996 :: [Pair9] >>= [Unit]
Block specialize: b694 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b694 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b258 :: [Bit 32] >>= [Unit]
Requesting specialization of b256 :: [Bit 32] >>= [Unit]
Block specialize: b256 :: [Bit 32] >>= [Unit]  ~~>  b256 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of outb :: [Bit 16] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Requesting specialization of com1data :: [Bit 16]
TopLevel specialize: com1data :: [Bit 16]  ~~>  com1data :: [Bit 16], generics=[], substitution=null
Requesting specialization of port :: [Bit 32] ->> [Bit 16]
External specialize: port :: [Bit 32] ->> [Bit 16]  ~~>  port :: [Bit 32] ->> [Bit 16]
External specialize: outb :: [Bit 16] ->> [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  outb :: [Bit 16] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Block specialize: b258 :: [Bit 32] >>= [Unit]  ~~>  b258 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
External specialize: and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]  ~~>  and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
TopLevel specialize: com1ctrl :: [Bit 16]  ~~>  com1ctrl :: [Bit 16], generics=[], substitution=null
Requesting specialization of b268 :: [] >>= [Bit 16]
Block specialize: b268 :: [] >>= [Bit 16]  ~~>  b268 :: [] >>= [Bit 16], generics=[], substitution=null
Requesting specialization of bitAdd :: [Bit 16] ->> [[Bit 16] ->> [Bit 16]]
Requesting specialization of com1data :: [Bit 16]
Requesting specialization of port :: [Bit 32] ->> [Bit 16]
External specialize: bitAdd :: [Bit 16] ->> [[Bit 16] ->> [Bit 16]]  ~~>  bitAdd :: [Bit 16] ->> [[Bit 16] ->> [Bit 16]]
External specialize: inb :: [Bit 16] ->> [[] ->> [Bit 32]]  ~~>  inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Block specialize: b1201 :: [] >>= [Unit]  ~~>  b1201 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1202 :: [] >>= [Unit]
Requesting specialization of b1302 :: [Maybe10] >>= [Unit]
Block specialize: b1302 :: [Maybe10] >>= [Unit]  ~~>  b1302 :: [Maybe10] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1197 :: [Bit 32, Pair9] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b884 :: [Maybe10] >>= [Unit]  ~~>  b884 :: [Maybe10] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair9] >>= [Unit]
Block specialize: b1003 :: [Bit 32, Pair9] >>= [Unit]  ~~>  b1003 :: [Bit 32, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1004 :: [Word, Pair9] >>= [Unit]
Requesting specialization of b1005 :: [Word, Pair9] >>= [Unit]
Block specialize: b1005 :: [Word, Pair9] >>= [Unit]  ~~>  b1005 :: [Word, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b947 :: [Pair9] >>= [Unit]
Block specialize: b947 :: [Pair9] >>= [Unit]  ~~>  b947 :: [Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b1004 :: [Word, Pair9] >>= [Unit]  ~~>  b1004 :: [Word, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b947 :: [Pair9] >>= [Unit]
Block specialize: b1197 :: [Bit 32, Pair9] >>= [Unit]  ~~>  b1197 :: [Bit 32, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1198 :: [Word, Pair9] >>= [Unit]
Requesting specialization of b1199 :: [Word, Pair9] >>= [Unit]
Block specialize: b1199 :: [Word, Pair9] >>= [Unit]  ~~>  b1199 :: [Word, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b987 :: [Pair9] >>= [Unit]
Block specialize: b987 :: [Pair9] >>= [Unit]  ~~>  b987 :: [Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b818 :: [] >>= [Unit]
Requesting specialization of b1196 :: [Maybe10] >>= [Unit]
Block specialize: b1196 :: [Maybe10] >>= [Unit]  ~~>  b1196 :: [Maybe10] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1197 :: [Bit 32, Pair9] >>= [Unit]
Block specialize: b818 :: [] >>= [Unit]  ~~>  b818 :: [] >>= [Unit], generics=[], substitution=null
making new version of structure type MimgBootData
new version of StructType MimgBootData is MimgBootData
new version of primitive select_headers :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgHeaderBlock))]
         old version was select_headers :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgHeaderBlock))]
new version of primitive select_mmap :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgMMapBlock))]
         old version was select_mmap :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgMMapBlock))]
new version of primitive select_cmdline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
         old version was select_cmdline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
new version of primitive select_imgline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
         old version was select_imgline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
specialized version of primitive select_headers :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgHeaderBlock))]
            original version was select_headers :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgHeaderBlock))]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get7 :: [Ref (Stored (Ref MimgHeaderBlock))] ->> [[] ->> [Ref MimgHeaderBlock]]
Requesting specialization of mimgHeaderCursor :: [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]
Requesting specialization of b1058 :: [MimgHeaderCursor, Word] >>= [Bit 32]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b816 :: [] >>= [Unit]
Requesting specialization of b1191 :: [Maybe10] >>= [Unit]
Block specialize: b1191 :: [Maybe10] >>= [Unit]  ~~>  b1191 :: [Maybe10] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1192 :: [Bit 32, Pair9] >>= [Unit]
Block specialize: b1192 :: [Bit 32, Pair9] >>= [Unit]  ~~>  b1192 :: [Bit 32, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1193 :: [Word, Pair9] >>= [Unit]
Requesting specialization of b1194 :: [Word, Pair9] >>= [Unit]
Block specialize: b1194 :: [Word, Pair9] >>= [Unit]  ~~>  b1194 :: [Word, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b986 :: [Pair9] >>= [Unit]
Block specialize: b986 :: [Pair9] >>= [Unit]  ~~>  b986 :: [Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b816 :: [] >>= [Unit]
Requesting specialization of b1191 :: [Maybe10] >>= [Unit]
Block specialize: b1193 :: [Word, Pair9] >>= [Unit]  ~~>  b1193 :: [Word, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b986 :: [Pair9] >>= [Unit]
Block specialize: b816 :: [] >>= [Unit]  ~~>  b816 :: [] >>= [Unit], generics=[], substitution=null
specialized version of primitive select_mmap :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgMMapBlock))]
            original version was select_mmap :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgMMapBlock))]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get6 :: [Ref (Stored (Ref MimgMMapBlock))] ->> [[] ->> [Ref MimgMMapBlock]]
Requesting specialization of mimgMMapCursor :: [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]
Requesting specialization of b1122 :: [MimgMMapCursor, Word] >>= [Bit 32]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b814 :: [] >>= [Unit]
Requesting specialization of b1186 :: [Maybe10] >>= [Unit]
Block specialize: b1186 :: [Maybe10] >>= [Unit]  ~~>  b1186 :: [Maybe10] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1187 :: [Bit 32, Pair9] >>= [Unit]
Block specialize: b1187 :: [Bit 32, Pair9] >>= [Unit]  ~~>  b1187 :: [Bit 32, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1188 :: [Word, Pair9] >>= [Unit]
Requesting specialization of b1189 :: [Word, Pair9] >>= [Unit]
Block specialize: b1189 :: [Word, Pair9] >>= [Unit]  ~~>  b1189 :: [Word, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b985 :: [Pair9] >>= [Unit]
Block specialize: b985 :: [Pair9] >>= [Unit]  ~~>  b985 :: [Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b814 :: [] >>= [Unit]
Requesting specialization of b1186 :: [Maybe10] >>= [Unit]
Block specialize: b1188 :: [Word, Pair9] >>= [Unit]  ~~>  b1188 :: [Word, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b985 :: [Pair9] >>= [Unit]
Block specialize: b814 :: [] >>= [Unit]  ~~>  b814 :: [] >>= [Unit], generics=[], substitution=null
specialized version of primitive select_cmdline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
            original version was select_cmdline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1283 :: [Ref String] >>= [Unit]
Requesting specialization of b1299 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1299 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1299 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1179 :: [Bit 32, Pair9, Ref String] >>= [Unit]
specialized version of primitive select_imgline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
            original version was select_imgline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1168 :: [Ref String] >>= [Unit]
Requesting specialization of b1171 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1171 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1171 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1173 :: [Bit 32, Pair9, Ref String] >>= [Unit]
Requesting specialization of b1174 :: [Word, Pair9, Ref String] >>= [Unit]
Block specialize: b1174 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1174 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b980 :: [Pair9, Ref String] >>= [Unit]
Block specialize: b980 :: [Pair9, Ref String] >>= [Unit]  ~~>  b980 :: [Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1168 :: [Ref String] >>= [Unit]
Requesting specialization of b1171 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1173 :: [Bit 32, Pair9, Ref String] >>= [Unit]  ~~>  b1173 :: [Bit 32, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b980 :: [Pair9, Ref String] >>= [Unit]
Block specialize: b1168 :: [Ref String] >>= [Unit]  ~~>  b1168 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b978 :: [Ref String] >>= [Unit]
Requesting specialization of b1278 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1278 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1278 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair9] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1162 :: [Ref String] >>= [Unit]
Requesting specialization of b1163 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1163 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1163 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1165 :: [Bit 32, Pair9, Ref String] >>= [Unit]
Requesting specialization of b1166 :: [Word, Pair9, Ref String] >>= [Unit]
Block specialize: b1166 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1166 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b972 :: [Pair9, Ref String] >>= [Unit]
Block specialize: b972 :: [Pair9, Ref String] >>= [Unit]  ~~>  b972 :: [Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1162 :: [Ref String] >>= [Unit]
Requesting specialization of b1163 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1165 :: [Bit 32, Pair9, Ref String] >>= [Unit]  ~~>  b1165 :: [Bit 32, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b972 :: [Pair9, Ref String] >>= [Unit]
Block specialize: b1162 :: [Ref String] >>= [Unit]  ~~>  b1162 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b971 :: [Ref String] >>= [Unit]
Requesting specialization of b1277 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1277 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1277 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b971 :: [Ref String] >>= [Unit]
Requesting specialization of b1277 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b854 :: [Bit 32] >>= [Unit]  ~~>  b854 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b842 :: [Word] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Block specialize: b842 :: [Word] >>= [Unit]  ~~>  b842 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of console :: Ref Window
Requesting specialization of get1 :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
Requesting specialization of b847 :: [Ix 25] >>= [Unit]
Requesting specialization of b850 :: [Word, Word, Ix 25] >>= [Unit]
Block specialize: b971 :: [Ref String] >>= [Unit]  ~~>  b971 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b808 :: [Ref String] >>= [Unit]
Requesting specialization of b1155 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1155 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1155 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1157 :: [Bit 32, Pair9, Ref String] >>= [Unit]
Requesting specialization of b1158 :: [Word, Pair9, Ref String] >>= [Unit]
Block specialize: b1158 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1158 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b970 :: [Pair9, Ref String] >>= [Unit]
Block specialize: b970 :: [Pair9, Ref String] >>= [Unit]  ~~>  b970 :: [Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b808 :: [Ref String] >>= [Unit]
Requesting specialization of b1155 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1157 :: [Bit 32, Pair9, Ref String] >>= [Unit]  ~~>  b1157 :: [Bit 32, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b970 :: [Pair9, Ref String] >>= [Unit]
Block specialize: b808 :: [Ref String] >>= [Unit]  ~~>  b808 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of refToWord :: [Ref String] ->> [Bit 32]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b1021 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b1021 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @2 :: [Ref (Array 32 (Stored (Bit 8)))] ->> [[Ix 32] ->> [Ref (Stored (Bit 8))]]
Requesting specialization of itoaBuf :: Ref (Array 32 (Stored (Bit 8)))
Requesting specialization of s15 :: [Ix 32]
Requesting specialization of set3 :: [Ref (Stored (Bit 8))] ->> [[Bit 8] ->> [[] ->> [Unit]]]
Requesting specialization of nzrem :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
Requesting specialization of nz16 :: [NZBit 32]
Requesting specialization of b1248 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1256 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Block specialize: b1256 :: forall (a :: *). [Word, [Bit 8] ->> [[] ->> [a]], Bit 32, Bit 32] >>= [Unit]  ~~>  b1256 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit], generics=[?12539], substitution=[?12539 --> Unit]
Requesting specialization of wordToByte :: [Bit 32] ->> [Bit 8]
Requesting specialization of b1249 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1249 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [b]], a, Bit 32, Bit 32] >>= [Unit]  ~~>  b1249 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Bit 32] >>= [Unit], generics=[?12511, ?12518], substitution=[?12511 --> Bit 8, ?12518 --> Unit]
Requesting specialization of genLtInc2 :: [Maybe2] ->> [[[Ix 32] ->> [Maybe2]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]]
Requesting specialization of s19 :: [Maybe2]
Requesting specialization of s20 :: [[Ix 32] ->> [Maybe2]]
Requesting specialization of s18 :: [Ix 32]
Requesting specialization of s15 :: [Ix 32]
Requesting specialization of maxBound2 :: Ix 32
Maybe217 is a specialized DataType for Maybe2
Requesting specialization of b1359 :: [Bit 32] >>= [Unit]
Requesting specialization of b1365 :: [Maybe2, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1365 :: [Maybe2, Bit 32, Bit 32] >>= [Unit]  ~~>  b1365 :: [Maybe2, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nzdiv :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
Requesting specialization of nz16 :: [NZBit 32]
Requesting specialization of b1359 :: [Bit 32] >>= [Unit]
Requesting specialization of b1251 :: [Bit 32, Ix 32, Bit 32] >>= [Unit]
Block specialize: b1251 :: [Bit 32, Ix 32, Bit 32] >>= [Unit]  ~~>  b1251 :: [Bit 32, Ix 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @2 :: [Ref (Array 32 (Stored (Bit 8)))] ->> [[Ix 32] ->> [Ref (Stored (Bit 8))]]
Requesting specialization of itoaBuf :: Ref (Array 32 (Stored (Bit 8)))
Requesting specialization of set3 :: [Ref (Stored (Bit 8))] ->> [[Bit 8] ->> [[] ->> [Unit]]]
Requesting specialization of nzrem :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
Requesting specialization of nz16 :: [NZBit 32]
Requesting specialization of b1252 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]
Requesting specialization of b1255 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]
Block specialize: b1255 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]  ~~>  b1255 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of wordToByte :: [Bit 32] ->> [Bit 8]
Requesting specialization of b1253 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Ix 32, Bit 32] >>= [Unit]
Block specialize: b1253 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Ix 32, Bit 32] >>= [Unit]  ~~>  b1253 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Ix 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of genLtInc2 :: [Maybe2] ->> [[[Ix 32] ->> [Maybe2]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]]
Requesting specialization of s19 :: [Maybe2]
Requesting specialization of s20 :: [[Ix 32] ->> [Maybe2]]
Requesting specialization of s18 :: [Ix 32]
Requesting specialization of maxBound2 :: Ix 32
Requesting specialization of b1244 :: [Bit 32, Ix 32] >>= [Unit]
Requesting specialization of b1364 :: [Maybe2, Bit 32, Ix 32, Bit 32] >>= [Unit]
Block specialize: b1364 :: [Maybe2, Bit 32, Ix 32, Bit 32] >>= [Unit]  ~~>  b1364 :: [Maybe2, Bit 32, Ix 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nzdiv :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
Requesting specialization of nz16 :: [NZBit 32]
Requesting specialization of b1244 :: [Bit 32, Ix 32] >>= [Unit]
Requesting specialization of b1251 :: [Bit 32, Ix 32, Bit 32] >>= [Unit]
Block specialize: b1244 :: [Bit 32, Ix 32] >>= [Unit]  ~~>  b1244 :: [Bit 32, Ix 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1236 :: [Ix 32, Bit 32] >>= [Unit]
Requesting specialization of b1239 :: [Ix 32] >>= [Unit]
Block specialize: b1239 :: [Ix 32] >>= [Unit]  ~~>  b1239 :: [Ix 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @2 :: [Ref (Array 32 (Stored (Bit 8)))] ->> [[Ix 32] ->> [Ref (Stored (Bit 8))]]
Requesting specialization of itoaBuf :: Ref (Array 32 (Stored (Bit 8)))
Requesting specialization of get3 :: [Ref (Stored (Bit 8))] ->> [[] ->> [Bit 8]]
Requesting specialization of bitsToWord :: [Bit 8] ->> [Bit 32]
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of genLtDec :: [Maybe2] ->> [[[Ix 32] ->> [Maybe2]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]]
Requesting specialization of s19 :: [Maybe2]
Requesting specialization of s20 :: [[Ix 32] ->> [Maybe2]]
Requesting specialization of s18 :: [Ix 32]
Requesting specialization of s15 :: [Ix 32]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b1356 :: [Maybe2] >>= [Unit]
Block specialize: b1356 :: [Maybe2] >>= [Unit]  ~~>  b1356 :: [Maybe2] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1239 :: [Ix 32] >>= [Unit]
External specialize: genLtDec :: [Maybe2] ->> [[[Ix 32] ->> [Maybe2]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]]  ~~>  genLtDec :: [Maybe2] ->> [[[Ix 32] ->> [Maybe2]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]]
External specialize: bitsToWord :: [Bit 8] ->> [Bit 32]  ~~>  bitsToWord :: [Bit 8] ->> [Bit 32]
Block specialize: b1236 :: [Ix 32, Bit 32] >>= [Unit]  ~~>  b1236 :: [Ix 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of genLtInc2 :: [Maybe2] ->> [[[Ix 32] ->> [Maybe2]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]]
Requesting specialization of s19 :: [Maybe2]
Requesting specialization of s20 :: [[Ix 32] ->> [Maybe2]]
Requesting specialization of s18 :: [Ix 32]
Requesting specialization of s15 :: [Ix 32]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b1357 :: [Maybe2, Bit 32] >>= [Unit]
Block specialize: b1357 :: [Maybe2, Bit 32] >>= [Unit]  ~~>  b1357 :: [Maybe2, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b1236 :: [Ix 32, Bit 32] >>= [Unit]
Block specialize: b1252 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]  ~~>  b1252 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of wordToByte :: [Bit 32] ->> [Bit 8]
Requesting specialization of b1253 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Ix 32, Bit 32] >>= [Unit]
External specialize: nzdiv :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]  ~~>  nzdiv :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
Block specialize: b1359 :: [Bit 32] >>= [Unit]  ~~>  b1359 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of genLtInc2 :: [Maybe2] ->> [[[Ix 32] ->> [Maybe2]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]]
Requesting specialization of s19 :: [Maybe2]
Requesting specialization of s20 :: [[Ix 32] ->> [Maybe2]]
Requesting specialization of s18 :: [Ix 32]
Requesting specialization of s15 :: [Ix 32]
Requesting specialization of s15 :: [Ix 32]
Requesting specialization of b1303 :: [] >>= [Unit]
Requesting specialization of b1443 :: [Maybe2, Bit 32] >>= [Unit]
Block specialize: b1443 :: [Maybe2, Bit 32] >>= [Unit]  ~~>  b1443 :: [Maybe2, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b1236 :: [Ix 32, Bit 32] >>= [Unit]
Requesting specialization of b1303 :: [] >>= [Unit]
Block specialize: b1303 :: [] >>= [Unit]  ~~>  b1303 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of @2 :: [Ref (Array 32 (Stored (Bit 8)))] ->> [[Ix 32] ->> [Ref (Stored (Bit 8))]]
Requesting specialization of itoaBuf :: Ref (Array 32 (Stored (Bit 8)))
Requesting specialization of s15 :: [Ix 32]
Requesting specialization of get3 :: [Ref (Stored (Bit 8))] ->> [[] ->> [Bit 8]]
Requesting specialization of bitsToWord :: [Bit 8] ->> [Bit 32]
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of genLtDec :: [Maybe2] ->> [[[Ix 32] ->> [Maybe2]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]]
Requesting specialization of s19 :: [Maybe2]
Requesting specialization of s20 :: [[Ix 32] ->> [Maybe2]]
Requesting specialization of s18 :: [Ix 32]
Requesting specialization of s15 :: [Ix 32]
Requesting specialization of s15 :: [Ix 32]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b1356 :: [Maybe2] >>= [Unit]
External specialize: maxBound2 :: Ix 32  ~~>  maxBound2 :: Ix 32
TopLevel specialize: s18 :: [Ix 32]  ~~>  s18 :: [Ix 32], generics=[], substitution=null
Requesting specialization of ix1u2 :: [Unit] ->> [Ix 32]
Requesting specialization of Unit :: [Unit]
External specialize: ix1u2 :: [Unit] ->> [Ix 32]  ~~>  ix1u2 :: [Unit] ->> [Ix 32]
TopLevel specialize: s20 :: [[Ix 32] ->> [Maybe2]]  ~~>  s20 :: [[Ix 32] ->> [Maybe2]], generics=[], substitution=null
Requesting specialization of k52 :: {} [Ix 32] ->> [Maybe2]
ClosureDefn specialize: k52 :: {} [Ix 32] ->> [Maybe2]  ~~>  k52 :: {} [Ix 32] ->> [Maybe2], generics=[], substitution=null
TopLevel specialize: s19 :: [Maybe2]  ~~>  s19 :: [Maybe2], generics=[], substitution=null
External specialize: genLtInc2 :: [Maybe2] ->> [[[Ix 32] ->> [Maybe2]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]]  ~~>  genLtInc2 :: [Maybe2] ->> [[[Ix 32] ->> [Maybe2]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]]
Block specialize: b1248 :: forall (a :: *). [Word, [Bit 8] ->> [[] ->> [a]], Bit 32, Bit 32] >>= [Unit]  ~~>  b1248 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit], generics=[?12549], substitution=[?12549 --> Unit]
Requesting specialization of wordToByte :: [Bit 32] ->> [Bit 8]
Requesting specialization of b1249 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Bit 32] >>= [Unit]
TopLevel specialize: nz16 :: [NZBit 32]  ~~>  nz16 :: [NZBit 32], generics=[], substitution=null
Requesting specialization of nz16u :: [Unit] ->> [NZBit 32]
Requesting specialization of Unit :: [Unit]
External specialize: nz16u :: [Unit] ->> [NZBit 32]  ~~>  nz16u :: [Unit] ->> [NZBit 32]
External specialize: nzrem :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]  ~~>  nzrem :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
External specialize: set3 :: [Ref (Stored (Bit 8))] ->> [[Bit 8] ->> [[] ->> [Unit]]]  ~~>  set3 :: [Ref (Stored (Bit 8))] ->> [[Bit 8] ->> [[] ->> [Unit]]]
TopLevel specialize: s15 :: [Ix 32]  ~~>  s15 :: [Ix 32], generics=[], substitution=null
Requesting specialization of ix0u2 :: [Unit] ->> [Ix 32]
Requesting specialization of Unit :: [Unit]
External specialize: ix0u2 :: [Unit] ->> [Ix 32]  ~~>  ix0u2 :: [Unit] ->> [Ix 32]
MemArea specialize: itoaBuf :: Ref (Array 32 (Stored (Bit 8)))  ~~>  itoaBuf :: Ref (Array 32 (Stored (Bit 8)))
Requesting specialization of s1 :: [Init (Array 32 (Stored (Bit 8)))]
TopLevel specialize: s1 :: [Init (Array 32 (Stored (Bit 8)))]  ~~>  s1 :: [Init (Array 32 (Stored (Bit 8)))], generics=[], substitution=null
Requesting specialization of initArray :: [[Ix 32] ->> [Init (Stored (Bit 8))]] ->> [Init (Array 32 (Stored (Bit 8)))]
Requesting specialization of s42 :: [[Ix 32] ->> [Init (Stored (Bit 8))]]
TopLevel specialize: s42 :: [[Ix 32] ->> [Init (Stored (Bit 8))]]  ~~>  s42 :: [[Ix 32] ->> [Init (Stored (Bit 8))]], generics=[], substitution=null
Requesting specialization of k126 :: {} [Ix 32] ->> [Init (Stored (Bit 8))]
ClosureDefn specialize: k126 :: {} [Ix 32] ->> [Init (Stored (Bit 8))]  ~~>  k126 :: {} [Ix 32] ->> [Init (Stored (Bit 8))], generics=[], substitution=null
Requesting specialization of initStored :: [Bit 8] ->> [Init (Stored (Bit 8))]
Requesting specialization of bit0 :: [Bit 8]
TopLevel specialize: bit0 :: [Bit 8]  ~~>  bit0 :: [Bit 8], generics=[], substitution=null
Requesting specialization of bit0u :: [Unit] ->> [Bit 8]
Requesting specialization of Unit :: [Unit]
External specialize: bit0u :: [Unit] ->> [Bit 8]  ~~>  bit0u :: [Unit] ->> [Bit 8]
External specialize: initStored :: [Bit 8] ->> [Init (Stored (Bit 8))]  ~~>  initStored :: [Bit 8] ->> [Init (Stored (Bit 8))]
External specialize: initArray :: [[Ix 32] ->> [Init (Stored (Bit 8))]] ->> [Init (Array 32 (Stored (Bit 8)))]  ~~>  initArray :: [[Ix 32] ->> [Init (Stored (Bit 8))]] ->> [Init (Array 32 (Stored (Bit 8)))]
External specialize: @2 :: [Ref (Array 32 (Stored (Bit 8)))] ->> [[Ix 32] ->> [Ref (Stored (Bit 8))]]  ~~>  @2 :: [Ref (Array 32 (Stored (Bit 8)))] ->> [[Ix 32] ->> [Ref (Stored (Bit 8))]]
External specialize: refToWord :: [Ref String] ->> [Bit 32]  ~~>  refToWord :: [Ref String] ->> [Bit 32]
Requesting specialization of refToWord_imp :: [[Bit 32] ->> [Bit 32]]
TopLevel specialize: refToWord_imp :: [[Bit 32] ->> [Bit 32]]  ~~>  refToWord_imp :: [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of ptrToWordImp :: [[Bit 32] ->> [Bit 32]]
TopLevel specialize: ptrToWordImp :: [[Bit 32] ->> [Bit 32]]  ~~>  ptrToWordImp :: [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k44 :: {} [Bit 32] ->> [Bit 32]
ClosureDefn specialize: k44 :: {} [Bit 32] ->> [Bit 32]  ~~>  k44 :: {} [Bit 32] ->> [Bit 32], generics=[], substitution=null
Block specialize: b978 :: [Ref String] >>= [Unit]  ~~>  b978 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1162 :: [Ref String] >>= [Unit]
Requesting specialization of b1163 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1179 :: [Bit 32, Pair9, Ref String] >>= [Unit]  ~~>  b1179 :: [Bit 32, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1180 :: [Word, Pair9, Ref String] >>= [Unit]
Requesting specialization of b1181 :: [Word, Pair9, Ref String] >>= [Unit]
Block specialize: b1181 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1181 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b977 :: [Pair9, Ref String] >>= [Unit]
Block specialize: b977 :: [Pair9, Ref String] >>= [Unit]  ~~>  b977 :: [Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1175 :: [Ref String] >>= [Unit]
Requesting specialization of b1178 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1178 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1178 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1179 :: [Bit 32, Pair9, Ref String] >>= [Unit]
Block specialize: b1175 :: [Ref String] >>= [Unit]  ~~>  b1175 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b978 :: [Ref String] >>= [Unit]
Requesting specialization of b1278 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1180 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1180 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b977 :: [Pair9, Ref String] >>= [Unit]
Block specialize: b1283 :: [Ref String] >>= [Unit]  ~~>  b1283 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1284 :: [Ref String] >>= [Unit]
Requesting specialization of b1442 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1442 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1442 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair9] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1285 :: [Ref String] >>= [Unit]
Requesting specialization of b1441 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1441 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1441 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1295 :: [Word, Pair9, Ref String] >>= [Unit]
Requesting specialization of b1296 :: [Word, Pair9, Ref String] >>= [Unit]
Block specialize: b1296 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1296 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b972 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1168 :: [Ref String] >>= [Unit]
Requesting specialization of b1171 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1295 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1295 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b972 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1168 :: [Ref String] >>= [Unit]
Requesting specialization of b1171 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1285 :: [Ref String] >>= [Unit]  ~~>  b1285 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1286 :: [Ref String] >>= [Unit]
Requesting specialization of b1440 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1440 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1440 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1286 :: [Ref String] >>= [Unit]
Requesting specialization of b1440 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1286 :: [Ref String] >>= [Unit]  ~~>  b1286 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1287 :: [Ref String] >>= [Unit]
Requesting specialization of b1439 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1439 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1439 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1291 :: [Word, Pair9, Ref String] >>= [Unit]
Requesting specialization of b1292 :: [Word, Pair9, Ref String] >>= [Unit]
Block specialize: b1292 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1292 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b970 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1168 :: [Ref String] >>= [Unit]
Requesting specialization of b1171 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1291 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1291 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b970 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1168 :: [Ref String] >>= [Unit]
Requesting specialization of b1171 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1287 :: [Ref String] >>= [Unit]  ~~>  b1287 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of refToWord :: [Ref String] ->> [Bit 32]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1212 :: [] >>= [Unit]
Requesting specialization of b1438 :: [Maybe10] >>= [Unit]
Block specialize: b1438 :: [Maybe10] >>= [Unit]  ~~>  b1438 :: [Maybe10] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair9] >>= [Unit]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1168 :: [Ref String] >>= [Unit]
Requesting specialization of b1171 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1212 :: [] >>= [Unit]  ~~>  b1212 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1168 :: [Ref String] >>= [Unit]
Requesting specialization of b1171 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1284 :: [Ref String] >>= [Unit]  ~~>  b1284 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1285 :: [Ref String] >>= [Unit]
Requesting specialization of b1441 :: [Maybe10, Ref String] >>= [Unit]
External specialize: get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]  ~~>  get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Block specialize: b1122 :: [MimgMMapCursor, Word] >>= [Bit 32]  ~~>  b1122 :: [MimgMMapCursor, Word] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextMimgMMap :: [MimgMMapCursor] ->> [Maybe6]
Maybe618 is a specialized DataType for Maybe6
Pair519 is a specialized DataType for Pair5
making new version of structure type MimgMMap
new version of StructType MimgMMap is MimgMMap
new version of primitive select_start :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
         old version was select_start :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
new version of primitive select_end :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
         old version was select_end :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
Requesting specialization of b436 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1276 :: [Maybe6, Bit 32] >>= [Bit 32]
Block specialize: b1276 :: [Maybe6, Bit 32] >>= [Bit 32]  ~~>  b1276 :: [Maybe6, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1126 :: [Ref MimgMMap, Bit 32, Pair5] >>= [Bit 32]
Requesting specialization of b1275 :: [Maybe10, Ref MimgMMap, Bit 32, Pair5] >>= [Bit 32]
Block specialize: b1275 :: [Maybe10, Ref MimgMMap, Bit 32, Pair5] >>= [Bit 32]  ~~>  b1275 :: [Maybe10, Ref MimgMMap, Bit 32, Pair5] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1149 :: [Bit 32, Pair9, Bit 32, Ref MimgMMap] >>= [Word]
Requesting specialization of b1122 :: [MimgMMapCursor, Word] >>= [Bit 32]
Block specialize: b1149 :: [Bit 32, Pair9, Bit 32, Ref MimgMMap] >>= [Word]  ~~>  b1149 :: [Bit 32, Pair9, Bit 32, Ref MimgMMap] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1150 :: [Word, Pair9, Bit 32, Ref MimgMMap] >>= [Word]
Requesting specialization of b1154 :: [Word, Pair9, Bit 32, Ref MimgMMap] >>= [Word]
Block specialize: b1154 :: [Word, Pair9, Bit 32, Ref MimgMMap] >>= [Word]  ~~>  b1154 :: [Word, Pair9, Bit 32, Ref MimgMMap] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b1151 :: [Pair9, Bit 32, Ref MimgMMap] >>= [Word]
Block specialize: b1151 :: [Pair9, Bit 32, Ref MimgMMap] >>= [Word]  ~~>  b1151 :: [Pair9, Bit 32, Ref MimgMMap] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1128 :: [Ref MimgMMap, Bit 32] >>= [Word]
Requesting specialization of b1270 :: [Maybe10, Ref MimgMMap, Bit 32] >>= [Word]
Block specialize: b1270 :: [Maybe10, Ref MimgMMap, Bit 32] >>= [Word]  ~~>  b1270 :: [Maybe10, Ref MimgMMap, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of b1149 :: [Bit 32, Pair9, Bit 32, Ref MimgMMap] >>= [Word]
Block specialize: b1128 :: [Ref MimgMMap, Bit 32] >>= [Word]  ~~>  b1128 :: [Ref MimgMMap, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1130 :: [Ref MimgMMap, Bit 32] >>= [Word]
Requesting specialization of b1269 :: [Maybe10, Ref MimgMMap, Bit 32] >>= [Word]
Block specialize: b1269 :: [Maybe10, Ref MimgMMap, Bit 32] >>= [Word]  ~~>  b1269 :: [Maybe10, Ref MimgMMap, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1130 :: [Ref MimgMMap, Bit 32] >>= [Word]
Requesting specialization of b1269 :: [Maybe10, Ref MimgMMap, Bit 32] >>= [Word]
Block specialize: b1130 :: [Ref MimgMMap, Bit 32] >>= [Word]  ~~>  b1130 :: [Ref MimgMMap, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1131 :: [Bit 32, Ref MimgMMap] >>= [Word]
Requesting specialization of b1268 :: [Maybe10, Bit 32, Ref MimgMMap] >>= [Word]
Block specialize: b1268 :: [Maybe10, Bit 32, Ref MimgMMap] >>= [Word]  ~~>  b1268 :: [Maybe10, Bit 32, Ref MimgMMap] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1142 :: [Word, Pair9, Ref MimgMMap, Bit 32] >>= [Word]
Requesting specialization of b1144 :: [Word, Pair9, Ref MimgMMap, Bit 32] >>= [Word]
Block specialize: b1144 :: [Word, Pair9, Ref MimgMMap, Bit 32] >>= [Word]  ~~>  b1144 :: [Word, Pair9, Ref MimgMMap, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b1143 :: [Pair9, Ref MimgMMap, Bit 32] >>= [Word]
Block specialize: b1143 :: [Pair9, Ref MimgMMap, Bit 32] >>= [Word]  ~~>  b1143 :: [Pair9, Ref MimgMMap, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1131 :: [Bit 32, Ref MimgMMap] >>= [Word]
Requesting specialization of b1268 :: [Maybe10, Bit 32, Ref MimgMMap] >>= [Word]
Block specialize: b1142 :: [Word, Pair9, Ref MimgMMap, Bit 32] >>= [Word]  ~~>  b1142 :: [Word, Pair9, Ref MimgMMap, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b1143 :: [Pair9, Ref MimgMMap, Bit 32] >>= [Word]
Block specialize: b1131 :: [Bit 32, Ref MimgMMap] >>= [Word]  ~~>  b1131 :: [Bit 32, Ref MimgMMap] >>= [Word], generics=[], substitution=null
Requesting specialization of b1034 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1384 :: [Ref MimgMMap, Word] >>= [Word]
Requesting specialization of b1267 :: [Maybe10, Ref MimgMMap, Word] >>= [Word]
Block specialize: b1267 :: [Maybe10, Ref MimgMMap, Word] >>= [Word]  ~~>  b1267 :: [Maybe10, Ref MimgMMap, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1136 :: [Word, Pair9, Word, Ref MimgMMap] >>= [Word]
Requesting specialization of b1138 :: [Word, Pair9, Word, Ref MimgMMap] >>= [Word]
Block specialize: b1138 :: [Word, Pair9, Word, Ref MimgMMap] >>= [Word]  ~~>  b1138 :: [Word, Pair9, Word, Ref MimgMMap] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b1137 :: [Pair9, Word, Ref MimgMMap] >>= [Word]
Block specialize: b1137 :: [Pair9, Word, Ref MimgMMap] >>= [Word]  ~~>  b1137 :: [Pair9, Word, Ref MimgMMap] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1384 :: [Ref MimgMMap, Word] >>= [Word]
Requesting specialization of b1267 :: [Maybe10, Ref MimgMMap, Word] >>= [Word]
Block specialize: b1136 :: [Word, Pair9, Word, Ref MimgMMap] >>= [Word]  ~~>  b1136 :: [Word, Pair9, Word, Ref MimgMMap] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b1137 :: [Pair9, Word, Ref MimgMMap] >>= [Word]
Block specialize: b1384 :: [Ref MimgMMap, Word] >>= [Word]  ~~>  b1384 :: [Ref MimgMMap, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1385 :: [Ref MimgMMap, Word] >>= [Word]
Requesting specialization of b1449 :: [Maybe10, Ref MimgMMap, Word] >>= [Word]
Block specialize: b1449 :: [Maybe10, Ref MimgMMap, Word] >>= [Word]  ~~>  b1449 :: [Maybe10, Ref MimgMMap, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1393 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word]
Requesting specialization of b1394 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word]
Block specialize: b1394 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word]  ~~>  b1394 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b960 :: [Pair9, Ref MimgMMap] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1099 :: [Maybe10, Word] >>= [Word]
Block specialize: b1099 :: [Maybe10, Word] >>= [Word]  ~~>  b1099 :: [Maybe10, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1101 :: [Word, Pair9, Word] >>= [Word]
Requesting specialization of b1102 :: [Word, Pair9, Word] >>= [Word]
Block specialize: b1102 :: [Word, Pair9, Word] >>= [Word]  ~~>  b1102 :: [Word, Pair9, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b961 :: [Pair9, Word] >>= [Word]
Block specialize: b961 :: [Pair9, Word] >>= [Word]  ~~>  b961 :: [Pair9, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1099 :: [Maybe10, Word] >>= [Word]
Block specialize: b1101 :: [Word, Pair9, Word] >>= [Word]  ~~>  b1101 :: [Word, Pair9, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b961 :: [Pair9, Word] >>= [Word]
Block specialize: b792 :: [Word] >>= [Word]  ~~>  b792 :: [Word] >>= [Word], generics=[], substitution=null
Block specialize: b960 :: [Pair9, Ref MimgMMap] >>= [Unit]  ~~>  b960 :: [Pair9, Ref MimgMMap] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b802 :: [Ref MimgMMap] >>= [Unit]
Requesting specialization of b1095 :: [Maybe10, Ref MimgMMap] >>= [Unit]
Block specialize: b1095 :: [Maybe10, Ref MimgMMap] >>= [Unit]  ~~>  b1095 :: [Maybe10, Ref MimgMMap] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1097 :: [Bit 32, Pair9, Ref MimgMMap] >>= [Unit]
Requesting specialization of b1098 :: [Word, Pair9, Ref MimgMMap] >>= [Unit]
Block specialize: b1098 :: [Word, Pair9, Ref MimgMMap] >>= [Unit]  ~~>  b1098 :: [Word, Pair9, Ref MimgMMap] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b960 :: [Pair9, Ref MimgMMap] >>= [Unit]
Block specialize: b1097 :: [Bit 32, Pair9, Ref MimgMMap] >>= [Unit]  ~~>  b1097 :: [Bit 32, Pair9, Ref MimgMMap] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b960 :: [Pair9, Ref MimgMMap] >>= [Unit]
Block specialize: b802 :: [Ref MimgMMap] >>= [Unit]  ~~>  b802 :: [Ref MimgMMap] >>= [Unit], generics=[], substitution=null
specialized version of primitive select_start :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
            original version was select_start :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
Requesting specialization of get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b800 :: [Ref MimgMMap] >>= [Unit]
Requesting specialization of b1091 :: [Maybe10, Ref MimgMMap] >>= [Unit]
Block specialize: b1091 :: [Maybe10, Ref MimgMMap] >>= [Unit]  ~~>  b1091 :: [Maybe10, Ref MimgMMap] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1093 :: [Bit 32, Pair9, Ref MimgMMap] >>= [Unit]
Requesting specialization of b1094 :: [Word, Pair9, Ref MimgMMap] >>= [Unit]
Block specialize: b1094 :: [Word, Pair9, Ref MimgMMap] >>= [Unit]  ~~>  b1094 :: [Word, Pair9, Ref MimgMMap] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b959 :: [Pair9, Ref MimgMMap] >>= [Unit]
Block specialize: b959 :: [Pair9, Ref MimgMMap] >>= [Unit]  ~~>  b959 :: [Pair9, Ref MimgMMap] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b800 :: [Ref MimgMMap] >>= [Unit]
Requesting specialization of b1091 :: [Maybe10, Ref MimgMMap] >>= [Unit]
Block specialize: b1093 :: [Bit 32, Pair9, Ref MimgMMap] >>= [Unit]  ~~>  b1093 :: [Bit 32, Pair9, Ref MimgMMap] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b959 :: [Pair9, Ref MimgMMap] >>= [Unit]
Block specialize: b800 :: [Ref MimgMMap] >>= [Unit]  ~~>  b800 :: [Ref MimgMMap] >>= [Unit], generics=[], substitution=null
specialized version of primitive select_end :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
            original version was select_end :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
Requesting specialization of get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
External specialize: get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]  ~~>  get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Block specialize: b1393 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word]  ~~>  b1393 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b960 :: [Pair9, Ref MimgMMap] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1099 :: [Maybe10, Word] >>= [Word]
Block specialize: b1385 :: [Ref MimgMMap, Word] >>= [Word]  ~~>  b1385 :: [Ref MimgMMap, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1386 :: [Ref MimgMMap, Word] >>= [Word]
Requesting specialization of b1448 :: [Maybe10, Ref MimgMMap, Word] >>= [Word]
Block specialize: b1448 :: [Maybe10, Ref MimgMMap, Word] >>= [Word]  ~~>  b1448 :: [Maybe10, Ref MimgMMap, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1390 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word]
Requesting specialization of b1391 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word]
Block specialize: b1391 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word]  ~~>  b1391 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b959 :: [Pair9, Ref MimgMMap] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1099 :: [Maybe10, Word] >>= [Word]
Block specialize: b1390 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word]  ~~>  b1390 :: [Word, Pair9, Ref MimgMMap, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b959 :: [Pair9, Ref MimgMMap] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1099 :: [Maybe10, Word] >>= [Word]
Block specialize: b1386 :: [Ref MimgMMap, Word] >>= [Word]  ~~>  b1386 :: [Ref MimgMMap, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1321 :: [Word] >>= [Word]
Requesting specialization of b1447 :: [Maybe10, Word] >>= [Word]
Block specialize: b1447 :: [Maybe10, Word] >>= [Word]  ~~>  b1447 :: [Maybe10, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair9] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1099 :: [Maybe10, Word] >>= [Word]
Block specialize: b1321 :: [Word] >>= [Word]  ~~>  b1321 :: [Word] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1099 :: [Maybe10, Word] >>= [Word]
Block specialize: b1034 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b1034 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @2 :: [Ref (Array 32 (Stored (Bit 8)))] ->> [[Ix 32] ->> [Ref (Stored (Bit 8))]]
Requesting specialization of itoaBuf :: Ref (Array 32 (Stored (Bit 8)))
Requesting specialization of s15 :: [Ix 32]
Requesting specialization of set3 :: [Ref (Stored (Bit 8))] ->> [[Bit 8] ->> [[] ->> [Unit]]]
Requesting specialization of nzrem :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
Requesting specialization of nz10 :: [NZBit 32]
Requesting specialization of b1231 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1247 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Block specialize: b1247 :: forall (a :: *). [Word, [Bit 8] ->> [[] ->> [a]], Bit 32, Bit 32] >>= [Unit]  ~~>  b1247 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit], generics=[?12407], substitution=[?12407 --> Unit]
Requesting specialization of wordToByte :: [Bit 32] ->> [Bit 8]
Requesting specialization of b1232 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1232 :: forall (a :: *) (b :: *). [[a] ->> [[] ->> [b]], a, Bit 32, Bit 32] >>= [Unit]  ~~>  b1232 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Bit 32] >>= [Unit], generics=[?12379, ?12386], substitution=[?12379 --> Bit 8, ?12386 --> Unit]
Requesting specialization of genLtInc2 :: [Maybe2] ->> [[[Ix 32] ->> [Maybe2]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]]
Requesting specialization of s19 :: [Maybe2]
Requesting specialization of s20 :: [[Ix 32] ->> [Maybe2]]
Requesting specialization of s18 :: [Ix 32]
Requesting specialization of s15 :: [Ix 32]
Requesting specialization of maxBound2 :: Ix 32
Requesting specialization of b1359 :: [Bit 32] >>= [Unit]
Requesting specialization of b1363 :: [Maybe2, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1363 :: [Maybe2, Bit 32, Bit 32] >>= [Unit]  ~~>  b1363 :: [Maybe2, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nzdiv :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
Requesting specialization of nz10 :: [NZBit 32]
Requesting specialization of b1359 :: [Bit 32] >>= [Unit]
Requesting specialization of b1241 :: [Bit 32, Ix 32, Bit 32] >>= [Unit]
Block specialize: b1241 :: [Bit 32, Ix 32, Bit 32] >>= [Unit]  ~~>  b1241 :: [Bit 32, Ix 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @2 :: [Ref (Array 32 (Stored (Bit 8)))] ->> [[Ix 32] ->> [Ref (Stored (Bit 8))]]
Requesting specialization of itoaBuf :: Ref (Array 32 (Stored (Bit 8)))
Requesting specialization of set3 :: [Ref (Stored (Bit 8))] ->> [[Bit 8] ->> [[] ->> [Unit]]]
Requesting specialization of nzrem :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
Requesting specialization of nz10 :: [NZBit 32]
Requesting specialization of b1242 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]
Requesting specialization of b1246 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]
Block specialize: b1246 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]  ~~>  b1246 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of wordToByte :: [Bit 32] ->> [Bit 8]
Requesting specialization of b1243 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Ix 32, Bit 32] >>= [Unit]
Block specialize: b1243 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Ix 32, Bit 32] >>= [Unit]  ~~>  b1243 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Ix 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of genLtInc2 :: [Maybe2] ->> [[[Ix 32] ->> [Maybe2]] ->> [[Ix 32] ->> [[Ix 32] ->> [[Ix 32] ->> [Maybe2]]]]]
Requesting specialization of s19 :: [Maybe2]
Requesting specialization of s20 :: [[Ix 32] ->> [Maybe2]]
Requesting specialization of s18 :: [Ix 32]
Requesting specialization of maxBound2 :: Ix 32
Requesting specialization of b1244 :: [Bit 32, Ix 32] >>= [Unit]
Requesting specialization of b1362 :: [Maybe2, Bit 32, Ix 32, Bit 32] >>= [Unit]
Block specialize: b1362 :: [Maybe2, Bit 32, Ix 32, Bit 32] >>= [Unit]  ~~>  b1362 :: [Maybe2, Bit 32, Ix 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nzdiv :: [Bit 32] ->> [[NZBit 32] ->> [Bit 32]]
Requesting specialization of nz10 :: [NZBit 32]
Requesting specialization of b1244 :: [Bit 32, Ix 32] >>= [Unit]
Requesting specialization of b1241 :: [Bit 32, Ix 32, Bit 32] >>= [Unit]
Block specialize: b1242 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]  ~~>  b1242 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of wordToByte :: [Bit 32] ->> [Bit 8]
Requesting specialization of b1243 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Ix 32, Bit 32] >>= [Unit]
Block specialize: b1231 :: forall (a :: *). [Word, [Bit 8] ->> [[] ->> [a]], Bit 32, Bit 32] >>= [Unit]  ~~>  b1231 :: [Word, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit], generics=[?12417], substitution=[?12417 --> Unit]
Requesting specialization of wordToByte :: [Bit 32] ->> [Bit 8]
Requesting specialization of b1232 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Bit 32] >>= [Unit]
TopLevel specialize: nz10 :: [NZBit 32]  ~~>  nz10 :: [NZBit 32], generics=[], substitution=null
Requesting specialization of nz10u :: [Unit] ->> [NZBit 32]
Requesting specialization of Unit :: [Unit]
External specialize: nz10u :: [Unit] ->> [NZBit 32]  ~~>  nz10u :: [Unit] ->> [NZBit 32]
Block specialize: b1150 :: [Word, Pair9, Bit 32, Ref MimgMMap] >>= [Word]  ~~>  b1150 :: [Word, Pair9, Bit 32, Ref MimgMMap] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b1151 :: [Pair9, Bit 32, Ref MimgMMap] >>= [Word]
Block specialize: b1126 :: [Ref MimgMMap, Bit 32, Pair5] >>= [Bit 32]  ~~>  b1126 :: [Ref MimgMMap, Bit 32, Pair5] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1128 :: [Ref MimgMMap, Bit 32] >>= [Word]
Requesting specialization of b1122 :: [MimgMMapCursor, Word] >>= [Bit 32]
Block specialize: b436 :: [Bit 32] >>= [Bit 32]  ~~>  b436 :: [Bit 32] >>= [Bit 32], generics=[], substitution=null
External specialize: nextMimgMMap :: [MimgMMapCursor] ->> [Maybe6]  ~~>  nextMimgMMap :: [MimgMMapCursor] ->> [Maybe6]
Requesting specialization of nextMimgMMap_imp :: [[WordCursor] ->> [Maybe4]]
TopLevel specialize: nextMimgMMap_imp :: [[WordCursor] ->> [Maybe4]]  ~~>  nextMimgMMap_imp :: [[WordCursor] ->> [Maybe4]], generics=[], substitution=null
Requesting specialization of k231 :: {Bit 32} [WordCursor] ->> [Maybe4]
ClosureDefn specialize: k231 :: {Bit 32} [WordCursor] ->> [Maybe4]  ~~>  k231 :: {Bit 32} [WordCursor] ->> [Maybe4], generics=[], substitution=null
Requesting specialization of b493 :: [WordCursor, Bit 32] >>= [Maybe4]
Block specialize: b493 :: [WordCursor, Bit 32] >>= [Maybe4]  ~~>  b493 :: [WordCursor, Bit 32] >>= [Maybe4], generics=[], substitution=null
new version of BitdataType WordCursor is WordCursor
    orig: WordCursor :: {WordCursor.WordCursor} WordCursor
    new:  WordCursor :: {WordCursor.WordCursor} WordCursor
new version of primitive update_val :: [WordCursor.WordCursor, Bit 32] >>= [WordCursor.WordCursor]
         old version was update_val :: [WordCursor.WordCursor, Bit 32] >>= [WordCursor.WordCursor]
new version of primitive update_count :: [WordCursor.WordCursor, Bit 32] >>= [WordCursor.WordCursor]
         old version was update_count :: [WordCursor.WordCursor, Bit 32] >>= [WordCursor.WordCursor]
Requesting specialization of b492 :: [] >>= [Maybe4]
Requesting specialization of b491 :: [WordCursor, Bit 32, Bit 32] >>= [Maybe4]
Block specialize: b491 :: [WordCursor, Bit 32, Bit 32] >>= [Maybe4]  ~~>  b491 :: [WordCursor, Bit 32, Bit 32] >>= [Maybe4], generics=[], substitution=null
Pair320 is a specialized DataType for Pair3
Maybe421 is a specialized DataType for Maybe4
Block specialize: b492 :: [] >>= [Maybe4]  ~~>  b492 :: [] >>= [Maybe4], generics=[], substitution=null
Requesting specialization of s23 :: [Maybe4]
TopLevel specialize: s23 :: [Maybe4]  ~~>  s23 :: [Maybe4], generics=[], substitution=null
External specialize: mimgMMapCursor :: [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]  ~~>  mimgMMapCursor :: [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]
Requesting specialization of wordCursor :: [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
TopLevel specialize: wordCursor :: [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]  ~~>  wordCursor :: [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]], generics=[], substitution=null
Requesting specialization of k229 :: {} [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]
ClosureDefn specialize: k229 :: {} [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]  ~~>  k229 :: {} [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]], generics=[], substitution=null
Requesting specialization of k228 :: {Ref (Stored (Bit 32))} [] ->> [WordCursor]
ClosureDefn specialize: k228 :: {Ref (Stored (Bit 32))} [] ->> [WordCursor]  ~~>  k228 :: {Ref (Stored (Bit 32))} [] ->> [WordCursor], generics=[], substitution=null
Requesting specialization of b485 :: [Ref (Stored (Bit 32))] >>= [WordCursor]
Block specialize: b485 :: [Ref (Stored (Bit 32))] >>= [WordCursor]  ~~>  b485 :: [Ref (Stored (Bit 32))] >>= [WordCursor], generics=[], substitution=null
Requesting specialization of get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Requesting specialization of refToWord1 :: [Ref (Stored (Bit 32))] ->> [Bit 32]
External specialize: refToWord1 :: [Ref (Stored (Bit 32))] ->> [Bit 32]  ~~>  refToWord1 :: [Ref (Stored (Bit 32))] ->> [Bit 32]
Requesting specialization of refToWord_imp :: [[Bit 32] ->> [Bit 32]]
External specialize: get6 :: [Ref (Stored (Ref MimgMMapBlock))] ->> [[] ->> [Ref MimgMMapBlock]]  ~~>  get6 :: [Ref (Stored (Ref MimgMMapBlock))] ->> [[] ->> [Ref MimgMMapBlock]]
Block specialize: b1058 :: [MimgHeaderCursor, Word] >>= [Bit 32]  ~~>  b1058 :: [MimgHeaderCursor, Word] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextMimgHeader :: [MimgHeaderCursor] ->> [Maybe8]
Maybe822 is a specialized DataType for Maybe8
Pair723 is a specialized DataType for Pair7
making new version of structure type MimgHeader
new version of StructType MimgHeader is MimgHeader
new version of primitive select_start :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
         old version was select_start :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
new version of primitive select_end :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
         old version was select_end :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
new version of primitive select_entry :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
         old version was select_entry :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
Requesting specialization of b436 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1266 :: [Maybe8, Bit 32] >>= [Bit 32]
Block specialize: b1266 :: [Maybe8, Bit 32] >>= [Bit 32]  ~~>  b1266 :: [Maybe8, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1062 :: [Ref MimgHeader, Bit 32, Pair7] >>= [Bit 32]
Requesting specialization of b1265 :: [Maybe10, Ref MimgHeader, Bit 32, Pair7] >>= [Bit 32]
Block specialize: b1265 :: [Maybe10, Ref MimgHeader, Bit 32, Pair7] >>= [Bit 32]  ~~>  b1265 :: [Maybe10, Ref MimgHeader, Bit 32, Pair7] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1085 :: [Bit 32, Pair9, Bit 32, Ref MimgHeader] >>= [Word]
Requesting specialization of b1058 :: [MimgHeaderCursor, Word] >>= [Bit 32]
Block specialize: b1085 :: [Bit 32, Pair9, Bit 32, Ref MimgHeader] >>= [Word]  ~~>  b1085 :: [Bit 32, Pair9, Bit 32, Ref MimgHeader] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1086 :: [Word, Pair9, Bit 32, Ref MimgHeader] >>= [Word]
Requesting specialization of b1090 :: [Word, Pair9, Bit 32, Ref MimgHeader] >>= [Word]
Block specialize: b1090 :: [Word, Pair9, Bit 32, Ref MimgHeader] >>= [Word]  ~~>  b1090 :: [Word, Pair9, Bit 32, Ref MimgHeader] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b1087 :: [Pair9, Bit 32, Ref MimgHeader] >>= [Word]
Block specialize: b1087 :: [Pair9, Bit 32, Ref MimgHeader] >>= [Word]  ~~>  b1087 :: [Pair9, Bit 32, Ref MimgHeader] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1064 :: [Ref MimgHeader, Bit 32] >>= [Word]
Requesting specialization of b1260 :: [Maybe10, Ref MimgHeader, Bit 32] >>= [Word]
Block specialize: b1260 :: [Maybe10, Ref MimgHeader, Bit 32] >>= [Word]  ~~>  b1260 :: [Maybe10, Ref MimgHeader, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of b1085 :: [Bit 32, Pair9, Bit 32, Ref MimgHeader] >>= [Word]
Block specialize: b1064 :: [Ref MimgHeader, Bit 32] >>= [Word]  ~~>  b1064 :: [Ref MimgHeader, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1066 :: [Ref MimgHeader, Bit 32] >>= [Word]
Requesting specialization of b1259 :: [Maybe10, Ref MimgHeader, Bit 32] >>= [Word]
Block specialize: b1259 :: [Maybe10, Ref MimgHeader, Bit 32] >>= [Word]  ~~>  b1259 :: [Maybe10, Ref MimgHeader, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1066 :: [Ref MimgHeader, Bit 32] >>= [Word]
Requesting specialization of b1259 :: [Maybe10, Ref MimgHeader, Bit 32] >>= [Word]
Block specialize: b1066 :: [Ref MimgHeader, Bit 32] >>= [Word]  ~~>  b1066 :: [Ref MimgHeader, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1067 :: [Bit 32, Ref MimgHeader] >>= [Word]
Requesting specialization of b1258 :: [Maybe10, Bit 32, Ref MimgHeader] >>= [Word]
Block specialize: b1258 :: [Maybe10, Bit 32, Ref MimgHeader] >>= [Word]  ~~>  b1258 :: [Maybe10, Bit 32, Ref MimgHeader] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1078 :: [Word, Pair9, Ref MimgHeader, Bit 32] >>= [Word]
Requesting specialization of b1080 :: [Word, Pair9, Ref MimgHeader, Bit 32] >>= [Word]
Block specialize: b1080 :: [Word, Pair9, Ref MimgHeader, Bit 32] >>= [Word]  ~~>  b1080 :: [Word, Pair9, Ref MimgHeader, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b1079 :: [Pair9, Ref MimgHeader, Bit 32] >>= [Word]
Block specialize: b1079 :: [Pair9, Ref MimgHeader, Bit 32] >>= [Word]  ~~>  b1079 :: [Pair9, Ref MimgHeader, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1067 :: [Bit 32, Ref MimgHeader] >>= [Word]
Requesting specialization of b1258 :: [Maybe10, Bit 32, Ref MimgHeader] >>= [Word]
Block specialize: b1078 :: [Word, Pair9, Ref MimgHeader, Bit 32] >>= [Word]  ~~>  b1078 :: [Word, Pair9, Ref MimgHeader, Bit 32] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b1079 :: [Pair9, Ref MimgHeader, Bit 32] >>= [Word]
Block specialize: b1067 :: [Bit 32, Ref MimgHeader] >>= [Word]  ~~>  b1067 :: [Bit 32, Ref MimgHeader] >>= [Word], generics=[], substitution=null
Requesting specialization of b1034 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1369 :: [Ref MimgHeader, Word] >>= [Word]
Requesting specialization of b1257 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]
Block specialize: b1257 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]  ~~>  b1257 :: [Maybe10, Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1072 :: [Word, Pair9, Word, Ref MimgHeader] >>= [Word]
Requesting specialization of b1074 :: [Word, Pair9, Word, Ref MimgHeader] >>= [Word]
Block specialize: b1074 :: [Word, Pair9, Word, Ref MimgHeader] >>= [Word]  ~~>  b1074 :: [Word, Pair9, Word, Ref MimgHeader] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b1073 :: [Pair9, Word, Ref MimgHeader] >>= [Word]
Block specialize: b1073 :: [Pair9, Word, Ref MimgHeader] >>= [Word]  ~~>  b1073 :: [Pair9, Word, Ref MimgHeader] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1369 :: [Ref MimgHeader, Word] >>= [Word]
Requesting specialization of b1257 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]
Block specialize: b1072 :: [Word, Pair9, Word, Ref MimgHeader] >>= [Word]  ~~>  b1072 :: [Word, Pair9, Word, Ref MimgHeader] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b1073 :: [Pair9, Word, Ref MimgHeader] >>= [Word]
Block specialize: b1369 :: [Ref MimgHeader, Word] >>= [Word]  ~~>  b1369 :: [Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1370 :: [Ref MimgHeader, Word] >>= [Word]
Requesting specialization of b1446 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]
Block specialize: b1446 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]  ~~>  b1446 :: [Maybe10, Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1380 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]
Requesting specialization of b1381 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]
Block specialize: b1381 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]  ~~>  b1381 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b946 :: [Pair9, Ref MimgHeader] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1035 :: [Maybe10, Word] >>= [Word]
Block specialize: b1035 :: [Maybe10, Word] >>= [Word]  ~~>  b1035 :: [Maybe10, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1037 :: [Word, Pair9, Word] >>= [Word]
Requesting specialization of b1038 :: [Word, Pair9, Word] >>= [Word]
Block specialize: b1038 :: [Word, Pair9, Word] >>= [Word]  ~~>  b1038 :: [Word, Pair9, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b949 :: [Pair9, Word] >>= [Word]
Block specialize: b949 :: [Pair9, Word] >>= [Word]  ~~>  b949 :: [Pair9, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1035 :: [Maybe10, Word] >>= [Word]
Block specialize: b1037 :: [Word, Pair9, Word] >>= [Word]  ~~>  b1037 :: [Word, Pair9, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b949 :: [Pair9, Word] >>= [Word]
Block specialize: b946 :: [Pair9, Ref MimgHeader] >>= [Unit]  ~~>  b946 :: [Pair9, Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b790 :: [Ref MimgHeader] >>= [Unit]
Requesting specialization of b1030 :: [Maybe10, Ref MimgHeader] >>= [Unit]
Block specialize: b1030 :: [Maybe10, Ref MimgHeader] >>= [Unit]  ~~>  b1030 :: [Maybe10, Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1032 :: [Bit 32, Pair9, Ref MimgHeader] >>= [Unit]
Requesting specialization of b1033 :: [Word, Pair9, Ref MimgHeader] >>= [Unit]
Block specialize: b1033 :: [Word, Pair9, Ref MimgHeader] >>= [Unit]  ~~>  b1033 :: [Word, Pair9, Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b946 :: [Pair9, Ref MimgHeader] >>= [Unit]
Block specialize: b1032 :: [Bit 32, Pair9, Ref MimgHeader] >>= [Unit]  ~~>  b1032 :: [Bit 32, Pair9, Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b946 :: [Pair9, Ref MimgHeader] >>= [Unit]
Block specialize: b790 :: [Ref MimgHeader] >>= [Unit]  ~~>  b790 :: [Ref MimgHeader] >>= [Unit], generics=[], substitution=null
specialized version of primitive select_start :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
            original version was select_start :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
Requesting specialization of get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b788 :: [Ref MimgHeader] >>= [Unit]
Requesting specialization of b1026 :: [Maybe10, Ref MimgHeader] >>= [Unit]
Block specialize: b1026 :: [Maybe10, Ref MimgHeader] >>= [Unit]  ~~>  b1026 :: [Maybe10, Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1028 :: [Bit 32, Pair9, Ref MimgHeader] >>= [Unit]
Requesting specialization of b1029 :: [Word, Pair9, Ref MimgHeader] >>= [Unit]
Block specialize: b1029 :: [Word, Pair9, Ref MimgHeader] >>= [Unit]  ~~>  b1029 :: [Word, Pair9, Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b945 :: [Pair9, Ref MimgHeader] >>= [Unit]
Block specialize: b945 :: [Pair9, Ref MimgHeader] >>= [Unit]  ~~>  b945 :: [Pair9, Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b788 :: [Ref MimgHeader] >>= [Unit]
Requesting specialization of b1026 :: [Maybe10, Ref MimgHeader] >>= [Unit]
Block specialize: b1028 :: [Bit 32, Pair9, Ref MimgHeader] >>= [Unit]  ~~>  b1028 :: [Bit 32, Pair9, Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b945 :: [Pair9, Ref MimgHeader] >>= [Unit]
Block specialize: b788 :: [Ref MimgHeader] >>= [Unit]  ~~>  b788 :: [Ref MimgHeader] >>= [Unit], generics=[], substitution=null
specialized version of primitive select_end :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
            original version was select_end :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
Requesting specialization of get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b784 :: [Ref MimgHeader] >>= [Unit]
Requesting specialization of b1022 :: [Maybe10, Ref MimgHeader] >>= [Unit]
Block specialize: b1022 :: [Maybe10, Ref MimgHeader] >>= [Unit]  ~~>  b1022 :: [Maybe10, Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1024 :: [Bit 32, Pair9, Ref MimgHeader] >>= [Unit]
Requesting specialization of b1025 :: [Word, Pair9, Ref MimgHeader] >>= [Unit]
Block specialize: b1025 :: [Word, Pair9, Ref MimgHeader] >>= [Unit]  ~~>  b1025 :: [Word, Pair9, Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b941 :: [Pair9, Ref MimgHeader] >>= [Unit]
Block specialize: b941 :: [Pair9, Ref MimgHeader] >>= [Unit]  ~~>  b941 :: [Pair9, Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b784 :: [Ref MimgHeader] >>= [Unit]
Requesting specialization of b1022 :: [Maybe10, Ref MimgHeader] >>= [Unit]
Block specialize: b1024 :: [Bit 32, Pair9, Ref MimgHeader] >>= [Unit]  ~~>  b1024 :: [Bit 32, Pair9, Ref MimgHeader] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b941 :: [Pair9, Ref MimgHeader] >>= [Unit]
Block specialize: b784 :: [Ref MimgHeader] >>= [Unit]  ~~>  b784 :: [Ref MimgHeader] >>= [Unit], generics=[], substitution=null
specialized version of primitive select_entry :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
            original version was select_entry :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
Requesting specialization of get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Block specialize: b1380 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]  ~~>  b1380 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b946 :: [Pair9, Ref MimgHeader] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1035 :: [Maybe10, Word] >>= [Word]
Block specialize: b1370 :: [Ref MimgHeader, Word] >>= [Word]  ~~>  b1370 :: [Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1371 :: [Ref MimgHeader, Word] >>= [Word]
Requesting specialization of b1445 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]
Block specialize: b1445 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]  ~~>  b1445 :: [Maybe10, Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1377 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]
Requesting specialization of b1378 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]
Block specialize: b1378 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]  ~~>  b1378 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b945 :: [Pair9, Ref MimgHeader] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1035 :: [Maybe10, Word] >>= [Word]
Block specialize: b1377 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]  ~~>  b1377 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b945 :: [Pair9, Ref MimgHeader] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1035 :: [Maybe10, Word] >>= [Word]
Block specialize: b1371 :: [Ref MimgHeader, Word] >>= [Word]  ~~>  b1371 :: [Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1372 :: [Ref MimgHeader, Word] >>= [Word]
Requesting specialization of b1444 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]
Block specialize: b1444 :: [Maybe10, Ref MimgHeader, Word] >>= [Word]  ~~>  b1444 :: [Maybe10, Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1374 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]
Requesting specialization of b1375 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]
Block specialize: b1375 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]  ~~>  b1375 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b941 :: [Pair9, Ref MimgHeader] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1035 :: [Maybe10, Word] >>= [Word]
Block specialize: b1374 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word]  ~~>  b1374 :: [Word, Pair9, Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b941 :: [Pair9, Ref MimgHeader] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1035 :: [Maybe10, Word] >>= [Word]
Block specialize: b1372 :: [Ref MimgHeader, Word] >>= [Word]  ~~>  b1372 :: [Ref MimgHeader, Word] >>= [Word], generics=[], substitution=null
Requesting specialization of get5 :: [Ref (Stored (Bit 32))] ->> [[] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b792 :: [Word] >>= [Word]
Requesting specialization of b1035 :: [Maybe10, Word] >>= [Word]
Block specialize: b1086 :: [Word, Pair9, Bit 32, Ref MimgHeader] >>= [Word]  ~~>  b1086 :: [Word, Pair9, Bit 32, Ref MimgHeader] >>= [Word], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b1087 :: [Pair9, Bit 32, Ref MimgHeader] >>= [Word]
Block specialize: b1062 :: [Ref MimgHeader, Bit 32, Pair7] >>= [Bit 32]  ~~>  b1062 :: [Ref MimgHeader, Bit 32, Pair7] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1064 :: [Ref MimgHeader, Bit 32] >>= [Word]
Requesting specialization of b1058 :: [MimgHeaderCursor, Word] >>= [Bit 32]
External specialize: nextMimgHeader :: [MimgHeaderCursor] ->> [Maybe8]  ~~>  nextMimgHeader :: [MimgHeaderCursor] ->> [Maybe8]
Requesting specialization of nextMimgHeader_imp :: [[WordCursor] ->> [Maybe4]]
TopLevel specialize: nextMimgHeader_imp :: [[WordCursor] ->> [Maybe4]]  ~~>  nextMimgHeader_imp :: [[WordCursor] ->> [Maybe4]], generics=[], substitution=null
Requesting specialization of k231 :: {Bit 32} [WordCursor] ->> [Maybe4]
External specialize: mimgHeaderCursor :: [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]  ~~>  mimgHeaderCursor :: [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]
Requesting specialization of wordCursor :: [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
External specialize: get7 :: [Ref (Stored (Ref MimgHeaderBlock))] ->> [[] ->> [Ref MimgHeaderBlock]]  ~~>  get7 :: [Ref (Stored (Ref MimgHeaderBlock))] ->> [[] ->> [Ref MimgHeaderBlock]]
External specialize: bootdata :: Ref MimgBootData  ~~>  bootdata :: Ref MimgBootData
Block specialize: b1198 :: [Word, Pair9] >>= [Unit]  ~~>  b1198 :: [Word, Pair9] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b987 :: [Pair9] >>= [Unit]
Block specialize: b1202 :: [] >>= [Unit]  ~~>  b1202 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get7 :: [Ref (Stored (Ref MimgHeaderBlock))] ->> [[] ->> [Ref MimgHeaderBlock]]
Requesting specialization of mimgHeaderCursor :: [Ref MimgHeaderBlock] ->> [[] ->> [MimgHeaderCursor]]
Requesting specialization of b1058 :: [MimgHeaderCursor, Word] >>= [Bit 32]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1203 :: [] >>= [Unit]
Requesting specialization of b1301 :: [Maybe10] >>= [Unit]
Block specialize: b1301 :: [Maybe10] >>= [Unit]  ~~>  b1301 :: [Maybe10] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1192 :: [Bit 32, Pair9] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b1203 :: [] >>= [Unit]  ~~>  b1203 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get6 :: [Ref (Stored (Ref MimgMMapBlock))] ->> [[] ->> [Ref MimgMMapBlock]]
Requesting specialization of mimgMMapCursor :: [Ref MimgMMapBlock] ->> [[] ->> [MimgMMapCursor]]
Requesting specialization of b1122 :: [MimgMMapCursor, Word] >>= [Bit 32]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1204 :: [] >>= [Unit]
Requesting specialization of b1300 :: [Maybe10] >>= [Unit]
Block specialize: b1300 :: [Maybe10] >>= [Unit]  ~~>  b1300 :: [Maybe10] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1187 :: [Bit 32, Pair9] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b1204 :: [] >>= [Unit]  ~~>  b1204 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1404 :: [Ref String] >>= [Unit]
Requesting specialization of b1461 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1461 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1461 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1179 :: [Bit 32, Pair9, Ref String] >>= [Unit]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1410 :: [Ref String] >>= [Unit]
Requesting specialization of b1455 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1455 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1455 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1426 :: [Word, Pair9, Ref String] >>= [Unit]
Requesting specialization of b1427 :: [Word, Pair9, Ref String] >>= [Unit]
Block specialize: b1427 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1427 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b980 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b1426 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1426 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b980 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b1410 :: [Ref String] >>= [Unit]  ~~>  b1410 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1411 :: [Ref String] >>= [Unit]
Requesting specialization of b1454 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1454 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1454 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair9] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1412 :: [Ref String] >>= [Unit]
Requesting specialization of b1453 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1453 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1453 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1422 :: [Word, Pair9, Ref String] >>= [Unit]
Requesting specialization of b1423 :: [Word, Pair9, Ref String] >>= [Unit]
Block specialize: b1423 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1423 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b972 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b1422 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1422 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b972 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b1412 :: [Ref String] >>= [Unit]  ~~>  b1412 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1413 :: [Ref String] >>= [Unit]
Requesting specialization of b1452 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1452 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1452 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1413 :: [Ref String] >>= [Unit]
Requesting specialization of b1452 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1413 :: [Ref String] >>= [Unit]  ~~>  b1413 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1414 :: [Ref String] >>= [Unit]
Requesting specialization of b1451 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1451 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1451 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1418 :: [Word, Pair9, Ref String] >>= [Unit]
Requesting specialization of b1419 :: [Word, Pair9, Ref String] >>= [Unit]
Block specialize: b1419 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1419 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b970 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b1418 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1418 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b970 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b1414 :: [Ref String] >>= [Unit]  ~~>  b1414 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of refToWord :: [Ref String] ->> [Bit 32]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1331 :: [] >>= [Unit]
Requesting specialization of b1450 :: [Maybe10] >>= [Unit]
Block specialize: b1450 :: [Maybe10] >>= [Unit]  ~~>  b1450 :: [Maybe10] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair9] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b1331 :: [] >>= [Unit]  ~~>  b1331 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe10] >>= [Unit]
Block specialize: b1411 :: [Ref String] >>= [Unit]  ~~>  b1411 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1412 :: [Ref String] >>= [Unit]
Requesting specialization of b1453 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1404 :: [Ref String] >>= [Unit]  ~~>  b1404 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1405 :: [Ref String] >>= [Unit]
Requesting specialization of b1460 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1460 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1460 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair9] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1406 :: [Ref String] >>= [Unit]
Requesting specialization of b1459 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1459 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1459 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1434 :: [Word, Pair9, Ref String] >>= [Unit]
Requesting specialization of b1435 :: [Word, Pair9, Ref String] >>= [Unit]
Block specialize: b1435 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1435 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b972 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1410 :: [Ref String] >>= [Unit]
Requesting specialization of b1455 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1434 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1434 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b972 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1410 :: [Ref String] >>= [Unit]
Requesting specialization of b1455 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1406 :: [Ref String] >>= [Unit]  ~~>  b1406 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1407 :: [Ref String] >>= [Unit]
Requesting specialization of b1458 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1458 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1458 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1407 :: [Ref String] >>= [Unit]
Requesting specialization of b1458 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1407 :: [Ref String] >>= [Unit]  ~~>  b1407 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1408 :: [Ref String] >>= [Unit]
Requesting specialization of b1457 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1457 :: [Maybe10, Ref String] >>= [Unit]  ~~>  b1457 :: [Maybe10, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1430 :: [Word, Pair9, Ref String] >>= [Unit]
Requesting specialization of b1431 :: [Word, Pair9, Ref String] >>= [Unit]
Block specialize: b1431 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1431 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b970 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1410 :: [Ref String] >>= [Unit]
Requesting specialization of b1455 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1430 :: [Word, Pair9, Ref String] >>= [Unit]  ~~>  b1430 :: [Word, Pair9, Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [Bit 16] ->> [[] ->> [Bit 32]]
Requesting specialization of com1ctrl :: [Bit 16]
Requesting specialization of and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Requesting specialization of b694 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Word] >>= [Unit]
Requesting specialization of b970 :: [Pair9, Ref String] >>= [Unit]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1410 :: [Ref String] >>= [Unit]
Requesting specialization of b1455 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1408 :: [Ref String] >>= [Unit]  ~~>  b1408 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of refToWord :: [Ref String] ->> [Bit 32]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1409 :: [] >>= [Unit]
Requesting specialization of b1456 :: [Maybe10] >>= [Unit]
Block specialize: b1456 :: [Maybe10] >>= [Unit]  ~~>  b1456 :: [Maybe10] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair9] >>= [Unit]
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1410 :: [Ref String] >>= [Unit]
Requesting specialization of b1455 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1409 :: [] >>= [Unit]  ~~>  b1409 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of bootdata :: Ref MimgBootData
Requesting specialization of get :: [Ref (Stored (Ref String))] ->> [[] ->> [Ref String]]
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1410 :: [Ref String] >>= [Unit]
Requesting specialization of b1455 :: [Maybe10, Ref String] >>= [Unit]
Block specialize: b1405 :: [Ref String] >>= [Unit]  ~~>  b1405 :: [Ref String] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of b1406 :: [Ref String] >>= [Unit]
Requesting specialization of b1459 :: [Maybe10, Ref String] >>= [Unit]
External specialize: nextChar :: [Ref String] ->> [[] ->> [Maybe10]]  ~~>  nextChar :: [Ref String] ->> [[] ->> [Maybe10]]
Requesting specialization of nextCharImp :: [[Ref String] ->> [[] ->> [Maybe12]]]
TopLevel specialize: nextCharImp :: [[Ref String] ->> [[] ->> [Maybe12]]]  ~~>  nextCharImp :: [[Ref String] ->> [[] ->> [Maybe12]]], generics=[], substitution=null
Requesting specialization of k76 :: {} [Ref String] ->> [[] ->> [Maybe12]]
ClosureDefn specialize: k76 :: {} [Ref String] ->> [[] ->> [Maybe12]]  ~~>  k76 :: {} [Ref String] ->> [[] ->> [Maybe12]], generics=[], substitution=null
Requesting specialization of k75 :: {Ref String} [] ->> [Maybe12]
ClosureDefn specialize: k75 :: {Ref String} [] ->> [Maybe12]  ~~>  k75 :: {Ref String} [] ->> [Maybe12], generics=[], substitution=null
Requesting specialization of b125 :: [Ref String] >>= [Maybe12]
Block specialize: b125 :: [Ref String] >>= [Maybe12]  ~~>  b125 :: [Ref String] >>= [Maybe12], generics=[], substitution=null
Requesting specialization of loadChar :: [Ref String] ->> [[] ->> [Bit 32]]
Requesting specialization of b124 :: [] >>= [Maybe12]
Requesting specialization of b123 :: [Bit 32, Ref String] >>= [Maybe12]
Block specialize: b123 :: [Bit 32, Ref String] >>= [Maybe12]  ~~>  b123 :: [Bit 32, Ref String] >>= [Maybe12], generics=[], substitution=null
Requesting specialization of refToWord :: [Ref String] ->> [Bit 32]
Pair1124 is a specialized DataType for Pair11
Maybe1225 is a specialized DataType for Maybe12
External specialize: refToWord :: [Ref String] ->> [Bit 32]  ~~>  refToWord :: [Ref String] ->> [Bit 32]
Requesting specialization of ptrToWordImp :: [[Bit 32] ->> [Bit 32]]
Block specialize: b124 :: [] >>= [Maybe12]  ~~>  b124 :: [] >>= [Maybe12], generics=[], substitution=null
Requesting specialization of s39 :: [Maybe12]
TopLevel specialize: s39 :: [Maybe12]  ~~>  s39 :: [Maybe12], generics=[], substitution=null
External specialize: loadChar :: [Ref String] ->> [[] ->> [Bit 32]]  ~~>  loadChar :: [Ref String] ->> [[] ->> [Bit 32]]
Requesting specialization of loadCharImp :: [[Addr] ->> [[] ->> [Bit 8]]]
TopLevel specialize: loadCharImp :: [[Addr] ->> [[] ->> [Bit 8]]]  ~~>  loadCharImp :: [[Addr] ->> [[] ->> [Bit 8]]], generics=[], substitution=null
Requesting specialization of k45 :: {} [Addr] ->> [[] ->> [Bit 8]]
ClosureDefn specialize: k45 :: {} [Addr] ->> [[] ->> [Bit 8]]  ~~>  k45 :: {} [Addr] ->> [[] ->> [Bit 8]], generics=[], substitution=null
Requesting specialization of loadCharImp1 :: {Addr} [] ->> [Bit 8]
ClosureDefn specialize: loadCharImp1 :: {Addr} [] ->> [Bit 8]  ~~>  loadCharImp1 :: {Addr} [] ->> [Bit 8], generics=[], substitution=null
Block specialize: b692 :: [Ix 25, Ix 25, Bit 8, Ix 80, Ix 80] >>= [Unit]  ~~>  b692 :: [Ix 25, Ix 25, Bit 8, Ix 80, Ix 80] >>= [Unit], generics=[], substitution=null
Requesting specialization of b690 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit]
Requesting specialization of genLtInc :: [Maybe1] ->> [[[Ix 25] ->> [Maybe1]] ->> [[Ix 25] ->> [[Ix 25] ->> [[Ix 25] ->> [Maybe1]]]]]
Requesting specialization of Nothing :: [Maybe1]
Requesting specialization of Just :: [[Ix 25] ->> [Maybe1]]
Requesting specialization of ix1 :: [Ix 25]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b826 :: [Maybe1, Ix 25, Bit 8, Ix 80, Ix 80] >>= [Unit]
Block specialize: b826 :: [Maybe1, Ix 25, Bit 8, Ix 80, Ix 80] >>= [Unit]  ~~>  b826 :: [Maybe1, Ix 25, Bit 8, Ix 80, Ix 80] >>= [Unit], generics=[], substitution=null
Requesting specialization of b692 :: [Ix 25, Ix 25, Bit 8, Ix 80, Ix 80] >>= [Unit]
Block specialize: b690 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit]  ~~>  b690 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of @1 :: [Ref (Array 25 (Array 80 (Stored Char)))] ->> [[Ix 25] ->> [Ref (Array 80 (Stored Char))]]
Requesting specialization of vram :: Ref (Array 25 (Array 80 (Stored Char)))
Requesting specialization of @ :: [Ref (Array 80 (Stored Char))] ->> [[Ix 80] ->> [Ref (Stored Char)]]
Requesting specialization of set :: [Ref (Stored Char)] ->> [[Char] ->> [[] ->> [Unit]]]
Requesting specialization of blank :: [Char]
Requesting specialization of genLtInc1 :: [Maybe0] ->> [[[Ix 80] ->> [Maybe0]] ->> [[Ix 80] ->> [[Ix 80] ->> [[Ix 80] ->> [Maybe0]]]]]
Requesting specialization of s13 :: [Maybe0]
Requesting specialization of s14 :: [[Ix 80] ->> [Maybe0]]
Requesting specialization of s12 :: [Ix 80]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b825 :: [Maybe0, Ix 80, Bit 8, Ix 25] >>= [Unit]
Block specialize: b825 :: [Maybe0, Ix 80, Bit 8, Ix 25] >>= [Unit]  ~~>  b825 :: [Maybe0, Ix 80, Bit 8, Ix 25] >>= [Unit], generics=[], substitution=null
Requesting specialization of b690 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit]
External specialize: get3 :: [Ref (Stored (Bit 8))] ->> [[] ->> [Bit 8]]  ~~>  get3 :: [Ref (Stored (Bit 8))] ->> [[] ->> [Bit 8]]
External specialize: set2 :: [Ref (Stored (Ix 80))] ->> [[Ix 80] ->> [[] ->> [Unit]]]  ~~>  set2 :: [Ref (Stored (Ix 80))] ->> [[Ix 80] ->> [[] ->> [Unit]]]
External specialize: set1 :: [Ref (Stored (Ix 25))] ->> [[Ix 25] ->> [[] ->> [Unit]]]  ~~>  set1 :: [Ref (Stored (Ix 25))] ->> [[Ix 25] ->> [[] ->> [Unit]]]
External specialize: get2 :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]  ~~>  get2 :: [Ref (Stored (Ix 80))] ->> [[] ->> [Ix 80]]
External specialize: get1 :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]  ~~>  get1 :: [Ref (Stored (Ix 25))] ->> [[] ->> [Ix 25]]
MemArea specialize: console :: Ref Window  ~~>  console :: Ref Window
Requesting specialization of s2 :: [Init Window]
TopLevel specialize: s2 :: [Init Window]  ~~>  s2 :: [Init Window], generics=[], substitution=null
Requesting specialization of b997 :: [] >>= [Init Window]
Block specialize: b997 :: [] >>= [Init Window]  ~~>  b997 :: [] >>= [Init Window], generics=[], substitution=null
Requesting specialization of initStored1 :: [Ix 25] ->> [Init (Stored (Ix 25))]
Requesting specialization of ix0 :: [Ix 25]
specialized version of primitive init_row :: [Init (Stored (Ix 25))] >>= [Init Coord]
            original version was init_row :: [Init (Stored (Ix 25))] >>= [Init Coord]
Requesting specialization of initStored2 :: [Ix 80] ->> [Init (Stored (Ix 80))]
Requesting specialization of s6 :: [Ix 80]
specialized version of primitive init_col :: [Init (Stored (Ix 80))] >>= [Init Coord]
            original version was init_col :: [Init (Stored (Ix 80))] >>= [Init Coord]
specialized version of primitive primInitSeq :: [Init Coord, Init Coord] >>= [Init Coord]
            original version was primInitSeq :: [Init Coord, Init Coord] >>= [Init Coord]
Requesting specialization of initStored1 :: [Ix 25] ->> [Init (Stored (Ix 25))]
Requesting specialization of maxBound :: Ix 25
Requesting specialization of initStored2 :: [Ix 80] ->> [Init (Stored (Ix 80))]
Requesting specialization of maxBound1 :: Ix 80
specialized version of primitive init_topleft :: [Init Coord] >>= [Init Window]
            original version was init_topleft :: [Init Coord] >>= [Init Window]
specialized version of primitive init_bottomright :: [Init Coord] >>= [Init Window]
            original version was init_bottomright :: [Init Coord] >>= [Init Window]
specialized version of primitive primInitSeq :: [Init Window, Init Window] >>= [Init Window]
            original version was primInitSeq :: [Init Window, Init Window] >>= [Init Window]
specialized version of primitive init_current :: [Init Coord] >>= [Init Window]
            original version was init_current :: [Init Coord] >>= [Init Window]
Requesting specialization of initStored :: [Bit 8] ->> [Init (Stored (Bit 8))]
specialized version of primitive init_attr :: [Init (Stored (Bit 8))] >>= [Init Window]
            original version was init_attr :: [Init (Stored (Bit 8))] >>= [Init Window]
External specialize: maxBound1 :: Ix 80  ~~>  maxBound1 :: Ix 80
External specialize: maxBound :: Ix 25  ~~>  maxBound :: Ix 25
TopLevel specialize: s6 :: [Ix 80]  ~~>  s6 :: [Ix 80], generics=[], substitution=null
Requesting specialization of ix0u :: [Unit] ->> [Ix 80]
Requesting specialization of Unit :: [Unit]
External specialize: ix0u :: [Unit] ->> [Ix 80]  ~~>  ix0u :: [Unit] ->> [Ix 80]
External specialize: initStored2 :: [Ix 80] ->> [Init (Stored (Ix 80))]  ~~>  initStored2 :: [Ix 80] ->> [Init (Stored (Ix 80))]
TopLevel specialize: ix0 :: [Ix 25]  ~~>  ix0 :: [Ix 25], generics=[], substitution=null
Requesting specialization of ix0u1 :: [Unit] ->> [Ix 25]
Requesting specialization of Unit :: [Unit]
External specialize: ix0u1 :: [Unit] ->> [Ix 25]  ~~>  ix0u1 :: [Unit] ->> [Ix 25]
External specialize: initStored1 :: [Ix 25] ->> [Init (Stored (Ix 25))]  ~~>  initStored1 :: [Ix 25] ->> [Init (Stored (Ix 25))]
Running type checker ...
generics for Unit: [] in type [Unit]
TopLevel group inferred Unit :: [Unit]
Generalizing definition for: Unit with generics []
Inferred Unit :: Unit
generics for ix0: [] in type [Ix 25]
TopLevel group inferred ix0 :: [Ix 25]
Generalizing definition for: ix0 with generics []
Inferred ix0 :: Ix 25
generics for s6: [] in type [Ix 80]
TopLevel group inferred s6 :: [Ix 80]
Generalizing definition for: s6 with generics []
Inferred s6 :: Ix 80
Inferred b997 :: [] >>= [Init Window]
generics for s2: [] in type [Init Window]
TopLevel group inferred s2 :: [Init Window]
Generalizing definition for: s2 with generics []
Inferred s2 :: Init Window
Inferred b314 :: [] >>= [Char]
generics for blank: [] in type [Char]
TopLevel group inferred blank :: [Char]
Generalizing definition for: blank with generics []
Inferred blank :: Char
generics for s13: [] in type [Maybe015]
TopLevel group inferred s13 :: [Maybe015]
Generalizing definition for: s13 with generics []
Inferred s13 :: Maybe015
Inferred k51 :: {} [Ix 80] ->> [Maybe015]
generics for s14: [] in type [[Ix 80] ->> [Maybe015]]
TopLevel group inferred s14 :: [[Ix 80] ->> [Maybe015]]
Generalizing definition for: s14 with generics []
Inferred s14 :: [Ix 80] ->> [Maybe015]
generics for s12: [] in type [Ix 80]
TopLevel group inferred s12 :: [Ix 80]
Generalizing definition for: s12 with generics []
Inferred s12 :: Ix 80
Inferred b295 :: [] >>= [Unit]
Inferred b825 :: [Maybe015, Ix 80, Bit 8, Ix 25] >>= [Unit]
Inferred b690 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit]
generics for Nothing: [] in type [Maybe116]
TopLevel group inferred Nothing :: [Maybe116]
Generalizing definition for: Nothing with generics []
Inferred Nothing :: Maybe116
Inferred k5 :: {} [Ix 25] ->> [Maybe116]
generics for Just: [] in type [[Ix 25] ->> [Maybe116]]
TopLevel group inferred Just :: [[Ix 25] ->> [Maybe116]]
Generalizing definition for: Just with generics []
Inferred Just :: [Ix 25] ->> [Maybe116]
generics for ix1: [] in type [Ix 25]
TopLevel group inferred ix1 :: [Ix 25]
Generalizing definition for: ix1 with generics []
Inferred ix1 :: Ix 25
Inferred b826 :: [Maybe116, Ix 25, Bit 8, Ix 80, Ix 80] >>= [Unit]
Inferred b692 :: [Ix 25, Ix 25, Bit 8, Ix 80, Ix 80] >>= [Unit]
Inferred loadCharImp1 :: {Addr} [] ->> [Bit 8]
Inferred k45 :: {} [Addr] ->> [[] ->> [Bit 8]]
generics for loadCharImp: [] in type [[Addr] ->> [[] ->> [Bit 8]]]
TopLevel group inferred loadCharImp :: [[Addr] ->> [[] ->> [Bit 8]]]
Generalizing definition for: loadCharImp with generics []
Inferred loadCharImp :: [Addr] ->> [[] ->> [Bit 8]]
Inferred k44 :: {} [Bit 32] ->> [Bit 32]
generics for ptrToWordImp: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred ptrToWordImp :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: ptrToWordImp with generics []
Inferred ptrToWordImp :: [Bit 32] ->> [Bit 32]
Inferred b123 :: [Bit 32, Ref String] >>= [Maybe1225]
generics for s39: [] in type [Maybe1225]
TopLevel group inferred s39 :: [Maybe1225]
Generalizing definition for: s39 with generics []
Inferred s39 :: Maybe1225
Inferred b124 :: [] >>= [Maybe1225]
Inferred b125 :: [Ref String] >>= [Maybe1225]
Inferred k75 :: {Ref String} [] ->> [Maybe1225]
Inferred k76 :: {} [Ref String] ->> [[] ->> [Maybe1225]]
generics for nextCharImp: [] in type [[Ref String] ->> [[] ->> [Maybe1225]]]
TopLevel group inferred nextCharImp :: [[Ref String] ->> [[] ->> [Maybe1225]]]
Generalizing definition for: nextCharImp with generics []
Inferred nextCharImp :: [Ref String] ->> [[] ->> [Maybe1225]]
generics for refToWord_imp: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred refToWord_imp :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: refToWord_imp with generics []
Inferred refToWord_imp :: [Bit 32] ->> [Bit 32]
Inferred b485 :: [Ref (Stored (Bit 32))] >>= [WordCursor]
Inferred k228 :: {Ref (Stored (Bit 32))} [] ->> [WordCursor]
Inferred k229 :: {} [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]
generics for wordCursor: [] in type [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
TopLevel group inferred wordCursor :: [[Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]]
Generalizing definition for: wordCursor with generics []
Inferred wordCursor :: [Ref (Stored (Bit 32))] ->> [[] ->> [WordCursor]]
Inferred b491 :: [WordCursor, Bit 32, Bit 32] >>= [Maybe421]
generics for s23: [] in type [Maybe421]
TopLevel group inferred s23 :: [Maybe421]
Generalizing definition for: s23 with generics []
Inferred s23 :: Maybe421
Inferred b492 :: [] >>= [Maybe421]
Inferred b493 :: [WordCursor, Bit 32] >>= [Maybe421]
Inferred k231 :: {Bit 32} [WordCursor] ->> [Maybe421]
generics for nextMimgHeader_imp: [] in type [[WordCursor] ->> [Maybe421]]
TopLevel group inferred nextMimgHeader_imp :: [[WordCursor] ->> [Maybe421]]
Generalizing definition for: nextMimgHeader_imp with generics []
Inferred nextMimgHeader_imp :: [WordCursor] ->> [Maybe421]
Inferred b436 :: [Bit 32] >>= [Bit 32]
generics for bit0: [] in type [Bit 8]
TopLevel group inferred bit0 :: [Bit 8]
Generalizing definition for: bit0 with generics []
Inferred bit0 :: Bit 8
Inferred k126 :: {} [Ix 32] ->> [Init (Stored (Bit 8))]
generics for s42: [] in type [[Ix 32] ->> [Init (Stored (Bit 8))]]
TopLevel group inferred s42 :: [[Ix 32] ->> [Init (Stored (Bit 8))]]
Generalizing definition for: s42 with generics []
Inferred s42 :: [Ix 32] ->> [Init (Stored (Bit 8))]
generics for s1: [] in type [Init (Array 32 (Stored (Bit 8)))]
TopLevel group inferred s1 :: [Init (Array 32 (Stored (Bit 8)))]
Generalizing definition for: s1 with generics []
Inferred s1 :: Init (Array 32 (Stored (Bit 8)))
generics for s15: [] in type [Ix 32]
TopLevel group inferred s15 :: [Ix 32]
Generalizing definition for: s15 with generics []
Inferred s15 :: Ix 32
generics for nz10: [] in type [NZBit 32]
TopLevel group inferred nz10 :: [NZBit 32]
Generalizing definition for: nz10 with generics []
Inferred nz10 :: NZBit 32
generics for s19: [] in type [Maybe217]
TopLevel group inferred s19 :: [Maybe217]
Generalizing definition for: s19 with generics []
Inferred s19 :: Maybe217
Inferred k52 :: {} [Ix 32] ->> [Maybe217]
generics for s20: [] in type [[Ix 32] ->> [Maybe217]]
TopLevel group inferred s20 :: [[Ix 32] ->> [Maybe217]]
Generalizing definition for: s20 with generics []
Inferred s20 :: [Ix 32] ->> [Maybe217]
generics for s18: [] in type [Ix 32]
TopLevel group inferred s18 :: [Ix 32]
Generalizing definition for: s18 with generics []
Inferred s18 :: Ix 32
generics for com1data: [] in type [Bit 16]
TopLevel group inferred com1data :: [Bit 16]
Generalizing definition for: com1data with generics []
Inferred com1data :: Bit 16
Inferred b268 :: [] >>= [Bit 16]
generics for com1ctrl: [] in type [Bit 16]
TopLevel group inferred com1ctrl :: [Bit 16]
Generalizing definition for: com1ctrl with generics []
Inferred com1ctrl :: Bit 16
Inferred b256 :: [Bit 32] >>= [Unit]
Inferred b258 :: [Bit 32] >>= [Unit]
Inferred b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1002 :: [Maybe015] >>= [Unit]
Inferred b1001 :: [Maybe116] >>= [Unit]
Inferred b832 :: [Maybe015, Ix 80, Ix 25, Ix 25] >>= [Unit]
Inferred b702 :: [Ix 80, Ix 80, Ix 25, Ix 25] >>= [Unit]
Inferred b833 :: [Maybe015, Ix 80, Bit 8, Ix 25] >>= [Unit]
Inferred b700 :: [Ix 80, Ix 80, Bit 8, Ix 25] >>= [Unit]
Inferred b1355 :: [Maybe116, Ix 25, Ix 25, Ix 80, Ix 80, Bit 8] >>= [Unit]
Inferred b849 :: [] >>= [Unit]
Inferred b847 :: [Ix 25] >>= [Unit]
Inferred b852 :: [Bit 32, Ix 25] >>= [Unit]
Inferred b850 :: [Bit 32, Bit 32, Ix 25] >>= [Unit]
Inferred b845 :: [Bit 32] >>= [Unit]
Inferred b842 :: [Bit 32] >>= [Unit]
Inferred b854 :: [Bit 32] >>= [Unit]
Inferred b1239 :: [Ix 32] >>= [Unit]
Inferred b1356 :: [Maybe217] >>= [Unit]
Inferred b1303 :: [] >>= [Unit]
Inferred b1357 :: [Maybe217, Bit 32] >>= [Unit]
Inferred b1236 :: [Ix 32, Bit 32] >>= [Unit]
Inferred b1443 :: [Maybe217, Bit 32] >>= [Unit]
Inferred b1359 :: [Bit 32] >>= [Unit]
Inferred b1244 :: [Bit 32, Ix 32] >>= [Unit]
Inferred b1246 :: [Bit 32, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1242 :: [Bit 32, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1243 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1362 :: [Maybe217, Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1241 :: [Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1363 :: [Maybe217, Bit 32, Bit 32] >>= [Unit]
Inferred b1232 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Bit 32] >>= [Unit]
Inferred b1247 :: [Bit 32, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1231 :: [Bit 32, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1034 :: [Bit 32, Bit 32] >>= [Unit]
generics for nz16: [] in type [NZBit 32]
TopLevel group inferred nz16 :: [NZBit 32]
Generalizing definition for: nz16 with generics []
Inferred nz16 :: NZBit 32
Inferred b1255 :: [Bit 32, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1252 :: [Bit 32, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1253 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1364 :: [Maybe217, Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1251 :: [Bit 32, Ix 32, Bit 32] >>= [Unit]
Inferred b1365 :: [Maybe217, Bit 32, Bit 32] >>= [Unit]
Inferred b1249 :: [[Bit 8] ->> [[] ->> [Unit]], Bit 8, Bit 32, Bit 32] >>= [Unit]
Inferred b1256 :: [Bit 32, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1248 :: [Bit 32, [Bit 8] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1021 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b792 :: [Bit 32] >>= [Bit 32]
Inferred b1038 :: [Bit 32, Pair914, Bit 32] >>= [Bit 32]
Inferred b1037 :: [Bit 32, Pair914, Bit 32] >>= [Bit 32]
Inferred b949 :: [Pair914, Bit 32] >>= [Bit 32]
Inferred b1035 :: [Maybe1013, Bit 32] >>= [Bit 32]
Inferred b1372 :: [Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b784 :: [Ref MimgHeader] >>= [Unit]
Inferred b1025 :: [Bit 32, Pair914, Ref MimgHeader] >>= [Unit]
Inferred b1022 :: [Maybe1013, Ref MimgHeader] >>= [Unit]
Inferred b1024 :: [Bit 32, Pair914, Ref MimgHeader] >>= [Unit]
Inferred b941 :: [Pair914, Ref MimgHeader] >>= [Unit]
Inferred b1375 :: [Bit 32, Pair914, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1374 :: [Bit 32, Pair914, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1444 :: [Maybe1013, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1371 :: [Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b788 :: [Ref MimgHeader] >>= [Unit]
Inferred b1029 :: [Bit 32, Pair914, Ref MimgHeader] >>= [Unit]
Inferred b1026 :: [Maybe1013, Ref MimgHeader] >>= [Unit]
Inferred b1028 :: [Bit 32, Pair914, Ref MimgHeader] >>= [Unit]
Inferred b945 :: [Pair914, Ref MimgHeader] >>= [Unit]
Inferred b1378 :: [Bit 32, Pair914, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1377 :: [Bit 32, Pair914, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1445 :: [Maybe1013, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1370 :: [Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b790 :: [Ref MimgHeader] >>= [Unit]
Inferred b1033 :: [Bit 32, Pair914, Ref MimgHeader] >>= [Unit]
Inferred b1030 :: [Maybe1013, Ref MimgHeader] >>= [Unit]
Inferred b1032 :: [Bit 32, Pair914, Ref MimgHeader] >>= [Unit]
Inferred b946 :: [Pair914, Ref MimgHeader] >>= [Unit]
Inferred b1381 :: [Bit 32, Pair914, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1380 :: [Bit 32, Pair914, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1446 :: [Maybe1013, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1369 :: [Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1074 :: [Bit 32, Pair914, Bit 32, Ref MimgHeader] >>= [Bit 32]
Inferred b1072 :: [Bit 32, Pair914, Bit 32, Ref MimgHeader] >>= [Bit 32]
Inferred b1073 :: [Pair914, Bit 32, Ref MimgHeader] >>= [Bit 32]
Inferred b1257 :: [Maybe1013, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1067 :: [Bit 32, Ref MimgHeader] >>= [Bit 32]
Inferred b1080 :: [Bit 32, Pair914, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1078 :: [Bit 32, Pair914, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1079 :: [Pair914, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1258 :: [Maybe1013, Bit 32, Ref MimgHeader] >>= [Bit 32]
Inferred b1066 :: [Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1259 :: [Maybe1013, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1064 :: [Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1090 :: [Bit 32, Pair914, Bit 32, Ref MimgHeader] >>= [Bit 32]
Inferred b1086 :: [Bit 32, Pair914, Bit 32, Ref MimgHeader] >>= [Bit 32]
Inferred b1087 :: [Pair914, Bit 32, Ref MimgHeader] >>= [Bit 32]
Inferred b1260 :: [Maybe1013, Ref MimgHeader, Bit 32] >>= [Bit 32]
Inferred b1085 :: [Bit 32, Pair914, Bit 32, Ref MimgHeader] >>= [Bit 32]
Inferred b1062 :: [Ref MimgHeader, Bit 32, Pair723] >>= [Bit 32]
Inferred b1266 :: [Maybe822, Bit 32] >>= [Bit 32]
Inferred b1265 :: [Maybe1013, Ref MimgHeader, Bit 32, Pair723] >>= [Bit 32]
Inferred b1058 :: [MimgHeaderCursor, Bit 32] >>= [Bit 32]
generics for nextMimgMMap_imp: [] in type [[WordCursor] ->> [Maybe421]]
TopLevel group inferred nextMimgMMap_imp :: [[WordCursor] ->> [Maybe421]]
Generalizing definition for: nextMimgMMap_imp with generics []
Inferred nextMimgMMap_imp :: [WordCursor] ->> [Maybe421]
Inferred b1102 :: [Bit 32, Pair914, Bit 32] >>= [Bit 32]
Inferred b1101 :: [Bit 32, Pair914, Bit 32] >>= [Bit 32]
Inferred b961 :: [Pair914, Bit 32] >>= [Bit 32]
Inferred b1099 :: [Maybe1013, Bit 32] >>= [Bit 32]
Inferred b1321 :: [Bit 32] >>= [Bit 32]
Inferred b1005 :: [Bit 32, Pair914] >>= [Unit]
Inferred b1004 :: [Bit 32, Pair914] >>= [Unit]
Inferred b947 :: [Pair914] >>= [Unit]
Inferred b884 :: [Maybe1013] >>= [Unit]
Inferred b1003 :: [Bit 32, Pair914] >>= [Unit]
Inferred b1447 :: [Maybe1013, Bit 32] >>= [Bit 32]
Inferred b1386 :: [Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b800 :: [Ref MimgMMap] >>= [Unit]
Inferred b1094 :: [Bit 32, Pair914, Ref MimgMMap] >>= [Unit]
Inferred b1091 :: [Maybe1013, Ref MimgMMap] >>= [Unit]
Inferred b1093 :: [Bit 32, Pair914, Ref MimgMMap] >>= [Unit]
Inferred b959 :: [Pair914, Ref MimgMMap] >>= [Unit]
Inferred b1391 :: [Bit 32, Pair914, Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1390 :: [Bit 32, Pair914, Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1448 :: [Maybe1013, Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1385 :: [Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b802 :: [Ref MimgMMap] >>= [Unit]
Inferred b1098 :: [Bit 32, Pair914, Ref MimgMMap] >>= [Unit]
Inferred b1095 :: [Maybe1013, Ref MimgMMap] >>= [Unit]
Inferred b1097 :: [Bit 32, Pair914, Ref MimgMMap] >>= [Unit]
Inferred b960 :: [Pair914, Ref MimgMMap] >>= [Unit]
Inferred b1394 :: [Bit 32, Pair914, Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1393 :: [Bit 32, Pair914, Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1449 :: [Maybe1013, Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1384 :: [Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1138 :: [Bit 32, Pair914, Bit 32, Ref MimgMMap] >>= [Bit 32]
Inferred b1136 :: [Bit 32, Pair914, Bit 32, Ref MimgMMap] >>= [Bit 32]
Inferred b1137 :: [Pair914, Bit 32, Ref MimgMMap] >>= [Bit 32]
Inferred b1267 :: [Maybe1013, Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1131 :: [Bit 32, Ref MimgMMap] >>= [Bit 32]
Inferred b1144 :: [Bit 32, Pair914, Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1142 :: [Bit 32, Pair914, Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1143 :: [Pair914, Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1268 :: [Maybe1013, Bit 32, Ref MimgMMap] >>= [Bit 32]
Inferred b1130 :: [Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1269 :: [Maybe1013, Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1128 :: [Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1154 :: [Bit 32, Pair914, Bit 32, Ref MimgMMap] >>= [Bit 32]
Inferred b1150 :: [Bit 32, Pair914, Bit 32, Ref MimgMMap] >>= [Bit 32]
Inferred b1151 :: [Pair914, Bit 32, Ref MimgMMap] >>= [Bit 32]
Inferred b1270 :: [Maybe1013, Ref MimgMMap, Bit 32] >>= [Bit 32]
Inferred b1149 :: [Bit 32, Pair914, Bit 32, Ref MimgMMap] >>= [Bit 32]
Inferred b1126 :: [Ref MimgMMap, Bit 32, Pair519] >>= [Bit 32]
Inferred b1276 :: [Maybe618, Bit 32] >>= [Bit 32]
Inferred b1275 :: [Maybe1013, Ref MimgMMap, Bit 32, Pair519] >>= [Bit 32]
Inferred b1122 :: [MimgMMapCursor, Bit 32] >>= [Bit 32]
Inferred b1331 :: [] >>= [Unit]
Inferred b1450 :: [Maybe1013] >>= [Unit]
Inferred b1414 :: [Ref String] >>= [Unit]
Inferred b808 :: [Ref String] >>= [Unit]
Inferred b1158 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1155 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1157 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b970 :: [Pair914, Ref String] >>= [Unit]
Inferred b1419 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1418 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1451 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1413 :: [Ref String] >>= [Unit]
Inferred b1452 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1412 :: [Ref String] >>= [Unit]
Inferred b971 :: [Ref String] >>= [Unit]
Inferred b1277 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1162 :: [Ref String] >>= [Unit]
Inferred b1166 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1163 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1165 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b972 :: [Pair914, Ref String] >>= [Unit]
Inferred b1423 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1422 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1453 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1411 :: [Ref String] >>= [Unit]
Inferred b1454 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1410 :: [Ref String] >>= [Unit]
Inferred b978 :: [Ref String] >>= [Unit]
Inferred b1278 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1168 :: [Ref String] >>= [Unit]
Inferred b1174 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1171 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1173 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b980 :: [Pair914, Ref String] >>= [Unit]
Inferred b1427 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1426 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1455 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1409 :: [] >>= [Unit]
Inferred b1456 :: [Maybe1013] >>= [Unit]
Inferred b1408 :: [Ref String] >>= [Unit]
Inferred b1431 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1430 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1457 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1407 :: [Ref String] >>= [Unit]
Inferred b1458 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1406 :: [Ref String] >>= [Unit]
Inferred b1435 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1434 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1459 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1405 :: [Ref String] >>= [Unit]
Inferred b1460 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1404 :: [Ref String] >>= [Unit]
Inferred b1175 :: [Ref String] >>= [Unit]
Inferred b1181 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1180 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b977 :: [Pair914, Ref String] >>= [Unit]
Inferred b1178 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1179 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1461 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1204 :: [] >>= [Unit]
Inferred b1212 :: [] >>= [Unit]
Inferred b1438 :: [Maybe1013] >>= [Unit]
Inferred b1287 :: [Ref String] >>= [Unit]
Inferred b1292 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1291 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1439 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1286 :: [Ref String] >>= [Unit]
Inferred b1440 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1285 :: [Ref String] >>= [Unit]
Inferred b1296 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1295 :: [Bit 32, Pair914, Ref String] >>= [Unit]
Inferred b1441 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1284 :: [Ref String] >>= [Unit]
Inferred b1442 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b1283 :: [Ref String] >>= [Unit]
Inferred b1299 :: [Maybe1013, Ref String] >>= [Unit]
Inferred b814 :: [] >>= [Unit]
Inferred b1189 :: [Bit 32, Pair914] >>= [Unit]
Inferred b1188 :: [Bit 32, Pair914] >>= [Unit]
Inferred b985 :: [Pair914] >>= [Unit]
Inferred b1186 :: [Maybe1013] >>= [Unit]
Inferred b1187 :: [Bit 32, Pair914] >>= [Unit]
Inferred b1300 :: [Maybe1013] >>= [Unit]
Inferred b1203 :: [] >>= [Unit]
Inferred b816 :: [] >>= [Unit]
Inferred b1194 :: [Bit 32, Pair914] >>= [Unit]
Inferred b1193 :: [Bit 32, Pair914] >>= [Unit]
Inferred b986 :: [Pair914] >>= [Unit]
Inferred b1191 :: [Maybe1013] >>= [Unit]
Inferred b1192 :: [Bit 32, Pair914] >>= [Unit]
Inferred b1301 :: [Maybe1013] >>= [Unit]
Inferred b1202 :: [] >>= [Unit]
Inferred b818 :: [] >>= [Unit]
Inferred b1199 :: [Bit 32, Pair914] >>= [Unit]
Inferred b1198 :: [Bit 32, Pair914] >>= [Unit]
Inferred b987 :: [Pair914] >>= [Unit]
Inferred b1196 :: [Maybe1013] >>= [Unit]
Inferred b1197 :: [Bit 32, Pair914] >>= [Unit]
Inferred b1302 :: [Maybe1013] >>= [Unit]
Inferred b1201 :: [] >>= [Unit]
Inferred b1211 :: [Bit 32, Pair914] >>= [Unit]
Inferred b1210 :: [Bit 32, Pair914] >>= [Unit]
Inferred b996 :: [Pair914] >>= [Unit]
Inferred b1208 :: [Maybe1013] >>= [Unit]
Inferred b509 :: [] >>= [Unit]
Inferred k240 :: {} [] ->> [Unit]
generics for kernel: [] in type [[] ->> [Unit]]
TopLevel group inferred kernel :: [[] ->> [Unit]]
Generalizing definition for: kernel with generics []
Inferred kernel :: [] ->> [Unit]
Running representation transformation ...
making new version of structure type Window
new version of StructType Window is Window
making new version of structure type Coord
new version of StructType Coord is Coord
new version of primitive select_row :: [Word] >>= [Word]
         old version was select_row :: [Ref Coord] >>= [Ref (Stored (Ix 25))]
new version of primitive select_col :: [Word] >>= [Word]
         old version was select_col :: [Ref Coord] >>= [Ref (Stored (Ix 80))]
new version of primitive select_topleft :: [Word] >>= [Word]
         old version was select_topleft :: [Ref Window] >>= [Ref Coord]
new version of primitive select_bottomright :: [Word] >>= [Word]
         old version was select_bottomright :: [Ref Window] >>= [Ref Coord]
new version of primitive select_current :: [Word] >>= [Word]
         old version was select_current :: [Ref Window] >>= [Ref Coord]
new version of primitive select_attr :: [Word] >>= [Word]
         old version was select_attr :: [Ref Window] >>= [Ref (Stored (Bit 8))]
new version of primitive init_row :: [[Word] ->> [Unit]] >>= [[Word] ->> [Unit]]
         old version was init_row :: [Init (Stored (Ix 25))] >>= [Init Coord]
new version of primitive init_col :: [[Word] ->> [Unit]] >>= [[Word] ->> [Unit]]
         old version was init_col :: [Init (Stored (Ix 80))] >>= [Init Coord]
new version of primitive primInitSeq :: [[Word] ->> [Unit], [Word] ->> [Unit]] >>= [[Word] ->> [Unit]]
         old version was primInitSeq :: [Init Coord, Init Coord] >>= [Init Coord]
new version of primitive init_topleft :: [[Word] ->> [Unit]] >>= [[Word] ->> [Unit]]
         old version was init_topleft :: [Init Coord] >>= [Init Window]
new version of primitive init_bottomright :: [[Word] ->> [Unit]] >>= [[Word] ->> [Unit]]
         old version was init_bottomright :: [Init Coord] >>= [Init Window]
new version of primitive primInitSeq :: [[Word] ->> [Unit], [Word] ->> [Unit]] >>= [[Word] ->> [Unit]]
         old version was primInitSeq :: [Init Window, Init Window] >>= [Init Window]
new version of primitive init_current :: [[Word] ->> [Unit]] >>= [[Word] ->> [Unit]]
         old version was init_current :: [Init Coord] >>= [Init Window]
new version of primitive init_attr :: [[Word] ->> [Unit]] >>= [[Word] ->> [Unit]]
         old version was init_attr :: [Init (Stored (Bit 8))] >>= [Init Window]
new version of BitdataType Char is Char
    orig: Char :: {Char.Char} Char
    new:  Char :: {Bit 32} Char
new version of primitive update_attr :: [Word, Word] >>= [Word]
         old version was update_attr :: [Char.Char, Bit 8] >>= [Char.Char]
new version of primitive update_char :: [Word, Word] >>= [Word]
         old version was update_char :: [Char.Char, Bit 8] >>= [Char.Char]
new version of DataType Maybe015 is Maybe015
    orig: Nothing024 :: {} Maybe015
    new:  Nothing024 :: {} Maybe015
    orig: Just125 :: {Ix 80} Maybe015
    new:  Just125 :: {Bit 32} Maybe015
new version of primitive update_attr :: [Word, Word] >>= [Word]
         old version was update_attr :: [Char.Char, Bit 8] >>= [Char.Char]
new version of DataType Maybe116 is Maybe116
    orig: Nothing226 :: {} Maybe116
    new:  Nothing226 :: {} Maybe116
    orig: Just327 :: {Ix 25} Maybe116
    new:  Just327 :: {Bit 32} Maybe116
new version of primitive load8 :: [Word] >>= [Word]
         old version was load8 :: [Addr] >>= [Bit 8]
new version of DataType Maybe1225 is Maybe1225
    orig: Nothing1940 :: {} Maybe1225
    new:  Nothing1940 :: {} Maybe1225
new version of DataType Pair1124 is Pair1124
    orig: Pair1839 :: {Bit 32, Bit 32} Pair1124
    new:  Pair1839 :: {Bit 32, Bit 32} Pair1124
    orig: Just2041 :: {Pair1124} Maybe1225
    new:  Just2041 :: {Pair1124} Maybe1225
new version of DataType Maybe1013 is Maybe1013
    orig: Nothing1621 :: {} Maybe1013
    new:  Nothing1621 :: {} Maybe1013
new version of DataType Pair914 is Pair914
    orig: Pair1523 :: {Bit 32, Ref String} Pair914
    new:  Pair1523 :: {Bit 32, Bit 32} Pair914
    orig: Just1722 :: {Pair914} Maybe1013
    new:  Just1722 :: {Pair914} Maybe1013
making new version of structure type MimgBootData
new version of StructType MimgBootData is MimgBootData
new version of primitive select_headers :: [Word] >>= [Word]
         old version was select_headers :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgHeaderBlock))]
new version of primitive select_mmap :: [Word] >>= [Word]
         old version was select_mmap :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgMMapBlock))]
new version of primitive select_cmdline :: [Word] >>= [Word]
         old version was select_cmdline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
new version of primitive select_imgline :: [Word] >>= [Word]
         old version was select_imgline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
new version of BitdataType WordCursor is WordCursor
    orig: WordCursor :: {WordCursor.WordCursor} WordCursor
    new:  WordCursor :: {Bit 32, Bit 32} WordCursor
new version of primitive update_val :: [Word, Word, Bit 32] >>= [Word, Word]
         old version was update_val :: [WordCursor.WordCursor, Bit 32] >>= [WordCursor.WordCursor]
new version of primitive update_count :: [Word, Word, Bit 32] >>= [Word, Word]
         old version was update_count :: [WordCursor.WordCursor, Bit 32] >>= [WordCursor.WordCursor]
new version of DataType Maybe421 is Maybe421
    orig: Nothing734 :: {} Maybe421
    new:  Nothing734 :: {} Maybe421
new version of DataType Pair320 is Pair320
    orig: Pair633 :: {Bit 32, WordCursor} Pair320
    new:  Pair633 :: {Bit 32, Bit 32, Bit 32} Pair320
    orig: Just835 :: {Pair320} Maybe421
    new:  Just835 :: {Pair320} Maybe421
new version of DataType Maybe822 is Maybe822
    orig: Nothing1336 :: {} Maybe822
    new:  Nothing1336 :: {} Maybe822
new version of DataType Pair723 is Pair723
    orig: Pair1238 :: {Ref MimgHeader, MimgHeaderCursor} Pair723
    new:  Pair1238 :: {Bit 32, Bit 32, Bit 32} Pair723
    orig: Just1437 :: {Pair723} Maybe822
    new:  Just1437 :: {Pair723} Maybe822
new version of DataType Maybe217 is Maybe217
    orig: Nothing428 :: {} Maybe217
    new:  Nothing428 :: {} Maybe217
    orig: Just529 :: {Ix 32} Maybe217
    new:  Just529 :: {Bit 32} Maybe217
new version of primitive select_current :: [Word] >>= [Word]
         old version was select_current :: [Ref Window] >>= [Ref Coord]
new version of primitive select_col :: [Word] >>= [Word]
         old version was select_col :: [Ref Coord] >>= [Ref (Stored (Ix 80))]
new version of primitive select_row :: [Word] >>= [Word]
         old version was select_row :: [Ref Coord] >>= [Ref (Stored (Ix 25))]
new version of primitive select_topleft :: [Word] >>= [Word]
         old version was select_topleft :: [Ref Window] >>= [Ref Coord]
new version of primitive select_bottomright :: [Word] >>= [Word]
         old version was select_bottomright :: [Ref Window] >>= [Ref Coord]
new version of primitive select_attr :: [Word] >>= [Word]
         old version was select_attr :: [Ref Window] >>= [Ref (Stored (Bit 8))]
making new version of structure type MimgHeader
new version of StructType MimgHeader is MimgHeader
new version of primitive select_start :: [Word] >>= [Word]
         old version was select_start :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
new version of primitive select_end :: [Word] >>= [Word]
         old version was select_end :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
new version of primitive select_entry :: [Word] >>= [Word]
         old version was select_entry :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
new version of primitive select_entry :: [Word] >>= [Word]
         old version was select_entry :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
new version of primitive select_end :: [Word] >>= [Word]
         old version was select_end :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
new version of primitive select_start :: [Word] >>= [Word]
         old version was select_start :: [Ref MimgHeader] >>= [Ref (Stored (Bit 32))]
new version of DataType Maybe618 is Maybe618
    orig: Nothing1030 :: {} Maybe618
    new:  Nothing1030 :: {} Maybe618
new version of DataType Pair519 is Pair519
    orig: Pair932 :: {Ref MimgMMap, MimgMMapCursor} Pair519
    new:  Pair932 :: {Bit 32, Bit 32, Bit 32} Pair519
    orig: Just1131 :: {Pair519} Maybe618
    new:  Just1131 :: {Pair519} Maybe618
making new version of structure type MimgMMap
new version of StructType MimgMMap is MimgMMap
new version of primitive select_start :: [Word] >>= [Word]
         old version was select_start :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
new version of primitive select_end :: [Word] >>= [Word]
         old version was select_end :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
new version of primitive select_end :: [Word] >>= [Word]
         old version was select_end :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
new version of primitive select_start :: [Word] >>= [Word]
         old version was select_start :: [Ref MimgMMap] >>= [Ref (Stored (Bit 32))]
new version of primitive select_imgline :: [Word] >>= [Word]
         old version was select_imgline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
new version of primitive select_cmdline :: [Word] >>= [Word]
         old version was select_cmdline :: [Ref MimgBootData] >>= [Ref (Stored (Ref String))]
new version of primitive select_mmap :: [Word] >>= [Word]
         old version was select_mmap :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgMMapBlock))]
new version of primitive select_headers :: [Word] >>= [Word]
         old version was select_headers :: [Ref MimgBootData] >>= [Ref (Stored (Ref MimgHeaderBlock))]
Determining representation for external set1 :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
new version of primitive store8 :: [Word, Word] >>= [Unit]
         old version was store8 :: [Addr, Bit 8] >>= [Unit]
Generated new top level definition for set1
Determining representation for external set2 :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Generated new top level definition for set2
Determining representation for external get1 :: [Bit 32] ->> [[] ->> [Bit 32]]
Generated new top level definition for get1
Determining representation for external get2 :: [Bit 32] ->> [[] ->> [Bit 32]]
Generated new top level definition for get2
Determining representation for external ix0u1 :: [Unit] ->> [Bit 32]
Generated new top level definition for ix0u1
Determining representation for external ix0u :: [Unit] ->> [Bit 32]
Generated new top level definition for ix0u
Determining representation for external initStored1 :: [Bit 32] ->> [[Bit 32] ->> [Unit]]
Generated new top level definition for initStored1
Determining representation for external maxBound :: Ix 25
Generated new top level definition for maxBound
Determining representation for external initStored2 :: [Bit 32] ->> [[Bit 32] ->> [Unit]]
Generated new top level definition for initStored2
Determining representation for external maxBound1 :: Ix 80
Generated new top level definition for maxBound1
Determining representation for external initStored :: [Bit 32] ->> [[Bit 32] ->> [Unit]]
Generated new top level definition for initStored
Determining representation for external get3 :: [Bit 32] ->> [[] ->> [Bit 32]]
Generated new top level definition for get3
Determining representation for external @1 :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Generated new top level definition for @1
Determining representation for external vram :: Ref (Array 25 (Array 80 (Stored Char)))
Generated new top level definition for vram
Determining representation for external @ :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Generated new top level definition for @
Determining representation for external set :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
new version of primitive store16 :: [Word, Word] >>= [Unit]
         old version was store16 :: [Addr, Bit 16] >>= [Unit]
Generated new top level definition for set
Determining representation for external wordToByte :: [Bit 32] ->> [Bit 32]
Generated new top level definition for wordToByte
Determining representation for external genLtInc1 :: [Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]
Generated new top level definition for genLtInc1
Determining representation for external ix1u1 :: [Unit] ->> [Bit 32]
Generated new top level definition for ix1u1
Determining representation for external genLtInc :: [Maybe116] ->> [[[Bit 32] ->> [Maybe116]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe116]]]]]
Generated new top level definition for genLtInc
Determining representation for external ix1u :: [Unit] ->> [Bit 32]
Generated new top level definition for ix1u
Determining representation for external loadChar :: [Bit 32] ->> [[] ->> [Bit 32]]
Generated new top level definition for loadChar
Determining representation for external refToWord :: [Bit 32] ->> [Bit 32]
Generated new top level definition for refToWord
Determining representation for external nextChar :: [Bit 32] ->> [[] ->> [Maybe1013]]
Generated new top level definition for nextChar
Determining representation for external bootdata :: Ref MimgBootData
Generated new top level definition for bootdata
Determining representation for external get7 :: [Bit 32] ->> [[] ->> [Bit 32]]
new version of primitive load32 :: [Word] >>= [Bit 32]
         old version was load32 :: [Addr] >>= [Bit 32]
Generated new top level definition for get7
Determining representation for external get5 :: [Bit 32] ->> [[] ->> [Bit 32]]
Generated new top level definition for get5
Determining representation for external refToWord1 :: [Bit 32] ->> [Bit 32]
Generated new top level definition for refToWord1
Determining representation for external mimgHeaderCursor :: [Bit 32] ->> [[] ->> [Bit 32, Bit 32]]
Generated new top level definition for mimgHeaderCursor
Determining representation for external nextMimgHeader :: [Bit 32, Bit 32] ->> [Maybe822]
Generated new top level definition for nextMimgHeader
Determining representation for external @2 :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Generated new top level definition for @2
Determining representation for external initArray :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]] ->> [[Bit 32] ->> [Unit]]
Generated new top level definition for initArray
Determining representation for external bit0u :: [Unit] ->> [Bit 32]
Generated new top level definition for bit0u
Determining representation for external ix0u2 :: [Unit] ->> [Bit 32]
Generated new top level definition for ix0u2
Determining representation for external set3 :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Generated new top level definition for set3
Determining representation for external nzrem :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
new version of primitive nzrem :: [Bit 32, Word] >>= [Bit 32]
         old version was nzrem :: [Word, NZWord] >>= [Word]
Generated new top level definition for nzrem
Determining representation for external nz10u :: [Unit] ->> [Bit 32]
Generated new top level definition for nz10u
Determining representation for external genLtInc2 :: [Maybe217] ->> [[[Bit 32] ->> [Maybe217]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe217]]]]]
Generated new top level definition for genLtInc2
Determining representation for external ix1u2 :: [Unit] ->> [Bit 32]
Generated new top level definition for ix1u2
Determining representation for external maxBound2 :: Ix 32
Generated new top level definition for maxBound2
Determining representation for external bitsToWord :: [Bit 32] ->> [Bit 32]
Generated new top level definition for bitsToWord
Determining representation for external inb :: [Bit 32] ->> [[] ->> [Bit 32]]
Determining representation for external bitAdd :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Generated new top level definition for bitAdd
Determining representation for external port :: [Bit 32] ->> [Bit 32]
Generated new top level definition for port
Determining representation for external and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Generated new top level definition for and
Determining representation for external outb :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Determining representation for external get4 :: [Bit 32] ->> [[] ->> [Bit 32]]
new version of primitive load16 :: [Word] >>= [Word]
         old version was load16 :: [Addr] >>= [Bit 16]
Generated new top level definition for get4
Determining representation for external genLtDec :: [Maybe217] ->> [[[Bit 32] ->> [Maybe217]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe217]]]]]
Generated new top level definition for genLtDec
Determining representation for external nzdiv :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
new version of primitive nzdiv :: [Bit 32, Word] >>= [Bit 32]
         old version was nzdiv :: [Word, NZWord] >>= [Word]
Generated new top level definition for nzdiv
Determining representation for external nz16u :: [Unit] ->> [Bit 32]
Generated new top level definition for nz16u
Determining representation for external get6 :: [Bit 32] ->> [[] ->> [Bit 32]]
Generated new top level definition for get6
Determining representation for external mimgMMapCursor :: [Bit 32] ->> [[] ->> [Bit 32, Bit 32]]
Generated new top level definition for mimgMMapCursor
Determining representation for external nextMimgMMap :: [Bit 32, Bit 32] ->> [Maybe618]
Generated new top level definition for nextMimgMMap
Determining representation for external get :: [Bit 32] ->> [[] ->> [Bit 32]]
Generated new top level definition for get
Determining representation for external refToWord :: [Bit 32] ->> [Bit 32]
Generated new top level definition for refToWord
making new version of structure type Window
new version of StructType Window is Window
making new version of structure type Coord
new version of StructType Coord is Coord
new version of DataType Maybe015 is Maybe015
    orig: Nothing024 :: {} Maybe015
    new:  Nothing024 :: {} Maybe015
    orig: Just125 :: {Bit 32} Maybe015
    new:  Just125 :: {Bit 32} Maybe015
new version of DataType Maybe116 is Maybe116
    orig: Nothing226 :: {} Maybe116
    new:  Nothing226 :: {} Maybe116
    orig: Just327 :: {Bit 32} Maybe116
    new:  Just327 :: {Bit 32} Maybe116
new version of DataType Maybe1225 is Maybe1225
    orig: Nothing1940 :: {} Maybe1225
    new:  Nothing1940 :: {} Maybe1225
new version of DataType Pair1124 is Pair1124
    orig: Pair1839 :: {Bit 32, Bit 32} Pair1124
    new:  Pair1839 :: {Bit 32, Bit 32} Pair1124
    orig: Just2041 :: {Pair1124} Maybe1225
    new:  Just2041 :: {Pair1124} Maybe1225
new version of DataType Maybe1013 is Maybe1013
    orig: Nothing1621 :: {} Maybe1013
    new:  Nothing1621 :: {} Maybe1013
new version of DataType Pair914 is Pair914
    orig: Pair1523 :: {Bit 32, Bit 32} Pair914
    new:  Pair1523 :: {Bit 32, Bit 32} Pair914
    orig: Just1722 :: {Pair914} Maybe1013
    new:  Just1722 :: {Pair914} Maybe1013
new version of DataType Maybe421 is Maybe421
    orig: Nothing734 :: {} Maybe421
    new:  Nothing734 :: {} Maybe421
new version of DataType Pair320 is Pair320
    orig: Pair633 :: {Bit 32, Bit 32, Bit 32} Pair320
    new:  Pair633 :: {Bit 32, Bit 32, Bit 32} Pair320
    orig: Just835 :: {Pair320} Maybe421
    new:  Just835 :: {Pair320} Maybe421
new version of DataType Maybe822 is Maybe822
    orig: Nothing1336 :: {} Maybe822
    new:  Nothing1336 :: {} Maybe822
new version of DataType Pair723 is Pair723
    orig: Pair1238 :: {Bit 32, Bit 32, Bit 32} Pair723
    new:  Pair1238 :: {Bit 32, Bit 32, Bit 32} Pair723
    orig: Just1437 :: {Pair723} Maybe822
    new:  Just1437 :: {Pair723} Maybe822
new version of DataType Maybe217 is Maybe217
    orig: Nothing428 :: {} Maybe217
    new:  Nothing428 :: {} Maybe217
    orig: Just529 :: {Bit 32} Maybe217
    new:  Just529 :: {Bit 32} Maybe217
new version of DataType Maybe618 is Maybe618
    orig: Nothing1030 :: {} Maybe618
    new:  Nothing1030 :: {} Maybe618
new version of DataType Pair519 is Pair519
    orig: Pair932 :: {Bit 32, Bit 32, Bit 32} Pair519
    new:  Pair932 :: {Bit 32, Bit 32, Bit 32} Pair519
    orig: Just1131 :: {Pair519} Maybe618
    new:  Just1131 :: {Pair519} Maybe618
DataType Maybe1013 with 2 constructors is a candidate for merging
DataType Maybe217 with 2 constructors is a candidate for merging
DataType Pair723 with 1 constructors is a candidate for merging
DataType Pair914 with 1 constructors is a candidate for merging
DataType Maybe015 with 2 constructors is a candidate for merging
DataType Maybe116 with 2 constructors is a candidate for merging
DataType Maybe1225 with 2 constructors is a candidate for merging
DataType Maybe822 with 2 constructors is a candidate for merging
DataType Pair1124 with 1 constructors is a candidate for merging
DataType Maybe618 with 2 constructors is a candidate for merging
DataType Pair519 with 1 constructors is a candidate for merging
DataType Maybe421 with 2 constructors is a candidate for merging
DataType Pair320 with 1 constructors is a candidate for merging
Equating datatypes Pair914 and Pair1124
Equating datatypes Pair519 and Pair320
Equating datatypes Pair723 and Pair320
Equating datatypes Maybe116 and Maybe015
Equating datatypes Maybe1225 and Maybe1013
Equating datatypes Maybe217 and Maybe015
Equating datatypes Maybe618 and Maybe421
Equating datatypes Maybe822 and Maybe421
making new version of structure type Window
new version of StructType Window is Window
making new version of structure type Coord
new version of StructType Coord is Coord
new version of DataType Maybe015 is Maybe015
    orig: Nothing024 :: {} Maybe015
    new:  Nothing024 :: {} Maybe015
    orig: Just125 :: {Bit 32} Maybe015
    new:  Just125 :: {Bit 32} Maybe015
new version of DataType Maybe1013 is Maybe1013
    orig: Nothing1621 :: {} Maybe1013
    new:  Nothing1621 :: {} Maybe1013
new version of DataType Pair1124 is Pair1124
    orig: Pair1839 :: {Bit 32, Bit 32} Pair1124
    new:  Pair1839 :: {Bit 32, Bit 32} Pair1124
    orig: Just1722 :: {Pair914} Maybe1013
    new:  Just1722 :: {Pair1124} Maybe1013
new version of DataType Maybe421 is Maybe421
    orig: Nothing734 :: {} Maybe421
    new:  Nothing734 :: {} Maybe421
new version of DataType Pair320 is Pair320
    orig: Pair633 :: {Bit 32, Bit 32, Bit 32} Pair320
    new:  Pair633 :: {Bit 32, Bit 32, Bit 32} Pair320
    orig: Just835 :: {Pair320} Maybe421
    new:  Just835 :: {Pair320} Maybe421
Running type checker ...
Inferred k427 :: forall (a :: *). {} [a] ->> [Word]
generics for ix0u1: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred ix0u1 :: [[Unit] ->> [Bit 32]]
Generalizing definition for: ix0u1 with generics []
Inferred ix0u1 :: [Unit] ->> [Bit 32]
generics for Unit: [] in type [Unit]
TopLevel group inferred Unit :: [Unit]
Generalizing definition for: Unit with generics []
Inferred Unit :: Unit
generics for ix0: [] in type [Bit 32]
TopLevel group inferred ix0 :: [Bit 32]
Generalizing definition for: ix0 with generics []
Inferred ix0 :: Bit 32
Inferred k428 :: forall (a :: *). {} [a] ->> [Word]
generics for ix0u: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred ix0u :: [[Unit] ->> [Bit 32]]
Generalizing definition for: ix0u with generics []
Inferred ix0u :: [Unit] ->> [Bit 32]
generics for s6: [] in type [Bit 32]
TopLevel group inferred s6 :: [Bit 32]
Generalizing definition for: s6 with generics []
Inferred s6 :: Bit 32
Inferred k429 :: {Word} [Word] ->> [Unit]
Inferred k430 :: {} [Word] ->> [[Word] ->> [Unit]]
generics for initStored1: [] in type [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
TopLevel group inferred initStored1 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Generalizing definition for: initStored1 with generics []
Inferred initStored1 :: [Bit 32] ->> [[Bit 32] ->> [Unit]]
generics for maxBound: [] in type [Bit 32]
TopLevel group inferred maxBound :: [Bit 32]
Generalizing definition for: maxBound with generics []
Inferred maxBound :: Bit 32
Inferred k431 :: {Word} [Word] ->> [Unit]
Inferred k432 :: {} [Word] ->> [[Word] ->> [Unit]]
generics for initStored2: [] in type [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
TopLevel group inferred initStored2 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Generalizing definition for: initStored2 with generics []
Inferred initStored2 :: [Bit 32] ->> [[Bit 32] ->> [Unit]]
generics for maxBound1: [] in type [Bit 32]
TopLevel group inferred maxBound1 :: [Bit 32]
Generalizing definition for: maxBound1 with generics []
Inferred maxBound1 :: Bit 32
Inferred b1463 :: forall (a :: *) (b :: *) (c :: tuple). [[a] ->> [b], [a] ->> c, a] >>= c
Inferred k436 :: forall (a :: *) (b :: *) (c :: tuple). {[a] ->> [b], [a] ->> c} [a] ->> c
Inferred k433 :: {Word} [Word] ->> [Unit]
Inferred k434 :: {} [Word] ->> [[Word] ->> [Unit]]
generics for initStored: [] in type [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
TopLevel group inferred initStored :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Generalizing definition for: initStored with generics []
Inferred initStored :: [Bit 32] ->> [[Bit 32] ->> [Unit]]
Inferred b330 :: forall (a :: tuple). [[Word] ->> a, Word, Word] >>= a
Inferred k152 :: forall (a :: tuple). {[Word] ->> a, Word} [Word] ->> a
Inferred b1462 :: forall (a :: *) (b :: *) (c :: tuple). [[a] ->> [b], [a] ->> c, a] >>= c
Inferred k435 :: forall (a :: *) (b :: *) (c :: tuple). {[a] ->> [b], [a] ->> c} [a] ->> c
Inferred b997 :: [] >>= [[Bit 32] ->> [Unit]]
generics for s2: [] in type [[Bit 32] ->> [Unit]]
TopLevel group inferred s2 :: [[Bit 32] ->> [Unit]]
Generalizing definition for: s2 with generics []
Inferred s2 :: [Bit 32] ->> [Unit]
Inferred b1473 :: [] >>= [Unit]
Inferred b1475 :: forall (a :: *). [[Word] ->> [[Word] ->> [a]], Word, Word] >>= [Unit]
Inferred b1474 :: forall (a :: *). [[Word] ->> [[Word] ->> [a]], Word, Word] >>= [Unit]
Inferred k465 :: forall (a :: *). {[Word] ->> [[Word] ->> [a]]} [Word] ->> [Unit]
Inferred k466 :: forall (a :: *). {} [[Word] ->> [[Word] ->> [a]]] ->> [[Word] ->> [Unit]]
generics for initArray: [] in type [[[Bit 32] ->> [[Bit 32] ->> [Unit]]] ->> [[Bit 32] ->> [Unit]]]
TopLevel group inferred initArray :: [[[Bit 32] ->> [[Bit 32] ->> [Unit]]] ->> [[Bit 32] ->> [Unit]]]
Generalizing definition for: initArray with generics []
Inferred initArray :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]] ->> [[Bit 32] ->> [Unit]]
Inferred k467 :: forall (a :: *). {} [a] ->> [Word]
generics for bit0u: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred bit0u :: [[Unit] ->> [Bit 32]]
Generalizing definition for: bit0u with generics []
Inferred bit0u :: [Unit] ->> [Bit 32]
generics for bit0: [] in type [Bit 32]
TopLevel group inferred bit0 :: [Bit 32]
Generalizing definition for: bit0 with generics []
Inferred bit0 :: Bit 32
Inferred k126 :: {} [Bit 32] ->> [[Bit 32] ->> [Unit]]
generics for s42: [] in type [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
TopLevel group inferred s42 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Generalizing definition for: s42 with generics []
Inferred s42 :: [Bit 32] ->> [[Bit 32] ->> [Unit]]
generics for s1: [] in type [[Bit 32] ->> [Unit]]
TopLevel group inferred s1 :: [[Bit 32] ->> [Unit]]
Generalizing definition for: s1 with generics []
Inferred s1 :: [Bit 32] ->> [Unit]
Inferred b283 :: [Word] >>= [Word]
Inferred b285 :: [Word] >>= [Word]
Inferred k417 :: {Word, Word} [] ->> [Unit]
Inferred k418 :: {Word} [Word] ->> [[] ->> [Unit]]
Inferred k419 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]]
generics for set1: [] in type [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred set1 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: set1 with generics []
Inferred set1 :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k420 :: {Word, Word} [] ->> [Unit]
Inferred k421 :: {Word} [Word] ->> [[] ->> [Unit]]
Inferred k422 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]]
generics for set2: [] in type [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred set2 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: set2 with generics []
Inferred set2 :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b284 :: [Word] >>= [Word]
Inferred b281 :: [Word] >>= [Word]
Inferred k423 :: {Word} [] ->> [Word]
Inferred k424 :: {} [Word] ->> [[] ->> [Word]]
generics for get1: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get1 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get1 with generics []
Inferred get1 :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred b282 :: [Word] >>= [Word]
Inferred k425 :: {Word} [] ->> [Word]
Inferred k426 :: {} [Word] ->> [[] ->> [Word]]
generics for get2: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get2 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get2 with generics []
Inferred get2 :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred b286 :: [Word] >>= [Word]
Inferred k437 :: {Word} [] ->> [Word]
Inferred k438 :: {} [Word] ->> [[] ->> [Word]]
generics for get3: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get3 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get3 with generics []
Inferred get3 :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred b1464 :: [Word, Word] >>= [Word]
Inferred k439 :: {Word} [Word] ->> [Word]
Inferred k440 :: {} [Word] ->> [[Word] ->> [Word]]
generics for @1: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred @1 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: @1 with generics []
Inferred @1 :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
generics for vram: [] in type [Bit 32]
TopLevel group inferred vram :: [Bit 32]
Generalizing definition for: vram with generics []
Inferred vram :: Bit 32
Inferred b1465 :: [Word, Word] >>= [Word]
Inferred k441 :: {Word} [Word] ->> [Word]
Inferred k442 :: {} [Word] ->> [[Word] ->> [Word]]
generics for @: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred @ :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: @ with generics []
Inferred @ :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred k443 :: {Word, Word} [] ->> [Unit]
Inferred k444 :: {Word} [Word] ->> [[] ->> [Unit]]
Inferred k445 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]]
generics for set: [] in type [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred set :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: set with generics []
Inferred set :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k446 :: {} [Word] ->> [Word]
generics for wordToByte: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred wordToByte :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: wordToByte with generics []
Inferred wordToByte :: [Bit 32] ->> [Bit 32]
Inferred construct_Char :: [Word, Word] >>= [Word]
Inferred b314 :: [] >>= [Bit 32]
generics for blank: [] in type [Bit 32]
TopLevel group inferred blank :: [Bit 32]
Generalizing definition for: blank with generics []
Inferred blank :: Bit 32
Inferred b289 :: [Word, Word] >>= [Word]
Inferred b1467 :: forall (a :: *). [a] >>= [a]
Inferred b1466 :: forall (a :: *) (b :: tuple). [[a] ->> b, a] >>= b
Inferred b1468 :: forall (a :: *). [a, [Word] ->> [a], Word, Word, Word] >>= [a]
Inferred k447 :: forall (a :: *). {a, [Word] ->> [a], Word, Word} [Word] ->> [a]
Inferred k448 :: forall (a :: *). {a, [Word] ->> [a], Word} [Word] ->> [[Word] ->> [a]]
Inferred k449 :: forall (a :: *). {a, [Word] ->> [a]} [Word] ->> [[Word] ->> [[Word] ->> [a]]]
Inferred k450 :: forall (a :: *). {a} [[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]
Inferred k451 :: forall (a :: *). {} [a] ->> [[[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]]
generics for genLtInc1: [] in type [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
TopLevel group inferred genLtInc1 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Generalizing definition for: genLtInc1 with generics []
Inferred genLtInc1 :: [Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]
generics for s13: [] in type [Maybe015]
TopLevel group inferred s13 :: [Maybe015]
Generalizing definition for: s13 with generics []
Inferred s13 :: Maybe015
Inferred k51 :: {} [Bit 32] ->> [Maybe015]
generics for s14: [] in type [[Bit 32] ->> [Maybe015]]
TopLevel group inferred s14 :: [[Bit 32] ->> [Maybe015]]
Generalizing definition for: s14 with generics []
Inferred s14 :: [Bit 32] ->> [Maybe015]
Inferred k452 :: forall (a :: *). {} [a] ->> [Word]
generics for ix1u1: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred ix1u1 :: [[Unit] ->> [Bit 32]]
Generalizing definition for: ix1u1 with generics []
Inferred ix1u1 :: [Unit] ->> [Bit 32]
generics for s12: [] in type [Bit 32]
TopLevel group inferred s12 :: [Bit 32]
Generalizing definition for: s12 with generics []
Inferred s12 :: Bit 32
Inferred b295 :: [] >>= [Unit]
Inferred b825 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1470 :: forall (a :: *). [a] >>= [a]
Inferred b1469 :: forall (a :: *) (b :: tuple). [[a] ->> b, a] >>= b
Inferred b1471 :: forall (a :: *). [a, [Word] ->> [a], Word, Word, Word] >>= [a]
Inferred k453 :: forall (a :: *). {a, [Word] ->> [a], Word, Word} [Word] ->> [a]
Inferred k454 :: forall (a :: *). {a, [Word] ->> [a], Word} [Word] ->> [[Word] ->> [a]]
Inferred k455 :: forall (a :: *). {a, [Word] ->> [a]} [Word] ->> [[Word] ->> [[Word] ->> [a]]]
Inferred k456 :: forall (a :: *). {a} [[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]
Inferred k457 :: forall (a :: *). {} [a] ->> [[[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]]
generics for genLtInc: [] in type [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
TopLevel group inferred genLtInc :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Generalizing definition for: genLtInc with generics []
Inferred genLtInc :: [Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]
generics for Nothing: [] in type [Maybe015]
TopLevel group inferred Nothing :: [Maybe015]
Generalizing definition for: Nothing with generics []
Inferred Nothing :: Maybe015
Inferred k5 :: {} [Bit 32] ->> [Maybe015]
generics for Just: [] in type [[Bit 32] ->> [Maybe015]]
TopLevel group inferred Just :: [[Bit 32] ->> [Maybe015]]
Generalizing definition for: Just with generics []
Inferred Just :: [Bit 32] ->> [Maybe015]
Inferred k458 :: forall (a :: *). {} [a] ->> [Word]
generics for ix1u: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred ix1u :: [[Unit] ->> [Bit 32]]
Generalizing definition for: ix1u with generics []
Inferred ix1u :: [Unit] ->> [Bit 32]
generics for ix1: [] in type [Bit 32]
TopLevel group inferred ix1 :: [Bit 32]
Generalizing definition for: ix1 with generics []
Inferred ix1 :: Bit 32
Inferred b826 :: [Maybe015, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred loadCharImp1 :: {Bit 32} [] ->> [Bit 32]
Inferred k45 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
generics for loadCharImp: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred loadCharImp :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: loadCharImp with generics []
Inferred loadCharImp :: [Bit 32] ->> [[] ->> [Bit 32]]
generics for loadChar: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred loadChar :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: loadChar with generics []
Inferred loadChar :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred k44 :: {} [Bit 32] ->> [Bit 32]
generics for ptrToWordImp: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred ptrToWordImp :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: ptrToWordImp with generics []
Inferred ptrToWordImp :: [Bit 32] ->> [Bit 32]
generics for refToWord: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred refToWord :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: refToWord with generics []
Inferred refToWord :: [Bit 32] ->> [Bit 32]
Inferred b123 :: [Bit 32, Bit 32] >>= [Maybe1013]
generics for s39: [] in type [Maybe1013]
TopLevel group inferred s39 :: [Maybe1013]
Generalizing definition for: s39 with generics []
Inferred s39 :: Maybe1013
Inferred b124 :: [] >>= [Maybe1013]
Inferred b125 :: [Bit 32] >>= [Maybe1013]
Inferred k75 :: {Bit 32} [] ->> [Maybe1013]
Inferred k76 :: {} [Bit 32] ->> [[] ->> [Maybe1013]]
generics for nextCharImp: [] in type [[Bit 32] ->> [[] ->> [Maybe1013]]]
TopLevel group inferred nextCharImp :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Generalizing definition for: nextCharImp with generics []
Inferred nextCharImp :: [Bit 32] ->> [[] ->> [Maybe1013]]
generics for nextChar: [] in type [[Bit 32] ->> [[] ->> [Maybe1013]]]
TopLevel group inferred nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Generalizing definition for: nextChar with generics []
Inferred nextChar :: [Bit 32] ->> [[] ->> [Maybe1013]]
Inferred b463 :: [Word] >>= [Word]
generics for bootdata: [] in type [Bit 32]
TopLevel group inferred bootdata :: [Bit 32]
Generalizing definition for: bootdata with generics []
Inferred bootdata :: Bit 32
Inferred k459 :: {Word} [] ->> [Bit 32]
Inferred k460 :: {} [Word] ->> [[] ->> [Bit 32]]
generics for get7: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get7 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get7 with generics []
Inferred get7 :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred k461 :: {Word} [] ->> [Bit 32]
Inferred k462 :: {} [Word] ->> [[] ->> [Bit 32]]
generics for get5: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get5 with generics []
Inferred get5 :: [Bit 32] ->> [[] ->> [Bit 32]]
generics for refToWord_imp: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred refToWord_imp :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: refToWord_imp with generics []
Inferred refToWord_imp :: [Bit 32] ->> [Bit 32]
generics for refToWord1: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred refToWord1 :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: refToWord1 with generics []
Inferred refToWord1 :: [Bit 32] ->> [Bit 32]
Inferred construct_WordCursor :: forall (a :: *) (b :: *). [a, b] >>= [b, a]
Inferred b485 :: [Bit 32] >>= [Bit 32, Bit 32]
Inferred k228 :: {Bit 32} [] ->> [Bit 32, Bit 32]
Inferred k229 :: {} [Bit 32] ->> [[] ->> [Bit 32, Bit 32]]
generics for wordCursor: [] in type [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
TopLevel group inferred wordCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
Generalizing definition for: wordCursor with generics []
Inferred wordCursor :: [Bit 32] ->> [[] ->> [Bit 32, Bit 32]]
generics for mimgHeaderCursor: [] in type [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
TopLevel group inferred mimgHeaderCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
Generalizing definition for: mimgHeaderCursor with generics []
Inferred mimgHeaderCursor :: [Bit 32] ->> [[] ->> [Bit 32, Bit 32]]
Inferred b476 :: forall (a :: *) (b :: *). [a, b] >>= [a]
Inferred b474 :: forall (a :: *) (b :: *). [a, b] >>= [b]
Inferred b491 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Maybe421]
generics for s23: [] in type [Maybe421]
TopLevel group inferred s23 :: [Maybe421]
Generalizing definition for: s23 with generics []
Inferred s23 :: Maybe421
Inferred b492 :: [] >>= [Maybe421]
Inferred b493 :: [Bit 32, Bit 32, Bit 32] >>= [Maybe421]
Inferred k231 :: {Bit 32} [Bit 32, Bit 32] ->> [Maybe421]
generics for nextMimgHeader_imp: [] in type [[Bit 32, Bit 32] ->> [Maybe421]]
TopLevel group inferred nextMimgHeader_imp :: [[Bit 32, Bit 32] ->> [Maybe421]]
Generalizing definition for: nextMimgHeader_imp with generics []
Inferred nextMimgHeader_imp :: [Bit 32, Bit 32] ->> [Maybe421]
generics for nextMimgHeader: [] in type [[Bit 32, Bit 32] ->> [Maybe421]]
TopLevel group inferred nextMimgHeader :: [[Bit 32, Bit 32] ->> [Maybe421]]
Generalizing definition for: nextMimgHeader with generics []
Inferred nextMimgHeader :: [Bit 32, Bit 32] ->> [Maybe421]
Inferred b436 :: [Bit 32] >>= [Bit 32]
Inferred b1472 :: [Word, Word] >>= [Word]
Inferred k463 :: {Word} [Word] ->> [Word]
Inferred k464 :: {} [Word] ->> [[Word] ->> [Word]]
generics for @2: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred @2 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: @2 with generics []
Inferred @2 :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred k468 :: forall (a :: *). {} [a] ->> [Word]
generics for ix0u2: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred ix0u2 :: [[Unit] ->> [Bit 32]]
Generalizing definition for: ix0u2 with generics []
Inferred ix0u2 :: [Unit] ->> [Bit 32]
generics for s15: [] in type [Bit 32]
TopLevel group inferred s15 :: [Bit 32]
Generalizing definition for: s15 with generics []
Inferred s15 :: Bit 32
Inferred k469 :: {Word, Word} [] ->> [Unit]
Inferred k470 :: {Word} [Word] ->> [[] ->> [Unit]]
Inferred k471 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]]
generics for set3: [] in type [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred set3 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: set3 with generics []
Inferred set3 :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k472 :: {Bit 32} [Word] ->> [Bit 32]
Inferred k473 :: {} [Bit 32] ->> [[Word] ->> [Bit 32]]
generics for nzrem: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred nzrem :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: nzrem with generics []
Inferred nzrem :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred k474 :: forall (a :: *). {} [a] ->> [Word]
generics for nz10u: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred nz10u :: [[Unit] ->> [Bit 32]]
Generalizing definition for: nz10u with generics []
Inferred nz10u :: [Unit] ->> [Bit 32]
generics for nz10: [] in type [Bit 32]
TopLevel group inferred nz10 :: [Bit 32]
Generalizing definition for: nz10 with generics []
Inferred nz10 :: Bit 32
Inferred b1477 :: forall (a :: *). [a] >>= [a]
Inferred b1476 :: forall (a :: *) (b :: tuple). [[a] ->> b, a] >>= b
Inferred b1478 :: forall (a :: *). [a, [Word] ->> [a], Word, Word, Word] >>= [a]
Inferred k475 :: forall (a :: *). {a, [Word] ->> [a], Word, Word} [Word] ->> [a]
Inferred k476 :: forall (a :: *). {a, [Word] ->> [a], Word} [Word] ->> [[Word] ->> [a]]
Inferred k477 :: forall (a :: *). {a, [Word] ->> [a]} [Word] ->> [[Word] ->> [[Word] ->> [a]]]
Inferred k478 :: forall (a :: *). {a} [[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]
Inferred k479 :: forall (a :: *). {} [a] ->> [[[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]]
generics for genLtInc2: [] in type [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
TopLevel group inferred genLtInc2 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Generalizing definition for: genLtInc2 with generics []
Inferred genLtInc2 :: [Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]
generics for s19: [] in type [Maybe015]
TopLevel group inferred s19 :: [Maybe015]
Generalizing definition for: s19 with generics []
Inferred s19 :: Maybe015
Inferred k52 :: {} [Bit 32] ->> [Maybe015]
generics for s20: [] in type [[Bit 32] ->> [Maybe015]]
TopLevel group inferred s20 :: [[Bit 32] ->> [Maybe015]]
Generalizing definition for: s20 with generics []
Inferred s20 :: [Bit 32] ->> [Maybe015]
Inferred k480 :: forall (a :: *). {} [a] ->> [Word]
generics for ix1u2: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred ix1u2 :: [[Unit] ->> [Bit 32]]
Generalizing definition for: ix1u2 with generics []
Inferred ix1u2 :: [Unit] ->> [Bit 32]
generics for s18: [] in type [Bit 32]
TopLevel group inferred s18 :: [Bit 32]
Generalizing definition for: s18 with generics []
Inferred s18 :: Bit 32
generics for maxBound2: [] in type [Bit 32]
TopLevel group inferred maxBound2 :: [Bit 32]
Generalizing definition for: maxBound2 with generics []
Inferred maxBound2 :: Bit 32
Inferred k481 :: forall (a :: *). {} [a] ->> [a]
generics for bitsToWord: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred bitsToWord :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: bitsToWord with generics []
Inferred bitsToWord :: [Bit 32] ->> [Bit 32]
Inferred k482 :: {Bit 32} [] ->> [Bit 32]
Inferred k483 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
generics for inb: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: inb with generics []
Inferred inb :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred b1479 :: [Word, Word] >>= [Word]
Inferred k484 :: {Word} [Word] ->> [Word]
Inferred k485 :: {} [Word] ->> [[Word] ->> [Word]]
generics for bitAdd: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred bitAdd :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: bitAdd with generics []
Inferred bitAdd :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred k486 :: {} [Word] ->> [Word]
generics for port: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred port :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: port with generics []
Inferred port :: [Bit 32] ->> [Bit 32]
generics for com1data: [] in type [Bit 32]
TopLevel group inferred com1data :: [Bit 32]
Generalizing definition for: com1data with generics []
Inferred com1data :: Bit 32
Inferred b268 :: [] >>= [Bit 32]
generics for com1ctrl: [] in type [Bit 32]
TopLevel group inferred com1ctrl :: [Bit 32]
Generalizing definition for: com1ctrl with generics []
Inferred com1ctrl :: Bit 32
Inferred b1480 :: [Word, Word] >>= [Word]
Inferred k487 :: {Word} [Word] ->> [Word]
Inferred k488 :: {} [Word] ->> [[Word] ->> [Word]]
generics for and: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: and with generics []
Inferred and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred k489 :: {Bit 32, Bit 32} [] ->> [Unit]
Inferred k490 :: {Bit 32} [Bit 32] ->> [[] ->> [Unit]]
Inferred k491 :: {} [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
generics for outb: [] in type [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred outb :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: outb with generics []
Inferred outb :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b256 :: [Bit 32] >>= [Unit]
Inferred b258 :: [Bit 32] >>= [Unit]
Inferred b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1002 :: [Maybe015] >>= [Unit]
Inferred b1001 :: [Maybe015] >>= [Unit]
Inferred k492 :: {Word} [] ->> [Word]
Inferred k493 :: {} [Word] ->> [[] ->> [Word]]
generics for get4: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get4 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get4 with generics []
Inferred get4 :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred b832 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b833 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1355 :: [Maybe015, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b849 :: [] >>= [Unit]
Inferred b847 :: [Bit 32] >>= [Unit]
Inferred b852 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b845 :: [Bit 32] >>= [Unit]
Inferred b842 :: [Bit 32] >>= [Unit]
Inferred b854 :: [Bit 32] >>= [Unit]
Inferred b1482 :: forall (a :: *). [a] >>= [a]
Inferred b1481 :: forall (a :: *) (b :: tuple). [[a] ->> b, a] >>= b
Inferred b1483 :: forall (a :: *). [a, [Word] ->> [a], Word, Word, Word] >>= [a]
Inferred k494 :: forall (a :: *). {a, [Word] ->> [a], Word, Word} [Word] ->> [a]
Inferred k495 :: forall (a :: *). {a, [Word] ->> [a], Word} [Word] ->> [[Word] ->> [a]]
Inferred k496 :: forall (a :: *). {a, [Word] ->> [a]} [Word] ->> [[Word] ->> [[Word] ->> [a]]]
Inferred k497 :: forall (a :: *). {a} [[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]
Inferred k498 :: forall (a :: *). {} [a] ->> [[[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]]
generics for genLtDec: [] in type [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
TopLevel group inferred genLtDec :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Generalizing definition for: genLtDec with generics []
Inferred genLtDec :: [Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]
Inferred b1239 :: [Bit 32] >>= [Unit]
Inferred b1356 :: [Maybe015] >>= [Unit]
Inferred b1303 :: [] >>= [Unit]
Inferred b1357 :: [Maybe015, Bit 32] >>= [Unit]
Inferred b1236 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b1443 :: [Maybe015, Bit 32] >>= [Unit]
Inferred b1359 :: [Bit 32] >>= [Unit]
Inferred k499 :: {Bit 32} [Word] ->> [Bit 32]
Inferred k500 :: {} [Bit 32] ->> [[Word] ->> [Bit 32]]
generics for nzdiv: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred nzdiv :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: nzdiv with generics []
Inferred nzdiv :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred b1244 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b1246 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1242 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1243 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1362 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1363 :: [Maybe015, Bit 32, Bit 32] >>= [Unit]
Inferred b1232 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1247 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1231 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1034 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b467 :: [Word] >>= [Word]
Inferred k501 :: forall (a :: *). {} [a] ->> [Word]
generics for nz16u: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred nz16u :: [[Unit] ->> [Bit 32]]
Generalizing definition for: nz16u with generics []
Inferred nz16u :: [Unit] ->> [Bit 32]
generics for nz16: [] in type [Bit 32]
TopLevel group inferred nz16 :: [Bit 32]
Generalizing definition for: nz16 with generics []
Inferred nz16 :: Bit 32
Inferred b1255 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1252 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1253 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1364 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1365 :: [Maybe015, Bit 32, Bit 32] >>= [Unit]
Inferred b1249 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1256 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1248 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1021 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b468 :: [Word] >>= [Word]
Inferred b469 :: [Word] >>= [Word]
Inferred b792 :: [Bit 32] >>= [Bit 32]
Inferred b1038 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32]
Inferred b1037 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32]
Inferred b949 :: [Pair1124, Bit 32] >>= [Bit 32]
Inferred b1035 :: [Maybe1013, Bit 32] >>= [Bit 32]
Inferred b1372 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b784 :: [Bit 32] >>= [Unit]
Inferred b1025 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1022 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1024 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b941 :: [Pair1124, Bit 32] >>= [Unit]
Inferred b1375 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1374 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1444 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1371 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b788 :: [Bit 32] >>= [Unit]
Inferred b1029 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1026 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1028 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b945 :: [Pair1124, Bit 32] >>= [Unit]
Inferred b1378 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1377 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1445 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1370 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b790 :: [Bit 32] >>= [Unit]
Inferred b1033 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1030 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1032 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b946 :: [Pair1124, Bit 32] >>= [Unit]
Inferred b1381 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1380 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1446 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1369 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1074 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1072 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1073 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1257 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1067 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1080 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1078 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1079 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1258 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1066 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1259 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1064 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1090 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1086 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1087 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1260 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1085 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1062 :: [Bit 32, Bit 32, Pair320] >>= [Bit 32]
Inferred b1266 :: [Maybe421, Bit 32] >>= [Bit 32]
Inferred b1265 :: [Maybe1013, Bit 32, Bit 32, Pair320] >>= [Bit 32]
Inferred b1058 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b464 :: [Word] >>= [Word]
Inferred k502 :: {Word} [] ->> [Bit 32]
Inferred k503 :: {} [Word] ->> [[] ->> [Bit 32]]
generics for get6: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get6 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get6 with generics []
Inferred get6 :: [Bit 32] ->> [[] ->> [Bit 32]]
generics for mimgMMapCursor: [] in type [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
TopLevel group inferred mimgMMapCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
Generalizing definition for: mimgMMapCursor with generics []
Inferred mimgMMapCursor :: [Bit 32] ->> [[] ->> [Bit 32, Bit 32]]
generics for nextMimgMMap_imp: [] in type [[Bit 32, Bit 32] ->> [Maybe421]]
TopLevel group inferred nextMimgMMap_imp :: [[Bit 32, Bit 32] ->> [Maybe421]]
Generalizing definition for: nextMimgMMap_imp with generics []
Inferred nextMimgMMap_imp :: [Bit 32, Bit 32] ->> [Maybe421]
generics for nextMimgMMap: [] in type [[Bit 32, Bit 32] ->> [Maybe421]]
TopLevel group inferred nextMimgMMap :: [[Bit 32, Bit 32] ->> [Maybe421]]
Generalizing definition for: nextMimgMMap with generics []
Inferred nextMimgMMap :: [Bit 32, Bit 32] ->> [Maybe421]
Inferred b470 :: [Word] >>= [Word]
Inferred b471 :: [Word] >>= [Word]
Inferred b1102 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32]
Inferred b1101 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32]
Inferred b961 :: [Pair1124, Bit 32] >>= [Bit 32]
Inferred b1099 :: [Maybe1013, Bit 32] >>= [Bit 32]
Inferred b1321 :: [Bit 32] >>= [Bit 32]
Inferred b1005 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b1004 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b947 :: [Pair1124] >>= [Unit]
Inferred b884 :: [Maybe1013] >>= [Unit]
Inferred b1003 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b1447 :: [Maybe1013, Bit 32] >>= [Bit 32]
Inferred b1386 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b800 :: [Bit 32] >>= [Unit]
Inferred b1094 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1091 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1093 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b959 :: [Pair1124, Bit 32] >>= [Unit]
Inferred b1391 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1390 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1448 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1385 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b802 :: [Bit 32] >>= [Unit]
Inferred b1098 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1095 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1097 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b960 :: [Pair1124, Bit 32] >>= [Unit]
Inferred b1394 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1393 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1449 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1384 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1138 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1136 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1137 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1267 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1131 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1144 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1142 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1143 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1268 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1130 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1269 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1128 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1154 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1150 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1151 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1270 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1149 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1126 :: [Bit 32, Bit 32, Pair320] >>= [Bit 32]
Inferred b1276 :: [Maybe421, Bit 32] >>= [Bit 32]
Inferred b1275 :: [Maybe1013, Bit 32, Bit 32, Pair320] >>= [Bit 32]
Inferred b1122 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b465 :: [Word] >>= [Word]
Inferred k504 :: {Word} [] ->> [Bit 32]
Inferred k505 :: {} [Word] ->> [[] ->> [Bit 32]]
generics for get: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get with generics []
Inferred get :: [Bit 32] ->> [[] ->> [Bit 32]]
generics for refToWord: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred refToWord :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: refToWord with generics []
Inferred refToWord :: [Bit 32] ->> [Bit 32]
Inferred b466 :: [Word] >>= [Word]
Inferred b1331 :: [] >>= [Unit]
Inferred b1450 :: [Maybe1013] >>= [Unit]
Inferred b1414 :: [Bit 32] >>= [Unit]
Inferred b808 :: [Bit 32] >>= [Unit]
Inferred b1158 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1155 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1157 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b970 :: [Pair1124, Bit 32] >>= [Unit]
Inferred b1419 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1418 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1451 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1413 :: [Bit 32] >>= [Unit]
Inferred b1452 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1412 :: [Bit 32] >>= [Unit]
Inferred b971 :: [Bit 32] >>= [Unit]
Inferred b1277 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1162 :: [Bit 32] >>= [Unit]
Inferred b1166 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1163 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1165 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b972 :: [Pair1124, Bit 32] >>= [Unit]
Inferred b1423 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1422 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1453 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1411 :: [Bit 32] >>= [Unit]
Inferred b1454 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1410 :: [Bit 32] >>= [Unit]
Inferred b978 :: [Bit 32] >>= [Unit]
Inferred b1278 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1168 :: [Bit 32] >>= [Unit]
Inferred b1174 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1171 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1173 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b980 :: [Pair1124, Bit 32] >>= [Unit]
Inferred b1427 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1426 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1455 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1409 :: [] >>= [Unit]
Inferred b1456 :: [Maybe1013] >>= [Unit]
Inferred b1408 :: [Bit 32] >>= [Unit]
Inferred b1431 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1430 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1457 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1407 :: [Bit 32] >>= [Unit]
Inferred b1458 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1406 :: [Bit 32] >>= [Unit]
Inferred b1435 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1434 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1459 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1405 :: [Bit 32] >>= [Unit]
Inferred b1460 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1404 :: [Bit 32] >>= [Unit]
Inferred b1175 :: [Bit 32] >>= [Unit]
Inferred b1181 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1180 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b977 :: [Pair1124, Bit 32] >>= [Unit]
Inferred b1178 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1179 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1461 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1204 :: [] >>= [Unit]
Inferred b1212 :: [] >>= [Unit]
Inferred b1438 :: [Maybe1013] >>= [Unit]
Inferred b1287 :: [Bit 32] >>= [Unit]
Inferred b1292 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1291 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1439 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1286 :: [Bit 32] >>= [Unit]
Inferred b1440 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1285 :: [Bit 32] >>= [Unit]
Inferred b1296 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1295 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Inferred b1441 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1284 :: [Bit 32] >>= [Unit]
Inferred b1442 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b1283 :: [Bit 32] >>= [Unit]
Inferred b1299 :: [Maybe1013, Bit 32] >>= [Unit]
Inferred b814 :: [] >>= [Unit]
Inferred b1189 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b1188 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b985 :: [Pair1124] >>= [Unit]
Inferred b1186 :: [Maybe1013] >>= [Unit]
Inferred b1187 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b1300 :: [Maybe1013] >>= [Unit]
Inferred b1203 :: [] >>= [Unit]
Inferred b816 :: [] >>= [Unit]
Inferred b1194 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b1193 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b986 :: [Pair1124] >>= [Unit]
Inferred b1191 :: [Maybe1013] >>= [Unit]
Inferred b1192 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b1301 :: [Maybe1013] >>= [Unit]
Inferred b1202 :: [] >>= [Unit]
Inferred b818 :: [] >>= [Unit]
Inferred b1199 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b1198 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b987 :: [Pair1124] >>= [Unit]
Inferred b1196 :: [Maybe1013] >>= [Unit]
Inferred b1197 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b1302 :: [Maybe1013] >>= [Unit]
Inferred b1201 :: [] >>= [Unit]
Inferred b1211 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b1210 :: [Bit 32, Pair1124] >>= [Unit]
Inferred b996 :: [Pair1124] >>= [Unit]
Inferred b1208 :: [Maybe1013] >>= [Unit]
Inferred b509 :: [] >>= [Unit]
Inferred k240 :: {} [] ->> [Unit]
generics for kernel_impl: [] in type [[] ->> [Unit]]
TopLevel group inferred kernel_impl :: [[] ->> [Unit]]
Generalizing definition for: kernel_impl with generics []
Inferred kernel_impl :: [] ->> [Unit]
Inferred kernel :: [] >>= [Unit]
Inferred initialize :: [] >>= [Unit]
Running specializer ...
Requesting specialization of initialize :: [] >>= [Unit]
Block specialize: initialize :: [] >>= [Unit]  ~~>  initialize :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of s2 :: [[Bit 32] ->> [Unit]]
Requesting specialization of console :: Word
Requesting specialization of s1 :: [[Bit 32] ->> [Unit]]
Requesting specialization of itoaBuf :: Word
Requesting specialization of kernel :: [] >>= [Unit]
Block specialize: kernel :: [] >>= [Unit]  ~~>  kernel :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of kernel_impl :: [[] ->> [Unit]]
TopLevel specialize: kernel_impl :: [[] ->> [Unit]]  ~~>  kernel_impl :: [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k240 :: {} [] ->> [Unit]
ClosureDefn specialize: k240 :: {} [] ->> [Unit]  ~~>  k240 :: {} [] ->> [Unit], generics=[], substitution=null
Requesting specialization of b509 :: [] >>= [Unit]
Block specialize: b509 :: [] >>= [Unit]  ~~>  b509 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b283 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b281 :: [Word] >>= [Word]
Requesting specialization of get1 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b282 :: [Word] >>= [Word]
Requesting specialization of get2 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b285 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b281 :: [Word] >>= [Word]
Requesting specialization of set1 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of b282 :: [Word] >>= [Word]
Requesting specialization of set2 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of b284 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b281 :: [Word] >>= [Word]
Requesting specialization of get1 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b282 :: [Word] >>= [Word]
Requesting specialization of get2 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b286 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of get3 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Maybe101326 is a specialized DataType for Maybe1013
Pair112427 is a specialized DataType for Pair1124
Requesting specialization of b1201 :: [] >>= [Unit]
Requesting specialization of b1208 :: [Maybe1013] >>= [Unit]
Block specialize: b1208 :: [Maybe1013] >>= [Unit]  ~~>  b1208 :: [Maybe1013] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1210 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of b1211 :: [Bit 32, Pair1124] >>= [Unit]
Block specialize: b1211 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1211 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b996 :: [Pair1124] >>= [Unit]
Block specialize: b996 :: [Pair1124] >>= [Unit]  ~~>  b996 :: [Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1201 :: [] >>= [Unit]
Requesting specialization of b1208 :: [Maybe1013] >>= [Unit]
Block specialize: b845 :: [Bit 32] >>= [Unit]  ~~>  b845 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b285 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b281 :: [Word] >>= [Word]
Requesting specialization of get1 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b847 :: [Bit 32] >>= [Unit]
Requesting specialization of b850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b847 :: [Bit 32] >>= [Unit]
Requesting specialization of b852 :: [Bit 32, Bit 32] >>= [Unit]
Block specialize: b852 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b852 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b285 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b282 :: [Word] >>= [Word]
Requesting specialization of get2 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b286 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of get3 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of @1 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of vram :: [Bit 32]
Requesting specialization of @ :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of set :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of wordToByte :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of construct_Char :: [Word, Word] >>= [Word]
Requesting specialization of b289 :: [Word, Word] >>= [Word]
Requesting specialization of b284 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b282 :: [Word] >>= [Word]
Requesting specialization of get2 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of genLtInc1 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of s13 :: [Maybe015]
Requesting specialization of s14 :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of s12 :: [Bit 32]
Maybe01528 is a specialized DataType for Maybe015
Requesting specialization of b1002 :: [Maybe015] >>= [Unit]
Requesting specialization of b847 :: [Bit 32] >>= [Unit]
Block specialize: b1002 :: [Maybe015] >>= [Unit]  ~~>  b1002 :: [Maybe015] >>= [Unit], generics=[], substitution=null
Requesting specialization of b285 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b282 :: [Word] >>= [Word]
Requesting specialization of set2 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel specialize: s12 :: [Bit 32]  ~~>  s12 :: [Bit 32], generics=[], substitution=null
Requesting specialization of ix1u1 :: [[Unit] ->> [Bit 32]]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: Unit :: [Unit]  ~~>  Unit :: [Unit], generics=[], substitution=null
TopLevel specialize: ix1u1 :: [[Unit] ->> [Bit 32]]  ~~>  ix1u1 :: [[Unit] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k452 :: {} [Unit] ->> [Word]
ClosureDefn specialize: k452 :: forall (a :: *). {} [a] ->> [Word]  ~~>  k452 :: {} [Unit] ->> [Word], generics=[?18225], substitution=[?18225 --> Unit]
TopLevel specialize: s14 :: [[Bit 32] ->> [Maybe015]]  ~~>  s14 :: [[Bit 32] ->> [Maybe015]], generics=[], substitution=null
Requesting specialization of k51 :: {} [Bit 32] ->> [Maybe015]
ClosureDefn specialize: k51 :: {} [Bit 32] ->> [Maybe015]  ~~>  k51 :: {} [Bit 32] ->> [Maybe015], generics=[], substitution=null
TopLevel specialize: s13 :: [Maybe015]  ~~>  s13 :: [Maybe015], generics=[], substitution=null
TopLevel specialize: genLtInc1 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]  ~~>  genLtInc1 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]], generics=[], substitution=null
Requesting specialization of k451 :: {} [Maybe015] ->> [[[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]]]
ClosureDefn specialize: k451 :: forall (a :: *). {} [a] ->> [[[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]]  ~~>  k451 :: {} [Maybe015] ->> [[[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]]], generics=[?18219], substitution=[?18219 --> Maybe015]
Requesting specialization of k450 :: {Maybe015} [[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]]
ClosureDefn specialize: k450 :: forall (a :: *). {a} [[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]  ~~>  k450 :: {Maybe015} [[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]], generics=[?18215], substitution=[?18215 --> Maybe015]
Requesting specialization of k449 :: {Maybe015, [Word] ->> [Maybe015]} [Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]
ClosureDefn specialize: k449 :: forall (a :: *). {a, [Word] ->> [a]} [Word] ->> [[Word] ->> [[Word] ->> [a]]]  ~~>  k449 :: {Maybe015, [Word] ->> [Maybe015]} [Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]], generics=[?18210], substitution=[?18210 --> Maybe015]
Requesting specialization of k448 :: {Maybe015, [Word] ->> [Maybe015], Word} [Word] ->> [[Word] ->> [Maybe015]]
ClosureDefn specialize: k448 :: forall (a :: *). {a, [Word] ->> [a], Word} [Word] ->> [[Word] ->> [a]]  ~~>  k448 :: {Maybe015, [Word] ->> [Maybe015], Word} [Word] ->> [[Word] ->> [Maybe015]], generics=[?18204], substitution=[?18204 --> Maybe015]
Requesting specialization of k447 :: {Maybe015, [Word] ->> [Maybe015], Word, Word} [Word] ->> [Maybe015]
ClosureDefn specialize: k447 :: forall (a :: *). {a, [Word] ->> [a], Word, Word} [Word] ->> [a]  ~~>  k447 :: {Maybe015, [Word] ->> [Maybe015], Word, Word} [Word] ->> [Maybe015], generics=[?18203], substitution=[?18203 --> Maybe015]
Requesting specialization of b1468 :: [Maybe015, [Word] ->> [Maybe015], Word, Word, Word] >>= [Maybe015]
Block specialize: b1468 :: forall (a :: *). [a, [Word] ->> [a], Word, Word, Word] >>= [a]  ~~>  b1468 :: [Maybe015, [Word] ->> [Maybe015], Word, Word, Word] >>= [Maybe015], generics=[?18196], substitution=[?18196 --> Maybe015]
Requesting specialization of b1466 :: [[Word] ->> [Maybe015], Word] >>= [Maybe015]
Requesting specialization of b1467 :: [Maybe015] >>= [Maybe015]
Block specialize: b1467 :: forall (a :: *). [a] >>= [a]  ~~>  b1467 :: [Maybe015] >>= [Maybe015], generics=[?18180], substitution=[?18180 --> Maybe015]
Block specialize: b1466 :: forall (a :: *) (b :: tuple). [[a] ->> b, a] >>= b  ~~>  b1466 :: [[Word] ->> [Maybe015], Word] >>= [Maybe015], generics=[?18183, ?18184], substitution=[?18183 --> Word, ?18184 --> [Maybe015]]
Block specialize: b289 :: [Word, Word] >>= [Word]  ~~>  b289 :: [Word, Word] >>= [Word], generics=[], substitution=null
Block specialize: construct_Char :: [Word, Word] >>= [Word]  ~~>  construct_Char :: [Word, Word] >>= [Word], generics=[], substitution=null
TopLevel specialize: wordToByte :: [[Bit 32] ->> [Bit 32]]  ~~>  wordToByte :: [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k446 :: {} [Word] ->> [Word]
ClosureDefn specialize: k446 :: {} [Word] ->> [Word]  ~~>  k446 :: {} [Word] ->> [Word], generics=[], substitution=null
TopLevel specialize: set :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  set :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k445 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k445 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]]  ~~>  k445 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k444 :: {Word} [Word] ->> [[] ->> [Unit]]
ClosureDefn specialize: k444 :: {Word} [Word] ->> [[] ->> [Unit]]  ~~>  k444 :: {Word} [Word] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k443 :: {Word, Word} [] ->> [Unit]
ClosureDefn specialize: k443 :: {Word, Word} [] ->> [Unit]  ~~>  k443 :: {Word, Word} [] ->> [Unit], generics=[], substitution=null
TopLevel specialize: @ :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]  ~~>  @ :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k442 :: {} [Word] ->> [[Word] ->> [Word]]
ClosureDefn specialize: k442 :: {} [Word] ->> [[Word] ->> [Word]]  ~~>  k442 :: {} [Word] ->> [[Word] ->> [Word]], generics=[], substitution=null
Requesting specialization of k441 :: {Word} [Word] ->> [Word]
ClosureDefn specialize: k441 :: {Word} [Word] ->> [Word]  ~~>  k441 :: {Word} [Word] ->> [Word], generics=[], substitution=null
Requesting specialization of b1465 :: [Word, Word] >>= [Word]
Block specialize: b1465 :: [Word, Word] >>= [Word]  ~~>  b1465 :: [Word, Word] >>= [Word], generics=[], substitution=null
TopLevel specialize: vram :: [Bit 32]  ~~>  vram :: [Bit 32], generics=[], substitution=null
TopLevel specialize: @1 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]  ~~>  @1 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k440 :: {} [Word] ->> [[Word] ->> [Word]]
ClosureDefn specialize: k440 :: {} [Word] ->> [[Word] ->> [Word]]  ~~>  k440 :: {} [Word] ->> [[Word] ->> [Word]], generics=[], substitution=null
Requesting specialization of k439 :: {Word} [Word] ->> [Word]
ClosureDefn specialize: k439 :: {Word} [Word] ->> [Word]  ~~>  k439 :: {Word} [Word] ->> [Word], generics=[], substitution=null
Requesting specialization of b1464 :: [Word, Word] >>= [Word]
Block specialize: b1464 :: [Word, Word] >>= [Word]  ~~>  b1464 :: [Word, Word] >>= [Word], generics=[], substitution=null
Block specialize: b847 :: [Bit 32] >>= [Unit]  ~~>  b847 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b283 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b282 :: [Word] >>= [Word]
Requesting specialization of b285 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b282 :: [Word] >>= [Word]
Requesting specialization of get2 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of set2 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of b284 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b281 :: [Word] >>= [Word]
Requesting specialization of get1 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of genLtInc :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of Nothing :: [Maybe015]
Requesting specialization of Just :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of ix1 :: [Bit 32]
Requesting specialization of b1001 :: [Maybe015] >>= [Unit]
Requesting specialization of b849 :: [] >>= [Unit]
Block specialize: b849 :: [] >>= [Unit]  ~~>  b849 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b283 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b281 :: [Word] >>= [Word]
Requesting specialization of get1 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b282 :: [Word] >>= [Word]
Requesting specialization of get2 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b284 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b281 :: [Word] >>= [Word]
Requesting specialization of get1 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b282 :: [Word] >>= [Word]
Requesting specialization of get2 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b286 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of get3 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of genLtInc :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of Nothing :: [Maybe015]
Requesting specialization of Just :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of ix1 :: [Bit 32]
Requesting specialization of b1355 :: [Maybe015, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @1 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of vram :: [Bit 32]
Requesting specialization of @ :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of set :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of blank :: [Bit 32]
Requesting specialization of b289 :: [Word, Word] >>= [Word]
Requesting specialization of genLtInc1 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of s13 :: [Maybe015]
Requesting specialization of s14 :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of s12 :: [Bit 32]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b833 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b833 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b833 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b295 :: [] >>= [Unit]  ~~>  b295 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of Unit :: [Unit]
TopLevel specialize: blank :: [Bit 32]  ~~>  blank :: [Bit 32], generics=[], substitution=null
Requesting specialization of b314 :: [] >>= [Bit 32]
Block specialize: b314 :: [] >>= [Bit 32]  ~~>  b314 :: [] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of wordToByte :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of construct_Char :: [Word, Word] >>= [Word]
Block specialize: b1355 :: [Maybe015, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1355 :: [Maybe015, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of genLtInc :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of Nothing :: [Maybe015]
Requesting specialization of Just :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of ix1 :: [Bit 32]
Requesting specialization of b1355 :: [Maybe015, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @1 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of vram :: [Bit 32]
Requesting specialization of @ :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of @1 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of vram :: [Bit 32]
Requesting specialization of @ :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of get4 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of set :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of genLtInc1 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of s13 :: [Maybe015]
Requesting specialization of s14 :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of s12 :: [Bit 32]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b832 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b832 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b832 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
TopLevel specialize: get4 :: [[Bit 32] ->> [[] ->> [Bit 32]]]  ~~>  get4 :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k493 :: {} [Word] ->> [[] ->> [Word]]
ClosureDefn specialize: k493 :: {} [Word] ->> [[] ->> [Word]]  ~~>  k493 :: {} [Word] ->> [[] ->> [Word]], generics=[], substitution=null
Requesting specialization of k492 :: {Word} [] ->> [Word]
ClosureDefn specialize: k492 :: {Word} [] ->> [Word]  ~~>  k492 :: {Word} [] ->> [Word], generics=[], substitution=null
Block specialize: b1001 :: [Maybe015] >>= [Unit]  ~~>  b1001 :: [Maybe015] >>= [Unit], generics=[], substitution=null
Requesting specialization of b285 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b281 :: [Word] >>= [Word]
Requesting specialization of set1 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel specialize: ix1 :: [Bit 32]  ~~>  ix1 :: [Bit 32], generics=[], substitution=null
Requesting specialization of ix1u :: [[Unit] ->> [Bit 32]]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: ix1u :: [[Unit] ->> [Bit 32]]  ~~>  ix1u :: [[Unit] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k458 :: {} [Unit] ->> [Word]
ClosureDefn specialize: k458 :: forall (a :: *). {} [a] ->> [Word]  ~~>  k458 :: {} [Unit] ->> [Word], generics=[?18311], substitution=[?18311 --> Unit]
TopLevel specialize: Just :: [[Bit 32] ->> [Maybe015]]  ~~>  Just :: [[Bit 32] ->> [Maybe015]], generics=[], substitution=null
Requesting specialization of k5 :: {} [Bit 32] ->> [Maybe015]
ClosureDefn specialize: k5 :: {} [Bit 32] ->> [Maybe015]  ~~>  k5 :: {} [Bit 32] ->> [Maybe015], generics=[], substitution=null
TopLevel specialize: Nothing :: [Maybe015]  ~~>  Nothing :: [Maybe015], generics=[], substitution=null
TopLevel specialize: genLtInc :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]  ~~>  genLtInc :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]], generics=[], substitution=null
Requesting specialization of k457 :: {} [Maybe015] ->> [[[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]]]
ClosureDefn specialize: k457 :: forall (a :: *). {} [a] ->> [[[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]]  ~~>  k457 :: {} [Maybe015] ->> [[[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]]], generics=[?18305], substitution=[?18305 --> Maybe015]
Requesting specialization of k456 :: {Maybe015} [[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]]
ClosureDefn specialize: k456 :: forall (a :: *). {a} [[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]  ~~>  k456 :: {Maybe015} [[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]], generics=[?18301], substitution=[?18301 --> Maybe015]
Requesting specialization of k455 :: {Maybe015, [Word] ->> [Maybe015]} [Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]
ClosureDefn specialize: k455 :: forall (a :: *). {a, [Word] ->> [a]} [Word] ->> [[Word] ->> [[Word] ->> [a]]]  ~~>  k455 :: {Maybe015, [Word] ->> [Maybe015]} [Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]], generics=[?18296], substitution=[?18296 --> Maybe015]
Requesting specialization of k454 :: {Maybe015, [Word] ->> [Maybe015], Word} [Word] ->> [[Word] ->> [Maybe015]]
ClosureDefn specialize: k454 :: forall (a :: *). {a, [Word] ->> [a], Word} [Word] ->> [[Word] ->> [a]]  ~~>  k454 :: {Maybe015, [Word] ->> [Maybe015], Word} [Word] ->> [[Word] ->> [Maybe015]], generics=[?18290], substitution=[?18290 --> Maybe015]
Requesting specialization of k453 :: {Maybe015, [Word] ->> [Maybe015], Word, Word} [Word] ->> [Maybe015]
ClosureDefn specialize: k453 :: forall (a :: *). {a, [Word] ->> [a], Word, Word} [Word] ->> [a]  ~~>  k453 :: {Maybe015, [Word] ->> [Maybe015], Word, Word} [Word] ->> [Maybe015], generics=[?18289], substitution=[?18289 --> Maybe015]
Requesting specialization of b1471 :: [Maybe015, [Word] ->> [Maybe015], Word, Word, Word] >>= [Maybe015]
Block specialize: b1471 :: forall (a :: *). [a, [Word] ->> [a], Word, Word, Word] >>= [a]  ~~>  b1471 :: [Maybe015, [Word] ->> [Maybe015], Word, Word, Word] >>= [Maybe015], generics=[?18282], substitution=[?18282 --> Maybe015]
Requesting specialization of b1469 :: [[Word] ->> [Maybe015], Word] >>= [Maybe015]
Requesting specialization of b1470 :: [Maybe015] >>= [Maybe015]
Block specialize: b1470 :: forall (a :: *). [a] >>= [a]  ~~>  b1470 :: [Maybe015] >>= [Maybe015], generics=[?18266], substitution=[?18266 --> Maybe015]
Block specialize: b1469 :: forall (a :: *) (b :: tuple). [[a] ->> b, a] >>= b  ~~>  b1469 :: [[Word] ->> [Maybe015], Word] >>= [Maybe015], generics=[?18269, ?18270], substitution=[?18269 --> Word, ?18270 --> [Maybe015]]
Block specialize: b1210 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1210 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b996 :: [Pair1124] >>= [Unit]
Block specialize: b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b258 :: [Bit 32] >>= [Unit]
Requesting specialization of b256 :: [Bit 32] >>= [Unit]
Block specialize: b256 :: [Bit 32] >>= [Unit]  ~~>  b256 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of outb :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of com1data :: [Bit 32]
TopLevel specialize: com1data :: [Bit 32]  ~~>  com1data :: [Bit 32], generics=[], substitution=null
Requesting specialization of port :: [[Bit 32] ->> [Bit 32]]
TopLevel specialize: port :: [[Bit 32] ->> [Bit 32]]  ~~>  port :: [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k486 :: {} [Word] ->> [Word]
ClosureDefn specialize: k486 :: {} [Word] ->> [Word]  ~~>  k486 :: {} [Word] ->> [Word], generics=[], substitution=null
TopLevel specialize: outb :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  outb :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k491 :: {} [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k491 :: {} [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]  ~~>  k491 :: {} [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k490 :: {Bit 32} [Bit 32] ->> [[] ->> [Unit]]
ClosureDefn specialize: k490 :: {Bit 32} [Bit 32] ->> [[] ->> [Unit]]  ~~>  k490 :: {Bit 32} [Bit 32] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k489 :: {Bit 32, Bit 32} [] ->> [Unit]
ClosureDefn specialize: k489 :: {Bit 32, Bit 32} [] ->> [Unit]  ~~>  k489 :: {Bit 32, Bit 32} [] ->> [Unit], generics=[], substitution=null
Block specialize: b258 :: [Bit 32] >>= [Unit]  ~~>  b258 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
TopLevel specialize: and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]  ~~>  and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k488 :: {} [Word] ->> [[Word] ->> [Word]]
ClosureDefn specialize: k488 :: {} [Word] ->> [[Word] ->> [Word]]  ~~>  k488 :: {} [Word] ->> [[Word] ->> [Word]], generics=[], substitution=null
Requesting specialization of k487 :: {Word} [Word] ->> [Word]
ClosureDefn specialize: k487 :: {Word} [Word] ->> [Word]  ~~>  k487 :: {Word} [Word] ->> [Word], generics=[], substitution=null
Requesting specialization of b1480 :: [Word, Word] >>= [Word]
Block specialize: b1480 :: [Word, Word] >>= [Word]  ~~>  b1480 :: [Word, Word] >>= [Word], generics=[], substitution=null
TopLevel specialize: com1ctrl :: [Bit 32]  ~~>  com1ctrl :: [Bit 32], generics=[], substitution=null
Requesting specialization of b268 :: [] >>= [Bit 32]
Block specialize: b268 :: [] >>= [Bit 32]  ~~>  b268 :: [] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of bitAdd :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of com1data :: [Bit 32]
Requesting specialization of port :: [[Bit 32] ->> [Bit 32]]
TopLevel specialize: bitAdd :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]  ~~>  bitAdd :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k485 :: {} [Word] ->> [[Word] ->> [Word]]
ClosureDefn specialize: k485 :: {} [Word] ->> [[Word] ->> [Word]]  ~~>  k485 :: {} [Word] ->> [[Word] ->> [Word]], generics=[], substitution=null
Requesting specialization of k484 :: {Word} [Word] ->> [Word]
ClosureDefn specialize: k484 :: {Word} [Word] ->> [Word]  ~~>  k484 :: {Word} [Word] ->> [Word], generics=[], substitution=null
Requesting specialization of b1479 :: [Word, Word] >>= [Word]
Block specialize: b1479 :: [Word, Word] >>= [Word]  ~~>  b1479 :: [Word, Word] >>= [Word], generics=[], substitution=null
TopLevel specialize: inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]  ~~>  inb :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k483 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
ClosureDefn specialize: k483 :: {} [Bit 32] ->> [[] ->> [Bit 32]]  ~~>  k483 :: {} [Bit 32] ->> [[] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k482 :: {Bit 32} [] ->> [Bit 32]
ClosureDefn specialize: k482 :: {Bit 32} [] ->> [Bit 32]  ~~>  k482 :: {Bit 32} [] ->> [Bit 32], generics=[], substitution=null
Block specialize: b1201 :: [] >>= [Unit]  ~~>  b1201 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1202 :: [] >>= [Unit]
Requesting specialization of b1302 :: [Maybe1013] >>= [Unit]
Block specialize: b1302 :: [Maybe1013] >>= [Unit]  ~~>  b1302 :: [Maybe1013] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1197 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b884 :: [Maybe1013] >>= [Unit]  ~~>  b884 :: [Maybe1013] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair1124] >>= [Unit]
Block specialize: b1003 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1003 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1004 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of b1005 :: [Bit 32, Pair1124] >>= [Unit]
Block specialize: b1005 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1005 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b947 :: [Pair1124] >>= [Unit]
Block specialize: b947 :: [Pair1124] >>= [Unit]  ~~>  b947 :: [Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b1004 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1004 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b947 :: [Pair1124] >>= [Unit]
Block specialize: b1197 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1197 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1198 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of b1199 :: [Bit 32, Pair1124] >>= [Unit]
Block specialize: b1199 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1199 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b987 :: [Pair1124] >>= [Unit]
Block specialize: b987 :: [Pair1124] >>= [Unit]  ~~>  b987 :: [Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b818 :: [] >>= [Unit]
Requesting specialization of b1196 :: [Maybe1013] >>= [Unit]
Block specialize: b1196 :: [Maybe1013] >>= [Unit]  ~~>  b1196 :: [Maybe1013] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1197 :: [Bit 32, Pair1124] >>= [Unit]
Block specialize: b818 :: [] >>= [Unit]  ~~>  b818 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b463 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get7 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of mimgHeaderCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
Requesting specialization of b1058 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b816 :: [] >>= [Unit]
Requesting specialization of b1191 :: [Maybe1013] >>= [Unit]
Block specialize: b1191 :: [Maybe1013] >>= [Unit]  ~~>  b1191 :: [Maybe1013] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1192 :: [Bit 32, Pair1124] >>= [Unit]
Block specialize: b1192 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1192 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1193 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of b1194 :: [Bit 32, Pair1124] >>= [Unit]
Block specialize: b1194 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1194 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b986 :: [Pair1124] >>= [Unit]
Block specialize: b986 :: [Pair1124] >>= [Unit]  ~~>  b986 :: [Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b816 :: [] >>= [Unit]
Requesting specialization of b1191 :: [Maybe1013] >>= [Unit]
Block specialize: b1193 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1193 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b986 :: [Pair1124] >>= [Unit]
Block specialize: b816 :: [] >>= [Unit]  ~~>  b816 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b464 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get6 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of mimgMMapCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
Requesting specialization of b1122 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b814 :: [] >>= [Unit]
Requesting specialization of b1186 :: [Maybe1013] >>= [Unit]
Block specialize: b1186 :: [Maybe1013] >>= [Unit]  ~~>  b1186 :: [Maybe1013] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1187 :: [Bit 32, Pair1124] >>= [Unit]
Block specialize: b1187 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1187 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1188 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of b1189 :: [Bit 32, Pair1124] >>= [Unit]
Block specialize: b1189 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1189 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b985 :: [Pair1124] >>= [Unit]
Block specialize: b985 :: [Pair1124] >>= [Unit]  ~~>  b985 :: [Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b814 :: [] >>= [Unit]
Requesting specialization of b1186 :: [Maybe1013] >>= [Unit]
Block specialize: b1188 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1188 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b985 :: [Pair1124] >>= [Unit]
Block specialize: b814 :: [] >>= [Unit]  ~~>  b814 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b465 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1283 :: [Bit 32] >>= [Unit]
Requesting specialization of b1299 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1299 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1299 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1179 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1168 :: [Bit 32] >>= [Unit]
Requesting specialization of b1171 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1171 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1171 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1173 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1174 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1174 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1174 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b980 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b980 :: [Pair1124, Bit 32] >>= [Unit]  ~~>  b980 :: [Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1168 :: [Bit 32] >>= [Unit]
Requesting specialization of b1171 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1173 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1173 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b980 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b1168 :: [Bit 32] >>= [Unit]  ~~>  b1168 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b978 :: [Bit 32] >>= [Unit]
Requesting specialization of b1278 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1278 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1278 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1162 :: [Bit 32] >>= [Unit]
Requesting specialization of b1163 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1163 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1163 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1165 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1166 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1166 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1166 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b972 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b972 :: [Pair1124, Bit 32] >>= [Unit]  ~~>  b972 :: [Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1162 :: [Bit 32] >>= [Unit]
Requesting specialization of b1163 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1165 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1165 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b972 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b1162 :: [Bit 32] >>= [Unit]  ~~>  b1162 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b971 :: [Bit 32] >>= [Unit]
Requesting specialization of b1277 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1277 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1277 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b971 :: [Bit 32] >>= [Unit]
Requesting specialization of b1277 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b854 :: [Bit 32] >>= [Unit]  ~~>  b854 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b842 :: [Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Block specialize: b842 :: [Bit 32] >>= [Unit]  ~~>  b842 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b285 :: [Word] >>= [Word]
Requesting specialization of console :: Word
Requesting specialization of b281 :: [Word] >>= [Word]
Requesting specialization of get1 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b847 :: [Bit 32] >>= [Unit]
Requesting specialization of b850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b971 :: [Bit 32] >>= [Unit]  ~~>  b971 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b808 :: [Bit 32] >>= [Unit]
Requesting specialization of b1155 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1155 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1155 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1157 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1158 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1158 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1158 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b970 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b970 :: [Pair1124, Bit 32] >>= [Unit]  ~~>  b970 :: [Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b808 :: [Bit 32] >>= [Unit]
Requesting specialization of b1155 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1157 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1157 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b970 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b808 :: [Bit 32] >>= [Unit]  ~~>  b808 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of refToWord :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b1021 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b1021 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @2 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of itoaBuf :: Word
Requesting specialization of s15 :: [Bit 32]
Requesting specialization of set3 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of nzrem :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of nz16 :: [Bit 32]
Requesting specialization of b1248 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1256 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Block specialize: b1256 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]  ~~>  b1256 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of wordToByte :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b1249 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1249 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1249 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of genLtInc2 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of s19 :: [Maybe015]
Requesting specialization of s20 :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of s18 :: [Bit 32]
Requesting specialization of s15 :: [Bit 32]
Requesting specialization of maxBound2 :: [Bit 32]
Requesting specialization of b1359 :: [Bit 32] >>= [Unit]
Requesting specialization of b1365 :: [Maybe015, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1365 :: [Maybe015, Bit 32, Bit 32] >>= [Unit]  ~~>  b1365 :: [Maybe015, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nzdiv :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of nz16 :: [Bit 32]
Requesting specialization of b1359 :: [Bit 32] >>= [Unit]
Requesting specialization of b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @2 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of itoaBuf :: Word
Requesting specialization of set3 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of nzrem :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of nz16 :: [Bit 32]
Requesting specialization of b1252 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1255 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1255 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1255 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of wordToByte :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b1253 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1253 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1253 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of genLtInc2 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of s19 :: [Maybe015]
Requesting specialization of s20 :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of s18 :: [Bit 32]
Requesting specialization of maxBound2 :: [Bit 32]
Requesting specialization of b1244 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1364 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1364 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1364 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nzdiv :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of nz16 :: [Bit 32]
Requesting specialization of b1244 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1244 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b1244 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1236 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1239 :: [Bit 32] >>= [Unit]
Block specialize: b1239 :: [Bit 32] >>= [Unit]  ~~>  b1239 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @2 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of itoaBuf :: Word
Requesting specialization of get3 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of bitsToWord :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of genLtDec :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of s19 :: [Maybe015]
Requesting specialization of s20 :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of s18 :: [Bit 32]
Requesting specialization of s15 :: [Bit 32]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b1356 :: [Maybe015] >>= [Unit]
Block specialize: b1356 :: [Maybe015] >>= [Unit]  ~~>  b1356 :: [Maybe015] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1239 :: [Bit 32] >>= [Unit]
TopLevel specialize: genLtDec :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]  ~~>  genLtDec :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]], generics=[], substitution=null
Requesting specialization of k498 :: {} [Maybe015] ->> [[[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]]]
ClosureDefn specialize: k498 :: forall (a :: *). {} [a] ->> [[[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]]  ~~>  k498 :: {} [Maybe015] ->> [[[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]]], generics=[?18894], substitution=[?18894 --> Maybe015]
Requesting specialization of k497 :: {Maybe015} [[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]]
ClosureDefn specialize: k497 :: forall (a :: *). {a} [[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]  ~~>  k497 :: {Maybe015} [[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]], generics=[?18890], substitution=[?18890 --> Maybe015]
Requesting specialization of k496 :: {Maybe015, [Word] ->> [Maybe015]} [Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]
ClosureDefn specialize: k496 :: forall (a :: *). {a, [Word] ->> [a]} [Word] ->> [[Word] ->> [[Word] ->> [a]]]  ~~>  k496 :: {Maybe015, [Word] ->> [Maybe015]} [Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]], generics=[?18885], substitution=[?18885 --> Maybe015]
Requesting specialization of k495 :: {Maybe015, [Word] ->> [Maybe015], Word} [Word] ->> [[Word] ->> [Maybe015]]
ClosureDefn specialize: k495 :: forall (a :: *). {a, [Word] ->> [a], Word} [Word] ->> [[Word] ->> [a]]  ~~>  k495 :: {Maybe015, [Word] ->> [Maybe015], Word} [Word] ->> [[Word] ->> [Maybe015]], generics=[?18879], substitution=[?18879 --> Maybe015]
Requesting specialization of k494 :: {Maybe015, [Word] ->> [Maybe015], Word, Word} [Word] ->> [Maybe015]
ClosureDefn specialize: k494 :: forall (a :: *). {a, [Word] ->> [a], Word, Word} [Word] ->> [a]  ~~>  k494 :: {Maybe015, [Word] ->> [Maybe015], Word, Word} [Word] ->> [Maybe015], generics=[?18878], substitution=[?18878 --> Maybe015]
Requesting specialization of b1483 :: [Maybe015, [Word] ->> [Maybe015], Word, Word, Word] >>= [Maybe015]
Block specialize: b1483 :: forall (a :: *). [a, [Word] ->> [a], Word, Word, Word] >>= [a]  ~~>  b1483 :: [Maybe015, [Word] ->> [Maybe015], Word, Word, Word] >>= [Maybe015], generics=[?18871], substitution=[?18871 --> Maybe015]
Requesting specialization of b1481 :: [[Word] ->> [Maybe015], Word] >>= [Maybe015]
Requesting specialization of b1482 :: [Maybe015] >>= [Maybe015]
Block specialize: b1482 :: forall (a :: *). [a] >>= [a]  ~~>  b1482 :: [Maybe015] >>= [Maybe015], generics=[?18855], substitution=[?18855 --> Maybe015]
Block specialize: b1481 :: forall (a :: *) (b :: tuple). [[a] ->> b, a] >>= b  ~~>  b1481 :: [[Word] ->> [Maybe015], Word] >>= [Maybe015], generics=[?18858, ?18859], substitution=[?18858 --> Word, ?18859 --> [Maybe015]]
TopLevel specialize: bitsToWord :: [[Bit 32] ->> [Bit 32]]  ~~>  bitsToWord :: [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k481 :: {} [Bit 32] ->> [Bit 32]
ClosureDefn specialize: k481 :: forall (a :: *). {} [a] ->> [a]  ~~>  k481 :: {} [Bit 32] ->> [Bit 32], generics=[?18512], substitution=[?18512 --> Bit 32]
Block specialize: b1236 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b1236 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of genLtInc2 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of s19 :: [Maybe015]
Requesting specialization of s20 :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of s18 :: [Bit 32]
Requesting specialization of s15 :: [Bit 32]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b1357 :: [Maybe015, Bit 32] >>= [Unit]
Block specialize: b1357 :: [Maybe015, Bit 32] >>= [Unit]  ~~>  b1357 :: [Maybe015, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b1236 :: [Bit 32, Bit 32] >>= [Unit]
Block specialize: b1252 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1252 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of wordToByte :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b1253 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
TopLevel specialize: nzdiv :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]  ~~>  nzdiv :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k500 :: {} [Bit 32] ->> [[Word] ->> [Bit 32]]
ClosureDefn specialize: k500 :: {} [Bit 32] ->> [[Word] ->> [Bit 32]]  ~~>  k500 :: {} [Bit 32] ->> [[Word] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k499 :: {Bit 32} [Word] ->> [Bit 32]
ClosureDefn specialize: k499 :: {Bit 32} [Word] ->> [Bit 32]  ~~>  k499 :: {Bit 32} [Word] ->> [Bit 32], generics=[], substitution=null
Block specialize: b1359 :: [Bit 32] >>= [Unit]  ~~>  b1359 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of genLtInc2 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of s19 :: [Maybe015]
Requesting specialization of s20 :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of s18 :: [Bit 32]
Requesting specialization of s15 :: [Bit 32]
Requesting specialization of s15 :: [Bit 32]
Requesting specialization of b1303 :: [] >>= [Unit]
Requesting specialization of b1443 :: [Maybe015, Bit 32] >>= [Unit]
Block specialize: b1443 :: [Maybe015, Bit 32] >>= [Unit]  ~~>  b1443 :: [Maybe015, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b1236 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1303 :: [] >>= [Unit]
Block specialize: b1303 :: [] >>= [Unit]  ~~>  b1303 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of @2 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of itoaBuf :: Word
Requesting specialization of s15 :: [Bit 32]
Requesting specialization of get3 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of bitsToWord :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of genLtDec :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of s19 :: [Maybe015]
Requesting specialization of s20 :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of s18 :: [Bit 32]
Requesting specialization of s15 :: [Bit 32]
Requesting specialization of s15 :: [Bit 32]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b1356 :: [Maybe015] >>= [Unit]
TopLevel specialize: maxBound2 :: [Bit 32]  ~~>  maxBound2 :: [Bit 32], generics=[], substitution=null
TopLevel specialize: s18 :: [Bit 32]  ~~>  s18 :: [Bit 32], generics=[], substitution=null
Requesting specialization of ix1u2 :: [[Unit] ->> [Bit 32]]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: ix1u2 :: [[Unit] ->> [Bit 32]]  ~~>  ix1u2 :: [[Unit] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k480 :: {} [Unit] ->> [Word]
ClosureDefn specialize: k480 :: forall (a :: *). {} [a] ->> [Word]  ~~>  k480 :: {} [Unit] ->> [Word], generics=[?18508], substitution=[?18508 --> Unit]
TopLevel specialize: s20 :: [[Bit 32] ->> [Maybe015]]  ~~>  s20 :: [[Bit 32] ->> [Maybe015]], generics=[], substitution=null
Requesting specialization of k52 :: {} [Bit 32] ->> [Maybe015]
ClosureDefn specialize: k52 :: {} [Bit 32] ->> [Maybe015]  ~~>  k52 :: {} [Bit 32] ->> [Maybe015], generics=[], substitution=null
TopLevel specialize: s19 :: [Maybe015]  ~~>  s19 :: [Maybe015], generics=[], substitution=null
TopLevel specialize: genLtInc2 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]  ~~>  genLtInc2 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]], generics=[], substitution=null
Requesting specialization of k479 :: {} [Maybe015] ->> [[[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]]]
ClosureDefn specialize: k479 :: forall (a :: *). {} [a] ->> [[[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]]  ~~>  k479 :: {} [Maybe015] ->> [[[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]]], generics=[?18502], substitution=[?18502 --> Maybe015]
Requesting specialization of k478 :: {Maybe015} [[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]]
ClosureDefn specialize: k478 :: forall (a :: *). {a} [[Word] ->> [a]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [a]]]]  ~~>  k478 :: {Maybe015} [[Word] ->> [Maybe015]] ->> [[Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]], generics=[?18498], substitution=[?18498 --> Maybe015]
Requesting specialization of k477 :: {Maybe015, [Word] ->> [Maybe015]} [Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]]
ClosureDefn specialize: k477 :: forall (a :: *). {a, [Word] ->> [a]} [Word] ->> [[Word] ->> [[Word] ->> [a]]]  ~~>  k477 :: {Maybe015, [Word] ->> [Maybe015]} [Word] ->> [[Word] ->> [[Word] ->> [Maybe015]]], generics=[?18493], substitution=[?18493 --> Maybe015]
Requesting specialization of k476 :: {Maybe015, [Word] ->> [Maybe015], Word} [Word] ->> [[Word] ->> [Maybe015]]
ClosureDefn specialize: k476 :: forall (a :: *). {a, [Word] ->> [a], Word} [Word] ->> [[Word] ->> [a]]  ~~>  k476 :: {Maybe015, [Word] ->> [Maybe015], Word} [Word] ->> [[Word] ->> [Maybe015]], generics=[?18487], substitution=[?18487 --> Maybe015]
Requesting specialization of k475 :: {Maybe015, [Word] ->> [Maybe015], Word, Word} [Word] ->> [Maybe015]
ClosureDefn specialize: k475 :: forall (a :: *). {a, [Word] ->> [a], Word, Word} [Word] ->> [a]  ~~>  k475 :: {Maybe015, [Word] ->> [Maybe015], Word, Word} [Word] ->> [Maybe015], generics=[?18486], substitution=[?18486 --> Maybe015]
Requesting specialization of b1478 :: [Maybe015, [Word] ->> [Maybe015], Word, Word, Word] >>= [Maybe015]
Block specialize: b1478 :: forall (a :: *). [a, [Word] ->> [a], Word, Word, Word] >>= [a]  ~~>  b1478 :: [Maybe015, [Word] ->> [Maybe015], Word, Word, Word] >>= [Maybe015], generics=[?18479], substitution=[?18479 --> Maybe015]
Requesting specialization of b1476 :: [[Word] ->> [Maybe015], Word] >>= [Maybe015]
Requesting specialization of b1477 :: [Maybe015] >>= [Maybe015]
Block specialize: b1477 :: forall (a :: *). [a] >>= [a]  ~~>  b1477 :: [Maybe015] >>= [Maybe015], generics=[?18463], substitution=[?18463 --> Maybe015]
Block specialize: b1476 :: forall (a :: *) (b :: tuple). [[a] ->> b, a] >>= b  ~~>  b1476 :: [[Word] ->> [Maybe015], Word] >>= [Maybe015], generics=[?18466, ?18467], substitution=[?18466 --> Word, ?18467 --> [Maybe015]]
Block specialize: b1248 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]  ~~>  b1248 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of wordToByte :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b1249 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
TopLevel specialize: nz16 :: [Bit 32]  ~~>  nz16 :: [Bit 32], generics=[], substitution=null
Requesting specialization of nz16u :: [[Unit] ->> [Bit 32]]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: nz16u :: [[Unit] ->> [Bit 32]]  ~~>  nz16u :: [[Unit] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k501 :: {} [Unit] ->> [Word]
ClosureDefn specialize: k501 :: forall (a :: *). {} [a] ->> [Word]  ~~>  k501 :: {} [Unit] ->> [Word], generics=[?19104], substitution=[?19104 --> Unit]
TopLevel specialize: nzrem :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]  ~~>  nzrem :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k473 :: {} [Bit 32] ->> [[Word] ->> [Bit 32]]
ClosureDefn specialize: k473 :: {} [Bit 32] ->> [[Word] ->> [Bit 32]]  ~~>  k473 :: {} [Bit 32] ->> [[Word] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k472 :: {Bit 32} [Word] ->> [Bit 32]
ClosureDefn specialize: k472 :: {Bit 32} [Word] ->> [Bit 32]  ~~>  k472 :: {Bit 32} [Word] ->> [Bit 32], generics=[], substitution=null
TopLevel specialize: set3 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  set3 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k471 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k471 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]]  ~~>  k471 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k470 :: {Word} [Word] ->> [[] ->> [Unit]]
ClosureDefn specialize: k470 :: {Word} [Word] ->> [[] ->> [Unit]]  ~~>  k470 :: {Word} [Word] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k469 :: {Word, Word} [] ->> [Unit]
ClosureDefn specialize: k469 :: {Word, Word} [] ->> [Unit]  ~~>  k469 :: {Word, Word} [] ->> [Unit], generics=[], substitution=null
TopLevel specialize: s15 :: [Bit 32]  ~~>  s15 :: [Bit 32], generics=[], substitution=null
Requesting specialization of ix0u2 :: [[Unit] ->> [Bit 32]]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: ix0u2 :: [[Unit] ->> [Bit 32]]  ~~>  ix0u2 :: [[Unit] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k468 :: {} [Unit] ->> [Word]
ClosureDefn specialize: k468 :: forall (a :: *). {} [a] ->> [Word]  ~~>  k468 :: {} [Unit] ->> [Word], generics=[?18442], substitution=[?18442 --> Unit]
TopLevel specialize: @2 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]  ~~>  @2 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k464 :: {} [Word] ->> [[Word] ->> [Word]]
ClosureDefn specialize: k464 :: {} [Word] ->> [[Word] ->> [Word]]  ~~>  k464 :: {} [Word] ->> [[Word] ->> [Word]], generics=[], substitution=null
Requesting specialization of k463 :: {Word} [Word] ->> [Word]
ClosureDefn specialize: k463 :: {Word} [Word] ->> [Word]  ~~>  k463 :: {Word} [Word] ->> [Word], generics=[], substitution=null
Requesting specialization of b1472 :: [Word, Word] >>= [Word]
Block specialize: b1472 :: [Word, Word] >>= [Word]  ~~>  b1472 :: [Word, Word] >>= [Word], generics=[], substitution=null
TopLevel specialize: refToWord :: [[Bit 32] ->> [Bit 32]]  ~~>  refToWord :: [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of refToWord_imp :: [[Bit 32] ->> [Bit 32]]
TopLevel specialize: refToWord_imp :: [[Bit 32] ->> [Bit 32]]  ~~>  refToWord_imp :: [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of ptrToWordImp :: [[Bit 32] ->> [Bit 32]]
TopLevel specialize: ptrToWordImp :: [[Bit 32] ->> [Bit 32]]  ~~>  ptrToWordImp :: [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k44 :: {} [Bit 32] ->> [Bit 32]
ClosureDefn specialize: k44 :: {} [Bit 32] ->> [Bit 32]  ~~>  k44 :: {} [Bit 32] ->> [Bit 32], generics=[], substitution=null
Block specialize: b978 :: [Bit 32] >>= [Unit]  ~~>  b978 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1162 :: [Bit 32] >>= [Unit]
Requesting specialization of b1163 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b466 :: [Word] >>= [Word]  ~~>  b466 :: [Word] >>= [Word], generics=[], substitution=null
Block specialize: b1179 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1179 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1180 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1181 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1181 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1181 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b977 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b977 :: [Pair1124, Bit 32] >>= [Unit]  ~~>  b977 :: [Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1175 :: [Bit 32] >>= [Unit]
Requesting specialization of b1178 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1178 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1178 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1179 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1175 :: [Bit 32] >>= [Unit]  ~~>  b1175 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b978 :: [Bit 32] >>= [Unit]
Requesting specialization of b1278 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1180 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1180 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b977 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b1283 :: [Bit 32] >>= [Unit]  ~~>  b1283 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1284 :: [Bit 32] >>= [Unit]
Requesting specialization of b1442 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1442 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1442 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1285 :: [Bit 32] >>= [Unit]
Requesting specialization of b1441 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1441 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1441 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1295 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1296 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1296 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1296 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b972 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1168 :: [Bit 32] >>= [Unit]
Requesting specialization of b1171 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1295 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1295 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b972 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1168 :: [Bit 32] >>= [Unit]
Requesting specialization of b1171 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1285 :: [Bit 32] >>= [Unit]  ~~>  b1285 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1286 :: [Bit 32] >>= [Unit]
Requesting specialization of b1440 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1440 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1440 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1286 :: [Bit 32] >>= [Unit]
Requesting specialization of b1440 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1286 :: [Bit 32] >>= [Unit]  ~~>  b1286 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1287 :: [Bit 32] >>= [Unit]
Requesting specialization of b1439 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1439 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1439 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1291 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1292 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1292 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1292 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b970 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1168 :: [Bit 32] >>= [Unit]
Requesting specialization of b1171 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1291 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1291 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b970 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1168 :: [Bit 32] >>= [Unit]
Requesting specialization of b1171 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1287 :: [Bit 32] >>= [Unit]  ~~>  b1287 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of refToWord :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1212 :: [] >>= [Unit]
Requesting specialization of b1438 :: [Maybe1013] >>= [Unit]
Block specialize: b1438 :: [Maybe1013] >>= [Unit]  ~~>  b1438 :: [Maybe1013] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1168 :: [Bit 32] >>= [Unit]
Requesting specialization of b1171 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1212 :: [] >>= [Unit]  ~~>  b1212 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1168 :: [Bit 32] >>= [Unit]
Requesting specialization of b1171 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1284 :: [Bit 32] >>= [Unit]  ~~>  b1284 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1285 :: [Bit 32] >>= [Unit]
Requesting specialization of b1441 :: [Maybe1013, Bit 32] >>= [Unit]
TopLevel specialize: get :: [[Bit 32] ->> [[] ->> [Bit 32]]]  ~~>  get :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k505 :: {} [Word] ->> [[] ->> [Bit 32]]
ClosureDefn specialize: k505 :: {} [Word] ->> [[] ->> [Bit 32]]  ~~>  k505 :: {} [Word] ->> [[] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k504 :: {Word} [] ->> [Bit 32]
ClosureDefn specialize: k504 :: {Word} [] ->> [Bit 32]  ~~>  k504 :: {Word} [] ->> [Bit 32], generics=[], substitution=null
Block specialize: b465 :: [Word] >>= [Word]  ~~>  b465 :: [Word] >>= [Word], generics=[], substitution=null
Block specialize: b1122 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1122 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextMimgMMap :: [[Bit 32, Bit 32] ->> [Maybe421]]
Maybe42129 is a specialized DataType for Maybe421
Pair32030 is a specialized DataType for Pair320
Requesting specialization of b436 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1276 :: [Maybe421, Bit 32] >>= [Bit 32]
Block specialize: b1276 :: [Maybe421, Bit 32] >>= [Bit 32]  ~~>  b1276 :: [Maybe421, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1126 :: [Bit 32, Bit 32, Pair320] >>= [Bit 32]
Requesting specialization of b1275 :: [Maybe1013, Bit 32, Bit 32, Pair320] >>= [Bit 32]
Block specialize: b1275 :: [Maybe1013, Bit 32, Bit 32, Pair320] >>= [Bit 32]  ~~>  b1275 :: [Maybe1013, Bit 32, Bit 32, Pair320] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1149 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1122 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1149 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1149 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1150 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1154 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1154 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1154 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1151 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1151 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1151 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1128 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1270 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1270 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1270 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1149 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1128 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1128 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1130 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1269 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1269 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1269 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1130 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1269 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1130 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1130 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1131 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1268 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1268 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1268 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1142 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1144 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1144 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1144 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1143 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1143 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1143 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1131 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1268 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1142 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1142 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1143 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1131 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1131 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1034 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1384 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1267 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1267 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1267 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1136 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1138 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1138 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1138 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1137 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1137 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1137 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1384 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1267 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1136 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1136 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1137 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1384 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1384 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1385 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1449 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1449 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1449 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1393 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1394 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1394 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1394 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b960 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1099 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1099 :: [Maybe1013, Bit 32] >>= [Bit 32]  ~~>  b1099 :: [Maybe1013, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1101 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32]
Requesting specialization of b1102 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32]
Block specialize: b1102 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32]  ~~>  b1102 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b961 :: [Pair1124, Bit 32] >>= [Bit 32]
Block specialize: b961 :: [Pair1124, Bit 32] >>= [Bit 32]  ~~>  b961 :: [Pair1124, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1099 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1101 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32]  ~~>  b1101 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b961 :: [Pair1124, Bit 32] >>= [Bit 32]
Block specialize: b792 :: [Bit 32] >>= [Bit 32]  ~~>  b792 :: [Bit 32] >>= [Bit 32], generics=[], substitution=null
Block specialize: b960 :: [Pair1124, Bit 32] >>= [Unit]  ~~>  b960 :: [Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b802 :: [Bit 32] >>= [Unit]
Requesting specialization of b1095 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1095 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1095 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1097 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1098 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1098 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1098 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b960 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b1097 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1097 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b960 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b802 :: [Bit 32] >>= [Unit]  ~~>  b802 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b470 :: [Word] >>= [Word]
Requesting specialization of get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b800 :: [Bit 32] >>= [Unit]
Requesting specialization of b1091 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1091 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1091 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1093 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1094 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1094 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1094 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b959 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b959 :: [Pair1124, Bit 32] >>= [Unit]  ~~>  b959 :: [Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b800 :: [Bit 32] >>= [Unit]
Requesting specialization of b1091 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1093 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1093 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b959 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b800 :: [Bit 32] >>= [Unit]  ~~>  b800 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b471 :: [Word] >>= [Word]
Requesting specialization of get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b471 :: [Word] >>= [Word]  ~~>  b471 :: [Word] >>= [Word], generics=[], substitution=null
TopLevel specialize: get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]  ~~>  get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k462 :: {} [Word] ->> [[] ->> [Bit 32]]
ClosureDefn specialize: k462 :: {} [Word] ->> [[] ->> [Bit 32]]  ~~>  k462 :: {} [Word] ->> [[] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k461 :: {Word} [] ->> [Bit 32]
ClosureDefn specialize: k461 :: {Word} [] ->> [Bit 32]  ~~>  k461 :: {Word} [] ->> [Bit 32], generics=[], substitution=null
Block specialize: b470 :: [Word] >>= [Word]  ~~>  b470 :: [Word] >>= [Word], generics=[], substitution=null
Block specialize: b1393 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1393 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b960 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1099 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1385 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1385 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b470 :: [Word] >>= [Word]
Requesting specialization of get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1386 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1448 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1448 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1448 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1390 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1391 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1391 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1391 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b959 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1099 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1390 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1390 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b959 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1099 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1386 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1386 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b471 :: [Word] >>= [Word]
Requesting specialization of get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1321 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1447 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1447 :: [Maybe1013, Bit 32] >>= [Bit 32]  ~~>  b1447 :: [Maybe1013, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1099 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1321 :: [Bit 32] >>= [Bit 32]  ~~>  b1321 :: [Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1099 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1034 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b1034 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @2 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of itoaBuf :: Word
Requesting specialization of s15 :: [Bit 32]
Requesting specialization of set3 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of nzrem :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of nz10 :: [Bit 32]
Requesting specialization of b1231 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1247 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Block specialize: b1247 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]  ~~>  b1247 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of wordToByte :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b1232 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1232 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1232 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of genLtInc2 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of s19 :: [Maybe015]
Requesting specialization of s20 :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of s18 :: [Bit 32]
Requesting specialization of s15 :: [Bit 32]
Requesting specialization of maxBound2 :: [Bit 32]
Requesting specialization of b1359 :: [Bit 32] >>= [Unit]
Requesting specialization of b1363 :: [Maybe015, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1363 :: [Maybe015, Bit 32, Bit 32] >>= [Unit]  ~~>  b1363 :: [Maybe015, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nzdiv :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of nz10 :: [Bit 32]
Requesting specialization of b1359 :: [Bit 32] >>= [Unit]
Requesting specialization of b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @2 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of itoaBuf :: Word
Requesting specialization of set3 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of nzrem :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of nz10 :: [Bit 32]
Requesting specialization of b1242 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1246 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1246 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1246 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of wordToByte :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b1243 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1243 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1243 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of genLtInc2 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of s19 :: [Maybe015]
Requesting specialization of s20 :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of s18 :: [Bit 32]
Requesting specialization of maxBound2 :: [Bit 32]
Requesting specialization of b1244 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1362 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1362 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1362 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nzdiv :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of nz10 :: [Bit 32]
Requesting specialization of b1244 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1242 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1242 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of wordToByte :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b1243 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1231 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]  ~~>  b1231 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of wordToByte :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b1232 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
TopLevel specialize: nz10 :: [Bit 32]  ~~>  nz10 :: [Bit 32], generics=[], substitution=null
Requesting specialization of nz10u :: [[Unit] ->> [Bit 32]]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: nz10u :: [[Unit] ->> [Bit 32]]  ~~>  nz10u :: [[Unit] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k474 :: {} [Unit] ->> [Word]
ClosureDefn specialize: k474 :: forall (a :: *). {} [a] ->> [Word]  ~~>  k474 :: {} [Unit] ->> [Word], generics=[?18459], substitution=[?18459 --> Unit]
Block specialize: b1150 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1150 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1151 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1126 :: [Bit 32, Bit 32, Pair320] >>= [Bit 32]  ~~>  b1126 :: [Bit 32, Bit 32, Pair320] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1128 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1122 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b436 :: [Bit 32] >>= [Bit 32]  ~~>  b436 :: [Bit 32] >>= [Bit 32], generics=[], substitution=null
TopLevel specialize: nextMimgMMap :: [[Bit 32, Bit 32] ->> [Maybe421]]  ~~>  nextMimgMMap :: [[Bit 32, Bit 32] ->> [Maybe421]], generics=[], substitution=null
Requesting specialization of nextMimgMMap_imp :: [[Bit 32, Bit 32] ->> [Maybe421]]
TopLevel specialize: nextMimgMMap_imp :: [[Bit 32, Bit 32] ->> [Maybe421]]  ~~>  nextMimgMMap_imp :: [[Bit 32, Bit 32] ->> [Maybe421]], generics=[], substitution=null
Requesting specialization of k231 :: {Bit 32} [Bit 32, Bit 32] ->> [Maybe421]
ClosureDefn specialize: k231 :: {Bit 32} [Bit 32, Bit 32] ->> [Maybe421]  ~~>  k231 :: {Bit 32} [Bit 32, Bit 32] ->> [Maybe421], generics=[], substitution=null
Requesting specialization of b493 :: [Bit 32, Bit 32, Bit 32] >>= [Maybe421]
Block specialize: b493 :: [Bit 32, Bit 32, Bit 32] >>= [Maybe421]  ~~>  b493 :: [Bit 32, Bit 32, Bit 32] >>= [Maybe421], generics=[], substitution=null
Requesting specialization of b476 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b492 :: [] >>= [Maybe421]
Requesting specialization of b491 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Maybe421]
Block specialize: b491 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Maybe421]  ~~>  b491 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Maybe421], generics=[], substitution=null
Requesting specialization of b474 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of construct_WordCursor :: [Word, Word] >>= [Word, Word]
Block specialize: construct_WordCursor :: forall (a :: *) (b :: *). [a, b] >>= [b, a]  ~~>  construct_WordCursor :: [Word, Word] >>= [Word, Word], generics=[?18370, ?18371], substitution=[?18370 --> Word, ?18371 --> Word]
Block specialize: b474 :: forall (a :: *) (b :: *). [a, b] >>= [b]  ~~>  b474 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[?18397, ?18398], substitution=[?18397 --> Bit 32, ?18398 --> Bit 32]
Block specialize: b492 :: [] >>= [Maybe421]  ~~>  b492 :: [] >>= [Maybe421], generics=[], substitution=null
Requesting specialization of s23 :: [Maybe421]
TopLevel specialize: s23 :: [Maybe421]  ~~>  s23 :: [Maybe421], generics=[], substitution=null
Block specialize: b476 :: forall (a :: *) (b :: *). [a, b] >>= [a]  ~~>  b476 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[?18393, ?18394], substitution=[?18393 --> Bit 32, ?18394 --> Bit 32]
TopLevel specialize: mimgMMapCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]  ~~>  mimgMMapCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]], generics=[], substitution=null
Requesting specialization of wordCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
TopLevel specialize: wordCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]  ~~>  wordCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]], generics=[], substitution=null
Requesting specialization of k229 :: {} [Bit 32] ->> [[] ->> [Bit 32, Bit 32]]
ClosureDefn specialize: k229 :: {} [Bit 32] ->> [[] ->> [Bit 32, Bit 32]]  ~~>  k229 :: {} [Bit 32] ->> [[] ->> [Bit 32, Bit 32]], generics=[], substitution=null
Requesting specialization of k228 :: {Bit 32} [] ->> [Bit 32, Bit 32]
ClosureDefn specialize: k228 :: {Bit 32} [] ->> [Bit 32, Bit 32]  ~~>  k228 :: {Bit 32} [] ->> [Bit 32, Bit 32], generics=[], substitution=null
Requesting specialization of b485 :: [Bit 32] >>= [Bit 32, Bit 32]
Block specialize: b485 :: [Bit 32] >>= [Bit 32, Bit 32]  ~~>  b485 :: [Bit 32] >>= [Bit 32, Bit 32], generics=[], substitution=null
Requesting specialization of get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of refToWord1 :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of construct_WordCursor :: [Word, Bit 32] >>= [Bit 32, Word]
TopLevel specialize: refToWord1 :: [[Bit 32] ->> [Bit 32]]  ~~>  refToWord1 :: [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of refToWord_imp :: [[Bit 32] ->> [Bit 32]]
TopLevel specialize: get6 :: [[Bit 32] ->> [[] ->> [Bit 32]]]  ~~>  get6 :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k503 :: {} [Word] ->> [[] ->> [Bit 32]]
ClosureDefn specialize: k503 :: {} [Word] ->> [[] ->> [Bit 32]]  ~~>  k503 :: {} [Word] ->> [[] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k502 :: {Word} [] ->> [Bit 32]
ClosureDefn specialize: k502 :: {Word} [] ->> [Bit 32]  ~~>  k502 :: {Word} [] ->> [Bit 32], generics=[], substitution=null
Block specialize: b464 :: [Word] >>= [Word]  ~~>  b464 :: [Word] >>= [Word], generics=[], substitution=null
Block specialize: b1058 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1058 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextMimgHeader :: [[Bit 32, Bit 32] ->> [Maybe421]]
Requesting specialization of b436 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1266 :: [Maybe421, Bit 32] >>= [Bit 32]
Block specialize: b1266 :: [Maybe421, Bit 32] >>= [Bit 32]  ~~>  b1266 :: [Maybe421, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1062 :: [Bit 32, Bit 32, Pair320] >>= [Bit 32]
Requesting specialization of b1265 :: [Maybe1013, Bit 32, Bit 32, Pair320] >>= [Bit 32]
Block specialize: b1265 :: [Maybe1013, Bit 32, Bit 32, Pair320] >>= [Bit 32]  ~~>  b1265 :: [Maybe1013, Bit 32, Bit 32, Pair320] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1085 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1058 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1085 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1085 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1086 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1090 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1090 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1090 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1087 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1087 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1087 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1064 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1260 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1260 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1260 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1085 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1064 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1064 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1066 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1259 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1259 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1259 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1066 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1259 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1066 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1066 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1067 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1258 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1258 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1258 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1078 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1080 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1080 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1080 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1079 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1079 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1079 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1067 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1258 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1078 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1078 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1079 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1067 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1067 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1034 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1369 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1257 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1257 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1257 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1072 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1074 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1074 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1074 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1073 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1073 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1073 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1369 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1257 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1072 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1072 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1073 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1369 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1369 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1370 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1446 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1446 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1446 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1380 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1381 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1381 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1381 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b946 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1035 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1035 :: [Maybe1013, Bit 32] >>= [Bit 32]  ~~>  b1035 :: [Maybe1013, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1037 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32]
Requesting specialization of b1038 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32]
Block specialize: b1038 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32]  ~~>  b1038 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b949 :: [Pair1124, Bit 32] >>= [Bit 32]
Block specialize: b949 :: [Pair1124, Bit 32] >>= [Bit 32]  ~~>  b949 :: [Pair1124, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1035 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1037 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32]  ~~>  b1037 :: [Bit 32, Pair1124, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b949 :: [Pair1124, Bit 32] >>= [Bit 32]
Block specialize: b946 :: [Pair1124, Bit 32] >>= [Unit]  ~~>  b946 :: [Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b790 :: [Bit 32] >>= [Unit]
Requesting specialization of b1030 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1030 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1030 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1032 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1033 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1033 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1033 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b946 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b1032 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1032 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b946 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b790 :: [Bit 32] >>= [Unit]  ~~>  b790 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b467 :: [Word] >>= [Word]
Requesting specialization of get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b788 :: [Bit 32] >>= [Unit]
Requesting specialization of b1026 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1026 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1026 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1028 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1029 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1029 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1029 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b945 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b945 :: [Pair1124, Bit 32] >>= [Unit]  ~~>  b945 :: [Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b788 :: [Bit 32] >>= [Unit]
Requesting specialization of b1026 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1028 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1028 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b945 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b788 :: [Bit 32] >>= [Unit]  ~~>  b788 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b468 :: [Word] >>= [Word]
Requesting specialization of get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b784 :: [Bit 32] >>= [Unit]
Requesting specialization of b1022 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1022 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1022 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1024 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1025 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1025 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1025 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b941 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b941 :: [Pair1124, Bit 32] >>= [Unit]  ~~>  b941 :: [Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b784 :: [Bit 32] >>= [Unit]
Requesting specialization of b1022 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1024 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1024 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b941 :: [Pair1124, Bit 32] >>= [Unit]
Block specialize: b784 :: [Bit 32] >>= [Unit]  ~~>  b784 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b469 :: [Word] >>= [Word]
Requesting specialization of get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Block specialize: b469 :: [Word] >>= [Word]  ~~>  b469 :: [Word] >>= [Word], generics=[], substitution=null
Block specialize: b468 :: [Word] >>= [Word]  ~~>  b468 :: [Word] >>= [Word], generics=[], substitution=null
Block specialize: b467 :: [Word] >>= [Word]  ~~>  b467 :: [Word] >>= [Word], generics=[], substitution=null
Block specialize: b1380 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1380 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b946 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1035 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1370 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1370 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b467 :: [Word] >>= [Word]
Requesting specialization of get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1371 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1445 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1445 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1445 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1377 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1378 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1378 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1378 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b945 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1035 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1377 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1377 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b945 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1035 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1371 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1371 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b468 :: [Word] >>= [Word]
Requesting specialization of get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1372 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1444 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1444 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1444 :: [Maybe1013, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1374 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1375 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1375 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1375 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b941 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1035 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1374 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1374 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b941 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1035 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1372 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1372 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b469 :: [Word] >>= [Word]
Requesting specialization of get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1035 :: [Maybe1013, Bit 32] >>= [Bit 32]
Block specialize: b1086 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1086 :: [Bit 32, Pair1124, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1087 :: [Pair1124, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1062 :: [Bit 32, Bit 32, Pair320] >>= [Bit 32]  ~~>  b1062 :: [Bit 32, Bit 32, Pair320] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1064 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1058 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
TopLevel specialize: nextMimgHeader :: [[Bit 32, Bit 32] ->> [Maybe421]]  ~~>  nextMimgHeader :: [[Bit 32, Bit 32] ->> [Maybe421]], generics=[], substitution=null
Requesting specialization of nextMimgHeader_imp :: [[Bit 32, Bit 32] ->> [Maybe421]]
TopLevel specialize: nextMimgHeader_imp :: [[Bit 32, Bit 32] ->> [Maybe421]]  ~~>  nextMimgHeader_imp :: [[Bit 32, Bit 32] ->> [Maybe421]], generics=[], substitution=null
Requesting specialization of k231 :: {Bit 32} [Bit 32, Bit 32] ->> [Maybe421]
TopLevel specialize: mimgHeaderCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]  ~~>  mimgHeaderCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]], generics=[], substitution=null
Requesting specialization of wordCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
TopLevel specialize: get7 :: [[Bit 32] ->> [[] ->> [Bit 32]]]  ~~>  get7 :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k460 :: {} [Word] ->> [[] ->> [Bit 32]]
ClosureDefn specialize: k460 :: {} [Word] ->> [[] ->> [Bit 32]]  ~~>  k460 :: {} [Word] ->> [[] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k459 :: {Word} [] ->> [Bit 32]
ClosureDefn specialize: k459 :: {Word} [] ->> [Bit 32]  ~~>  k459 :: {Word} [] ->> [Bit 32], generics=[], substitution=null
TopLevel specialize: bootdata :: [Bit 32]  ~~>  bootdata :: [Bit 32], generics=[], substitution=null
Block specialize: b463 :: [Word] >>= [Word]  ~~>  b463 :: [Word] >>= [Word], generics=[], substitution=null
Block specialize: b1198 :: [Bit 32, Pair1124] >>= [Unit]  ~~>  b1198 :: [Bit 32, Pair1124] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b987 :: [Pair1124] >>= [Unit]
Block specialize: b1202 :: [] >>= [Unit]  ~~>  b1202 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b463 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get7 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of mimgHeaderCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
Requesting specialization of b1058 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1203 :: [] >>= [Unit]
Requesting specialization of b1301 :: [Maybe1013] >>= [Unit]
Block specialize: b1301 :: [Maybe1013] >>= [Unit]  ~~>  b1301 :: [Maybe1013] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1192 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b1203 :: [] >>= [Unit]  ~~>  b1203 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b464 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get6 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of mimgMMapCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
Requesting specialization of b1122 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1204 :: [] >>= [Unit]
Requesting specialization of b1300 :: [Maybe1013] >>= [Unit]
Block specialize: b1300 :: [Maybe1013] >>= [Unit]  ~~>  b1300 :: [Maybe1013] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1187 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b1204 :: [] >>= [Unit]  ~~>  b1204 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b465 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1404 :: [Bit 32] >>= [Unit]
Requesting specialization of b1461 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1461 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1461 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1179 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1410 :: [Bit 32] >>= [Unit]
Requesting specialization of b1455 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1455 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1455 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1426 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1427 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1427 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1427 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b980 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b1426 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1426 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b980 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b1410 :: [Bit 32] >>= [Unit]  ~~>  b1410 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1411 :: [Bit 32] >>= [Unit]
Requesting specialization of b1454 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1454 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1454 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1412 :: [Bit 32] >>= [Unit]
Requesting specialization of b1453 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1453 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1453 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1422 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1423 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1423 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1423 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b972 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b1422 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1422 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b972 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b1412 :: [Bit 32] >>= [Unit]  ~~>  b1412 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1413 :: [Bit 32] >>= [Unit]
Requesting specialization of b1452 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1452 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1452 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1413 :: [Bit 32] >>= [Unit]
Requesting specialization of b1452 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1413 :: [Bit 32] >>= [Unit]  ~~>  b1413 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1414 :: [Bit 32] >>= [Unit]
Requesting specialization of b1451 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1451 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1451 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1418 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1419 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1419 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1419 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b970 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b1418 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1418 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b970 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b1414 :: [Bit 32] >>= [Unit]  ~~>  b1414 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of refToWord :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1331 :: [] >>= [Unit]
Requesting specialization of b1450 :: [Maybe1013] >>= [Unit]
Block specialize: b1450 :: [Maybe1013] >>= [Unit]  ~~>  b1450 :: [Maybe1013] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b1331 :: [] >>= [Unit]  ~~>  b1331 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b884 :: [Maybe1013] >>= [Unit]
Block specialize: b1411 :: [Bit 32] >>= [Unit]  ~~>  b1411 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1412 :: [Bit 32] >>= [Unit]
Requesting specialization of b1453 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1404 :: [Bit 32] >>= [Unit]  ~~>  b1404 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1405 :: [Bit 32] >>= [Unit]
Requesting specialization of b1460 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1460 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1460 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1406 :: [Bit 32] >>= [Unit]
Requesting specialization of b1459 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1459 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1459 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1434 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1435 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1435 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1435 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b972 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1410 :: [Bit 32] >>= [Unit]
Requesting specialization of b1455 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1434 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1434 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b972 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1410 :: [Bit 32] >>= [Unit]
Requesting specialization of b1455 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1406 :: [Bit 32] >>= [Unit]  ~~>  b1406 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1407 :: [Bit 32] >>= [Unit]
Requesting specialization of b1458 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1458 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1458 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1407 :: [Bit 32] >>= [Unit]
Requesting specialization of b1458 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1407 :: [Bit 32] >>= [Unit]  ~~>  b1407 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1408 :: [Bit 32] >>= [Unit]
Requesting specialization of b1457 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1457 :: [Maybe1013, Bit 32] >>= [Unit]  ~~>  b1457 :: [Maybe1013, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1430 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b1431 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]
Block specialize: b1431 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1431 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b970 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1410 :: [Bit 32] >>= [Unit]
Requesting specialization of b1455 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1430 :: [Bit 32, Pair1124, Bit 32] >>= [Unit]  ~~>  b1430 :: [Bit 32, Pair1124, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of com1ctrl :: [Bit 32]
Requesting specialization of and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b970 :: [Pair1124, Bit 32] >>= [Unit]
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1410 :: [Bit 32] >>= [Unit]
Requesting specialization of b1455 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1408 :: [Bit 32] >>= [Unit]  ~~>  b1408 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of refToWord :: [[Bit 32] ->> [Bit 32]]
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1409 :: [] >>= [Unit]
Requesting specialization of b1456 :: [Maybe1013] >>= [Unit]
Block specialize: b1456 :: [Maybe1013] >>= [Unit]  ~~>  b1456 :: [Maybe1013] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1003 :: [Bit 32, Pair1124] >>= [Unit]
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1410 :: [Bit 32] >>= [Unit]
Requesting specialization of b1455 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1409 :: [] >>= [Unit]  ~~>  b1409 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b466 :: [Word] >>= [Word]
Requesting specialization of bootdata :: [Bit 32]
Requesting specialization of get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1410 :: [Bit 32] >>= [Unit]
Requesting specialization of b1455 :: [Maybe1013, Bit 32] >>= [Unit]
Block specialize: b1405 :: [Bit 32] >>= [Unit]  ~~>  b1405 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
Requesting specialization of b1406 :: [Bit 32] >>= [Unit]
Requesting specialization of b1459 :: [Maybe1013, Bit 32] >>= [Unit]
TopLevel specialize: nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]]  ~~>  nextChar :: [[Bit 32] ->> [[] ->> [Maybe1013]]], generics=[], substitution=null
Requesting specialization of nextCharImp :: [[Bit 32] ->> [[] ->> [Maybe1013]]]
TopLevel specialize: nextCharImp :: [[Bit 32] ->> [[] ->> [Maybe1013]]]  ~~>  nextCharImp :: [[Bit 32] ->> [[] ->> [Maybe1013]]], generics=[], substitution=null
Requesting specialization of k76 :: {} [Bit 32] ->> [[] ->> [Maybe1013]]
ClosureDefn specialize: k76 :: {} [Bit 32] ->> [[] ->> [Maybe1013]]  ~~>  k76 :: {} [Bit 32] ->> [[] ->> [Maybe1013]], generics=[], substitution=null
Requesting specialization of k75 :: {Bit 32} [] ->> [Maybe1013]
ClosureDefn specialize: k75 :: {Bit 32} [] ->> [Maybe1013]  ~~>  k75 :: {Bit 32} [] ->> [Maybe1013], generics=[], substitution=null
Requesting specialization of b125 :: [Bit 32] >>= [Maybe1013]
Block specialize: b125 :: [Bit 32] >>= [Maybe1013]  ~~>  b125 :: [Bit 32] >>= [Maybe1013], generics=[], substitution=null
Requesting specialization of loadChar :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Requesting specialization of b124 :: [] >>= [Maybe1013]
Requesting specialization of b123 :: [Bit 32, Bit 32] >>= [Maybe1013]
Block specialize: b123 :: [Bit 32, Bit 32] >>= [Maybe1013]  ~~>  b123 :: [Bit 32, Bit 32] >>= [Maybe1013], generics=[], substitution=null
Requesting specialization of refToWord :: [[Bit 32] ->> [Bit 32]]
TopLevel specialize: refToWord :: [[Bit 32] ->> [Bit 32]]  ~~>  refToWord :: [[Bit 32] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of ptrToWordImp :: [[Bit 32] ->> [Bit 32]]
Block specialize: b124 :: [] >>= [Maybe1013]  ~~>  b124 :: [] >>= [Maybe1013], generics=[], substitution=null
Requesting specialization of s39 :: [Maybe1013]
TopLevel specialize: s39 :: [Maybe1013]  ~~>  s39 :: [Maybe1013], generics=[], substitution=null
TopLevel specialize: loadChar :: [[Bit 32] ->> [[] ->> [Bit 32]]]  ~~>  loadChar :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of loadCharImp :: [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel specialize: loadCharImp :: [[Bit 32] ->> [[] ->> [Bit 32]]]  ~~>  loadCharImp :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k45 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
ClosureDefn specialize: k45 :: {} [Bit 32] ->> [[] ->> [Bit 32]]  ~~>  k45 :: {} [Bit 32] ->> [[] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of loadCharImp1 :: {Bit 32} [] ->> [Bit 32]
ClosureDefn specialize: loadCharImp1 :: {Bit 32} [] ->> [Bit 32]  ~~>  loadCharImp1 :: {Bit 32} [] ->> [Bit 32], generics=[], substitution=null
Block specialize: b692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of genLtInc :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of Nothing :: [Maybe015]
Requesting specialization of Just :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of ix1 :: [Bit 32]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b826 :: [Maybe015, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b826 :: [Maybe015, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b826 :: [Maybe015, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of @1 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of vram :: [Bit 32]
Requesting specialization of @ :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Requesting specialization of set :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Requesting specialization of blank :: [Bit 32]
Requesting specialization of b289 :: [Word, Word] >>= [Word]
Requesting specialization of genLtInc1 :: [[Maybe015] ->> [[[Bit 32] ->> [Maybe015]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe015]]]]]]
Requesting specialization of s13 :: [Maybe015]
Requesting specialization of s14 :: [[Bit 32] ->> [Maybe015]]
Requesting specialization of s12 :: [Bit 32]
Requesting specialization of b295 :: [] >>= [Unit]
Requesting specialization of b825 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b825 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b825 :: [Maybe015, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
TopLevel specialize: get3 :: [[Bit 32] ->> [[] ->> [Bit 32]]]  ~~>  get3 :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k438 :: {} [Word] ->> [[] ->> [Word]]
ClosureDefn specialize: k438 :: {} [Word] ->> [[] ->> [Word]]  ~~>  k438 :: {} [Word] ->> [[] ->> [Word]], generics=[], substitution=null
Requesting specialization of k437 :: {Word} [] ->> [Word]
ClosureDefn specialize: k437 :: {Word} [] ->> [Word]  ~~>  k437 :: {Word} [] ->> [Word], generics=[], substitution=null
Block specialize: b286 :: [Word] >>= [Word]  ~~>  b286 :: [Word] >>= [Word], generics=[], substitution=null
Block specialize: b284 :: [Word] >>= [Word]  ~~>  b284 :: [Word] >>= [Word], generics=[], substitution=null
TopLevel specialize: set2 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  set2 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k422 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k422 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]]  ~~>  k422 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k421 :: {Word} [Word] ->> [[] ->> [Unit]]
ClosureDefn specialize: k421 :: {Word} [Word] ->> [[] ->> [Unit]]  ~~>  k421 :: {Word} [Word] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k420 :: {Word, Word} [] ->> [Unit]
ClosureDefn specialize: k420 :: {Word, Word} [] ->> [Unit]  ~~>  k420 :: {Word, Word} [] ->> [Unit], generics=[], substitution=null
TopLevel specialize: set1 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]  ~~>  set1 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]], generics=[], substitution=null
Requesting specialization of k419 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]]
ClosureDefn specialize: k419 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]]  ~~>  k419 :: {} [Word] ->> [[Word] ->> [[] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k418 :: {Word} [Word] ->> [[] ->> [Unit]]
ClosureDefn specialize: k418 :: {Word} [Word] ->> [[] ->> [Unit]]  ~~>  k418 :: {Word} [Word] ->> [[] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k417 :: {Word, Word} [] ->> [Unit]
ClosureDefn specialize: k417 :: {Word, Word} [] ->> [Unit]  ~~>  k417 :: {Word, Word} [] ->> [Unit], generics=[], substitution=null
Block specialize: b285 :: [Word] >>= [Word]  ~~>  b285 :: [Word] >>= [Word], generics=[], substitution=null
TopLevel specialize: get2 :: [[Bit 32] ->> [[] ->> [Bit 32]]]  ~~>  get2 :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k426 :: {} [Word] ->> [[] ->> [Word]]
ClosureDefn specialize: k426 :: {} [Word] ->> [[] ->> [Word]]  ~~>  k426 :: {} [Word] ->> [[] ->> [Word]], generics=[], substitution=null
Requesting specialization of k425 :: {Word} [] ->> [Word]
ClosureDefn specialize: k425 :: {Word} [] ->> [Word]  ~~>  k425 :: {Word} [] ->> [Word], generics=[], substitution=null
Block specialize: b282 :: [Word] >>= [Word]  ~~>  b282 :: [Word] >>= [Word], generics=[], substitution=null
TopLevel specialize: get1 :: [[Bit 32] ->> [[] ->> [Bit 32]]]  ~~>  get1 :: [[Bit 32] ->> [[] ->> [Bit 32]]], generics=[], substitution=null
Requesting specialization of k424 :: {} [Word] ->> [[] ->> [Word]]
ClosureDefn specialize: k424 :: {} [Word] ->> [[] ->> [Word]]  ~~>  k424 :: {} [Word] ->> [[] ->> [Word]], generics=[], substitution=null
Requesting specialization of k423 :: {Word} [] ->> [Word]
ClosureDefn specialize: k423 :: {Word} [] ->> [Word]  ~~>  k423 :: {Word} [] ->> [Word], generics=[], substitution=null
Block specialize: b281 :: [Word] >>= [Word]  ~~>  b281 :: [Word] >>= [Word], generics=[], substitution=null
Block specialize: b283 :: [Word] >>= [Word]  ~~>  b283 :: [Word] >>= [Word], generics=[], substitution=null
MemArea specialize: itoaBuf :: Word  ~~>  itoaBuf :: Word
TopLevel specialize: s1 :: [[Bit 32] ->> [Unit]]  ~~>  s1 :: [[Bit 32] ->> [Unit]], generics=[], substitution=null
Requesting specialization of initArray :: [[[Bit 32] ->> [[Bit 32] ->> [Unit]]] ->> [[Bit 32] ->> [Unit]]]
Requesting specialization of s42 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
TopLevel specialize: s42 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]  ~~>  s42 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k126 :: {} [Bit 32] ->> [[Bit 32] ->> [Unit]]
ClosureDefn specialize: k126 :: {} [Bit 32] ->> [[Bit 32] ->> [Unit]]  ~~>  k126 :: {} [Bit 32] ->> [[Bit 32] ->> [Unit]], generics=[], substitution=null
Requesting specialization of initStored :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Requesting specialization of bit0 :: [Bit 32]
TopLevel specialize: bit0 :: [Bit 32]  ~~>  bit0 :: [Bit 32], generics=[], substitution=null
Requesting specialization of bit0u :: [[Unit] ->> [Bit 32]]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: bit0u :: [[Unit] ->> [Bit 32]]  ~~>  bit0u :: [[Unit] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k467 :: {} [Unit] ->> [Word]
ClosureDefn specialize: k467 :: forall (a :: *). {} [a] ->> [Word]  ~~>  k467 :: {} [Unit] ->> [Word], generics=[?18088], substitution=[?18088 --> Unit]
TopLevel specialize: initStored :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]  ~~>  initStored :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k434 :: {} [Word] ->> [[Word] ->> [Unit]]
ClosureDefn specialize: k434 :: {} [Word] ->> [[Word] ->> [Unit]]  ~~>  k434 :: {} [Word] ->> [[Word] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k433 :: {Word} [Word] ->> [Unit]
ClosureDefn specialize: k433 :: {Word} [Word] ->> [Unit]  ~~>  k433 :: {Word} [Word] ->> [Unit], generics=[], substitution=null
TopLevel specialize: initArray :: [[[Bit 32] ->> [[Bit 32] ->> [Unit]]] ->> [[Bit 32] ->> [Unit]]]  ~~>  initArray :: [[[Bit 32] ->> [[Bit 32] ->> [Unit]]] ->> [[Bit 32] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k466 :: {} [[Word] ->> [[Word] ->> [Unit]]] ->> [[Word] ->> [Unit]]
ClosureDefn specialize: k466 :: forall (a :: *). {} [[Word] ->> [[Word] ->> [a]]] ->> [[Word] ->> [Unit]]  ~~>  k466 :: {} [[Word] ->> [[Word] ->> [Unit]]] ->> [[Word] ->> [Unit]], generics=[?18086], substitution=[?18086 --> Unit]
Requesting specialization of k465 :: {[Word] ->> [[Word] ->> [Unit]]} [Word] ->> [Unit]
ClosureDefn specialize: k465 :: forall (a :: *). {[Word] ->> [[Word] ->> [a]]} [Word] ->> [Unit]  ~~>  k465 :: {[Word] ->> [[Word] ->> [Unit]]} [Word] ->> [Unit], generics=[?18083], substitution=[?18083 --> Unit]
Requesting specialization of b1474 :: [[Word] ->> [[Word] ->> [Unit]], Word, Word] >>= [Unit]
Block specialize: b1474 :: forall (a :: *). [[Word] ->> [[Word] ->> [a]], Word, Word] >>= [Unit]  ~~>  b1474 :: [[Word] ->> [[Word] ->> [Unit]], Word, Word] >>= [Unit], generics=[?18076], substitution=[?18076 --> Unit]
Requesting specialization of b1475 :: [[Word] ->> [[Word] ->> [Unit]], Word, Word] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Block specialize: b1473 :: [] >>= [Unit]  ~~>  b1473 :: [] >>= [Unit], generics=[], substitution=null
Block specialize: b1475 :: forall (a :: *). [[Word] ->> [[Word] ->> [a]], Word, Word] >>= [Unit]  ~~>  b1475 :: [[Word] ->> [[Word] ->> [Unit]], Word, Word] >>= [Unit], generics=[?18076], substitution=[?18076 --> Unit]
Requesting specialization of b1474 :: [[Word] ->> [[Word] ->> [Unit]], Word, Word] >>= [Unit]
MemArea specialize: console :: Word  ~~>  console :: Word
TopLevel specialize: s2 :: [[Bit 32] ->> [Unit]]  ~~>  s2 :: [[Bit 32] ->> [Unit]], generics=[], substitution=null
Requesting specialization of b997 :: [] >>= [[Bit 32] ->> [Unit]]
Block specialize: b997 :: [] >>= [[Bit 32] ->> [Unit]]  ~~>  b997 :: [] >>= [[Bit 32] ->> [Unit]], generics=[], substitution=null
Requesting specialization of initStored1 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Requesting specialization of ix0 :: [Bit 32]
Requesting specialization of k152 :: {[Word] ->> [Unit], Word} [Word] ->> [Unit]
Requesting specialization of initStored2 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Requesting specialization of s6 :: [Bit 32]
Requesting specialization of k152 :: {[Word] ->> [Unit], Word} [Word] ->> [Unit]
Requesting specialization of k436 :: {[Word] ->> [Unit], [Word] ->> [Unit]} [Word] ->> [Unit]
Requesting specialization of initStored1 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Requesting specialization of maxBound :: [Bit 32]
Requesting specialization of k152 :: {[Word] ->> [Unit], Word} [Word] ->> [Unit]
Requesting specialization of initStored2 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Requesting specialization of maxBound1 :: [Bit 32]
Requesting specialization of k152 :: {[Word] ->> [Unit], Word} [Word] ->> [Unit]
Requesting specialization of k436 :: {[Word] ->> [Unit], [Word] ->> [Unit]} [Word] ->> [Unit]
Requesting specialization of k152 :: {[Word] ->> [Unit], Word} [Word] ->> [Unit]
Requesting specialization of k152 :: {[Word] ->> [Unit], Word} [Word] ->> [Unit]
Requesting specialization of k435 :: {[Word] ->> [Unit], [Word] ->> [Unit]} [Word] ->> [Unit]
Requesting specialization of k152 :: {[Word] ->> [Unit], Word} [Word] ->> [Unit]
Requesting specialization of initStored :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Requesting specialization of k152 :: {[Word] ->> [Unit], Word} [Word] ->> [Unit]
Requesting specialization of k435 :: {[Word] ->> [Unit], [Word] ->> [Unit]} [Word] ->> [Unit]
Requesting specialization of k435 :: {[Word] ->> [Unit], [Word] ->> [Unit]} [Word] ->> [Unit]
ClosureDefn specialize: k435 :: forall (a :: *) (b :: *) (c :: tuple). {[a] ->> [b], [a] ->> c} [a] ->> c  ~~>  k435 :: {[Word] ->> [Unit], [Word] ->> [Unit]} [Word] ->> [Unit], generics=[?18016, ?18017, ?18015], substitution=[?18016 --> Word, ?18017 --> Unit, ?18015 --> [Unit]]
Requesting specialization of b1462 :: [[Word] ->> [Unit], [Word] ->> [Unit], Word] >>= [Unit]
Block specialize: b1462 :: forall (a :: *) (b :: *) (c :: tuple). [[a] ->> [b], [a] ->> c, a] >>= c  ~~>  b1462 :: [[Word] ->> [Unit], [Word] ->> [Unit], Word] >>= [Unit], generics=[?18007, ?18010, ?18008], substitution=[?18007 --> Word, ?18010 --> Unit, ?18008 --> [Unit]]
TopLevel specialize: maxBound1 :: [Bit 32]  ~~>  maxBound1 :: [Bit 32], generics=[], substitution=null
TopLevel specialize: maxBound :: [Bit 32]  ~~>  maxBound :: [Bit 32], generics=[], substitution=null
ClosureDefn specialize: k436 :: forall (a :: *) (b :: *) (c :: tuple). {[a] ->> [b], [a] ->> c} [a] ->> c  ~~>  k436 :: {[Word] ->> [Unit], [Word] ->> [Unit]} [Word] ->> [Unit], generics=[?17986, ?17987, ?17985], substitution=[?17986 --> Word, ?17987 --> Unit, ?17985 --> [Unit]]
Requesting specialization of b1463 :: [[Word] ->> [Unit], [Word] ->> [Unit], Word] >>= [Unit]
Block specialize: b1463 :: forall (a :: *) (b :: *) (c :: tuple). [[a] ->> [b], [a] ->> c, a] >>= c  ~~>  b1463 :: [[Word] ->> [Unit], [Word] ->> [Unit], Word] >>= [Unit], generics=[?17977, ?17980, ?17978], substitution=[?17977 --> Word, ?17980 --> Unit, ?17978 --> [Unit]]
TopLevel specialize: s6 :: [Bit 32]  ~~>  s6 :: [Bit 32], generics=[], substitution=null
Requesting specialization of ix0u :: [[Unit] ->> [Bit 32]]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: ix0u :: [[Unit] ->> [Bit 32]]  ~~>  ix0u :: [[Unit] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k428 :: {} [Unit] ->> [Word]
ClosureDefn specialize: k428 :: forall (a :: *). {} [a] ->> [Word]  ~~>  k428 :: {} [Unit] ->> [Word], generics=[?17961], substitution=[?17961 --> Unit]
TopLevel specialize: initStored2 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]  ~~>  initStored2 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k432 :: {} [Word] ->> [[Word] ->> [Unit]]
ClosureDefn specialize: k432 :: {} [Word] ->> [[Word] ->> [Unit]]  ~~>  k432 :: {} [Word] ->> [[Word] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k431 :: {Word} [Word] ->> [Unit]
ClosureDefn specialize: k431 :: {Word} [Word] ->> [Unit]  ~~>  k431 :: {Word} [Word] ->> [Unit], generics=[], substitution=null
ClosureDefn specialize: k152 :: forall (a :: tuple). {[Word] ->> a, Word} [Word] ->> a  ~~>  k152 :: {[Word] ->> [Unit], Word} [Word] ->> [Unit], generics=[?18003], substitution=[?18003 --> [Unit]]
Requesting specialization of b330 :: [[Word] ->> [Unit], Word, Word] >>= [Unit]
Block specialize: b330 :: forall (a :: tuple). [[Word] ->> a, Word, Word] >>= a  ~~>  b330 :: [[Word] ->> [Unit], Word, Word] >>= [Unit], generics=[?17997], substitution=[?17997 --> [Unit]]
TopLevel specialize: ix0 :: [Bit 32]  ~~>  ix0 :: [Bit 32], generics=[], substitution=null
Requesting specialization of ix0u1 :: [[Unit] ->> [Bit 32]]
Requesting specialization of Unit :: [Unit]
TopLevel specialize: ix0u1 :: [[Unit] ->> [Bit 32]]  ~~>  ix0u1 :: [[Unit] ->> [Bit 32]], generics=[], substitution=null
Requesting specialization of k427 :: {} [Unit] ->> [Word]
ClosureDefn specialize: k427 :: forall (a :: *). {} [a] ->> [Word]  ~~>  k427 :: {} [Unit] ->> [Word], generics=[?17957], substitution=[?17957 --> Unit]
TopLevel specialize: initStored1 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]  ~~>  initStored1 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]], generics=[], substitution=null
Requesting specialization of k430 :: {} [Word] ->> [[Word] ->> [Unit]]
ClosureDefn specialize: k430 :: {} [Word] ->> [[Word] ->> [Unit]]  ~~>  k430 :: {} [Word] ->> [[Word] ->> [Unit]], generics=[], substitution=null
Requesting specialization of k429 :: {Word} [Word] ->> [Unit]
ClosureDefn specialize: k429 :: {Word} [Word] ->> [Unit]  ~~>  k429 :: {Word} [Word] ->> [Unit], generics=[], substitution=null
making new version of structure type Window
new version of StructType Window is Window
making new version of structure type Coord
new version of StructType Coord is Coord
Running type checker ...
Inferred k427 :: {} [Unit] ->> [Bit 32]
generics for ix0u1: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred ix0u1 :: [[Unit] ->> [Bit 32]]
Generalizing definition for: ix0u1 with generics []
Inferred ix0u1 :: [Unit] ->> [Bit 32]
generics for Unit: [] in type [Unit]
TopLevel group inferred Unit :: [Unit]
Generalizing definition for: Unit with generics []
Inferred Unit :: Unit
generics for ix0: [] in type [Bit 32]
TopLevel group inferred ix0 :: [Bit 32]
Generalizing definition for: ix0 with generics []
Inferred ix0 :: Bit 32
Inferred k428 :: {} [Unit] ->> [Bit 32]
generics for ix0u: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred ix0u :: [[Unit] ->> [Bit 32]]
Generalizing definition for: ix0u with generics []
Inferred ix0u :: [Unit] ->> [Bit 32]
generics for s6: [] in type [Bit 32]
TopLevel group inferred s6 :: [Bit 32]
Generalizing definition for: s6 with generics []
Inferred s6 :: Bit 32
Inferred k429 :: {Bit 32} [Bit 32] ->> [Unit]
Inferred k430 :: {} [Bit 32] ->> [[Bit 32] ->> [Unit]]
generics for initStored1: [] in type [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
TopLevel group inferred initStored1 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Generalizing definition for: initStored1 with generics []
Inferred initStored1 :: [Bit 32] ->> [[Bit 32] ->> [Unit]]
generics for maxBound: [] in type [Bit 32]
TopLevel group inferred maxBound :: [Bit 32]
Generalizing definition for: maxBound with generics []
Inferred maxBound :: Bit 32
Inferred k431 :: {Bit 32} [Bit 32] ->> [Unit]
Inferred k432 :: {} [Bit 32] ->> [[Bit 32] ->> [Unit]]
generics for initStored2: [] in type [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
TopLevel group inferred initStored2 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Generalizing definition for: initStored2 with generics []
Inferred initStored2 :: [Bit 32] ->> [[Bit 32] ->> [Unit]]
generics for maxBound1: [] in type [Bit 32]
TopLevel group inferred maxBound1 :: [Bit 32]
Generalizing definition for: maxBound1 with generics []
Inferred maxBound1 :: Bit 32
Inferred b1463 :: [[Bit 32] ->> [Unit], [Bit 32] ->> [Unit], Bit 32] >>= [Unit]
Inferred k436 :: {[Bit 32] ->> [Unit], [Bit 32] ->> [Unit]} [Bit 32] ->> [Unit]
Inferred k433 :: {Bit 32} [Bit 32] ->> [Unit]
Inferred k434 :: {} [Bit 32] ->> [[Bit 32] ->> [Unit]]
generics for initStored: [] in type [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
TopLevel group inferred initStored :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Generalizing definition for: initStored with generics []
Inferred initStored :: [Bit 32] ->> [[Bit 32] ->> [Unit]]
Inferred b330 :: [[Bit 32] ->> [Unit], Bit 32, Bit 32] >>= [Unit]
Inferred k152 :: {[Bit 32] ->> [Unit], Bit 32} [Bit 32] ->> [Unit]
Inferred b1462 :: [[Bit 32] ->> [Unit], [Bit 32] ->> [Unit], Bit 32] >>= [Unit]
Inferred k435 :: {[Bit 32] ->> [Unit], [Bit 32] ->> [Unit]} [Bit 32] ->> [Unit]
Inferred b997 :: [] >>= [[Bit 32] ->> [Unit]]
generics for s2: [] in type [[Bit 32] ->> [Unit]]
TopLevel group inferred s2 :: [[Bit 32] ->> [Unit]]
Generalizing definition for: s2 with generics []
Inferred s2 :: [Bit 32] ->> [Unit]
Inferred b1473 :: [] >>= [Unit]
Inferred b1475 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1474 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred k465 :: {[Bit 32] ->> [[Bit 32] ->> [Unit]]} [Bit 32] ->> [Unit]
Inferred k466 :: {} [[Bit 32] ->> [[Bit 32] ->> [Unit]]] ->> [[Bit 32] ->> [Unit]]
generics for initArray: [] in type [[[Bit 32] ->> [[Bit 32] ->> [Unit]]] ->> [[Bit 32] ->> [Unit]]]
TopLevel group inferred initArray :: [[[Bit 32] ->> [[Bit 32] ->> [Unit]]] ->> [[Bit 32] ->> [Unit]]]
Generalizing definition for: initArray with generics []
Inferred initArray :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]] ->> [[Bit 32] ->> [Unit]]
Inferred k467 :: {} [Unit] ->> [Bit 32]
generics for bit0u: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred bit0u :: [[Unit] ->> [Bit 32]]
Generalizing definition for: bit0u with generics []
Inferred bit0u :: [Unit] ->> [Bit 32]
generics for bit0: [] in type [Bit 32]
TopLevel group inferred bit0 :: [Bit 32]
Generalizing definition for: bit0 with generics []
Inferred bit0 :: Bit 32
Inferred k126 :: {} [Bit 32] ->> [[Bit 32] ->> [Unit]]
generics for s42: [] in type [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
TopLevel group inferred s42 :: [[Bit 32] ->> [[Bit 32] ->> [Unit]]]
Generalizing definition for: s42 with generics []
Inferred s42 :: [Bit 32] ->> [[Bit 32] ->> [Unit]]
generics for s1: [] in type [[Bit 32] ->> [Unit]]
TopLevel group inferred s1 :: [[Bit 32] ->> [Unit]]
Generalizing definition for: s1 with generics []
Inferred s1 :: [Bit 32] ->> [Unit]
Inferred b283 :: [Bit 32] >>= [Bit 32]
Inferred b285 :: [Bit 32] >>= [Bit 32]
Inferred k417 :: {Bit 32, Bit 32} [] ->> [Unit]
Inferred k418 :: {Bit 32} [Bit 32] ->> [[] ->> [Unit]]
Inferred k419 :: {} [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
generics for set1: [] in type [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred set1 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: set1 with generics []
Inferred set1 :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k420 :: {Bit 32, Bit 32} [] ->> [Unit]
Inferred k421 :: {Bit 32} [Bit 32] ->> [[] ->> [Unit]]
Inferred k422 :: {} [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
generics for set2: [] in type [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred set2 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: set2 with generics []
Inferred set2 :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b284 :: [Bit 32] >>= [Bit 32]
Inferred b281 :: [Bit 32] >>= [Bit 32]
Inferred k423 :: {Bit 32} [] ->> [Bit 32]
Inferred k424 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
generics for get1: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get1 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get1 with generics []
Inferred get1 :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred b282 :: [Bit 32] >>= [Bit 32]
Inferred k425 :: {Bit 32} [] ->> [Bit 32]
Inferred k426 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
generics for get2: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get2 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get2 with generics []
Inferred get2 :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred b286 :: [Bit 32] >>= [Bit 32]
Inferred k437 :: {Bit 32} [] ->> [Bit 32]
Inferred k438 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
generics for get3: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get3 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get3 with generics []
Inferred get3 :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred b1464 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred k439 :: {Bit 32} [Bit 32] ->> [Bit 32]
Inferred k440 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
generics for @1: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred @1 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: @1 with generics []
Inferred @1 :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
generics for vram: [] in type [Bit 32]
TopLevel group inferred vram :: [Bit 32]
Generalizing definition for: vram with generics []
Inferred vram :: Bit 32
Inferred b1465 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred k441 :: {Bit 32} [Bit 32] ->> [Bit 32]
Inferred k442 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
generics for @: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred @ :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: @ with generics []
Inferred @ :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred k443 :: {Bit 32, Bit 32} [] ->> [Unit]
Inferred k444 :: {Bit 32} [Bit 32] ->> [[] ->> [Unit]]
Inferred k445 :: {} [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
generics for set: [] in type [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred set :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: set with generics []
Inferred set :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k446 :: {} [Bit 32] ->> [Bit 32]
generics for wordToByte: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred wordToByte :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: wordToByte with generics []
Inferred wordToByte :: [Bit 32] ->> [Bit 32]
Inferred construct_Char :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b314 :: [] >>= [Bit 32]
generics for blank: [] in type [Bit 32]
TopLevel group inferred blank :: [Bit 32]
Generalizing definition for: blank with generics []
Inferred blank :: Bit 32
Inferred b289 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1467 :: [Maybe01528] >>= [Maybe01528]
Inferred b1466 :: [[Bit 32] ->> [Maybe01528], Bit 32] >>= [Maybe01528]
Inferred b1468 :: [Maybe01528, [Bit 32] ->> [Maybe01528], Bit 32, Bit 32, Bit 32] >>= [Maybe01528]
Inferred k447 :: {Maybe01528, [Bit 32] ->> [Maybe01528], Bit 32, Bit 32} [Bit 32] ->> [Maybe01528]
Inferred k448 :: {Maybe01528, [Bit 32] ->> [Maybe01528], Bit 32} [Bit 32] ->> [[Bit 32] ->> [Maybe01528]]
Inferred k449 :: {Maybe01528, [Bit 32] ->> [Maybe01528]} [Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]
Inferred k450 :: {Maybe01528} [[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]
Inferred k451 :: {} [Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]
generics for genLtInc1: [] in type [[Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]]
TopLevel group inferred genLtInc1 :: [[Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]]
Generalizing definition for: genLtInc1 with generics []
Inferred genLtInc1 :: [Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]
generics for s13: [] in type [Maybe01528]
TopLevel group inferred s13 :: [Maybe01528]
Generalizing definition for: s13 with generics []
Inferred s13 :: Maybe01528
Inferred k51 :: {} [Bit 32] ->> [Maybe01528]
generics for s14: [] in type [[Bit 32] ->> [Maybe01528]]
TopLevel group inferred s14 :: [[Bit 32] ->> [Maybe01528]]
Generalizing definition for: s14 with generics []
Inferred s14 :: [Bit 32] ->> [Maybe01528]
Inferred k452 :: {} [Unit] ->> [Bit 32]
generics for ix1u1: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred ix1u1 :: [[Unit] ->> [Bit 32]]
Generalizing definition for: ix1u1 with generics []
Inferred ix1u1 :: [Unit] ->> [Bit 32]
generics for s12: [] in type [Bit 32]
TopLevel group inferred s12 :: [Bit 32]
Generalizing definition for: s12 with generics []
Inferred s12 :: Bit 32
Inferred b295 :: [] >>= [Unit]
Inferred b825 :: [Maybe01528, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1470 :: [Maybe01528] >>= [Maybe01528]
Inferred b1469 :: [[Bit 32] ->> [Maybe01528], Bit 32] >>= [Maybe01528]
Inferred b1471 :: [Maybe01528, [Bit 32] ->> [Maybe01528], Bit 32, Bit 32, Bit 32] >>= [Maybe01528]
Inferred k453 :: {Maybe01528, [Bit 32] ->> [Maybe01528], Bit 32, Bit 32} [Bit 32] ->> [Maybe01528]
Inferred k454 :: {Maybe01528, [Bit 32] ->> [Maybe01528], Bit 32} [Bit 32] ->> [[Bit 32] ->> [Maybe01528]]
Inferred k455 :: {Maybe01528, [Bit 32] ->> [Maybe01528]} [Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]
Inferred k456 :: {Maybe01528} [[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]
Inferred k457 :: {} [Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]
generics for genLtInc: [] in type [[Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]]
TopLevel group inferred genLtInc :: [[Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]]
Generalizing definition for: genLtInc with generics []
Inferred genLtInc :: [Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]
generics for Nothing: [] in type [Maybe01528]
TopLevel group inferred Nothing :: [Maybe01528]
Generalizing definition for: Nothing with generics []
Inferred Nothing :: Maybe01528
Inferred k5 :: {} [Bit 32] ->> [Maybe01528]
generics for Just: [] in type [[Bit 32] ->> [Maybe01528]]
TopLevel group inferred Just :: [[Bit 32] ->> [Maybe01528]]
Generalizing definition for: Just with generics []
Inferred Just :: [Bit 32] ->> [Maybe01528]
Inferred k458 :: {} [Unit] ->> [Bit 32]
generics for ix1u: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred ix1u :: [[Unit] ->> [Bit 32]]
Generalizing definition for: ix1u with generics []
Inferred ix1u :: [Unit] ->> [Bit 32]
generics for ix1: [] in type [Bit 32]
TopLevel group inferred ix1 :: [Bit 32]
Generalizing definition for: ix1 with generics []
Inferred ix1 :: Bit 32
Inferred b826 :: [Maybe01528, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred loadCharImp1 :: {Bit 32} [] ->> [Bit 32]
Inferred k45 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
generics for loadCharImp: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred loadCharImp :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: loadCharImp with generics []
Inferred loadCharImp :: [Bit 32] ->> [[] ->> [Bit 32]]
generics for loadChar: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred loadChar :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: loadChar with generics []
Inferred loadChar :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred k44 :: {} [Bit 32] ->> [Bit 32]
generics for ptrToWordImp: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred ptrToWordImp :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: ptrToWordImp with generics []
Inferred ptrToWordImp :: [Bit 32] ->> [Bit 32]
generics for refToWord: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred refToWord :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: refToWord with generics []
Inferred refToWord :: [Bit 32] ->> [Bit 32]
Inferred b123 :: [Bit 32, Bit 32] >>= [Maybe101326]
generics for s39: [] in type [Maybe101326]
TopLevel group inferred s39 :: [Maybe101326]
Generalizing definition for: s39 with generics []
Inferred s39 :: Maybe101326
Inferred b124 :: [] >>= [Maybe101326]
Inferred b125 :: [Bit 32] >>= [Maybe101326]
Inferred k75 :: {Bit 32} [] ->> [Maybe101326]
Inferred k76 :: {} [Bit 32] ->> [[] ->> [Maybe101326]]
generics for nextCharImp: [] in type [[Bit 32] ->> [[] ->> [Maybe101326]]]
TopLevel group inferred nextCharImp :: [[Bit 32] ->> [[] ->> [Maybe101326]]]
Generalizing definition for: nextCharImp with generics []
Inferred nextCharImp :: [Bit 32] ->> [[] ->> [Maybe101326]]
generics for nextChar: [] in type [[Bit 32] ->> [[] ->> [Maybe101326]]]
TopLevel group inferred nextChar :: [[Bit 32] ->> [[] ->> [Maybe101326]]]
Generalizing definition for: nextChar with generics []
Inferred nextChar :: [Bit 32] ->> [[] ->> [Maybe101326]]
Inferred b463 :: [Bit 32] >>= [Bit 32]
generics for bootdata: [] in type [Bit 32]
TopLevel group inferred bootdata :: [Bit 32]
Generalizing definition for: bootdata with generics []
Inferred bootdata :: Bit 32
Inferred k459 :: {Bit 32} [] ->> [Bit 32]
Inferred k460 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
generics for get7: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get7 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get7 with generics []
Inferred get7 :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred k461 :: {Bit 32} [] ->> [Bit 32]
Inferred k462 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
generics for get5: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get5 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get5 with generics []
Inferred get5 :: [Bit 32] ->> [[] ->> [Bit 32]]
generics for refToWord_imp: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred refToWord_imp :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: refToWord_imp with generics []
Inferred refToWord_imp :: [Bit 32] ->> [Bit 32]
generics for refToWord1: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred refToWord1 :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: refToWord1 with generics []
Inferred refToWord1 :: [Bit 32] ->> [Bit 32]
Inferred construct_WordCursor :: [Bit 32, Bit 32] >>= [Bit 32, Bit 32]
Inferred b485 :: [Bit 32] >>= [Bit 32, Bit 32]
Inferred k228 :: {Bit 32} [] ->> [Bit 32, Bit 32]
Inferred k229 :: {} [Bit 32] ->> [[] ->> [Bit 32, Bit 32]]
generics for wordCursor: [] in type [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
TopLevel group inferred wordCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
Generalizing definition for: wordCursor with generics []
Inferred wordCursor :: [Bit 32] ->> [[] ->> [Bit 32, Bit 32]]
generics for mimgHeaderCursor: [] in type [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
TopLevel group inferred mimgHeaderCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
Generalizing definition for: mimgHeaderCursor with generics []
Inferred mimgHeaderCursor :: [Bit 32] ->> [[] ->> [Bit 32, Bit 32]]
Inferred b476 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b474 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b491 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Maybe42129]
generics for s23: [] in type [Maybe42129]
TopLevel group inferred s23 :: [Maybe42129]
Generalizing definition for: s23 with generics []
Inferred s23 :: Maybe42129
Inferred b492 :: [] >>= [Maybe42129]
Inferred b493 :: [Bit 32, Bit 32, Bit 32] >>= [Maybe42129]
Inferred k231 :: {Bit 32} [Bit 32, Bit 32] ->> [Maybe42129]
generics for nextMimgHeader_imp: [] in type [[Bit 32, Bit 32] ->> [Maybe42129]]
TopLevel group inferred nextMimgHeader_imp :: [[Bit 32, Bit 32] ->> [Maybe42129]]
Generalizing definition for: nextMimgHeader_imp with generics []
Inferred nextMimgHeader_imp :: [Bit 32, Bit 32] ->> [Maybe42129]
generics for nextMimgHeader: [] in type [[Bit 32, Bit 32] ->> [Maybe42129]]
TopLevel group inferred nextMimgHeader :: [[Bit 32, Bit 32] ->> [Maybe42129]]
Generalizing definition for: nextMimgHeader with generics []
Inferred nextMimgHeader :: [Bit 32, Bit 32] ->> [Maybe42129]
Inferred b436 :: [Bit 32] >>= [Bit 32]
Inferred b1472 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred k463 :: {Bit 32} [Bit 32] ->> [Bit 32]
Inferred k464 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
generics for @2: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred @2 :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: @2 with generics []
Inferred @2 :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred k468 :: {} [Unit] ->> [Bit 32]
generics for ix0u2: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred ix0u2 :: [[Unit] ->> [Bit 32]]
Generalizing definition for: ix0u2 with generics []
Inferred ix0u2 :: [Unit] ->> [Bit 32]
generics for s15: [] in type [Bit 32]
TopLevel group inferred s15 :: [Bit 32]
Generalizing definition for: s15 with generics []
Inferred s15 :: Bit 32
Inferred k469 :: {Bit 32, Bit 32} [] ->> [Unit]
Inferred k470 :: {Bit 32} [Bit 32] ->> [[] ->> [Unit]]
Inferred k471 :: {} [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
generics for set3: [] in type [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred set3 :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: set3 with generics []
Inferred set3 :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred k472 :: {Bit 32} [Bit 32] ->> [Bit 32]
Inferred k473 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
generics for nzrem: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred nzrem :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: nzrem with generics []
Inferred nzrem :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred k474 :: {} [Unit] ->> [Bit 32]
generics for nz10u: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred nz10u :: [[Unit] ->> [Bit 32]]
Generalizing definition for: nz10u with generics []
Inferred nz10u :: [Unit] ->> [Bit 32]
generics for nz10: [] in type [Bit 32]
TopLevel group inferred nz10 :: [Bit 32]
Generalizing definition for: nz10 with generics []
Inferred nz10 :: Bit 32
Inferred b1477 :: [Maybe01528] >>= [Maybe01528]
Inferred b1476 :: [[Bit 32] ->> [Maybe01528], Bit 32] >>= [Maybe01528]
Inferred b1478 :: [Maybe01528, [Bit 32] ->> [Maybe01528], Bit 32, Bit 32, Bit 32] >>= [Maybe01528]
Inferred k475 :: {Maybe01528, [Bit 32] ->> [Maybe01528], Bit 32, Bit 32} [Bit 32] ->> [Maybe01528]
Inferred k476 :: {Maybe01528, [Bit 32] ->> [Maybe01528], Bit 32} [Bit 32] ->> [[Bit 32] ->> [Maybe01528]]
Inferred k477 :: {Maybe01528, [Bit 32] ->> [Maybe01528]} [Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]
Inferred k478 :: {Maybe01528} [[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]
Inferred k479 :: {} [Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]
generics for genLtInc2: [] in type [[Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]]
TopLevel group inferred genLtInc2 :: [[Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]]
Generalizing definition for: genLtInc2 with generics []
Inferred genLtInc2 :: [Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]
generics for s19: [] in type [Maybe01528]
TopLevel group inferred s19 :: [Maybe01528]
Generalizing definition for: s19 with generics []
Inferred s19 :: Maybe01528
Inferred k52 :: {} [Bit 32] ->> [Maybe01528]
generics for s20: [] in type [[Bit 32] ->> [Maybe01528]]
TopLevel group inferred s20 :: [[Bit 32] ->> [Maybe01528]]
Generalizing definition for: s20 with generics []
Inferred s20 :: [Bit 32] ->> [Maybe01528]
Inferred k480 :: {} [Unit] ->> [Bit 32]
generics for ix1u2: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred ix1u2 :: [[Unit] ->> [Bit 32]]
Generalizing definition for: ix1u2 with generics []
Inferred ix1u2 :: [Unit] ->> [Bit 32]
generics for s18: [] in type [Bit 32]
TopLevel group inferred s18 :: [Bit 32]
Generalizing definition for: s18 with generics []
Inferred s18 :: Bit 32
generics for maxBound2: [] in type [Bit 32]
TopLevel group inferred maxBound2 :: [Bit 32]
Generalizing definition for: maxBound2 with generics []
Inferred maxBound2 :: Bit 32
Inferred k481 :: {} [Bit 32] ->> [Bit 32]
generics for bitsToWord: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred bitsToWord :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: bitsToWord with generics []
Inferred bitsToWord :: [Bit 32] ->> [Bit 32]
Inferred k482 :: {Bit 32} [] ->> [Bit 32]
Inferred k483 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
generics for inb: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred inb :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: inb with generics []
Inferred inb :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred b1479 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred k484 :: {Bit 32} [Bit 32] ->> [Bit 32]
Inferred k485 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
generics for bitAdd: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred bitAdd :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: bitAdd with generics []
Inferred bitAdd :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred k486 :: {} [Bit 32] ->> [Bit 32]
generics for port: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred port :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: port with generics []
Inferred port :: [Bit 32] ->> [Bit 32]
generics for com1data: [] in type [Bit 32]
TopLevel group inferred com1data :: [Bit 32]
Generalizing definition for: com1data with generics []
Inferred com1data :: Bit 32
Inferred b268 :: [] >>= [Bit 32]
generics for com1ctrl: [] in type [Bit 32]
TopLevel group inferred com1ctrl :: [Bit 32]
Generalizing definition for: com1ctrl with generics []
Inferred com1ctrl :: Bit 32
Inferred b1480 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred k487 :: {Bit 32} [Bit 32] ->> [Bit 32]
Inferred k488 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
generics for and: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred and :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: and with generics []
Inferred and :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred k489 :: {Bit 32, Bit 32} [] ->> [Unit]
Inferred k490 :: {Bit 32} [Bit 32] ->> [[] ->> [Unit]]
Inferred k491 :: {} [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
generics for outb: [] in type [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
TopLevel group inferred outb :: [[Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]]
Generalizing definition for: outb with generics []
Inferred outb :: [Bit 32] ->> [[Bit 32] ->> [[] ->> [Unit]]]
Inferred b256 :: [Bit 32] >>= [Unit]
Inferred b258 :: [Bit 32] >>= [Unit]
Inferred b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1002 :: [Maybe01528] >>= [Unit]
Inferred b1001 :: [Maybe01528] >>= [Unit]
Inferred k492 :: {Bit 32} [] ->> [Bit 32]
Inferred k493 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
generics for get4: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get4 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get4 with generics []
Inferred get4 :: [Bit 32] ->> [[] ->> [Bit 32]]
Inferred b832 :: [Maybe01528, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b833 :: [Maybe01528, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1355 :: [Maybe01528, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b849 :: [] >>= [Unit]
Inferred b847 :: [Bit 32] >>= [Unit]
Inferred b852 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b845 :: [Bit 32] >>= [Unit]
Inferred b842 :: [Bit 32] >>= [Unit]
Inferred b854 :: [Bit 32] >>= [Unit]
Inferred b1482 :: [Maybe01528] >>= [Maybe01528]
Inferred b1481 :: [[Bit 32] ->> [Maybe01528], Bit 32] >>= [Maybe01528]
Inferred b1483 :: [Maybe01528, [Bit 32] ->> [Maybe01528], Bit 32, Bit 32, Bit 32] >>= [Maybe01528]
Inferred k494 :: {Maybe01528, [Bit 32] ->> [Maybe01528], Bit 32, Bit 32} [Bit 32] ->> [Maybe01528]
Inferred k495 :: {Maybe01528, [Bit 32] ->> [Maybe01528], Bit 32} [Bit 32] ->> [[Bit 32] ->> [Maybe01528]]
Inferred k496 :: {Maybe01528, [Bit 32] ->> [Maybe01528]} [Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]
Inferred k497 :: {Maybe01528} [[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]
Inferred k498 :: {} [Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]
generics for genLtDec: [] in type [[Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]]
TopLevel group inferred genLtDec :: [[Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]]
Generalizing definition for: genLtDec with generics []
Inferred genLtDec :: [Maybe01528] ->> [[[Bit 32] ->> [Maybe01528]] ->> [[Bit 32] ->> [[Bit 32] ->> [[Bit 32] ->> [Maybe01528]]]]]
Inferred b1239 :: [Bit 32] >>= [Unit]
Inferred b1356 :: [Maybe01528] >>= [Unit]
Inferred b1303 :: [] >>= [Unit]
Inferred b1357 :: [Maybe01528, Bit 32] >>= [Unit]
Inferred b1236 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b1443 :: [Maybe01528, Bit 32] >>= [Unit]
Inferred b1359 :: [Bit 32] >>= [Unit]
Inferred k499 :: {Bit 32} [Bit 32] ->> [Bit 32]
Inferred k500 :: {} [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
generics for nzdiv: [] in type [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
TopLevel group inferred nzdiv :: [[Bit 32] ->> [[Bit 32] ->> [Bit 32]]]
Generalizing definition for: nzdiv with generics []
Inferred nzdiv :: [Bit 32] ->> [[Bit 32] ->> [Bit 32]]
Inferred b1244 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b1246 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1242 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1243 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1362 :: [Maybe01528, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1363 :: [Maybe01528, Bit 32, Bit 32] >>= [Unit]
Inferred b1232 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1247 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1231 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1034 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b467 :: [Bit 32] >>= [Bit 32]
Inferred k501 :: {} [Unit] ->> [Bit 32]
generics for nz16u: [] in type [[Unit] ->> [Bit 32]]
TopLevel group inferred nz16u :: [[Unit] ->> [Bit 32]]
Generalizing definition for: nz16u with generics []
Inferred nz16u :: [Unit] ->> [Bit 32]
generics for nz16: [] in type [Bit 32]
TopLevel group inferred nz16 :: [Bit 32]
Generalizing definition for: nz16 with generics []
Inferred nz16 :: Bit 32
Inferred b1255 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1252 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1253 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1364 :: [Maybe01528, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1365 :: [Maybe01528, Bit 32, Bit 32] >>= [Unit]
Inferred b1249 :: [[Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1256 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1248 :: [Bit 32, [Bit 32] ->> [[] ->> [Unit]], Bit 32, Bit 32] >>= [Unit]
Inferred b1021 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b468 :: [Bit 32] >>= [Bit 32]
Inferred b469 :: [Bit 32] >>= [Bit 32]
Inferred b792 :: [Bit 32] >>= [Bit 32]
Inferred b1038 :: [Bit 32, Pair112427, Bit 32] >>= [Bit 32]
Inferred b1037 :: [Bit 32, Pair112427, Bit 32] >>= [Bit 32]
Inferred b949 :: [Pair112427, Bit 32] >>= [Bit 32]
Inferred b1035 :: [Maybe101326, Bit 32] >>= [Bit 32]
Inferred b1372 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b784 :: [Bit 32] >>= [Unit]
Inferred b1025 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1022 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1024 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b941 :: [Pair112427, Bit 32] >>= [Unit]
Inferred b1375 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1374 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1444 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1371 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b788 :: [Bit 32] >>= [Unit]
Inferred b1029 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1026 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1028 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b945 :: [Pair112427, Bit 32] >>= [Unit]
Inferred b1378 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1377 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1445 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1370 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b790 :: [Bit 32] >>= [Unit]
Inferred b1033 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1030 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1032 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b946 :: [Pair112427, Bit 32] >>= [Unit]
Inferred b1381 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1380 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1446 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1369 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1074 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1072 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1073 :: [Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1257 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1067 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1080 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1078 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1079 :: [Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1258 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1066 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1259 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1064 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1090 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1086 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1087 :: [Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1260 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1085 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1062 :: [Bit 32, Bit 32, Pair32030] >>= [Bit 32]
Inferred b1266 :: [Maybe42129, Bit 32] >>= [Bit 32]
Inferred b1265 :: [Maybe101326, Bit 32, Bit 32, Pair32030] >>= [Bit 32]
Inferred b1058 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b464 :: [Bit 32] >>= [Bit 32]
Inferred k502 :: {Bit 32} [] ->> [Bit 32]
Inferred k503 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
generics for get6: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get6 :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get6 with generics []
Inferred get6 :: [Bit 32] ->> [[] ->> [Bit 32]]
generics for mimgMMapCursor: [] in type [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
TopLevel group inferred mimgMMapCursor :: [[Bit 32] ->> [[] ->> [Bit 32, Bit 32]]]
Generalizing definition for: mimgMMapCursor with generics []
Inferred mimgMMapCursor :: [Bit 32] ->> [[] ->> [Bit 32, Bit 32]]
generics for nextMimgMMap_imp: [] in type [[Bit 32, Bit 32] ->> [Maybe42129]]
TopLevel group inferred nextMimgMMap_imp :: [[Bit 32, Bit 32] ->> [Maybe42129]]
Generalizing definition for: nextMimgMMap_imp with generics []
Inferred nextMimgMMap_imp :: [Bit 32, Bit 32] ->> [Maybe42129]
generics for nextMimgMMap: [] in type [[Bit 32, Bit 32] ->> [Maybe42129]]
TopLevel group inferred nextMimgMMap :: [[Bit 32, Bit 32] ->> [Maybe42129]]
Generalizing definition for: nextMimgMMap with generics []
Inferred nextMimgMMap :: [Bit 32, Bit 32] ->> [Maybe42129]
Inferred b470 :: [Bit 32] >>= [Bit 32]
Inferred b471 :: [Bit 32] >>= [Bit 32]
Inferred b1102 :: [Bit 32, Pair112427, Bit 32] >>= [Bit 32]
Inferred b1101 :: [Bit 32, Pair112427, Bit 32] >>= [Bit 32]
Inferred b961 :: [Pair112427, Bit 32] >>= [Bit 32]
Inferred b1099 :: [Maybe101326, Bit 32] >>= [Bit 32]
Inferred b1321 :: [Bit 32] >>= [Bit 32]
Inferred b1005 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b1004 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b947 :: [Pair112427] >>= [Unit]
Inferred b884 :: [Maybe101326] >>= [Unit]
Inferred b1003 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b1447 :: [Maybe101326, Bit 32] >>= [Bit 32]
Inferred b1386 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b800 :: [Bit 32] >>= [Unit]
Inferred b1094 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1091 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1093 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b959 :: [Pair112427, Bit 32] >>= [Unit]
Inferred b1391 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1390 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1448 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1385 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b802 :: [Bit 32] >>= [Unit]
Inferred b1098 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1095 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1097 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b960 :: [Pair112427, Bit 32] >>= [Unit]
Inferred b1394 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1393 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1449 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1384 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1138 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1136 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1137 :: [Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1267 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1131 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1144 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1142 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1143 :: [Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1268 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1130 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1269 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1128 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1154 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1150 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1151 :: [Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1270 :: [Maybe101326, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1149 :: [Bit 32, Pair112427, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1126 :: [Bit 32, Bit 32, Pair32030] >>= [Bit 32]
Inferred b1276 :: [Maybe42129, Bit 32] >>= [Bit 32]
Inferred b1275 :: [Maybe101326, Bit 32, Bit 32, Pair32030] >>= [Bit 32]
Inferred b1122 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b465 :: [Bit 32] >>= [Bit 32]
Inferred k504 :: {Bit 32} [] ->> [Bit 32]
Inferred k505 :: {} [Bit 32] ->> [[] ->> [Bit 32]]
generics for get: [] in type [[Bit 32] ->> [[] ->> [Bit 32]]]
TopLevel group inferred get :: [[Bit 32] ->> [[] ->> [Bit 32]]]
Generalizing definition for: get with generics []
Inferred get :: [Bit 32] ->> [[] ->> [Bit 32]]
generics for refToWord: [] in type [[Bit 32] ->> [Bit 32]]
TopLevel group inferred refToWord :: [[Bit 32] ->> [Bit 32]]
Generalizing definition for: refToWord with generics []
Inferred refToWord :: [Bit 32] ->> [Bit 32]
Inferred b466 :: [Bit 32] >>= [Bit 32]
Inferred b1331 :: [] >>= [Unit]
Inferred b1450 :: [Maybe101326] >>= [Unit]
Inferred b1414 :: [Bit 32] >>= [Unit]
Inferred b808 :: [Bit 32] >>= [Unit]
Inferred b1158 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1155 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1157 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b970 :: [Pair112427, Bit 32] >>= [Unit]
Inferred b1419 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1418 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1451 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1413 :: [Bit 32] >>= [Unit]
Inferred b1452 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1412 :: [Bit 32] >>= [Unit]
Inferred b971 :: [Bit 32] >>= [Unit]
Inferred b1277 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1162 :: [Bit 32] >>= [Unit]
Inferred b1166 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1163 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1165 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b972 :: [Pair112427, Bit 32] >>= [Unit]
Inferred b1423 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1422 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1453 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1411 :: [Bit 32] >>= [Unit]
Inferred b1454 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1410 :: [Bit 32] >>= [Unit]
Inferred b978 :: [Bit 32] >>= [Unit]
Inferred b1278 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1168 :: [Bit 32] >>= [Unit]
Inferred b1174 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1171 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1173 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b980 :: [Pair112427, Bit 32] >>= [Unit]
Inferred b1427 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1426 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1455 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1409 :: [] >>= [Unit]
Inferred b1456 :: [Maybe101326] >>= [Unit]
Inferred b1408 :: [Bit 32] >>= [Unit]
Inferred b1431 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1430 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1457 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1407 :: [Bit 32] >>= [Unit]
Inferred b1458 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1406 :: [Bit 32] >>= [Unit]
Inferred b1435 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1434 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1459 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1405 :: [Bit 32] >>= [Unit]
Inferred b1460 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1404 :: [Bit 32] >>= [Unit]
Inferred b1175 :: [Bit 32] >>= [Unit]
Inferred b1181 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1180 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b977 :: [Pair112427, Bit 32] >>= [Unit]
Inferred b1178 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1179 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1461 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1204 :: [] >>= [Unit]
Inferred b1212 :: [] >>= [Unit]
Inferred b1438 :: [Maybe101326] >>= [Unit]
Inferred b1287 :: [Bit 32] >>= [Unit]
Inferred b1292 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1291 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1439 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1286 :: [Bit 32] >>= [Unit]
Inferred b1440 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1285 :: [Bit 32] >>= [Unit]
Inferred b1296 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1295 :: [Bit 32, Pair112427, Bit 32] >>= [Unit]
Inferred b1441 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1284 :: [Bit 32] >>= [Unit]
Inferred b1442 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b1283 :: [Bit 32] >>= [Unit]
Inferred b1299 :: [Maybe101326, Bit 32] >>= [Unit]
Inferred b814 :: [] >>= [Unit]
Inferred b1189 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b1188 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b985 :: [Pair112427] >>= [Unit]
Inferred b1186 :: [Maybe101326] >>= [Unit]
Inferred b1187 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b1300 :: [Maybe101326] >>= [Unit]
Inferred b1203 :: [] >>= [Unit]
Inferred b816 :: [] >>= [Unit]
Inferred b1194 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b1193 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b986 :: [Pair112427] >>= [Unit]
Inferred b1191 :: [Maybe101326] >>= [Unit]
Inferred b1192 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b1301 :: [Maybe101326] >>= [Unit]
Inferred b1202 :: [] >>= [Unit]
Inferred b818 :: [] >>= [Unit]
Inferred b1199 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b1198 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b987 :: [Pair112427] >>= [Unit]
Inferred b1196 :: [Maybe101326] >>= [Unit]
Inferred b1197 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b1302 :: [Maybe101326] >>= [Unit]
Inferred b1201 :: [] >>= [Unit]
Inferred b1211 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b1210 :: [Bit 32, Pair112427] >>= [Unit]
Inferred b996 :: [Pair112427] >>= [Unit]
Inferred b1208 :: [Maybe101326] >>= [Unit]
Inferred b509 :: [] >>= [Unit]
Inferred k240 :: {} [] ->> [Unit]
generics for kernel_impl: [] in type [[] ->> [Unit]]
TopLevel group inferred kernel_impl :: [[] ->> [Unit]]
Generalizing definition for: kernel_impl with generics []
Inferred kernel_impl :: [] ->> [Unit]
Inferred kernel :: [] >>= [Unit]
Inferred initialize :: [] >>= [Unit]
Running optimizer ...
-------------------------
rewriting ix0u1 @ [Unit]
rewriting ix0u @ [Unit]
rewriting bit0u @ [Unit]
rewriting initStored @ [bit0]
rewriting initArray @ [s42]
applied right monad law in construct_Char
applied right monad law in b314
suffixInline succeeded for call to block construct_Char from block b314
applied right monad law in b289
rewriting ix1u1 @ [Unit]
prefixInline succeeded for call to block b289 from block b690
rewriting ix1u @ [Unit]
applied right monad law in b485
suffixInline succeeded for call to block construct_WordCursor from block b485
applied right monad law in b476
applied right monad law in b474
prefixInline succeeded for call to block b474 from block b491
prefixInline succeeded for call to block construct_WordCursor from block b491
prefixInline succeeded for call to block b476 from block b493
rewriting ix0u2 @ [Unit]
rewriting nz10u @ [Unit]
rewriting ix1u2 @ [Unit]
rewriting port @ [1016]
applied right monad law in b1480
prefixInline succeeded for call to block b285 from block b1002
prefixInline succeeded for call to block b282 from block b1002
prefixInline succeeded for call to block b285 from block b1001
prefixInline succeeded for call to block b281 from block b1001
prefixInline succeeded for call to block b289 from block b700
prefixInline succeeded for call to block b283 from block b849
prefixInline succeeded for call to block b281 from block b849
prefixInline succeeded for call to block b282 from block b849
prefixInline succeeded for call to block b284 from block b849
prefixInline succeeded for call to block b281 from block b849
prefixInline succeeded for call to block b282 from block b849
prefixInline succeeded for call to block b286 from block b849
prefixInline succeeded for call to block b283 from block b847
prefixInline succeeded for call to block b282 from block b847
prefixInline succeeded for call to block b285 from block b847
prefixInline succeeded for call to block b282 from block b847
prefixInline succeeded for call to block b284 from block b847
prefixInline succeeded for call to block b281 from block b847
prefixInline succeeded for call to block b285 from block b852
prefixInline succeeded for call to block b282 from block b852
prefixInline succeeded for call to block b286 from block b852
prefixInline succeeded for call to block construct_Char from block b852
prefixInline succeeded for call to block b289 from block b852
prefixInline succeeded for call to block b284 from block b852
prefixInline succeeded for call to block b282 from block b852
prefixInline succeeded for call to block b285 from block b845
prefixInline succeeded for call to block b281 from block b845
prefixInline succeeded for call to block b285 from block b842
prefixInline succeeded for call to block b281 from block b842
rewriting nz16u @ [Unit]
prefixInline succeeded for call to block b469 from block b1372
prefixInline succeeded for call to block b469 from block b784
prefixInline succeeded for call to block b468 from block b1371
prefixInline succeeded for call to block b468 from block b788
prefixInline succeeded for call to block b467 from block b1370
prefixInline succeeded for call to block b467 from block b790
prefixInline succeeded for call to block b471 from block b1386
prefixInline succeeded for call to block b471 from block b800
prefixInline succeeded for call to block b470 from block b1385
prefixInline succeeded for call to block b470 from block b802
prefixInline succeeded for call to block b466 from block b1409
prefixInline succeeded for call to block b466 from block b1456
prefixInline succeeded for call to block b466 from block b1431
prefixInline succeeded for call to block b466 from block b1430
prefixInline succeeded for call to block b466 from block b1435
prefixInline succeeded for call to block b466 from block b1434
prefixInline succeeded for call to block b466 from block b1461
prefixInline succeeded for call to block b465 from block b1204
prefixInline succeeded for call to block b466 from block b1212
prefixInline succeeded for call to block b466 from block b1438
prefixInline succeeded for call to block b466 from block b1292
prefixInline succeeded for call to block b466 from block b1291
prefixInline succeeded for call to block b466 from block b1296
prefixInline succeeded for call to block b466 from block b1295
prefixInline succeeded for call to block b466 from block b1299
prefixInline succeeded for call to block b465 from block b814
prefixInline succeeded for call to block b464 from block b1203
prefixInline succeeded for call to block b464 from block b816
prefixInline succeeded for call to block b463 from block b1202
prefixInline succeeded for call to block b463 from block b818
prefixInline succeeded for call to block b283 from block b509
prefixInline succeeded for call to block b281 from block b509
prefixInline succeeded for call to block b282 from block b509
prefixInline succeeded for call to block b285 from block b509
prefixInline succeeded for call to block b281 from block b509
prefixInline succeeded for call to block b282 from block b509
prefixInline succeeded for call to block b284 from block b509
prefixInline succeeded for call to block b281 from block b509
prefixInline succeeded for call to block b282 from block b509
prefixInline succeeded for call to block b286 from block b509
suffixInline succeeded for call to block kernel from block initialize
Inlining pass finished, running shake.
lifting static allocator to top-level s119
lifting static allocator to top-level s120
liveness replaced t16345 with a wildcard
liveness replaced t16362 with a wildcard
rewriting initStored1 @ [ix0]
deriving specialized closure definition k506 for ClosAlloc using k429
deriving specialized closure definition k507 for ClosAlloc using k152
rewriting initStored2 @ [s6]
deriving specialized closure definition k508 for ClosAlloc using k431
deriving specialized closure definition k509 for ClosAlloc using k152
deriving specialized closure definition k510 for ClosAlloc using k436
rewriting initStored1 @ [maxBound]
deriving specialized closure definition k511 for ClosAlloc using k429
deriving specialized closure definition k512 for ClosAlloc using k152
rewriting initStored2 @ [maxBound1]
deriving specialized closure definition k513 for ClosAlloc using k431
deriving specialized closure definition k514 for ClosAlloc using k152
deriving specialized closure definition k515 for ClosAlloc using k436
deriving specialized closure definition k516 for ClosAlloc using k152
deriving specialized closure definition k517 for ClosAlloc using k152
deriving specialized closure definition k518 for ClosAlloc using k435
deriving specialized closure definition k516 for ClosAlloc using k152
rewriting initStored @ [10]
deriving specialized closure definition k519 for ClosAlloc using k152
deriving specialized closure definition k520 for ClosAlloc using k435
deriving specialized closure definition k521 for ClosAlloc using k435
liveness replaced t16382 with a wildcard
liveness replaced t16381 with a wildcard
liveness replaced t16380 with a wildcard
liveness replaced t16379 with a wildcard
liveness replaced t16378 with a wildcard
liveness replaced t16377 with a wildcard
liveness replaced t16376 with a wildcard
liveness replaced t16375 with a wildcard
liveness replaced t16374 with a wildcard
liveness replaced t16373 with a wildcard
liveness replaced t16372 with a wildcard
liveness replaced t16371 with a wildcard
liveness replaced t16370 with a wildcard
liveness replaced t16369 with a wildcard
liveness replaced t16368 with a wildcard
liveness replaced t16367 with a wildcard
liveness replaced t16366 with a wildcard
liveness replaced t16387 with a wildcard
replacing reference to top level bit0 with 0
rewriting wordToByte @ [32]
constant folding for and
applied left monad law for t16445 <- return 32
applied left monad law for t18614 <- return 0
constant folding for or
applied left monad law for t18615 <- return 32
constant folding for shl
applied left monad law for t18616 <- return 2560
constant folding for or
rewriting @1 @ [vram]
deriving specialized closure definition k522 for ClosAlloc using k439
rewriting t16488 @ [t16487]
rewriting @ @ [t16489]
rewriting t16490 @ [t16484]
rewriting set @ [t16491]
applied left monad law for t16493 <- return blank
applied left monad law for t16495 <- return t16494
rewriting t16492 @ [t16494]
rewriting t16496 @ []
rewriting genLtInc1 @ [s13]
deriving specialized closure definition k523 for ClosAlloc using k450
rewriting t16498 @ [s14]
applied left monad law for t18682 <- return s14
applied left monad law for t16474 <- return s13
deriving specialized closure definition k524 for ClosAlloc using k449
deriving specialized block b1502 for BlockCall to block b1501
deriving specialized block b1504 for BlockCall to block b825
replacing reference to top level s12 with 1
liveness replaced t16498 with a wildcard
liveness replaced t16497 with a wildcard
liveness replaced t16496 with a wildcard
liveness replaced t16492 with a wildcard
liveness replaced t16490 with a wildcard
liveness replaced t16488 with a wildcard
rewriting genLtInc @ [Nothing]
deriving specialized closure definition k525 for ClosAlloc using k456
rewriting t16542 @ [Just]
applied left monad law for t18684 <- return Just
applied left monad law for t16525 <- return Nothing
deriving specialized closure definition k526 for ClosAlloc using k455
deriving specialized block b1506 for BlockCall to block b1505
deriving specialized block b1508 for BlockCall to block b826
replacing reference to top level ix1 with 1
liveness replaced t16542 with a wildcard
liveness replaced t16541 with a wildcard
replacing refToWord @ ... with block call
replacing loadChar @ ... with block call
replacing reference to top level refToWord_imp with ptrToWordImp
rewriting get5 @ [t16572]
rewriting t16573 @ []
replacing refToWord1 @ ... with block call
applied left monad law for t18619, t18620 <- return 0, 0
applied left monad law for t18621 <- return t16574
applied left monad law for t18622 <- return t16576
liveness replaced t16573 with a wildcard
applied left monad law for t16591, t16592 <- return t16587, t16588
applied left monad law for t16593 <- return t16588
applied left monad law for t18623, t18624 <- return 0, 0
applied left monad law for t18625 <- return t16595
applied left monad law for t18626 <- return t16594
applied left monad law for t16596, t16597 <- return t16595, t16594
applied left monad law for t16598, t16599 <- return t16595, t16594
applied left monad law for t16604, t16605 <- return t16601, t16602
applied left monad law for t16606 <- return t16601
eliminating duplicate args in call within b491
rewrite: x * 1 ==> x
applied left monad law for t16614 <- return t16613
rewriting bitAdd @ [com1data]
deriving specialized closure definition k527 for ClosAlloc using k484
rewriting port @ [5]
constant folding for and
applied left monad law for t16666 <- return 5
rewriting t16665 @ [5]
liveness replaced t16665 with a wildcard
rewriting outb @ [com1data]
deriving specialized closure definition k528 for ClosAlloc using k490
rewriting t16679 @ [t16678]
liveness replaced t16679 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t16682 @ []
rewriting and @ [t16683]
rewriting t16684 @ [96]
liveness replaced t16684 with a wildcard
liveness replaced t16682 with a wildcard
rewrite: (x + n) + m == x + (n + m)
rewriting set2 @ [t16693]
rewriting t16694 @ [t16691]
rewriting t16695 @ []
liveness replaced t16695 with a wildcard
liveness replaced t16694 with a wildcard
liveness replaced t16692 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t16699 <- return t16698
rewriting set1 @ [t16698]
rewriting t16700 @ [t16697]
rewriting t16701 @ []
liveness replaced t16701 with a wildcard
liveness replaced t16700 with a wildcard
rewriting @1 @ [vram]
deriving specialized closure definition k522 for ClosAlloc using k439
rewriting t16713 @ [t16712]
rewriting @ @ [t16714]
rewriting t16715 @ [t16709]
rewriting @1 @ [vram]
deriving specialized closure definition k522 for ClosAlloc using k439
cse: using previously computed value t16713 for t16717
rewriting t16713 @ [t16711]
rewriting @ @ [t16718]
rewriting t16719 @ [t16709]
rewriting get4 @ [t16716]
rewriting set @ [t16720]
rewriting t16721 @ []
rewriting t16722 @ [t16723]
rewriting t16724 @ []
rewriting genLtInc1 @ [s13]
deriving specialized closure definition k523 for ClosAlloc using k450
rewriting t16726 @ [s14]
deriving specialized block b1502 for BlockCall to block b1501
deriving specialized block b1519 for BlockCall to block b832
replacing reference to top level s12 with 1
liveness replaced t16726 with a wildcard
liveness replaced t16725 with a wildcard
liveness replaced t16724 with a wildcard
liveness replaced t16722 with a wildcard
liveness replaced t16721 with a wildcard
liveness replaced t16719 with a wildcard
liveness replaced t16715 with a wildcard
liveness replaced t16713 with a wildcard
rewriting @1 @ [vram]
deriving specialized closure definition k522 for ClosAlloc using k439
rewriting t16740 @ [t16739]
rewriting @ @ [t16741]
rewriting t16742 @ [t16736]
rewriting set @ [t16743]
applied left monad law for t16745 <- return blank
applied left monad law for t16747 <- return t16746
rewriting t16744 @ [t16746]
rewriting t16748 @ []
rewriting genLtInc1 @ [s13]
deriving specialized closure definition k523 for ClosAlloc using k450
rewriting t16750 @ [s14]
deriving specialized block b1502 for BlockCall to block b1501
deriving specialized block b1520 for BlockCall to block b833
replacing reference to top level s12 with 1
liveness replaced t16750 with a wildcard
liveness replaced t16749 with a wildcard
liveness replaced t16748 with a wildcard
liveness replaced t16744 with a wildcard
liveness replaced t16742 with a wildcard
liveness replaced t16740 with a wildcard
rewriting genLtInc @ [Nothing]
deriving specialized closure definition k525 for ClosAlloc using k456
rewriting t16763 @ [Just]
deriving specialized block b1506 for BlockCall to block b1505
rewriting genLtInc @ [Nothing]
deriving specialized closure definition k525 for ClosAlloc using k456
rewriting t16763 @ [Just]
deriving specialized block b1506 for BlockCall to block b1505
deriving specialized block b1521 for BlockCall to block b1355
replacing reference to top level ix1 with 1
liveness replaced t16763 with a wildcard
liveness replaced t16762 with a wildcard
deriving specialized block b1521 for BlockCall to block b1355
replacing reference to top level ix1 with 1
liveness replaced t16763 with a wildcard
liveness replaced t16762 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t16768 <- return console
rewrite: x + 0 ==> x
applied left monad law for t16769 <- return console
rewriting get1 @ [console]
deriving specialized closure definition k530 for ClosAlloc using k423
rewriting t16770 @ []
rewriting get2 @ [t16772]
rewriting t16773 @ []
rewrite: x + 0 ==> x
applied left monad law for t16776 <- return t16775
rewriting get1 @ [t16775]
rewriting t16777 @ []
rewrite: (x + n) + m == x + (n + m)
rewriting get2 @ [t16779]
rewriting t16780 @ []
rewriting get3 @ [t16782]
rewriting t16783 @ []
rewriting genLtInc @ [Nothing]
deriving specialized closure definition k525 for ClosAlloc using k456
rewriting t16785 @ [Just]
deriving specialized block b1506 for BlockCall to block b1505
deriving specialized block b1521 for BlockCall to block b1355
replacing reference to top level ix1 with 1
liveness replaced t16785 with a wildcard
liveness replaced t16783 with a wildcard
liveness replaced t16780 with a wildcard
liveness replaced t16777 with a wildcard
liveness replaced t16773 with a wildcard
liveness replaced t16770 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t16791 <- return console
rewrite: (x + n) + m == x + (n + m)
rewriting get2 @ [t16792]
rewriting set2 @ [t16794]
rewriting t16795 @ []
rewriting t16796 @ [t16797]
rewriting t16798 @ []
rewrite: x + 0 ==> x
applied left monad law for t16801 <- return t16800
rewriting get1 @ [t16800]
rewriting t16802 @ []
rewriting genLtInc @ [Nothing]
deriving specialized closure definition k525 for ClosAlloc using k456
rewriting t16804 @ [Just]
deriving specialized block b1506 for BlockCall to block b1505
deriving specialized block b1523 for BlockCall to block b1001
replacing reference to top level ix1 with 1
liveness replaced t16804 with a wildcard
liveness replaced t16802 with a wildcard
liveness replaced t16799 with a wildcard
liveness replaced t16798 with a wildcard
liveness replaced t16796 with a wildcard
liveness replaced t16795 with a wildcard
liveness replaced t16793 with a wildcard
rewrite: (x + n) + m == x + (n + m)
rewriting get2 @ [t16812]
rewriting t16813 @ []
rewriting get3 @ [t16815]
rewriting t16816 @ []
rewriting @1 @ [vram]
deriving specialized closure definition k522 for ClosAlloc using k439
rewriting t16818 @ [t16810]
rewriting @ @ [t16819]
rewriting t16820 @ [t16814]
rewriting set @ [t16821]
rewriting wordToByte @ [t16809]
applied left monad law for t18629 <- return 0
rewrite: x | 0 ==> x
applied left monad law for t18630 <- return t16823
constant folding for shl
applied left monad law for t18631 <- return 2560
rewrite: (a | c) & m ==> (a & m) | (c & m)
rewrite: (u & c) & m ==> u & (c & m)
cse: using previously computed value t16823 for t18700
rewrite: x | 0 ==> x
applied left monad law for t18632 <- return t16823
applied left monad law for t16826 <- return t16825
rewriting t16822 @ [t16825]
rewriting t16827 @ []
rewrite: (x + n) + m == x + (n + m)
rewriting get2 @ [t16830]
rewriting t16831 @ []
rewriting genLtInc1 @ [s13]
deriving specialized closure definition k523 for ClosAlloc using k450
rewriting t16833 @ [s14]
deriving specialized block b1502 for BlockCall to block b1501
deriving specialized block b1524 for BlockCall to block b1002
replacing reference to top level s12 with 1
liveness replaced t16833 with a wildcard
liveness replaced t16831 with a wildcard
liveness replaced t16829 with a wildcard
liveness replaced t16828 with a wildcard
liveness replaced t16827 with a wildcard
liveness replaced t16824 with a wildcard
liveness replaced t16822 with a wildcard
liveness replaced t16820 with a wildcard
liveness replaced t16818 with a wildcard
liveness replaced t16816 with a wildcard
liveness replaced t16813 with a wildcard
liveness replaced t16811 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t16844 <- return t16843
rewriting get1 @ [t16843]
rewriting t16845 @ []
liveness replaced t16845 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t16849 @ []
rewriting and @ [t16850]
rewriting t16851 @ [96]
rewrite: x + 0 ==> x
applied left monad law for t16855 <- return t16854
rewriting get1 @ [t16854]
rewriting t16856 @ []
liveness replaced t16856 with a wildcard
liveness replaced t16853 with a wildcard
liveness replaced t16851 with a wildcard
liveness replaced t16849 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t16860 @ []
rewriting and @ [t16861]
rewriting t16862 @ [96]
liveness replaced t16864 with a wildcard
liveness replaced t16862 with a wildcard
liveness replaced t16860 with a wildcard
rewriting @2 @ [itoaBuf]
deriving specialized closure definition k531 for ClosAlloc using k463
rewriting t16892 @ [t16891]
rewriting get3 @ [t16893]
rewriting t16894 @ []
rewriting bitsToWord @ [t16895]
applied left monad law for t16896 <- return t16895
rewriting genLtDec @ [s19]
deriving specialized closure definition k532 for ClosAlloc using k497
rewriting t16898 @ [s20]
applied left monad law for t18702 <- return s20
applied left monad law for t16888 <- return s19
deriving specialized closure definition k533 for ClosAlloc using k496
deriving specialized block b1527 for BlockCall to block b1526
deriving specialized block b1529 for BlockCall to block b1356
replacing reference to top level s15 with 0
replacing reference to top level s18 with 1
liveness replaced t16898 with a wildcard
liveness replaced t16897 with a wildcard
liveness replaced t16894 with a wildcard
liveness replaced t16892 with a wildcard
rewriting @2 @ [itoaBuf]
deriving specialized closure definition k531 for ClosAlloc using k463
rewriting t16905 @ [s15]
applied left monad law for t18701 <- return s15
applied left monad law for t16615 <- return itoaBuf
applied left monad law for t16613 <- return s15
applied left monad law for t16612 <- return itoaBuf
replacing reference to top level s15 with 0
deriving specialized block b1531 for BlockCall to block b1472
deriving specialized block b1530 for BlockCall to block b1525
rewriting get3 @ [t16906]
rewriting t16907 @ []
rewriting bitsToWord @ [t16908]
applied left monad law for t16909 <- return t16908
rewriting genLtDec @ [s19]
deriving specialized closure definition k532 for ClosAlloc using k497
rewriting t16911 @ [s20]
deriving specialized block b1527 for BlockCall to block b1526
deriving specialized block b1529 for BlockCall to block b1356
replacing reference to top level s15 with 0
replacing reference to top level s15 with 0
replacing reference to top level s18 with 1
liveness replaced t16911 with a wildcard
liveness replaced t16910 with a wildcard
liveness replaced t16907 with a wildcard
liveness replaced t16905 with a wildcard
liveness replaced t16919 with a wildcard
rewriting genLtInc2 @ [s19]
deriving specialized closure definition k534 for ClosAlloc using k478
rewriting t16922 @ [s20]
applied left monad law for t18704 <- return s20
applied left monad law for t16650 <- return s19
deriving specialized closure definition k535 for ClosAlloc using k477
deriving specialized block b1533 for BlockCall to block b1532
deriving specialized block b1535 for BlockCall to block b1357
replacing reference to top level s15 with 0
replacing reference to top level s18 with 1
liveness replaced t16922 with a wildcard
liveness replaced t16931 with a wildcard
liveness replaced t16930 with a wildcard
rewriting genLtInc2 @ [s19]
deriving specialized closure definition k534 for ClosAlloc using k478
rewriting t16933 @ [s20]
deriving specialized block b1533 for BlockCall to block b1532
deriving specialized block b1536 for BlockCall to block b1443
replacing reference to top level s15 with 0
replacing reference to top level s15 with 0
replacing reference to top level s18 with 1
liveness replaced t16933 with a wildcard
liveness replaced t16943 with a wildcard
rewriting wordToByte @ [t16949]
rewriting wordToByte @ [t16956]
rewriting genLtInc2 @ [s19]
deriving specialized closure definition k534 for ClosAlloc using k478
rewriting t16965 @ [s20]
deriving specialized block b1533 for BlockCall to block b1532
rewriting nzdiv @ [t16971]
rewriting t16975 @ [nz10]
replacing reference to top level nz10 with 10
liveness replaced t16975 with a wildcard
deriving specialized block b1537 for BlockCall to block b1362
replacing reference to top level maxBound2 with 31
replacing reference to top level s18 with 1
liveness replaced t16965 with a wildcard
liveness replaced t16964 with a wildcard
rewriting nzdiv @ [t16971]
rewriting t16975 @ [nz10]
replacing reference to top level nz10 with 10
liveness replaced t16975 with a wildcard
rewriting @2 @ [itoaBuf]
deriving specialized closure definition k531 for ClosAlloc using k463
rewriting t16981 @ [t16979]
rewriting set3 @ [t16982]
rewriting nzrem @ [t16978]
rewriting t16984 @ [nz10]
rewriting t16958 @ [t16959]
rewriting t16963 @ []
liveness replaced t16963 with a wildcard
liveness replaced t16958 with a wildcard
deriving specialized block b1539 for BlockCall to block b1243
liveness replaced t16952 with a wildcard
deriving specialized block b1538 for BlockCall to block b1242
deriving specialized block b1539 for BlockCall to block b1243
liveness replaced t16945 with a wildcard
deriving specialized block b1540 for BlockCall to block b1246
replacing reference to top level nz10 with 10
liveness replaced t16984 with a wildcard
liveness replaced t16983 with a wildcard
liveness replaced t16981 with a wildcard
rewriting nzdiv @ [t16988]
rewriting t16991 @ [nz10]
replacing reference to top level nz10 with 10
liveness replaced t16991 with a wildcard
rewriting genLtInc2 @ [s19]
deriving specialized closure definition k534 for ClosAlloc using k478
rewriting t17000 @ [s20]
deriving specialized block b1533 for BlockCall to block b1532
deriving specialized block b1541 for BlockCall to block b1363
replacing reference to top level maxBound2 with 31
replacing reference to top level s15 with 0
replacing reference to top level s18 with 1
liveness replaced t17000 with a wildcard
liveness replaced t16999 with a wildcard
rewriting wordToByte @ [t17009]
rewriting wordToByte @ [t17015]
rewriting @2 @ [itoaBuf]
deriving specialized closure definition k531 for ClosAlloc using k463
rewriting t17019 @ [s15]
deriving specialized block b1530 for BlockCall to block b1525
rewriting set3 @ [t17020]
rewriting nzrem @ [t17018]
rewriting t17022 @ [nz10]
rewriting t16994 @ [t16995]
rewriting t16998 @ []
liveness replaced t16998 with a wildcard
liveness replaced t16994 with a wildcard
deriving specialized block b1543 for BlockCall to block b1232
liveness replaced t17012 with a wildcard
deriving specialized block b1542 for BlockCall to block b1231
deriving specialized block b1543 for BlockCall to block b1232
liveness replaced t17006 with a wildcard
deriving specialized block b1544 for BlockCall to block b1247
replacing reference to top level nz10 with 10
liveness replaced t17022 with a wildcard
liveness replaced t17021 with a wildcard
liveness replaced t17019 with a wildcard
rewriting wordToByte @ [t17032]
rewriting wordToByte @ [t17039]
rewriting genLtInc2 @ [s19]
deriving specialized closure definition k534 for ClosAlloc using k478
rewriting t17048 @ [s20]
deriving specialized block b1533 for BlockCall to block b1532
rewriting nzdiv @ [t17054]
rewriting t17058 @ [nz16]
replacing reference to top level nz16 with 16
liveness replaced t17058 with a wildcard
deriving specialized block b1545 for BlockCall to block b1364
replacing reference to top level maxBound2 with 31
replacing reference to top level s18 with 1
liveness replaced t17048 with a wildcard
liveness replaced t17047 with a wildcard
rewriting nzdiv @ [t17054]
rewriting t17058 @ [nz16]
replacing reference to top level nz16 with 16
liveness replaced t17058 with a wildcard
rewriting @2 @ [itoaBuf]
deriving specialized closure definition k531 for ClosAlloc using k463
rewriting t17064 @ [t17062]
rewriting set3 @ [t17065]
rewriting nzrem @ [t17061]
rewriting t17067 @ [nz16]
rewriting t17041 @ [t17042]
rewriting t17046 @ []
liveness replaced t17046 with a wildcard
liveness replaced t17041 with a wildcard
deriving specialized block b1547 for BlockCall to block b1253
liveness replaced t17035 with a wildcard
deriving specialized block b1546 for BlockCall to block b1252
deriving specialized block b1547 for BlockCall to block b1253
liveness replaced t17028 with a wildcard
deriving specialized block b1548 for BlockCall to block b1255
replacing reference to top level nz16 with 16
liveness replaced t17067 with a wildcard
liveness replaced t17066 with a wildcard
liveness replaced t17064 with a wildcard
rewriting nzdiv @ [t17071]
rewriting t17074 @ [nz16]
replacing reference to top level nz16 with 16
liveness replaced t17074 with a wildcard
rewriting genLtInc2 @ [s19]
deriving specialized closure definition k534 for ClosAlloc using k478
rewriting t17083 @ [s20]
deriving specialized block b1533 for BlockCall to block b1532
rewrite: nzdiv((x, 16)) ==> lshr((x, 4))
deriving specialized block b1549 for BlockCall to block b1365
replacing reference to top level maxBound2 with 31
replacing reference to top level s15 with 0
replacing reference to top level s18 with 1
liveness replaced t17083 with a wildcard
liveness replaced t17082 with a wildcard
rewriting wordToByte @ [t17092]
rewriting wordToByte @ [t17098]
rewriting @2 @ [itoaBuf]
deriving specialized closure definition k531 for ClosAlloc using k463
rewriting t17102 @ [s15]
deriving specialized block b1530 for BlockCall to block b1525
rewriting set3 @ [t17103]
rewriting nzrem @ [t17101]
rewriting t17105 @ [nz16]
rewriting t17077 @ [t17078]
rewriting t17081 @ []
liveness replaced t17081 with a wildcard
liveness replaced t17077 with a wildcard
deriving specialized block b1551 for BlockCall to block b1249
liveness replaced t17095 with a wildcard
deriving specialized block b1550 for BlockCall to block b1248
deriving specialized block b1551 for BlockCall to block b1249
liveness replaced t17089 with a wildcard
deriving specialized block b1552 for BlockCall to block b1256
replacing reference to top level nz16 with 16
liveness replaced t17105 with a wildcard
liveness replaced t17104 with a wildcard
liveness replaced t17102 with a wildcard
liveness replaced t17114 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17118 @ []
rewriting and @ [t17119]
rewriting t17120 @ [96]
liveness replaced t17123 with a wildcard
liveness replaced t17122 with a wildcard
liveness replaced t17120 with a wildcard
liveness replaced t17118 with a wildcard
replacing nextChar @ ... with block call
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17133 @ []
rewriting and @ [t17134]
rewriting t17135 @ [96]
liveness replaced t17137 with a wildcard
liveness replaced t17135 with a wildcard
liveness replaced t17133 with a wildcard
deriving specialized block b1555 for BlockCall to block b1035
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17133 @ []
rewriting and @ [t17134]
rewriting t17135 @ [96]
liveness replaced t17137 with a wildcard
liveness replaced t17135 with a wildcard
liveness replaced t17133 with a wildcard
rewriting get5 @ [t17141]
rewriting t17142 @ []
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str3
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str3]
deriving specialized closure definition k536 for ClosAlloc using k75
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1555 for BlockCall to block b1035
liveness replaced t17144 with a wildcard
liveness replaced t17142 with a wildcard
rewriting get5 @ [t17148]
rewriting t17149 @ []
liveness replaced t17149 with a wildcard
liveness replaced t17154 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17159 @ []
rewriting and @ [t17160]
rewriting t17161 @ [96]
liveness replaced t17163 with a wildcard
liveness replaced t17161 with a wildcard
liveness replaced t17159 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17168 @ []
rewriting and @ [t17169]
rewriting t17170 @ [96]
liveness replaced t17173 with a wildcard
liveness replaced t17172 with a wildcard
liveness replaced t17170 with a wildcard
liveness replaced t17168 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1558 for BlockCall to block b1022
replacing nextChar @ ... with block call
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1555 for BlockCall to block b1035
liveness replaced t17184 with a wildcard
liveness replaced t17183 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17191 @ []
rewriting and @ [t17192]
rewriting t17193 @ [96]
replacing nextChar @ ... with block call
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1555 for BlockCall to block b1035
liveness replaced t17197 with a wildcard
liveness replaced t17196 with a wildcard
liveness replaced t17195 with a wildcard
liveness replaced t17193 with a wildcard
liveness replaced t17191 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17205 @ []
rewriting and @ [t17206]
rewriting t17207 @ [96]
liveness replaced t17209 with a wildcard
liveness replaced t17207 with a wildcard
liveness replaced t17205 with a wildcard
rewriting get5 @ [t17213]
rewriting t17214 @ []
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str6
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str6]
deriving specialized closure definition k537 for ClosAlloc using k75
deriving specialized block b1559 for BlockCall to block b1554
deriving specialized block b1561 for BlockCall to block b1444
liveness replaced t17216 with a wildcard
liveness replaced t17214 with a wildcard
rewriting get5 @ [t17220]
rewriting t17221 @ []
replacing nextChar @ ... with block call
deriving specialized block b1559 for BlockCall to block b1554
deriving specialized block b1558 for BlockCall to block b1022
liveness replaced t17223 with a wildcard
liveness replaced t17221 with a wildcard
liveness replaced t17229 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17234 @ []
rewriting and @ [t17235]
rewriting t17236 @ [96]
liveness replaced t17238 with a wildcard
liveness replaced t17236 with a wildcard
liveness replaced t17234 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17243 @ []
rewriting and @ [t17244]
rewriting t17245 @ [96]
liveness replaced t17248 with a wildcard
liveness replaced t17247 with a wildcard
liveness replaced t17245 with a wildcard
liveness replaced t17243 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1562 for BlockCall to block b1026
replacing nextChar @ ... with block call
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1555 for BlockCall to block b1035
liveness replaced t17259 with a wildcard
liveness replaced t17258 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17266 @ []
rewriting and @ [t17267]
rewriting t17268 @ [96]
replacing nextChar @ ... with block call
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1555 for BlockCall to block b1035
liveness replaced t17272 with a wildcard
liveness replaced t17271 with a wildcard
liveness replaced t17270 with a wildcard
liveness replaced t17268 with a wildcard
liveness replaced t17266 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17280 @ []
rewriting and @ [t17281]
rewriting t17282 @ [96]
liveness replaced t17284 with a wildcard
liveness replaced t17282 with a wildcard
liveness replaced t17280 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t17288 <- return t17286
rewriting get5 @ [t17286]
rewriting t17289 @ []
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str5
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str5]
deriving specialized closure definition k538 for ClosAlloc using k75
deriving specialized block b1563 for BlockCall to block b1554
deriving specialized block b1565 for BlockCall to block b1445
liveness replaced t17291 with a wildcard
liveness replaced t17289 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t17295 <- return t17294
rewriting get5 @ [t17294]
rewriting t17296 @ []
replacing nextChar @ ... with block call
deriving specialized block b1563 for BlockCall to block b1554
deriving specialized block b1562 for BlockCall to block b1026
liveness replaced t17298 with a wildcard
liveness replaced t17296 with a wildcard
liveness replaced t17304 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17309 @ []
rewriting and @ [t17310]
rewriting t17311 @ [96]
liveness replaced t17313 with a wildcard
liveness replaced t17311 with a wildcard
liveness replaced t17309 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17318 @ []
rewriting and @ [t17319]
rewriting t17320 @ [96]
liveness replaced t17323 with a wildcard
liveness replaced t17322 with a wildcard
liveness replaced t17320 with a wildcard
liveness replaced t17318 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1566 for BlockCall to block b1030
replacing nextChar @ ... with block call
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1555 for BlockCall to block b1035
liveness replaced t17334 with a wildcard
liveness replaced t17333 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17341 @ []
rewriting and @ [t17342]
rewriting t17343 @ [96]
replacing nextChar @ ... with block call
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1555 for BlockCall to block b1035
liveness replaced t17347 with a wildcard
liveness replaced t17346 with a wildcard
liveness replaced t17345 with a wildcard
liveness replaced t17343 with a wildcard
liveness replaced t17341 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17355 @ []
rewriting and @ [t17356]
rewriting t17357 @ [96]
liveness replaced t17359 with a wildcard
liveness replaced t17357 with a wildcard
liveness replaced t17355 with a wildcard
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str4
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str4]
deriving specialized closure definition k539 for ClosAlloc using k75
deriving specialized block b1567 for BlockCall to block b1554
deriving specialized block b1569 for BlockCall to block b1446
liveness replaced t17369 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17374 @ []
rewriting and @ [t17375]
rewriting t17376 @ [96]
liveness replaced t17379 with a wildcard
liveness replaced t17378 with a wildcard
liveness replaced t17376 with a wildcard
liveness replaced t17374 with a wildcard
replacing nextChar @ ... with block call
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17391 @ []
rewriting and @ [t17392]
rewriting t17393 @ [96]
liveness replaced t17395 with a wildcard
liveness replaced t17393 with a wildcard
liveness replaced t17391 with a wildcard
deriving specialized block b1570 for BlockCall to block b1257
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17391 @ []
rewriting and @ [t17392]
rewriting t17393 @ [96]
liveness replaced t17395 with a wildcard
liveness replaced t17393 with a wildcard
liveness replaced t17391 with a wildcard
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str2
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str2]
deriving specialized closure definition k540 for ClosAlloc using k75
deriving specialized block b1571 for BlockCall to block b1554
deriving specialized block b1570 for BlockCall to block b1257
liveness replaced t17399 with a wildcard
liveness replaced t17406 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17411 @ []
rewriting and @ [t17412]
rewriting t17413 @ [96]
liveness replaced t17416 with a wildcard
liveness replaced t17415 with a wildcard
liveness replaced t17413 with a wildcard
liveness replaced t17411 with a wildcard
replacing nextChar @ ... with block call
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17428 @ []
rewriting and @ [t17429]
rewriting t17430 @ [96]
liveness replaced t17432 with a wildcard
liveness replaced t17430 with a wildcard
liveness replaced t17428 with a wildcard
deriving specialized block b1573 for BlockCall to block b1258
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17428 @ []
rewriting and @ [t17429]
rewriting t17430 @ [96]
liveness replaced t17432 with a wildcard
liveness replaced t17430 with a wildcard
liveness replaced t17428 with a wildcard
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str1
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str1]
deriving specialized closure definition k541 for ClosAlloc using k75
deriving specialized block b1574 for BlockCall to block b1554
deriving specialized block b1573 for BlockCall to block b1258
replacing nextChar @ ... with block call
replacing nextChar @ ... with block call
deriving specialized block b1576 for BlockCall to block b1259
liveness replaced t17443 with a wildcard
deriving specialized block b1576 for BlockCall to block b1259
liveness replaced t17443 with a wildcard
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str11
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str11]
deriving specialized closure definition k542 for ClosAlloc using k75
deriving specialized block b1577 for BlockCall to block b1554
deriving specialized block b1576 for BlockCall to block b1259
liveness replaced t17455 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17460 @ []
rewriting and @ [t17461]
rewriting t17462 @ [96]
liveness replaced t17465 with a wildcard
liveness replaced t17464 with a wildcard
liveness replaced t17462 with a wildcard
liveness replaced t17460 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1579 for BlockCall to block b1260
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17481 @ []
rewriting and @ [t17482]
rewriting t17483 @ [96]
liveness replaced t17485 with a wildcard
liveness replaced t17483 with a wildcard
liveness replaced t17481 with a wildcard
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str0
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str0]
deriving specialized closure definition k543 for ClosAlloc using k75
deriving specialized block b1580 for BlockCall to block b1554
deriving specialized block b1582 for BlockCall to block b1265
replacing nextMimgHeader @ ... with block call
deriving specialized block b1585 for BlockCall to block b1266
liveness replaced t17520 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17524 @ []
rewriting and @ [t17525]
rewriting t17526 @ [96]
liveness replaced t17529 with a wildcard
liveness replaced t17528 with a wildcard
liveness replaced t17526 with a wildcard
liveness replaced t17524 with a wildcard
replacing nextChar @ ... with block call
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17539 @ []
rewriting and @ [t17540]
rewriting t17541 @ [96]
liveness replaced t17543 with a wildcard
liveness replaced t17541 with a wildcard
liveness replaced t17539 with a wildcard
deriving specialized block b1586 for BlockCall to block b1099
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17539 @ []
rewriting and @ [t17540]
rewriting t17541 @ [96]
liveness replaced t17543 with a wildcard
liveness replaced t17541 with a wildcard
liveness replaced t17539 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1586 for BlockCall to block b1099
liveness replaced t17550 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17553 @ []
rewriting and @ [t17554]
rewriting t17555 @ [96]
liveness replaced t17558 with a wildcard
liveness replaced t17557 with a wildcard
liveness replaced t17555 with a wildcard
liveness replaced t17553 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1587 for BlockCall to block b884
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17568 @ []
rewriting and @ [t17569]
rewriting t17570 @ [96]
liveness replaced t17572 with a wildcard
liveness replaced t17570 with a wildcard
liveness replaced t17568 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1586 for BlockCall to block b1099
liveness replaced t17578 with a wildcard
rewriting get5 @ [t17583]
rewriting t17584 @ []
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str9
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str9]
deriving specialized closure definition k544 for ClosAlloc using k75
deriving specialized block b1588 for BlockCall to block b1554
deriving specialized block b1590 for BlockCall to block b1447
liveness replaced t17586 with a wildcard
liveness replaced t17584 with a wildcard
rewriting get5 @ [t17590]
rewriting t17591 @ []
replacing nextChar @ ... with block call
deriving specialized block b1588 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
liveness replaced t17593 with a wildcard
liveness replaced t17591 with a wildcard
liveness replaced t17599 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17604 @ []
rewriting and @ [t17605]
rewriting t17606 @ [96]
liveness replaced t17608 with a wildcard
liveness replaced t17606 with a wildcard
liveness replaced t17604 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17613 @ []
rewriting and @ [t17614]
rewriting t17615 @ [96]
liveness replaced t17618 with a wildcard
liveness replaced t17617 with a wildcard
liveness replaced t17615 with a wildcard
liveness replaced t17613 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1591 for BlockCall to block b1091
replacing nextChar @ ... with block call
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1586 for BlockCall to block b1099
liveness replaced t17629 with a wildcard
liveness replaced t17628 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17636 @ []
rewriting and @ [t17637]
rewriting t17638 @ [96]
replacing nextChar @ ... with block call
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1586 for BlockCall to block b1099
liveness replaced t17642 with a wildcard
liveness replaced t17641 with a wildcard
liveness replaced t17640 with a wildcard
liveness replaced t17638 with a wildcard
liveness replaced t17636 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17650 @ []
rewriting and @ [t17651]
rewriting t17652 @ [96]
liveness replaced t17654 with a wildcard
liveness replaced t17652 with a wildcard
liveness replaced t17650 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t17658 <- return t17656
rewriting get5 @ [t17656]
rewriting t17659 @ []
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str8
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str8]
deriving specialized closure definition k545 for ClosAlloc using k75
deriving specialized block b1592 for BlockCall to block b1554
deriving specialized block b1594 for BlockCall to block b1448
liveness replaced t17661 with a wildcard
liveness replaced t17659 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t17665 <- return t17664
rewriting get5 @ [t17664]
rewriting t17666 @ []
replacing nextChar @ ... with block call
deriving specialized block b1592 for BlockCall to block b1554
deriving specialized block b1591 for BlockCall to block b1091
liveness replaced t17668 with a wildcard
liveness replaced t17666 with a wildcard
liveness replaced t17674 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17679 @ []
rewriting and @ [t17680]
rewriting t17681 @ [96]
liveness replaced t17683 with a wildcard
liveness replaced t17681 with a wildcard
liveness replaced t17679 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17688 @ []
rewriting and @ [t17689]
rewriting t17690 @ [96]
liveness replaced t17693 with a wildcard
liveness replaced t17692 with a wildcard
liveness replaced t17690 with a wildcard
liveness replaced t17688 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1595 for BlockCall to block b1095
replacing nextChar @ ... with block call
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1586 for BlockCall to block b1099
liveness replaced t17704 with a wildcard
liveness replaced t17703 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17711 @ []
rewriting and @ [t17712]
rewriting t17713 @ [96]
replacing nextChar @ ... with block call
deriving specialized block b1556 for BlockCall to block b1554
deriving specialized block b1586 for BlockCall to block b1099
liveness replaced t17717 with a wildcard
liveness replaced t17716 with a wildcard
liveness replaced t17715 with a wildcard
liveness replaced t17713 with a wildcard
liveness replaced t17711 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17725 @ []
rewriting and @ [t17726]
rewriting t17727 @ [96]
liveness replaced t17729 with a wildcard
liveness replaced t17727 with a wildcard
liveness replaced t17725 with a wildcard
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str7
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str7]
deriving specialized closure definition k546 for ClosAlloc using k75
deriving specialized block b1596 for BlockCall to block b1554
deriving specialized block b1598 for BlockCall to block b1449
liveness replaced t17739 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17744 @ []
rewriting and @ [t17745]
rewriting t17746 @ [96]
liveness replaced t17749 with a wildcard
liveness replaced t17748 with a wildcard
liveness replaced t17746 with a wildcard
liveness replaced t17744 with a wildcard
replacing nextChar @ ... with block call
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17761 @ []
rewriting and @ [t17762]
rewriting t17763 @ [96]
liveness replaced t17765 with a wildcard
liveness replaced t17763 with a wildcard
liveness replaced t17761 with a wildcard
deriving specialized block b1599 for BlockCall to block b1267
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17761 @ []
rewriting and @ [t17762]
rewriting t17763 @ [96]
liveness replaced t17765 with a wildcard
liveness replaced t17763 with a wildcard
liveness replaced t17761 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1571 for BlockCall to block b1554
deriving specialized block b1599 for BlockCall to block b1267
liveness replaced t17769 with a wildcard
liveness replaced t17776 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17781 @ []
rewriting and @ [t17782]
rewriting t17783 @ [96]
liveness replaced t17786 with a wildcard
liveness replaced t17785 with a wildcard
liveness replaced t17783 with a wildcard
liveness replaced t17781 with a wildcard
replacing nextChar @ ... with block call
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17798 @ []
rewriting and @ [t17799]
rewriting t17800 @ [96]
liveness replaced t17802 with a wildcard
liveness replaced t17800 with a wildcard
liveness replaced t17798 with a wildcard
deriving specialized block b1600 for BlockCall to block b1268
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17798 @ []
rewriting and @ [t17799]
rewriting t17800 @ [96]
liveness replaced t17802 with a wildcard
liveness replaced t17800 with a wildcard
liveness replaced t17798 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1574 for BlockCall to block b1554
deriving specialized block b1600 for BlockCall to block b1268
replacing nextChar @ ... with block call
replacing nextChar @ ... with block call
deriving specialized block b1601 for BlockCall to block b1269
liveness replaced t17813 with a wildcard
deriving specialized block b1601 for BlockCall to block b1269
liveness replaced t17813 with a wildcard
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str13
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str13]
deriving specialized closure definition k547 for ClosAlloc using k75
deriving specialized block b1602 for BlockCall to block b1554
deriving specialized block b1601 for BlockCall to block b1269
liveness replaced t17825 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17830 @ []
rewriting and @ [t17831]
rewriting t17832 @ [96]
liveness replaced t17835 with a wildcard
liveness replaced t17834 with a wildcard
liveness replaced t17832 with a wildcard
liveness replaced t17830 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1604 for BlockCall to block b1270
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17851 @ []
rewriting and @ [t17852]
rewriting t17853 @ [96]
liveness replaced t17855 with a wildcard
liveness replaced t17853 with a wildcard
liveness replaced t17851 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1580 for BlockCall to block b1554
deriving specialized block b1605 for BlockCall to block b1275
replacing nextMimgMMap @ ... with block call
deriving specialized block b1608 for BlockCall to block b1276
replacing reference to top level refToWord_imp with ptrToWordImp
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str22
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str22]
deriving specialized closure definition k548 for ClosAlloc using k75
deriving specialized block b1609 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
replacing nextChar @ ... with block call
deriving specialized block b1609 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
liveness replaced t17891 with a wildcard
replacing refToWord @ ... with block call
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str20
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str20]
deriving specialized closure definition k549 for ClosAlloc using k75
deriving specialized block b1613 for BlockCall to block b1554
deriving specialized block b1615 for BlockCall to block b1450
liveness replaced t17896 with a wildcard
replacing refToWord @ ... with block call
replacing nextChar @ ... with block call
deriving specialized block b1613 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
liveness replaced t17901 with a wildcard
liveness replaced t17907 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17912 @ []
rewriting and @ [t17913]
rewriting t17914 @ [96]
liveness replaced t17916 with a wildcard
liveness replaced t17914 with a wildcard
liveness replaced t17912 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17921 @ []
rewriting and @ [t17922]
rewriting t17923 @ [96]
liveness replaced t17926 with a wildcard
liveness replaced t17925 with a wildcard
liveness replaced t17923 with a wildcard
liveness replaced t17921 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1616 for BlockCall to block b1155
replacing nextChar @ ... with block call
deriving specialized block b1609 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
liveness replaced t17936 with a wildcard
liveness replaced t17935 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17942 @ []
rewriting and @ [t17943]
rewriting t17944 @ [96]
replacing nextChar @ ... with block call
deriving specialized block b1609 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
liveness replaced t17948 with a wildcard
liveness replaced t17947 with a wildcard
liveness replaced t17946 with a wildcard
liveness replaced t17944 with a wildcard
liveness replaced t17942 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17955 @ []
rewriting and @ [t17956]
rewriting t17957 @ [96]
liveness replaced t17959 with a wildcard
liveness replaced t17957 with a wildcard
liveness replaced t17955 with a wildcard
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str19
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str19]
deriving specialized closure definition k550 for ClosAlloc using k75
deriving specialized block b1617 for BlockCall to block b1554
deriving specialized block b1619 for BlockCall to block b1451
replacing nextChar @ ... with block call
replacing nextChar @ ... with block call
deriving specialized block b1620 for BlockCall to block b1452
liveness replaced t17968 with a wildcard
deriving specialized block b1620 for BlockCall to block b1452
liveness replaced t17968 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1620 for BlockCall to block b1452
replacing nextChar @ ... with block call
deriving specialized block b1617 for BlockCall to block b1554
deriving specialized block b1616 for BlockCall to block b1155
replacing nextChar @ ... with block call
replacing nextChar @ ... with block call
deriving specialized block b1621 for BlockCall to block b1277
liveness replaced t17982 with a wildcard
deriving specialized block b1621 for BlockCall to block b1277
liveness replaced t17982 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1621 for BlockCall to block b1277
liveness replaced t17992 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t17997 @ []
rewriting and @ [t17998]
rewriting t17999 @ [96]
liveness replaced t18001 with a wildcard
liveness replaced t17999 with a wildcard
liveness replaced t17997 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18006 @ []
rewriting and @ [t18007]
rewriting t18008 @ [96]
liveness replaced t18011 with a wildcard
liveness replaced t18010 with a wildcard
liveness replaced t18008 with a wildcard
liveness replaced t18006 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1622 for BlockCall to block b1163
replacing nextChar @ ... with block call
deriving specialized block b1609 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
liveness replaced t18021 with a wildcard
liveness replaced t18020 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18027 @ []
rewriting and @ [t18028]
rewriting t18029 @ [96]
replacing nextChar @ ... with block call
deriving specialized block b1609 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
liveness replaced t18033 with a wildcard
liveness replaced t18032 with a wildcard
liveness replaced t18031 with a wildcard
liveness replaced t18029 with a wildcard
liveness replaced t18027 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18040 @ []
rewriting and @ [t18041]
rewriting t18042 @ [96]
liveness replaced t18044 with a wildcard
liveness replaced t18042 with a wildcard
liveness replaced t18040 with a wildcard
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str18
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str18]
deriving specialized closure definition k551 for ClosAlloc using k75
deriving specialized block b1623 for BlockCall to block b1554
deriving specialized block b1625 for BlockCall to block b1453
replacing nextChar @ ... with block call
deriving specialized block b1623 for BlockCall to block b1554
deriving specialized block b1625 for BlockCall to block b1453
liveness replaced t18053 with a wildcard
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str16
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str16]
deriving specialized closure definition k552 for ClosAlloc using k75
deriving specialized block b1626 for BlockCall to block b1554
deriving specialized block b1628 for BlockCall to block b1454
replacing nextChar @ ... with block call
deriving specialized block b1623 for BlockCall to block b1554
deriving specialized block b1622 for BlockCall to block b1163
replacing nextChar @ ... with block call
deriving specialized block b1623 for BlockCall to block b1554
deriving specialized block b1622 for BlockCall to block b1163
liveness replaced t18066 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1626 for BlockCall to block b1554
deriving specialized block b1629 for BlockCall to block b1278
liveness replaced t18075 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18080 @ []
rewriting and @ [t18081]
rewriting t18082 @ [96]
liveness replaced t18084 with a wildcard
liveness replaced t18082 with a wildcard
liveness replaced t18080 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18089 @ []
rewriting and @ [t18090]
rewriting t18091 @ [96]
liveness replaced t18094 with a wildcard
liveness replaced t18093 with a wildcard
liveness replaced t18091 with a wildcard
liveness replaced t18089 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1630 for BlockCall to block b1171
replacing nextChar @ ... with block call
deriving specialized block b1609 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
liveness replaced t18104 with a wildcard
liveness replaced t18103 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18110 @ []
rewriting and @ [t18111]
rewriting t18112 @ [96]
replacing nextChar @ ... with block call
deriving specialized block b1609 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
liveness replaced t18116 with a wildcard
liveness replaced t18115 with a wildcard
liveness replaced t18114 with a wildcard
liveness replaced t18112 with a wildcard
liveness replaced t18110 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18123 @ []
rewriting and @ [t18124]
rewriting t18125 @ [96]
liveness replaced t18127 with a wildcard
liveness replaced t18125 with a wildcard
liveness replaced t18123 with a wildcard
rewriting get @ [t18129]
rewriting t18130 @ []
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str17
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str17]
deriving specialized closure definition k553 for ClosAlloc using k75
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1633 for BlockCall to block b1455
liveness replaced t18130 with a wildcard
replacing reference to top level bootdata with 4096
rewriting get @ [t18138]
rewriting t18139 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1633 for BlockCall to block b1455
liveness replaced t18139 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18137 with a wildcard
replacing refToWord @ ... with block call
replacing nextChar @ ... with block call
deriving specialized block b1613 for BlockCall to block b1554
constant folding for add
applied left monad law for t18138 <- return 4108
deriving specialized block b1634 for BlockCall to block b1456
liveness replaced t18145 with a wildcard
rewriting get @ [t18153]
rewriting t18154 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1633 for BlockCall to block b1455
liveness replaced t18154 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18152 with a wildcard
liveness replaced t18151 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18161 @ []
rewriting and @ [t18162]
rewriting t18163 @ [96]
rewriting get @ [t18168]
rewriting t18169 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1633 for BlockCall to block b1455
liveness replaced t18169 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18167 with a wildcard
liveness replaced t18166 with a wildcard
liveness replaced t18165 with a wildcard
liveness replaced t18163 with a wildcard
liveness replaced t18161 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18177 @ []
rewriting and @ [t18178]
rewriting t18179 @ [96]
liveness replaced t18181 with a wildcard
liveness replaced t18179 with a wildcard
liveness replaced t18177 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1617 for BlockCall to block b1554
deriving specialized block b1635 for BlockCall to block b1457
replacing nextChar @ ... with block call
replacing nextChar @ ... with block call
deriving specialized block b1636 for BlockCall to block b1458
liveness replaced t18190 with a wildcard
deriving specialized block b1636 for BlockCall to block b1458
liveness replaced t18190 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1636 for BlockCall to block b1458
rewriting get @ [t18202]
rewriting t18203 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1633 for BlockCall to block b1455
liveness replaced t18203 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18201 with a wildcard
liveness replaced t18200 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18210 @ []
rewriting and @ [t18211]
rewriting t18212 @ [96]
rewriting get @ [t18217]
rewriting t18218 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1633 for BlockCall to block b1455
liveness replaced t18218 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18216 with a wildcard
liveness replaced t18215 with a wildcard
liveness replaced t18214 with a wildcard
liveness replaced t18212 with a wildcard
liveness replaced t18210 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18226 @ []
rewriting and @ [t18227]
rewriting t18228 @ [96]
liveness replaced t18230 with a wildcard
liveness replaced t18228 with a wildcard
liveness replaced t18226 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1623 for BlockCall to block b1554
deriving specialized block b1637 for BlockCall to block b1459
replacing nextChar @ ... with block call
deriving specialized block b1623 for BlockCall to block b1554
deriving specialized block b1637 for BlockCall to block b1459
liveness replaced t18239 with a wildcard
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str15
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str15]
deriving specialized closure definition k554 for ClosAlloc using k75
deriving specialized block b1638 for BlockCall to block b1554
deriving specialized block b1640 for BlockCall to block b1460
replacing nextChar @ ... with block call
deriving specialized block b1638 for BlockCall to block b1554
deriving specialized block b1629 for BlockCall to block b1278
liveness replaced t18251 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18255 @ []
rewriting and @ [t18256]
rewriting t18257 @ [96]
liveness replaced t18260 with a wildcard
liveness replaced t18259 with a wildcard
liveness replaced t18257 with a wildcard
liveness replaced t18255 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1641 for BlockCall to block b1178
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18273 @ []
rewriting and @ [t18274]
rewriting t18275 @ [96]
liveness replaced t18277 with a wildcard
liveness replaced t18275 with a wildcard
liveness replaced t18273 with a wildcard
rewriting get @ [t18284]
rewriting t18285 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1633 for BlockCall to block b1455
liveness replaced t18285 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18283 with a wildcard
rewriting get @ [t18289]
rewriting t18290 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
constant folding for add
applied left monad law for t18284 <- return 4108
deriving specialized block b1642 for BlockCall to block b1461
liveness replaced t18290 with a wildcard
replacing reference to top level bootdata with 4096
rewriting get @ [t18294]
rewriting t18295 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1630 for BlockCall to block b1171
liveness replaced t18295 with a wildcard
replacing reference to top level bootdata with 4096
rewriting get @ [t18303]
rewriting t18304 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1630 for BlockCall to block b1171
liveness replaced t18304 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18302 with a wildcard
replacing refToWord @ ... with block call
replacing nextChar @ ... with block call
deriving specialized block b1613 for BlockCall to block b1554
constant folding for add
applied left monad law for t18303 <- return 4108
deriving specialized block b1643 for BlockCall to block b1438
liveness replaced t18310 with a wildcard
rewriting get @ [t18318]
rewriting t18319 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1630 for BlockCall to block b1171
liveness replaced t18319 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18317 with a wildcard
liveness replaced t18316 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18326 @ []
rewriting and @ [t18327]
rewriting t18328 @ [96]
rewriting get @ [t18333]
rewriting t18334 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1630 for BlockCall to block b1171
liveness replaced t18334 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18332 with a wildcard
liveness replaced t18331 with a wildcard
liveness replaced t18330 with a wildcard
liveness replaced t18328 with a wildcard
liveness replaced t18326 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18342 @ []
rewriting and @ [t18343]
rewriting t18344 @ [96]
liveness replaced t18346 with a wildcard
liveness replaced t18344 with a wildcard
liveness replaced t18342 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1617 for BlockCall to block b1554
deriving specialized block b1644 for BlockCall to block b1439
replacing nextChar @ ... with block call
replacing nextChar @ ... with block call
deriving specialized block b1645 for BlockCall to block b1440
liveness replaced t18355 with a wildcard
deriving specialized block b1645 for BlockCall to block b1440
liveness replaced t18355 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1645 for BlockCall to block b1440
rewriting get @ [t18367]
rewriting t18368 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1630 for BlockCall to block b1171
liveness replaced t18368 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18366 with a wildcard
liveness replaced t18365 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18375 @ []
rewriting and @ [t18376]
rewriting t18377 @ [96]
rewriting get @ [t18382]
rewriting t18383 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1630 for BlockCall to block b1171
liveness replaced t18383 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18381 with a wildcard
liveness replaced t18380 with a wildcard
liveness replaced t18379 with a wildcard
liveness replaced t18377 with a wildcard
liveness replaced t18375 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18391 @ []
rewriting and @ [t18392]
rewriting t18393 @ [96]
liveness replaced t18395 with a wildcard
liveness replaced t18393 with a wildcard
liveness replaced t18391 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1623 for BlockCall to block b1554
deriving specialized block b1646 for BlockCall to block b1441
replacing nextChar @ ... with block call
deriving specialized block b1623 for BlockCall to block b1554
deriving specialized block b1646 for BlockCall to block b1441
liveness replaced t18404 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1638 for BlockCall to block b1554
deriving specialized block b1647 for BlockCall to block b1442
rewriting get @ [t18415]
rewriting t18416 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
deriving specialized block b1630 for BlockCall to block b1171
liveness replaced t18416 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18414 with a wildcard
rewriting get @ [t18420]
rewriting t18421 @ []
replacing nextChar @ ... with block call
deriving specialized block b1631 for BlockCall to block b1554
constant folding for add
applied left monad law for t18415 <- return 4108
deriving specialized block b1648 for BlockCall to block b1299
liveness replaced t18421 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18427 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18430 @ []
rewriting and @ [t18431]
rewriting t18432 @ [96]
liveness replaced t18435 with a wildcard
liveness replaced t18434 with a wildcard
liveness replaced t18432 with a wildcard
liveness replaced t18430 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1649 for BlockCall to block b1186
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18445 @ []
rewriting and @ [t18446]
rewriting t18447 @ [96]
liveness replaced t18449 with a wildcard
liveness replaced t18447 with a wildcard
liveness replaced t18445 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1609 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
liveness replaced t18454 with a wildcard
rewriting get6 @ [t18457]
rewriting t18458 @ []
replacing mimgMMapCursor @ ... with block call
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str14
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str14]
deriving specialized closure definition k555 for ClosAlloc using k75
deriving specialized block b1652 for BlockCall to block b1554
deriving specialized block b1654 for BlockCall to block b1300
liveness replaced t18463 with a wildcard
liveness replaced t18458 with a wildcard
replacing reference to top level bootdata with 4096
rewriting get6 @ [t18466]
rewriting t18467 @ []
replacing mimgMMapCursor @ ... with block call
replacing nextChar @ ... with block call
deriving specialized block b1652 for BlockCall to block b1554
deriving specialized block b1649 for BlockCall to block b1186
liveness replaced t18472 with a wildcard
liveness replaced t18467 with a wildcard
replacing reference to top level bootdata with 4096
liveness replaced t18477 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18480 @ []
rewriting and @ [t18481]
rewriting t18482 @ [96]
liveness replaced t18485 with a wildcard
liveness replaced t18484 with a wildcard
liveness replaced t18482 with a wildcard
liveness replaced t18480 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1655 for BlockCall to block b1191
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18495 @ []
rewriting and @ [t18496]
rewriting t18497 @ [96]
liveness replaced t18499 with a wildcard
liveness replaced t18497 with a wildcard
liveness replaced t18495 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1609 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
liveness replaced t18504 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t18507 <- return bootdata
rewriting get7 @ [bootdata]
deriving specialized closure definition k556 for ClosAlloc using k459
rewriting t18508 @ []
replacing mimgHeaderCursor @ ... with block call
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str12
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str12]
deriving specialized closure definition k557 for ClosAlloc using k75
deriving specialized block b1659 for BlockCall to block b1554
deriving specialized block b1661 for BlockCall to block b1301
liveness replaced t18513 with a wildcard
liveness replaced t18508 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t18516 <- return bootdata
rewriting get7 @ [bootdata]
deriving specialized closure definition k556 for ClosAlloc using k459
rewriting t18517 @ []
replacing mimgHeaderCursor @ ... with block call
replacing nextChar @ ... with block call
deriving specialized block b1659 for BlockCall to block b1554
deriving specialized block b1655 for BlockCall to block b1191
liveness replaced t18522 with a wildcard
liveness replaced t18517 with a wildcard
liveness replaced t18527 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18530 @ []
rewriting and @ [t18531]
rewriting t18532 @ [96]
liveness replaced t18535 with a wildcard
liveness replaced t18534 with a wildcard
liveness replaced t18532 with a wildcard
liveness replaced t18530 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1662 for BlockCall to block b1196
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18545 @ []
rewriting and @ [t18546]
rewriting t18547 @ [96]
liveness replaced t18549 with a wildcard
liveness replaced t18547 with a wildcard
liveness replaced t18545 with a wildcard
replacing nextChar @ ... with block call
deriving specialized block b1609 for BlockCall to block b1554
deriving specialized block b1587 for BlockCall to block b884
liveness replaced t18554 with a wildcard
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str10
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str10]
deriving specialized closure definition k558 for ClosAlloc using k75
deriving specialized block b1663 for BlockCall to block b1554
deriving specialized block b1665 for BlockCall to block b1302
liveness replaced t18561 with a wildcard
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18564 @ []
rewriting and @ [t18565]
rewriting t18566 @ [96]
liveness replaced t18569 with a wildcard
liveness replaced t18568 with a wildcard
liveness replaced t18566 with a wildcard
liveness replaced t18564 with a wildcard
replacing nextChar @ ... with block call
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18577 @ []
rewriting and @ [t18578]
rewriting t18579 @ [96]
liveness replaced t18581 with a wildcard
liveness replaced t18579 with a wildcard
liveness replaced t18577 with a wildcard
deriving specialized block b1666 for BlockCall to block b1208
rewriting inb @ [com1ctrl]
deriving specialized closure definition k529 for ClosAlloc using k482
rewriting t18577 @ []
rewriting and @ [t18578]
rewriting t18579 @ [96]
liveness replaced t18581 with a wildcard
liveness replaced t18579 with a wildcard
liveness replaced t18577 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t18583 <- return console
rewrite: x + 0 ==> x
applied left monad law for t18584 <- return console
rewriting get1 @ [console]
deriving specialized closure definition k530 for ClosAlloc using k423
rewriting t18585 @ []
rewriting get2 @ [t18587]
rewriting t18588 @ []
rewrite: x + 0 ==> x
applied left monad law for t18591 <- return t18590
rewriting set1 @ [t18590]
rewriting t18592 @ [t18586]
rewriting t18593 @ []
rewrite: (x + n) + m == x + (n + m)
rewriting set2 @ [t18595]
rewriting t18596 @ [t18589]
rewriting t18597 @ []
rewrite: x + 0 ==> x
applied left monad law for t18600 <- return t18599
rewriting get1 @ [t18599]
rewriting t18601 @ []
rewrite: (x + n) + m == x + (n + m)
rewriting get2 @ [t18603]
rewriting t18604 @ []
rewriting get3 @ [t18606]
rewriting t18607 @ []
replacing nextChar @ ... with block call
applied left monad law for t18718 <- return str21
applied left monad law for t18719 <- return nextCharImp
rewriting nextCharImp @ [str21]
deriving specialized closure definition k559 for ClosAlloc using k75
deriving specialized block b1667 for BlockCall to block b1554
deriving specialized block b1666 for BlockCall to block b1208
liveness replaced t18609 with a wildcard
liveness replaced t18607 with a wildcard
liveness replaced t18604 with a wildcard
liveness replaced t18601 with a wildcard
liveness replaced t18598 with a wildcard
liveness replaced t18597 with a wildcard
liveness replaced t18596 with a wildcard
liveness replaced t18594 with a wildcard
liveness replaced t18593 with a wildcard
liveness replaced t18592 with a wildcard
liveness replaced t18588 with a wildcard
liveness replaced t18585 with a wildcard
replacing s2 @ ... with block call
applied left monad law for t18732 <- return console
rewriting t18733 @ [console]
applied left monad law for t18669 <- return console
applied left monad law for t16361 <- return console
rewriting t16359 @ [console]
applied left monad law for t18654 <- return console
applied left monad law for t16361 <- return console
rewriting t16359 @ [console]
applied left monad law for t18648 <- return console
applied left monad law for t16354 <- return console
rewriting t16352 @ [t16355]
liveness replaced t16352 with a wildcard
deriving specialized block b1676 for BlockCall to block b330
liveness replaced t16356 with a wildcard
deriving specialized block b1675 for BlockCall to block b1494
rewriting t16360 @ [console]
applied left monad law for t18651 <- return console
applied left monad law for t16354 <- return console
rewriting t16352 @ [t16355]
liveness replaced t16352 with a wildcard
deriving specialized block b1678 for BlockCall to block b330
liveness replaced t16356 with a wildcard
deriving specialized block b1677 for BlockCall to block b1495
liveness replaced t16359 with a wildcard
liveness replaced t16360 with a wildcard
deriving specialized block b1674 for BlockCall to block b1462
liveness replaced t16363 with a wildcard
liveness replaced t16364 with a wildcard
deriving specialized block b1673 for BlockCall to block b1496
rewriting t16360 @ [console]
applied left monad law for t18663 <- return console
applied left monad law for t16361 <- return console
rewriting t16359 @ [console]
deriving specialized block b1675 for BlockCall to block b1494
rewriting t16360 @ [console]
applied left monad law for t18661 <- return console
applied left monad law for t16354 <- return console
rewriting t16352 @ [t16355]
liveness replaced t16352 with a wildcard
deriving specialized block b1682 for BlockCall to block b330
liveness replaced t16356 with a wildcard
deriving specialized block b1681 for BlockCall to block b1497
liveness replaced t16359 with a wildcard
liveness replaced t16360 with a wildcard
deriving specialized block b1680 for BlockCall to block b1462
liveness replaced t16363 with a wildcard
liveness replaced t16364 with a wildcard
deriving specialized block b1679 for BlockCall to block b1498
liveness replaced t16359 with a wildcard
liveness replaced t16360 with a wildcard
deriving specialized block b1672 for BlockCall to block b1462
liveness replaced t16363 with a wildcard
liveness replaced t16364 with a wildcard
deriving specialized block b1671 for BlockCall to block b1499
eliminating duplicate args in call within b1499
liveness replaced t18733 with a wildcard
deriving specialized block b1670 for BlockCall to block b1669
rewriting s1 @ [itoaBuf]
applied left monad law for t16391 <- return itoaBuf
applied left monad law for t16390 <- return s42
applied left monad law for t16384 <- return itoaBuf
applied left monad law for t16383 <- return s42
rewriting s42 @ [t16385]
applied left monad law for t16386 <- return s120
rewriting s120 @ [itoaBuf]
applied left monad law for t16390 <- return s42
applied left monad law for t16383 <- return s42
rewriting s42 @ [t16385]
applied left monad law for t16386 <- return s120
rewriting s120 @ [t16384]
deriving specialized block b1686 for BlockCall to block b1474
deriving specialized block b1687 for BlockCall to block b1475
deriving specialized block b1686 for BlockCall to block b1474
deriving specialized block b1685 for BlockCall to block b1475
deriving specialized block b1684 for BlockCall to block b1474
rewriting kernel_impl @ []
liveness replaced t18613 with a wildcard
liveness replaced t18612 with a wildcard
Flow pass finished, running shake.
Steps performed = 2078
-------------------------
suffixInline succeeded for call to block b330 from block b1485
suffixInline succeeded for call to block b330 from block b1487
suffixInline succeeded for call to block b1463 from block b1488
suffixInline succeeded for call to block b330 from block b1490
suffixInline succeeded for call to block b330 from block b1492
suffixInline succeeded for call to block b1463 from block b1493
suffixInline succeeded for call to block b330 from block b1495
suffixInline succeeded for call to block b330 from block b1494
suffixInline succeeded for call to block b1462 from block b1496
suffixInline succeeded for call to block b330 from block b1497
suffixInline succeeded for call to block b1462 from block b1498
suffixInline succeeded for call to block b1462 from block b1499
inlining eliminated a wildcard binding in b1676
suffixInline succeeded for call to block b1488 from block b1676
inlining eliminated a wildcard binding in b1675
inlining eliminated a wildcard binding in b1678
suffixInline succeeded for call to block b1493 from block b1678
inlining eliminated a wildcard binding in b1677
inlining eliminated a wildcard binding in b1674
inlining eliminated a wildcard binding in b1674
prefixInline succeeded for call to block b1675 from block b1674
prefixInline succeeded for call to block b1676 from block b1674
elided call to goto block b1677
suffixInline succeeded for call to block b1678 from block b1674
inlining eliminated a wildcard binding in b1673
inlining eliminated a wildcard binding in b1673
inlining eliminated a wildcard binding in b1682
inlining eliminated a wildcard binding in b1681
inlining eliminated a wildcard binding in b1680
inlining eliminated a wildcard binding in b1680
prefixInline succeeded for call to block b1675 from block b1680
prefixInline succeeded for call to block b1676 from block b1680
elided call to goto block b1681
suffixInline succeeded for call to block b1682 from block b1680
inlining eliminated a wildcard binding in b1679
inlining eliminated a wildcard binding in b1679
inlining eliminated a wildcard binding in b1672
inlining eliminated a wildcard binding in b1672
prefixInline succeeded for call to block b1673 from block b1672
prefixInline succeeded for call to block b1674 from block b1672
elided call to goto block b1679
suffixInline succeeded for call to block b1680 from block b1672
suffixInline succeeded for call to block b1672 from block b1683
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
inlining eliminated a wildcard binding in b1670
suffixInline succeeded for call to block b1683 from block b1670
suffixInline succeeded for call to block b1464 from block b1500
inlining eliminated a wildcard binding in b690
inlining eliminated a wildcard binding in b690
inlining eliminated a wildcard binding in b690
inlining eliminated a wildcard binding in b690
inlining eliminated a wildcard binding in b690
prefixInline succeeded for call to block b1500 from block b690
prefixInline succeeded for call to block b1465 from block b690
prefixInline succeeded for call to block b1502 from block b690
inlining eliminated a wildcard binding in b692
prefixInline succeeded for call to block b1506 from block b692
prefixInline succeeded for call to block b1510 from block b123
prefixInline succeeded for call to block b1512 from block b125
suffixInline succeeded for call to block b125 from block b1668
suffixInline succeeded for call to block b125 from block b1664
inlining eliminated a wildcard binding in b485
prefixInline succeeded for call to block b1514 from block b485
suffixInline succeeded for call to block b125 from block b1581
suffixInline succeeded for call to block b125 from block b1578
suffixInline succeeded for call to block b125 from block b1575
suffixInline succeeded for call to block b1472 from block b1525
constant folding for and
suffixInline succeeded for call to block b1479 from block b1516
inlining eliminated a wildcard binding in b268
suffixInline succeeded for call to block b1516 from block b268
inlining eliminated a wildcard binding in b256
prefixInline succeeded for call to block b1517 from block b256
inlining eliminated a wildcard binding in b258
inlining eliminated a wildcard binding in b258
prefixInline succeeded for call to block b1518 from block b258
inlining eliminated a wildcard binding in b1524
inlining eliminated a wildcard binding in b1524
inlining eliminated a wildcard binding in b1524
inlining eliminated a wildcard binding in b1523
inlining eliminated a wildcard binding in b1523
inlining eliminated a wildcard binding in b702
inlining eliminated a wildcard binding in b702
inlining eliminated a wildcard binding in b702
inlining eliminated a wildcard binding in b702
inlining eliminated a wildcard binding in b702
inlining eliminated a wildcard binding in b702
inlining eliminated a wildcard binding in b702
prefixInline succeeded for call to block b1500 from block b702
prefixInline succeeded for call to block b1465 from block b702
prefixInline succeeded for call to block b1500 from block b702
prefixInline succeeded for call to block b1465 from block b702
prefixInline succeeded for call to block b1502 from block b702
inlining eliminated a wildcard binding in b700
inlining eliminated a wildcard binding in b700
inlining eliminated a wildcard binding in b700
inlining eliminated a wildcard binding in b700
inlining eliminated a wildcard binding in b700
prefixInline succeeded for call to block b1500 from block b700
prefixInline succeeded for call to block b1465 from block b700
prefixInline succeeded for call to block b1502 from block b700
inlining eliminated a wildcard binding in b1521
prefixInline succeeded for call to block b1506 from block b1521
inlining eliminated a wildcard binding in b849
inlining eliminated a wildcard binding in b849
inlining eliminated a wildcard binding in b849
inlining eliminated a wildcard binding in b849
inlining eliminated a wildcard binding in b849
inlining eliminated a wildcard binding in b849
prefixInline succeeded for call to block b1522 from block b849
prefixInline succeeded for call to block b1506 from block b849
inlining eliminated a wildcard binding in b847
inlining eliminated a wildcard binding in b847
inlining eliminated a wildcard binding in b847
inlining eliminated a wildcard binding in b847
inlining eliminated a wildcard binding in b847
inlining eliminated a wildcard binding in b847
prefixInline succeeded for call to block b1506 from block b847
inlining eliminated a wildcard binding in b852
inlining eliminated a wildcard binding in b852
inlining eliminated a wildcard binding in b852
inlining eliminated a wildcard binding in b852
inlining eliminated a wildcard binding in b852
inlining eliminated a wildcard binding in b852
inlining eliminated a wildcard binding in b852
inlining eliminated a wildcard binding in b852
inlining eliminated a wildcard binding in b852
inlining eliminated a wildcard binding in b852
inlining eliminated a wildcard binding in b852
prefixInline succeeded for call to block b1500 from block b852
prefixInline succeeded for call to block b1465 from block b852
prefixInline succeeded for call to block b1502 from block b852
inlining eliminated a wildcard binding in b845
inlining eliminated a wildcard binding in b842
inlining eliminated a wildcard binding in b842
inlining eliminated a wildcard binding in b842
prefixInline succeeded for call to block b1518 from block b842
inlining eliminated a wildcard binding in b854
inlining eliminated a wildcard binding in b854
prefixInline succeeded for call to block b1518 from block b854
inlining eliminated a wildcard binding in b1239
inlining eliminated a wildcard binding in b1239
inlining eliminated a wildcard binding in b1239
prefixInline succeeded for call to block b1525 from block b1239
prefixInline succeeded for call to block b1527 from block b1239
inlining eliminated a wildcard binding in b1303
inlining eliminated a wildcard binding in b1303
inlining eliminated a wildcard binding in b1303
prefixInline succeeded for call to block b1530 from block b1303
prefixInline succeeded for call to block b1531 from block b1303
prefixInline succeeded for call to block b1527 from block b1303
inlining eliminated a wildcard binding in b1236
prefixInline succeeded for call to block b1533 from block b1236
inlining eliminated a wildcard binding in b1359
prefixInline succeeded for call to block b1533 from block b1359
inlining eliminated a wildcard binding in b1540
inlining eliminated a wildcard binding in b1538
inlining eliminated a wildcard binding in b1539
inlining eliminated a wildcard binding in b1539
inlining eliminated a wildcard binding in b1539
inlining eliminated a wildcard binding in b1537
inlining eliminated a wildcard binding in b1241
inlining eliminated a wildcard binding in b1241
inlining eliminated a wildcard binding in b1241
prefixInline succeeded for call to block b1533 from block b1539
prefixInline succeeded for call to block b1525 from block b1241
inlining eliminated a wildcard binding in b1541
inlining eliminated a wildcard binding in b1543
inlining eliminated a wildcard binding in b1543
inlining eliminated a wildcard binding in b1543
prefixInline succeeded for call to block b1533 from block b1543
inlining eliminated a wildcard binding in b1544
suffixInline succeeded for call to block b1543 from block b1544
inlining eliminated a wildcard binding in b1542
suffixInline succeeded for call to block b1543 from block b1542
inlining eliminated a wildcard binding in b1034
inlining eliminated a wildcard binding in b1034
inlining eliminated a wildcard binding in b1034
prefixInline succeeded for call to block b1530 from block b1034
prefixInline succeeded for call to block b1531 from block b1034
suffixInline succeeded for call to block b125 from block b1572
suffixInline succeeded for call to block b125 from block b1568
inlining eliminated a wildcard binding in b1548
inlining eliminated a wildcard binding in b1546
inlining eliminated a wildcard binding in b1547
inlining eliminated a wildcard binding in b1547
inlining eliminated a wildcard binding in b1547
inlining eliminated a wildcard binding in b1545
inlining eliminated a wildcard binding in b1251
inlining eliminated a wildcard binding in b1251
inlining eliminated a wildcard binding in b1251
prefixInline succeeded for call to block b1533 from block b1547
prefixInline succeeded for call to block b1525 from block b1251
inlining eliminated a wildcard binding in b1549
inlining eliminated a wildcard binding in b1551
inlining eliminated a wildcard binding in b1551
inlining eliminated a wildcard binding in b1551
prefixInline succeeded for call to block b1533 from block b1551
inlining eliminated a wildcard binding in b1552
suffixInline succeeded for call to block b1551 from block b1552
inlining eliminated a wildcard binding in b1550
suffixInline succeeded for call to block b1551 from block b1550
inlining eliminated a wildcard binding in b1021
inlining eliminated a wildcard binding in b1021
inlining eliminated a wildcard binding in b1021
prefixInline succeeded for call to block b1530 from block b1021
prefixInline succeeded for call to block b1531 from block b1021
suffixInline succeeded for call to block b125 from block b1564
suffixInline succeeded for call to block b125 from block b1560
suffixInline succeeded for call to block b125 from block b1557
inlining eliminated a wildcard binding in b1037
inlining eliminated a wildcard binding in b1037
inlining eliminated a wildcard binding in b1555
inlining eliminated a wildcard binding in b1555
prefixInline succeeded for call to block b1518 from block b1037
prefixInline succeeded for call to block b1554 from block b949
prefixInline succeeded for call to block b1518 from block b1555
inlining eliminated a wildcard binding in b1372
prefixInline succeeded for call to block b1556 from block b1372
inlining eliminated a wildcard binding in b784
suffixInline succeeded for call to block b1021 from block b784
inlining eliminated a wildcard binding in b1558
inlining eliminated a wildcard binding in b1558
inlining eliminated a wildcard binding in b1024
inlining eliminated a wildcard binding in b1024
prefixInline succeeded for call to block b1518 from block b1558
prefixInline succeeded for call to block b1518 from block b1024
prefixInline succeeded for call to block b1554 from block b941
prefixInline succeeded for call to block b1556 from block b1375
inlining eliminated a wildcard binding in b1374
inlining eliminated a wildcard binding in b1374
prefixInline succeeded for call to block b1518 from block b1374
prefixInline succeeded for call to block b1556 from block b1374
inlining eliminated a wildcard binding in b1561
inlining eliminated a wildcard binding in b1561
prefixInline succeeded for call to block b1518 from block b1561
inlining eliminated a wildcard binding in b1371
prefixInline succeeded for call to block b1559 from block b1371
inlining eliminated a wildcard binding in b788
prefixInline succeeded for call to block b1559 from block b788
inlining eliminated a wildcard binding in b1562
inlining eliminated a wildcard binding in b1562
inlining eliminated a wildcard binding in b1028
inlining eliminated a wildcard binding in b1028
prefixInline succeeded for call to block b1518 from block b1562
prefixInline succeeded for call to block b1518 from block b1028
prefixInline succeeded for call to block b1554 from block b945
prefixInline succeeded for call to block b1556 from block b1378
inlining eliminated a wildcard binding in b1377
inlining eliminated a wildcard binding in b1377
prefixInline succeeded for call to block b1518 from block b1377
prefixInline succeeded for call to block b1556 from block b1377
inlining eliminated a wildcard binding in b1565
inlining eliminated a wildcard binding in b1565
prefixInline succeeded for call to block b1518 from block b1565
inlining eliminated a wildcard binding in b1370
prefixInline succeeded for call to block b1563 from block b1370
inlining eliminated a wildcard binding in b790
prefixInline succeeded for call to block b1563 from block b790
inlining eliminated a wildcard binding in b1566
inlining eliminated a wildcard binding in b1566
inlining eliminated a wildcard binding in b1032
inlining eliminated a wildcard binding in b1032
prefixInline succeeded for call to block b1518 from block b1566
prefixInline succeeded for call to block b1518 from block b1032
prefixInline succeeded for call to block b1554 from block b946
prefixInline succeeded for call to block b1556 from block b1381
inlining eliminated a wildcard binding in b1380
inlining eliminated a wildcard binding in b1380
prefixInline succeeded for call to block b1518 from block b1380
prefixInline succeeded for call to block b1556 from block b1380
inlining eliminated a wildcard binding in b1569
inlining eliminated a wildcard binding in b1569
prefixInline succeeded for call to block b1518 from block b1569
prefixInline succeeded for call to block b1567 from block b1369
inlining eliminated a wildcard binding in b1072
inlining eliminated a wildcard binding in b1072
inlining eliminated a wildcard binding in b1570
inlining eliminated a wildcard binding in b1570
prefixInline succeeded for call to block b1518 from block b1072
prefixInline succeeded for call to block b1554 from block b1073
prefixInline succeeded for call to block b1518 from block b1570
prefixInline succeeded for call to block b1571 from block b1067
inlining eliminated a wildcard binding in b1078
inlining eliminated a wildcard binding in b1078
inlining eliminated a wildcard binding in b1573
inlining eliminated a wildcard binding in b1573
prefixInline succeeded for call to block b1518 from block b1078
prefixInline succeeded for call to block b1554 from block b1079
prefixInline succeeded for call to block b1518 from block b1573
prefixInline succeeded for call to block b1574 from block b1066
prefixInline succeeded for call to block b1554 from block b1576
prefixInline succeeded for call to block b1577 from block b1064
inlining eliminated a wildcard binding in b1086
inlining eliminated a wildcard binding in b1086
inlining eliminated a wildcard binding in b1085
inlining eliminated a wildcard binding in b1085
prefixInline succeeded for call to block b1518 from block b1086
prefixInline succeeded for call to block b1554 from block b1087
prefixInline succeeded for call to block b1518 from block b1085
prefixInline succeeded for call to block b1580 from block b1585
prefixInline succeeded for call to block b1584 from block b1058
suffixInline succeeded for call to block b125 from block b1660
suffixInline succeeded for call to block b125 from block b1603
suffixInline succeeded for call to block b125 from block b1597
suffixInline succeeded for call to block b125 from block b1593
suffixInline succeeded for call to block b125 from block b1589
inlining eliminated a wildcard binding in b1101
inlining eliminated a wildcard binding in b1101
inlining eliminated a wildcard binding in b1586
inlining eliminated a wildcard binding in b1586
prefixInline succeeded for call to block b1518 from block b1101
prefixInline succeeded for call to block b1554 from block b961
prefixInline succeeded for call to block b1518 from block b1586
prefixInline succeeded for call to block b1556 from block b1321
inlining eliminated a wildcard binding in b1004
inlining eliminated a wildcard binding in b1004
inlining eliminated a wildcard binding in b1003
inlining eliminated a wildcard binding in b1003
prefixInline succeeded for call to block b1518 from block b1004
prefixInline succeeded for call to block b1554 from block b947
prefixInline succeeded for call to block b1518 from block b1003
prefixInline succeeded for call to block b1556 from block b1590
inlining eliminated a wildcard binding in b1386
prefixInline succeeded for call to block b1588 from block b1386
inlining eliminated a wildcard binding in b800
prefixInline succeeded for call to block b1588 from block b800
inlining eliminated a wildcard binding in b1591
inlining eliminated a wildcard binding in b1591
inlining eliminated a wildcard binding in b1093
inlining eliminated a wildcard binding in b1093
prefixInline succeeded for call to block b1518 from block b1591
prefixInline succeeded for call to block b1518 from block b1093
prefixInline succeeded for call to block b1554 from block b959
prefixInline succeeded for call to block b1556 from block b1391
inlining eliminated a wildcard binding in b1390
inlining eliminated a wildcard binding in b1390
prefixInline succeeded for call to block b1518 from block b1390
prefixInline succeeded for call to block b1556 from block b1390
inlining eliminated a wildcard binding in b1594
inlining eliminated a wildcard binding in b1594
prefixInline succeeded for call to block b1518 from block b1594
inlining eliminated a wildcard binding in b1385
prefixInline succeeded for call to block b1592 from block b1385
inlining eliminated a wildcard binding in b802
prefixInline succeeded for call to block b1592 from block b802
inlining eliminated a wildcard binding in b1595
inlining eliminated a wildcard binding in b1595
inlining eliminated a wildcard binding in b1097
inlining eliminated a wildcard binding in b1097
prefixInline succeeded for call to block b1518 from block b1595
prefixInline succeeded for call to block b1518 from block b1097
prefixInline succeeded for call to block b1554 from block b960
prefixInline succeeded for call to block b1556 from block b1394
inlining eliminated a wildcard binding in b1393
inlining eliminated a wildcard binding in b1393
prefixInline succeeded for call to block b1518 from block b1393
prefixInline succeeded for call to block b1556 from block b1393
inlining eliminated a wildcard binding in b1598
inlining eliminated a wildcard binding in b1598
prefixInline succeeded for call to block b1518 from block b1598
prefixInline succeeded for call to block b1596 from block b1384
inlining eliminated a wildcard binding in b1136
inlining eliminated a wildcard binding in b1136
inlining eliminated a wildcard binding in b1599
inlining eliminated a wildcard binding in b1599
prefixInline succeeded for call to block b1518 from block b1136
prefixInline succeeded for call to block b1554 from block b1137
prefixInline succeeded for call to block b1518 from block b1599
prefixInline succeeded for call to block b1571 from block b1131
inlining eliminated a wildcard binding in b1142
inlining eliminated a wildcard binding in b1142
inlining eliminated a wildcard binding in b1600
inlining eliminated a wildcard binding in b1600
prefixInline succeeded for call to block b1518 from block b1142
prefixInline succeeded for call to block b1554 from block b1143
prefixInline succeeded for call to block b1518 from block b1600
prefixInline succeeded for call to block b1574 from block b1130
prefixInline succeeded for call to block b1554 from block b1601
prefixInline succeeded for call to block b1602 from block b1128
inlining eliminated a wildcard binding in b1150
inlining eliminated a wildcard binding in b1150
inlining eliminated a wildcard binding in b1149
inlining eliminated a wildcard binding in b1149
prefixInline succeeded for call to block b1518 from block b1150
prefixInline succeeded for call to block b1554 from block b1151
prefixInline succeeded for call to block b1518 from block b1149
prefixInline succeeded for call to block b1580 from block b1608
prefixInline succeeded for call to block b1607 from block b1122
suffixInline succeeded for call to block b125 from block b1653
suffixInline succeeded for call to block b125 from block b1632
suffixInline succeeded for call to block b125 from block b1639
suffixInline succeeded for call to block b125 from block b1624
suffixInline succeeded for call to block b125 from block b1618
suffixInline succeeded for call to block b125 from block b1614
suffixInline succeeded for call to block b125 from block b1627
suffixInline succeeded for call to block b125 from block b1610
prefixInline succeeded for call to block b1609 from block b1331
prefixInline succeeded for call to block b1609 from block b1615
prefixInline succeeded for call to block b1612 from block b1414
prefixInline succeeded for call to block b1613 from block b1414
prefixInline succeeded for call to block b1612 from block b808
prefixInline succeeded for call to block b1613 from block b808
inlining eliminated a wildcard binding in b1616
inlining eliminated a wildcard binding in b1616
inlining eliminated a wildcard binding in b1157
inlining eliminated a wildcard binding in b1157
prefixInline succeeded for call to block b1518 from block b1616
prefixInline succeeded for call to block b1518 from block b1157
prefixInline succeeded for call to block b1554 from block b970
prefixInline succeeded for call to block b1609 from block b1419
inlining eliminated a wildcard binding in b1418
inlining eliminated a wildcard binding in b1418
prefixInline succeeded for call to block b1518 from block b1418
prefixInline succeeded for call to block b1609 from block b1418
inlining eliminated a wildcard binding in b1619
inlining eliminated a wildcard binding in b1619
prefixInline succeeded for call to block b1518 from block b1619
prefixInline succeeded for call to block b1617 from block b1413
prefixInline succeeded for call to block b1554 from block b1620
prefixInline succeeded for call to block b1554 from block b1412
prefixInline succeeded for call to block b1617 from block b971
prefixInline succeeded for call to block b1554 from block b1621
prefixInline succeeded for call to block b1554 from block b1162
inlining eliminated a wildcard binding in b1622
inlining eliminated a wildcard binding in b1622
inlining eliminated a wildcard binding in b1165
inlining eliminated a wildcard binding in b1165
prefixInline succeeded for call to block b1518 from block b1622
prefixInline succeeded for call to block b1518 from block b1165
prefixInline succeeded for call to block b1554 from block b972
prefixInline succeeded for call to block b1609 from block b1423
inlining eliminated a wildcard binding in b1422
inlining eliminated a wildcard binding in b1422
prefixInline succeeded for call to block b1518 from block b1422
prefixInline succeeded for call to block b1609 from block b1422
inlining eliminated a wildcard binding in b1625
inlining eliminated a wildcard binding in b1625
prefixInline succeeded for call to block b1518 from block b1625
prefixInline succeeded for call to block b1623 from block b1411
prefixInline succeeded for call to block b1623 from block b1628
prefixInline succeeded for call to block b1626 from block b1410
prefixInline succeeded for call to block b1623 from block b978
prefixInline succeeded for call to block b1623 from block b1629
prefixInline succeeded for call to block b1626 from block b1168
inlining eliminated a wildcard binding in b1630
inlining eliminated a wildcard binding in b1630
inlining eliminated a wildcard binding in b1173
inlining eliminated a wildcard binding in b1173
prefixInline succeeded for call to block b1518 from block b1630
prefixInline succeeded for call to block b1518 from block b1173
prefixInline succeeded for call to block b1554 from block b980
prefixInline succeeded for call to block b1609 from block b1427
inlining eliminated a wildcard binding in b1426
inlining eliminated a wildcard binding in b1426
prefixInline succeeded for call to block b1518 from block b1426
prefixInline succeeded for call to block b1609 from block b1426
inlining eliminated a wildcard binding in b1633
inlining eliminated a wildcard binding in b1633
prefixInline succeeded for call to block b1518 from block b1633
inlining eliminated a wildcard binding in b1409
prefixInline succeeded for call to block b1631 from block b1409
inlining eliminated a wildcard binding in b1634
prefixInline succeeded for call to block b1631 from block b1634
prefixInline succeeded for call to block b1612 from block b1408
prefixInline succeeded for call to block b1613 from block b1408
inlining eliminated a wildcard binding in b1431
prefixInline succeeded for call to block b1631 from block b1431
inlining eliminated a wildcard binding in b1430
inlining eliminated a wildcard binding in b1430
inlining eliminated a wildcard binding in b1430
prefixInline succeeded for call to block b1518 from block b1430
prefixInline succeeded for call to block b1631 from block b1430
inlining eliminated a wildcard binding in b1635
inlining eliminated a wildcard binding in b1635
prefixInline succeeded for call to block b1518 from block b1635
prefixInline succeeded for call to block b1617 from block b1407
prefixInline succeeded for call to block b1554 from block b1636
prefixInline succeeded for call to block b1554 from block b1406
inlining eliminated a wildcard binding in b1435
prefixInline succeeded for call to block b1631 from block b1435
inlining eliminated a wildcard binding in b1434
inlining eliminated a wildcard binding in b1434
inlining eliminated a wildcard binding in b1434
prefixInline succeeded for call to block b1518 from block b1434
prefixInline succeeded for call to block b1631 from block b1434
inlining eliminated a wildcard binding in b1637
inlining eliminated a wildcard binding in b1637
prefixInline succeeded for call to block b1518 from block b1637
prefixInline succeeded for call to block b1623 from block b1405
prefixInline succeeded for call to block b1623 from block b1640
prefixInline succeeded for call to block b1638 from block b1404
prefixInline succeeded for call to block b1638 from block b1175
inlining eliminated a wildcard binding in b1180
inlining eliminated a wildcard binding in b1180
inlining eliminated a wildcard binding in b1179
inlining eliminated a wildcard binding in b1179
prefixInline succeeded for call to block b1518 from block b1180
prefixInline succeeded for call to block b1554 from block b977
prefixInline succeeded for call to block b1518 from block b1179
inlining eliminated a wildcard binding in b1642
prefixInline succeeded for call to block b1631 from block b1642
inlining eliminated a wildcard binding in b1204
prefixInline succeeded for call to block b1631 from block b1204
inlining eliminated a wildcard binding in b1212
prefixInline succeeded for call to block b1631 from block b1212
inlining eliminated a wildcard binding in b1643
prefixInline succeeded for call to block b1631 from block b1643
prefixInline succeeded for call to block b1612 from block b1287
prefixInline succeeded for call to block b1613 from block b1287
inlining eliminated a wildcard binding in b1292
prefixInline succeeded for call to block b1631 from block b1292
inlining eliminated a wildcard binding in b1291
inlining eliminated a wildcard binding in b1291
inlining eliminated a wildcard binding in b1291
prefixInline succeeded for call to block b1518 from block b1291
prefixInline succeeded for call to block b1631 from block b1291
inlining eliminated a wildcard binding in b1644
inlining eliminated a wildcard binding in b1644
prefixInline succeeded for call to block b1518 from block b1644
prefixInline succeeded for call to block b1617 from block b1286
prefixInline succeeded for call to block b1554 from block b1645
prefixInline succeeded for call to block b1554 from block b1285
inlining eliminated a wildcard binding in b1296
prefixInline succeeded for call to block b1631 from block b1296
inlining eliminated a wildcard binding in b1295
inlining eliminated a wildcard binding in b1295
inlining eliminated a wildcard binding in b1295
prefixInline succeeded for call to block b1518 from block b1295
prefixInline succeeded for call to block b1631 from block b1295
inlining eliminated a wildcard binding in b1646
inlining eliminated a wildcard binding in b1646
prefixInline succeeded for call to block b1518 from block b1646
prefixInline succeeded for call to block b1623 from block b1284
prefixInline succeeded for call to block b1623 from block b1647
prefixInline succeeded for call to block b1638 from block b1283
inlining eliminated a wildcard binding in b1648
prefixInline succeeded for call to block b1631 from block b1648
inlining eliminated a wildcard binding in b814
prefixInline succeeded for call to block b1631 from block b814
inlining eliminated a wildcard binding in b1188
inlining eliminated a wildcard binding in b1188
inlining eliminated a wildcard binding in b1187
inlining eliminated a wildcard binding in b1187
prefixInline succeeded for call to block b1518 from block b1188
prefixInline succeeded for call to block b1554 from block b985
prefixInline succeeded for call to block b1518 from block b1187
prefixInline succeeded for call to block b1609 from block b1654
inlining eliminated a wildcard binding in b1203
prefixInline succeeded for call to block b1651 from block b1203
prefixInline succeeded for call to block b1652 from block b1203
inlining eliminated a wildcard binding in b816
prefixInline succeeded for call to block b1651 from block b816
prefixInline succeeded for call to block b1652 from block b816
inlining eliminated a wildcard binding in b1193
inlining eliminated a wildcard binding in b1193
inlining eliminated a wildcard binding in b1192
inlining eliminated a wildcard binding in b1192
prefixInline succeeded for call to block b1518 from block b1193
prefixInline succeeded for call to block b1554 from block b986
prefixInline succeeded for call to block b1518 from block b1192
prefixInline succeeded for call to block b1609 from block b1661
inlining eliminated a wildcard binding in b1202
prefixInline succeeded for call to block b1656 from block b1202
prefixInline succeeded for call to block b1658 from block b1202
prefixInline succeeded for call to block b1659 from block b1202
inlining eliminated a wildcard binding in b818
prefixInline succeeded for call to block b1656 from block b818
prefixInline succeeded for call to block b1658 from block b818
prefixInline succeeded for call to block b1659 from block b818
inlining eliminated a wildcard binding in b1198
inlining eliminated a wildcard binding in b1198
inlining eliminated a wildcard binding in b1197
inlining eliminated a wildcard binding in b1197
prefixInline succeeded for call to block b1518 from block b1198
prefixInline succeeded for call to block b1554 from block b987
prefixInline succeeded for call to block b1518 from block b1197
prefixInline succeeded for call to block b1609 from block b1665
prefixInline succeeded for call to block b1663 from block b1201
inlining eliminated a wildcard binding in b1210
inlining eliminated a wildcard binding in b1210
inlining eliminated a wildcard binding in b1666
inlining eliminated a wildcard binding in b1666
prefixInline succeeded for call to block b1518 from block b1210
prefixInline succeeded for call to block b1554 from block b996
prefixInline succeeded for call to block b1518 from block b1666
inlining eliminated a wildcard binding in b509
inlining eliminated a wildcard binding in b509
inlining eliminated a wildcard binding in b509
inlining eliminated a wildcard binding in b509
inlining eliminated a wildcard binding in b509
inlining eliminated a wildcard binding in b509
inlining eliminated a wildcard binding in b509
inlining eliminated a wildcard binding in b509
inlining eliminated a wildcard binding in b509
prefixInline succeeded for call to block b1522 from block b509
prefixInline succeeded for call to block b1667 from block b509
prefixInline succeeded for call to block b1670 from block initialize
suffixInline succeeded for call to block b509 from block initialize
liveness replaced t19142 with a wildcard
liveness replaced t19135 with a wildcard
liveness replaced t19133 with a wildcard
pushed continuation into block call in initialize
Inlining pass finished, running shake.
lifting static allocator to top-level s121
lifting static allocator to top-level s122
lifting static allocator to top-level s123
lifting static allocator to top-level s124
lifting static allocator to top-level s125
lifting static allocator to top-level s126
lifting static allocator to top-level s127
lifting static allocator to top-level s128
lifting static allocator to top-level s129
lifting static allocator to top-level s130
lifting static allocator to top-level s131
lifting static allocator to top-level s132
lifting static allocator to top-level s133
lifting static allocator to top-level s134
lifting static allocator to top-level s135
lifting static allocator to top-level s136
lifting static allocator to top-level s137
lifting static allocator to top-level s138
lifting static allocator to top-level s139
lifting static allocator to top-level s140
lifting static allocator to top-level s141
lifting static allocator to top-level s142
lifting static allocator to top-level s143
lifting static allocator to top-level s144
lifting static allocator to top-level s145
lifting static allocator to top-level s146
lifting static allocator to top-level s147
lifting static allocator to top-level s148
lifting static allocator to top-level s149
lifting static allocator to top-level s150
lifting static allocator to top-level s151
lifting static allocator to top-level s152
lifting static allocator to top-level s153
lifting static allocator to top-level s154
lifting static allocator to top-level s155
lifting static allocator to top-level s156
lifting static allocator to top-level s157
lifting static allocator to top-level s158
lifting static allocator to top-level s159
lifting static allocator to top-level s160
lifting static allocator to top-level s161
lifting static allocator to top-level s162
lifting static allocator to top-level s163
lifting static allocator to top-level s164
lifting static allocator to top-level s165
lifting static allocator to top-level s166
lifting static allocator to top-level s167
lifting static allocator to top-level s168
lifting static allocator to top-level s169
lifting static allocator to top-level s170
lifting static allocator to top-level s171
lifting static allocator to top-level s172
lifting static allocator to top-level s173
lifting static allocator to top-level s174
lifting static allocator to top-level s175
lifting static allocator to top-level s176
lifting static allocator to top-level s177
lifting static allocator to top-level s178
lifting static allocator to top-level s179
lifting static allocator to top-level s180
lifting static allocator to top-level s181
lifting static allocator to top-level s182
lifting static allocator to top-level s183
lifting static allocator to top-level s184
lifting static allocator to top-level s185
lifting static allocator to top-level s186
lifting static allocator to top-level s187
lifting static allocator to top-level s188
lifting static allocator to top-level s189
lifting static allocator to top-level s190
lifting static allocator to top-level s191
lifting static allocator to top-level s192
lifting static allocator to top-level s193
lifting static allocator to top-level s194
lifting static allocator to top-level s195
lifting static allocator to top-level s196
lifting static allocator to top-level s197
lifting static allocator to top-level s198
lifting static allocator to top-level s199
lifting static allocator to top-level s200
lifting static allocator to top-level s201
lifting static allocator to top-level s202
lifting static allocator to top-level s203
lifting static allocator to top-level s204
lifting static allocator to top-level s205
lifting static allocator to top-level s206
lifting static allocator to top-level s207
lifting static allocator to top-level s208
lifting static allocator to top-level s209
lifting static allocator to top-level s210
lifting static allocator to top-level s211
lifting static allocator to top-level s212
lifting static allocator to top-level s213
lifting static allocator to top-level s214
lifting static allocator to top-level s215
lifting static allocator to top-level s216
lifting static allocator to top-level s217
lifting static allocator to top-level s218
lifting static allocator to top-level s219
lifting static allocator to top-level s220
rewriting t16356 @ [t18781]
liveness replaced t16356 with a wildcard
applied left monad law for t16339 <- return s6
replacing reference to top level s6 with 0
applied left monad law for t16356 <- return s121
rewriting s121 @ [t18773]
applied left monad law for t16336 <- return ix0
replacing reference to top level ix0 with 0
applied left monad law for t16356 <- return s122
rewriting s122 @ [t18772]
rewriting t16346 @ [t18638]
rewriting t16347 @ [t18638]
liveness replaced t18774 with a wildcard
liveness replaced t16346 with a wildcard
liveness replaced t16347 with a wildcard
rewriting t16356 @ [t18779]
liveness replaced t16356 with a wildcard
rewriting t16363 @ [t18663]
rewriting t16364 @ [t18663]
liveness replaced t18782 with a wildcard
liveness replaced t16363 with a wildcard
liveness replaced t16364 with a wildcard
applied left monad law for t16339 <- return maxBound1
replacing reference to top level maxBound1 with 79
applied left monad law for t16356 <- return s123
rewriting s123 @ [t18776]
applied left monad law for t16336 <- return maxBound
replacing reference to top level maxBound with 24
applied left monad law for t16356 <- return s124
rewriting s124 @ [t18775]
rewriting t16346 @ [t18645]
rewriting t16347 @ [t18645]
liveness replaced t18777 with a wildcard
liveness replaced t16346 with a wildcard
liveness replaced t16347 with a wildcard
rewriting t16356 @ [t18778]
liveness replaced t16356 with a wildcard
rewriting t16363 @ [t18654]
rewriting t16364 @ [t18654]
liveness replaced t18780 with a wildcard
liveness replaced t16363 with a wildcard
liveness replaced t16364 with a wildcard
applied left monad law for t16472 <- return s14
applied left monad law for t16471 <- return s13
deriving specialized closure definition k561 for ClosAlloc using k448
applied left monad law for t18853 <- return vram
applied left monad law for t16499 <- return s125
rewriting s125 @ [1]
replacing reference to top level blank with 2592
replacing reference to top level vram with 753664
applied left monad law for t16523 <- return Just
applied left monad law for t16522 <- return Nothing
deriving specialized closure definition k562 for ClosAlloc using k454
applied left monad law for t16543 <- return s126
rewriting s126 @ [1]
applied left monad law for t18856 <- return ptrToWordImp
rewriting ptrToWordImp @ [t16551]
applied left monad law for t16552 <- return t16551
applied left monad law for t16559 <- return str21
applied left monad law for t18858 <- return loadCharImp
rewriting loadCharImp @ [str21]
deriving specialized closure definition k563 for ClosAlloc using loadCharImp1
rewriting t18859 @ []
applied left monad law for t16551 <- return str21
deriving specialized block b1695 for BlockCall to block b123
liveness replaced t18859 with a wildcard
applied left monad law for t16559 <- return str10
applied left monad law for t18862 <- return loadCharImp
rewriting loadCharImp @ [str10]
deriving specialized closure definition k564 for ClosAlloc using loadCharImp1
rewriting t18863 @ []
applied left monad law for t16551 <- return str10
deriving specialized block b1697 for BlockCall to block b123
liveness replaced t18863 with a wildcard
applied left monad law for t18866 <- return ptrToWordImp
rewriting ptrToWordImp @ [t16572]
applied left monad law for t16575 <- return t16572
applied left monad law for t16559 <- return str0
applied left monad law for t18867 <- return loadCharImp
rewriting loadCharImp @ [str0]
deriving specialized closure definition k565 for ClosAlloc using loadCharImp1
rewriting t18868 @ []
applied left monad law for t16551 <- return str0
deriving specialized block b1699 for BlockCall to block b123
liveness replaced t18868 with a wildcard
applied left monad law for t16559 <- return str11
applied left monad law for t18871 <- return loadCharImp
rewriting loadCharImp @ [str11]
deriving specialized closure definition k566 for ClosAlloc using loadCharImp1
rewriting t18872 @ []
applied left monad law for t16551 <- return str11
deriving specialized block b1701 for BlockCall to block b123
liveness replaced t18872 with a wildcard
applied left monad law for t16559 <- return str1
applied left monad law for t18875 <- return loadCharImp
rewriting loadCharImp @ [str1]
deriving specialized closure definition k567 for ClosAlloc using loadCharImp1
rewriting t18876 @ []
applied left monad law for t16551 <- return str1
deriving specialized block b1703 for BlockCall to block b123
liveness replaced t18876 with a wildcard
applied left monad law for t16648 <- return s20
applied left monad law for t16647 <- return s19
deriving specialized closure definition k568 for ClosAlloc using k476
applied left monad law for t18880 <- return com1data
replacing reference to top level com1data with 1016
applied left monad law for t18882 <- return com1data
deriving specialized closure definition k569 for ClosAlloc using k489
rewriting t16680 @ []
liveness replaced t16680 with a wildcard
applied left monad law for t18883 <- return com1ctrl
applied left monad law for t18884 <- return vram
applied left monad law for t18887 <- return vram
cse: using previously computed value t18886 for t18889
applied left monad law for t16727 <- return s127
rewriting s127 @ [1]
replacing reference to top level vram with 753664
replacing reference to top level vram with 753664
applied left monad law for t18890 <- return vram
applied left monad law for t16751 <- return s128
rewriting s128 @ [1]
replacing reference to top level blank with 2592
replacing reference to top level vram with 753664
rewriting t16764 @ [1]
liveness replaced t16764 with a wildcard
applied left monad law for t18893 <- return console
applied left monad law for t16786 <- return s129
rewriting s129 @ [1]
applied left monad law for t16805 <- return s130
rewriting s130 @ [1]
applied left monad law for t18894 <- return vram
applied left monad law for t16834 <- return s131
rewriting s131 @ [1]
replacing reference to top level vram with 753664
applied left monad law for t18897 <- return com1ctrl
applied left monad law for t18898 <- return com1ctrl
applied left monad law for t16886 <- return s20
applied left monad law for t16885 <- return s19
deriving specialized closure definition k570 for ClosAlloc using k495
applied left monad law for t18899 <- return itoaBuf
applied left monad law for t16899 <- return s132
rewriting s132 @ [1]
rewrite: x + 0 ==> x
applied left monad law for t16906 <- return itoaBuf
applied left monad law for t16912 <- return s133
rewriting s133 @ [1]
applied left monad law for t16923 <- return s134
rewriting s134 @ [1]
applied left monad law for t16934 <- return s135
rewriting s135 @ [1]
applied left monad law for t16966 <- return s136
rewriting s136 @ [1]
applied left monad law for t18900 <- return itoaBuf
applied left monad law for t18902 <- return s137
rewriting s137 @ [1]
liveness replaced t18901 with a wildcard
applied left monad law for t18907 <- return s138
rewriting s138 @ [1]
liveness replaced t18906 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t17020 <- return itoaBuf
applied left monad law for t18709 <- return itoaBuf
deriving specialized block b1707 for BlockCall to block b1542
applied left monad law for t18711 <- return itoaBuf
deriving specialized block b1708 for BlockCall to block b1544
applied left monad law for t16559 <- return str2
applied left monad law for t18911 <- return loadCharImp
rewriting loadCharImp @ [str2]
deriving specialized closure definition k571 for ClosAlloc using loadCharImp1
rewriting t18912 @ []
applied left monad law for t16551 <- return str2
deriving specialized block b1710 for BlockCall to block b123
liveness replaced t18912 with a wildcard
applied left monad law for t16559 <- return str4
applied left monad law for t18915 <- return loadCharImp
rewriting loadCharImp @ [str4]
deriving specialized closure definition k572 for ClosAlloc using loadCharImp1
rewriting t18916 @ []
applied left monad law for t16551 <- return str4
deriving specialized block b1712 for BlockCall to block b123
liveness replaced t18916 with a wildcard
applied left monad law for t17049 <- return s139
rewriting s139 @ [1]
rewrite: nzdiv((x, 16)) ==> lshr((x, 4))
applied left monad law for t18919 <- return itoaBuf
rewrite: nzrem((x, 16)) ==> and((x, 15))
applied left monad law for t18921 <- return s140
rewriting s140 @ [1]
liveness replaced t18920 with a wildcard
applied left monad law for t18926 <- return s141
rewriting s141 @ [1]
liveness replaced t18925 with a wildcard
rewrite: x + 0 ==> x
applied left monad law for t17103 <- return itoaBuf
rewrite: nzrem((x, 16)) ==> and((x, 15))
applied left monad law for t18715 <- return itoaBuf
deriving specialized block b1713 for BlockCall to block b1550
applied left monad law for t18717 <- return itoaBuf
deriving specialized block b1714 for BlockCall to block b1552
applied left monad law for t16559 <- return str5
applied left monad law for t18930 <- return loadCharImp
rewriting loadCharImp @ [str5]
deriving specialized closure definition k573 for ClosAlloc using loadCharImp1
rewriting t18931 @ []
applied left monad law for t16551 <- return str5
deriving specialized block b1716 for BlockCall to block b123
liveness replaced t18931 with a wildcard
applied left monad law for t16559 <- return str6
applied left monad law for t18934 <- return loadCharImp
rewriting loadCharImp @ [str6]
deriving specialized closure definition k574 for ClosAlloc using loadCharImp1
rewriting t18935 @ []
applied left monad law for t16551 <- return str6
deriving specialized block b1718 for BlockCall to block b123
liveness replaced t18935 with a wildcard
applied left monad law for t16559 <- return str3
applied left monad law for t18938 <- return loadCharImp
rewriting loadCharImp @ [str3]
deriving specialized closure definition k575 for ClosAlloc using loadCharImp1
rewriting t18939 @ []
applied left monad law for t16551 <- return str3
deriving specialized block b1720 for BlockCall to block b123
liveness replaced t18939 with a wildcard
applied left monad law for t18857 <- return loadCharImp
rewriting loadCharImp @ [t16555]
rewriting t16556 @ []
liveness replaced t16556 with a wildcard
applied left monad law for t18942 <- return com1ctrl
applied left monad law for t18943 <- return nextCharImp
rewriting nextCharImp @ [t17126]
rewriting t17127 @ []
liveness replaced t17127 with a wildcard
applied left monad law for t18944 <- return com1ctrl
applied left monad law for t17145 <- return s142
rewriting s142 @ []
rewrite: x + 0 ==> x
applied left monad law for t18945 <- return itoaBuf
rewrite: nzrem((x, 16)) ==> and((x, 15))
deriving specialized block b1713 for BlockCall to block b1550
deriving specialized block b1714 for BlockCall to block b1552
applied left monad law for t18948 <- return com1ctrl
applied left monad law for t18949 <- return com1ctrl
applied left monad law for t18950 <- return nextCharImp
rewriting nextCharImp @ [t17176]
rewriting t17177 @ []
liveness replaced t17177 with a wildcard
applied left monad law for t17185 <- return s143
rewriting s143 @ []
applied left monad law for t18951 <- return com1ctrl
applied left monad law for t17198 <- return s144
rewriting s144 @ []
applied left monad law for t18952 <- return com1ctrl
applied left monad law for t17217 <- return s145
rewriting s145 @ []
applied left monad law for t17224 <- return s146
rewriting s146 @ []
applied left monad law for t18953 <- return com1ctrl
applied left monad law for t18954 <- return com1ctrl
applied left monad law for t18955 <- return nextCharImp
rewriting nextCharImp @ [t17251]
rewriting t17252 @ []
liveness replaced t17252 with a wildcard
applied left monad law for t17260 <- return s147
rewriting s147 @ []
applied left monad law for t18956 <- return com1ctrl
applied left monad law for t17273 <- return s148
rewriting s148 @ []
applied left monad law for t18957 <- return com1ctrl
applied left monad law for t17292 <- return s149
rewriting s149 @ []
applied left monad law for t17299 <- return s150
rewriting s150 @ []
applied left monad law for t18958 <- return com1ctrl
applied left monad law for t18959 <- return com1ctrl
applied left monad law for t18960 <- return nextCharImp
rewriting nextCharImp @ [t17326]
rewriting t17327 @ []
liveness replaced t17327 with a wildcard
applied left monad law for t17335 <- return s151
rewriting s151 @ []
applied left monad law for t18961 <- return com1ctrl
applied left monad law for t17348 <- return s152
rewriting s152 @ []
applied left monad law for t18962 <- return com1ctrl
applied left monad law for t17363 <- return s153
rewriting s153 @ []
applied left monad law for t18963 <- return com1ctrl
applied left monad law for t18964 <- return nextCharImp
rewriting nextCharImp @ [t17383]
rewriting t17384 @ []
liveness replaced t17384 with a wildcard
applied left monad law for t18965 <- return com1ctrl
applied left monad law for t17400 <- return s154
rewriting s154 @ []
applied left monad law for t18966 <- return com1ctrl
applied left monad law for t18967 <- return nextCharImp
rewriting nextCharImp @ [t17420]
rewriting t17421 @ []
liveness replaced t17421 with a wildcard
applied left monad law for t18968 <- return com1ctrl
applied left monad law for t17436 <- return s155
rewriting s155 @ []
applied left monad law for t18969 <- return nextCharImp
rewriting nextCharImp @ [t17444]
rewriting t17445 @ []
liveness replaced t17445 with a wildcard
applied left monad law for t17449 <- return s156
rewriting s156 @ []
applied left monad law for t18970 <- return com1ctrl
applied left monad law for t18971 <- return nextCharImp
rewriting nextCharImp @ [t17469]
rewriting t17470 @ []
liveness replaced t17470 with a wildcard
applied left monad law for t18972 <- return com1ctrl
rewriting t17497 @ []
liveness replaced t17497 with a wildcard
applied left monad law for t18973 <- return nextMimgHeader_imp
rewriting nextMimgHeader_imp @ [t17508, t17509]
applied left monad law for t16559 <- return str12
applied left monad law for t18974 <- return loadCharImp
rewriting loadCharImp @ [str12]
deriving specialized closure definition k576 for ClosAlloc using loadCharImp1
rewriting t18975 @ []
applied left monad law for t16551 <- return str12
deriving specialized block b1722 for BlockCall to block b123
liveness replaced t18975 with a wildcard
applied left monad law for t16559 <- return str13
applied left monad law for t18978 <- return loadCharImp
rewriting loadCharImp @ [str13]
deriving specialized closure definition k577 for ClosAlloc using loadCharImp1
rewriting t18979 @ []
applied left monad law for t16551 <- return str13
deriving specialized block b1724 for BlockCall to block b123
liveness replaced t18979 with a wildcard
applied left monad law for t16559 <- return str7
applied left monad law for t18982 <- return loadCharImp
rewriting loadCharImp @ [str7]
deriving specialized closure definition k578 for ClosAlloc using loadCharImp1
rewriting t18983 @ []
applied left monad law for t16551 <- return str7
deriving specialized block b1726 for BlockCall to block b123
liveness replaced t18983 with a wildcard
applied left monad law for t16559 <- return str8
applied left monad law for t18986 <- return loadCharImp
rewriting loadCharImp @ [str8]
deriving specialized closure definition k579 for ClosAlloc using loadCharImp1
rewriting t18987 @ []
applied left monad law for t16551 <- return str8
deriving specialized block b1728 for BlockCall to block b123
liveness replaced t18987 with a wildcard
applied left monad law for t16559 <- return str9
applied left monad law for t18990 <- return loadCharImp
rewriting loadCharImp @ [str9]
deriving specialized closure definition k580 for ClosAlloc using loadCharImp1
rewriting t18991 @ []
applied left monad law for t16551 <- return str9
deriving specialized block b1730 for BlockCall to block b123
liveness replaced t18991 with a wildcard
applied left monad law for t18994 <- return com1ctrl
applied left monad law for t18995 <- return nextCharImp
rewriting nextCharImp @ [t17532]
rewriting t17533 @ []
liveness replaced t17533 with a wildcard
applied left monad law for t18996 <- return com1ctrl
applied left monad law for t17546 <- return s157
rewriting s157 @ []
applied left monad law for t18997 <- return com1ctrl
applied left monad law for t18998 <- return nextCharImp
rewriting nextCharImp @ [t17560]
rewriting t17561 @ []
liveness replaced t17561 with a wildcard
applied left monad law for t18999 <- return com1ctrl
rewriting t17579 @ []
liveness replaced t17579 with a wildcard
applied left monad law for t17587 <- return s158
rewriting s158 @ []
applied left monad law for t17594 <- return s159
rewriting s159 @ []
applied left monad law for t19000 <- return com1ctrl
applied left monad law for t19001 <- return com1ctrl
applied left monad law for t19002 <- return nextCharImp
rewriting nextCharImp @ [t17621]
rewriting t17622 @ []
liveness replaced t17622 with a wildcard
applied left monad law for t17630 <- return s160
rewriting s160 @ []
applied left monad law for t19003 <- return com1ctrl
applied left monad law for t17643 <- return s161
rewriting s161 @ []
applied left monad law for t19004 <- return com1ctrl
applied left monad law for t17662 <- return s162
rewriting s162 @ []
applied left monad law for t17669 <- return s163
rewriting s163 @ []
applied left monad law for t19005 <- return com1ctrl
applied left monad law for t19006 <- return com1ctrl
applied left monad law for t19007 <- return nextCharImp
rewriting nextCharImp @ [t17696]
rewriting t17697 @ []
liveness replaced t17697 with a wildcard
applied left monad law for t17705 <- return s164
rewriting s164 @ []
applied left monad law for t19008 <- return com1ctrl
applied left monad law for t17718 <- return s165
rewriting s165 @ []
applied left monad law for t19009 <- return com1ctrl
applied left monad law for t17733 <- return s166
rewriting s166 @ []
applied left monad law for t19010 <- return com1ctrl
applied left monad law for t19011 <- return nextCharImp
rewriting nextCharImp @ [t17753]
rewriting t17754 @ []
liveness replaced t17754 with a wildcard
applied left monad law for t19012 <- return com1ctrl
applied left monad law for t17770 <- return s167
rewriting s167 @ []
applied left monad law for t19013 <- return com1ctrl
applied left monad law for t19014 <- return nextCharImp
rewriting nextCharImp @ [t17790]
rewriting t17791 @ []
liveness replaced t17791 with a wildcard
applied left monad law for t19015 <- return com1ctrl
applied left monad law for t17806 <- return s168
rewriting s168 @ []
applied left monad law for t19016 <- return nextCharImp
rewriting nextCharImp @ [t17814]
rewriting t17815 @ []
liveness replaced t17815 with a wildcard
applied left monad law for t17819 <- return s169
rewriting s169 @ []
applied left monad law for t19017 <- return com1ctrl
applied left monad law for t19018 <- return nextCharImp
rewriting nextCharImp @ [t17839]
rewriting t17840 @ []
liveness replaced t17840 with a wildcard
applied left monad law for t19019 <- return com1ctrl
rewriting t17867 @ []
liveness replaced t17867 with a wildcard
applied left monad law for t19020 <- return nextMimgMMap_imp
rewriting nextMimgMMap_imp @ [t17878, t17879]
applied left monad law for t16559 <- return str14
applied left monad law for t19021 <- return loadCharImp
rewriting loadCharImp @ [str14]
deriving specialized closure definition k581 for ClosAlloc using loadCharImp1
rewriting t19022 @ []
applied left monad law for t16551 <- return str14
deriving specialized block b1732 for BlockCall to block b123
liveness replaced t19022 with a wildcard
applied left monad law for t16559 <- return str17
applied left monad law for t19025 <- return loadCharImp
rewriting loadCharImp @ [str17]
deriving specialized closure definition k582 for ClosAlloc using loadCharImp1
rewriting t19026 @ []
applied left monad law for t16551 <- return str17
deriving specialized block b1734 for BlockCall to block b123
liveness replaced t19026 with a wildcard
applied left monad law for t16559 <- return str15
applied left monad law for t19029 <- return loadCharImp
rewriting loadCharImp @ [str15]
deriving specialized closure definition k583 for ClosAlloc using loadCharImp1
rewriting t19030 @ []
applied left monad law for t16551 <- return str15
deriving specialized block b1736 for BlockCall to block b123
liveness replaced t19030 with a wildcard
applied left monad law for t16559 <- return str18
applied left monad law for t19033 <- return loadCharImp
rewriting loadCharImp @ [str18]
deriving specialized closure definition k584 for ClosAlloc using loadCharImp1
rewriting t19034 @ []
applied left monad law for t16551 <- return str18
deriving specialized block b1738 for BlockCall to block b123
liveness replaced t19034 with a wildcard
applied left monad law for t16559 <- return str19
applied left monad law for t19037 <- return loadCharImp
rewriting loadCharImp @ [str19]
deriving specialized closure definition k585 for ClosAlloc using loadCharImp1
rewriting t19038 @ []
applied left monad law for t16551 <- return str19
deriving specialized block b1740 for BlockCall to block b123
liveness replaced t19038 with a wildcard
applied left monad law for t16559 <- return str20
applied left monad law for t19041 <- return loadCharImp
rewriting loadCharImp @ [str20]
deriving specialized closure definition k586 for ClosAlloc using loadCharImp1
rewriting t19042 @ []
applied left monad law for t16551 <- return str20
deriving specialized block b1742 for BlockCall to block b123
liveness replaced t19042 with a wildcard
applied left monad law for t16559 <- return str16
applied left monad law for t19045 <- return loadCharImp
rewriting loadCharImp @ [str16]
deriving specialized closure definition k587 for ClosAlloc using loadCharImp1
rewriting t19046 @ []
applied left monad law for t16551 <- return str16
deriving specialized block b1744 for BlockCall to block b123
liveness replaced t19046 with a wildcard
applied left monad law for t16559 <- return str22
applied left monad law for t19049 <- return loadCharImp
rewriting loadCharImp @ [str22]
deriving specialized closure definition k588 for ClosAlloc using loadCharImp1
rewriting t19050 @ []
applied left monad law for t16551 <- return str22
deriving specialized block b1746 for BlockCall to block b123
liveness replaced t19050 with a wildcard
applied left monad law for t17886 <- return s170
rewriting s170 @ []
rewriting t17892 @ []
liveness replaced t17892 with a wildcard
applied left monad law for t19053 <- return ptrToWordImp
rewriting ptrToWordImp @ [t17894]
applied left monad law for t17895 <- return t17894
applied left monad law for t17897 <- return s171
rewriting s171 @ []
applied left monad law for t19054 <- return ptrToWordImp
rewriting ptrToWordImp @ [t17899]
applied left monad law for t17900 <- return t17899
applied left monad law for t17902 <- return s172
rewriting s172 @ []
applied left monad law for t19055 <- return com1ctrl
applied left monad law for t19056 <- return com1ctrl
applied left monad law for t19057 <- return nextCharImp
rewriting nextCharImp @ [t17929]
rewriting t17930 @ []
liveness replaced t17930 with a wildcard
applied left monad law for t17937 <- return s173
rewriting s173 @ []
applied left monad law for t19058 <- return com1ctrl
applied left monad law for t17949 <- return s174
rewriting s174 @ []
applied left monad law for t19059 <- return com1ctrl
applied left monad law for t17962 <- return s175
rewriting s175 @ []
applied left monad law for t19060 <- return nextCharImp
rewriting nextCharImp @ [t17969]
rewriting t17970 @ []
liveness replaced t17970 with a wildcard
applied left monad law for t19061 <- return nextCharImp
rewriting nextCharImp @ [t17972]
rewriting t17973 @ []
liveness replaced t17973 with a wildcard
applied left monad law for t17976 <- return s176
rewriting s176 @ []
applied left monad law for t19062 <- return nextCharImp
rewriting nextCharImp @ [t17983]
rewriting t17984 @ []
liveness replaced t17984 with a wildcard
applied left monad law for t19063 <- return nextCharImp
rewriting nextCharImp @ [t17986]
rewriting t17987 @ []
liveness replaced t17987 with a wildcard
applied left monad law for t19064 <- return com1ctrl
applied left monad law for t19065 <- return com1ctrl
applied left monad law for t19066 <- return nextCharImp
rewriting nextCharImp @ [t18014]
rewriting t18015 @ []
liveness replaced t18015 with a wildcard
applied left monad law for t18022 <- return s177
rewriting s177 @ []
applied left monad law for t19067 <- return com1ctrl
applied left monad law for t18034 <- return s178
rewriting s178 @ []
applied left monad law for t19068 <- return com1ctrl
applied left monad law for t18047 <- return s179
rewriting s179 @ []
rewriting t18054 @ []
liveness replaced t18054 with a wildcard
applied left monad law for t18057 <- return s180
rewriting s180 @ []
applied left monad law for t18060 <- return s181
rewriting s181 @ []
rewriting t18067 @ []
liveness replaced t18067 with a wildcard
applied left monad law for t18070 <- return s182
rewriting s182 @ []
applied left monad law for t19069 <- return com1ctrl
applied left monad law for t19070 <- return com1ctrl
applied left monad law for t19071 <- return nextCharImp
rewriting nextCharImp @ [t18097]
rewriting t18098 @ []
liveness replaced t18098 with a wildcard
applied left monad law for t18105 <- return s183
rewriting s183 @ []
applied left monad law for t19072 <- return com1ctrl
applied left monad law for t18117 <- return s184
rewriting s184 @ []
applied left monad law for t19073 <- return com1ctrl
constant folding for add
applied left monad law for t18129 <- return 4108
applied left monad law for t18132 <- return s185
rewriting s185 @ []
rewriting t18141 @ []
liveness replaced t18141 with a wildcard
applied left monad law for t19074 <- return ptrToWordImp
rewriting ptrToWordImp @ [t18143]
applied left monad law for t18144 <- return t18143
applied left monad law for t18146 <- return s186
rewriting s186 @ []
constant folding for add
applied left monad law for t18153 <- return 4108
applied left monad law for t18156 <- return s187
rewriting s187 @ []
applied left monad law for t19075 <- return com1ctrl
constant folding for add
applied left monad law for t18168 <- return 4108
applied left monad law for t18171 <- return s188
rewriting s188 @ []
applied left monad law for t19076 <- return com1ctrl
applied left monad law for t18184 <- return s189
rewriting s189 @ []
applied left monad law for t19077 <- return nextCharImp
rewriting nextCharImp @ [t18191]
rewriting t18192 @ []
liveness replaced t18192 with a wildcard
applied left monad law for t19078 <- return nextCharImp
rewriting nextCharImp @ [t18194]
rewriting t18195 @ []
liveness replaced t18195 with a wildcard
constant folding for add
applied left monad law for t18202 <- return 4108
applied left monad law for t18205 <- return s190
rewriting s190 @ []
applied left monad law for t19079 <- return com1ctrl
constant folding for add
applied left monad law for t18217 <- return 4108
applied left monad law for t18220 <- return s191
rewriting s191 @ []
applied left monad law for t19080 <- return com1ctrl
applied left monad law for t18233 <- return s192
rewriting s192 @ []
rewriting t18240 @ []
liveness replaced t18240 with a wildcard
applied left monad law for t18243 <- return s193
rewriting s193 @ []
applied left monad law for t18246 <- return s194
rewriting s194 @ []
applied left monad law for t19081 <- return com1ctrl
applied left monad law for t19082 <- return nextCharImp
rewriting nextCharImp @ [t18263]
rewriting t18264 @ []
liveness replaced t18264 with a wildcard
applied left monad law for t19083 <- return com1ctrl
rewriting t18287 @ []
liveness replaced t18287 with a wildcard
constant folding for add
applied left monad law for t18289 <- return 4104
applied left monad law for t18292 <- return s195
rewriting s195 @ []
constant folding for add
applied left monad law for t18294 <- return 4108
applied left monad law for t18297 <- return s196
rewriting s196 @ []
rewriting t18306 @ []
liveness replaced t18306 with a wildcard
applied left monad law for t19084 <- return ptrToWordImp
rewriting ptrToWordImp @ [t18308]
applied left monad law for t18309 <- return t18308
applied left monad law for t18311 <- return s197
rewriting s197 @ []
constant folding for add
applied left monad law for t18318 <- return 4108
applied left monad law for t18321 <- return s198
rewriting s198 @ []
applied left monad law for t19085 <- return com1ctrl
constant folding for add
applied left monad law for t18333 <- return 4108
applied left monad law for t18336 <- return s199
rewriting s199 @ []
applied left monad law for t19086 <- return com1ctrl
applied left monad law for t18349 <- return s200
rewriting s200 @ []
applied left monad law for t19087 <- return nextCharImp
rewriting nextCharImp @ [t18356]
rewriting t18357 @ []
liveness replaced t18357 with a wildcard
applied left monad law for t19088 <- return nextCharImp
rewriting nextCharImp @ [t18359]
rewriting t18360 @ []
liveness replaced t18360 with a wildcard
constant folding for add
applied left monad law for t18367 <- return 4108
applied left monad law for t18370 <- return s201
rewriting s201 @ []
applied left monad law for t19089 <- return com1ctrl
constant folding for add
applied left monad law for t18382 <- return 4108
applied left monad law for t18385 <- return s202
rewriting s202 @ []
applied left monad law for t19090 <- return com1ctrl
applied left monad law for t18398 <- return s203
rewriting s203 @ []
rewriting t18405 @ []
liveness replaced t18405 with a wildcard
applied left monad law for t18408 <- return s204
rewriting s204 @ []
rewriting t18418 @ []
liveness replaced t18418 with a wildcard
constant folding for add
applied left monad law for t18420 <- return 4104
applied left monad law for t18423 <- return s205
rewriting s205 @ []
applied left monad law for t19091 <- return com1ctrl
applied left monad law for t19092 <- return nextCharImp
rewriting nextCharImp @ [t18437]
rewriting t18438 @ []
liveness replaced t18438 with a wildcard
applied left monad law for t19093 <- return com1ctrl
rewriting t18455 @ []
liveness replaced t18455 with a wildcard
constant folding for add
applied left monad law for t18457 <- return 4100
applied left monad law for t19094 <- return wordCursor
rewriting wordCursor @ [t18459]
rewriting t18460 @ []
applied left monad law for t18464 <- return s206
rewriting s206 @ []
liveness replaced t18460 with a wildcard
constant folding for add
applied left monad law for t18466 <- return 4100
applied left monad law for t19095 <- return wordCursor
rewriting wordCursor @ [t18468]
rewriting t18469 @ []
applied left monad law for t18473 <- return s207
rewriting s207 @ []
liveness replaced t18469 with a wildcard
applied left monad law for t19096 <- return com1ctrl
applied left monad law for t19097 <- return nextCharImp
rewriting nextCharImp @ [t18487]
rewriting t18488 @ []
liveness replaced t18488 with a wildcard
applied left monad law for t19098 <- return com1ctrl
rewriting t18505 @ []
liveness replaced t18505 with a wildcard
applied left monad law for t19099 <- return bootdata
applied left monad law for t19100 <- return wordCursor
rewriting wordCursor @ [t18509]
rewriting t18510 @ []
applied left monad law for t18514 <- return s208
rewriting s208 @ []
liveness replaced t18510 with a wildcard
replacing reference to top level bootdata with 4096
applied left monad law for t19101 <- return bootdata
applied left monad law for t19102 <- return wordCursor
rewriting wordCursor @ [t18518]
rewriting t18519 @ []
applied left monad law for t18523 <- return s209
rewriting s209 @ []
liveness replaced t18519 with a wildcard
replacing reference to top level bootdata with 4096
applied left monad law for t19103 <- return com1ctrl
applied left monad law for t19104 <- return nextCharImp
rewriting nextCharImp @ [t18537]
rewriting t18538 @ []
liveness replaced t18538 with a wildcard
applied left monad law for t19105 <- return com1ctrl
rewriting t18555 @ []
liveness replaced t18555 with a wildcard
applied left monad law for t18557 <- return s210
rewriting s210 @ []
applied left monad law for t19106 <- return com1ctrl
applied left monad law for t19107 <- return nextCharImp
rewriting nextCharImp @ [t18571]
rewriting t18572 @ []
liveness replaced t18572 with a wildcard
applied left monad law for t19108 <- return com1ctrl
applied left monad law for t19128 <- return console
applied left monad law for t19143 <- return s211
rewriting s211 @ []
applied left monad law for t19150 <- return s119
applied left monad law for t19110 <- return s212
applied left monad law for t19111 <- return s213
rewrite: x + 0 ==> x
applied left monad law for t19112 <- return console
applied left monad law for t19113 <- return s214
applied left monad law for t19114 <- return s215
rewriting s215 @ [console]
applied left monad law for t18635 <- return console
deriving specialized block b1747 for BlockCall to block b1485
rewriting s214 @ [console]
applied left monad law for t18637 <- return console
deriving specialized block b1748 for BlockCall to block b1487
applied left monad law for t19118 <- return s216
applied left monad law for t19119 <- return s217
rewriting s217 @ [t19117]
rewriting s216 @ [t19117]
applied left monad law for t19123 <- return s218
applied left monad law for t19124 <- return s219
rewriting s219 @ [t19122]
rewriting s218 @ [t19122]
applied left monad law for t19145 <- return s220
applied left monad law for t19146 <- return s220
applied left monad law for t19147 <- return s220
rewriting s220 @ [t19148]
liveness replaced t19148 with a wildcard
deriving specialized block b1750 for BlockCall to block b1690
applied left monad law for t19149 <- return s220
rewriting s220 @ [s119]
deriving specialized block b1751 for BlockCall to block b1691
deriving specialized block b1749 for BlockCall to block b1689
liveness replaced t19126 with a wildcard
liveness replaced t19125 with a wildcard
liveness replaced t19121 with a wildcard
liveness replaced t19120 with a wildcard
liveness replaced t19116 with a wildcard
liveness replaced t19115 with a wildcard
Flow pass finished, running shake.
Steps performed = 1523
-------------------------
suffixInline succeeded for call to block b1484 from block b1747
suffixInline succeeded for call to block b1486 from block b1748
suffixInline succeeded for call to block b1489 from block b1490
suffixInline succeeded for call to block b1491 from block b1492
suffixInline succeeded for call to block b1484 from block b1485
suffixInline succeeded for call to block b1486 from block b1487
prefixInline succeeded for call to block b1503 from block b690
prefixInline succeeded for call to block b1507 from block b692
inlining eliminated a wildcard binding in b1668
prefixInline succeeded for call to block b1694 from block b1668
inlining eliminated a wildcard binding in b1664
prefixInline succeeded for call to block b1696 from block b1664
inlining eliminated a wildcard binding in b1581
prefixInline succeeded for call to block b1698 from block b1581
inlining eliminated a wildcard binding in b1578
prefixInline succeeded for call to block b1700 from block b1578
inlining eliminated a wildcard binding in b1575
prefixInline succeeded for call to block b1702 from block b1575
inlining eliminated a wildcard binding in b256
elided call to goto block b256
prefixInline succeeded for call to block b1503 from block b702
prefixInline succeeded for call to block b1503 from block b700
inlining eliminated a wildcard binding in b1521
prefixInline succeeded for call to block b1507 from block b1521
prefixInline succeeded for call to block b1507 from block b849
prefixInline succeeded for call to block b1507 from block b847
prefixInline succeeded for call to block b1503 from block b852
prefixInline succeeded for call to block b1528 from block b1239
prefixInline succeeded for call to block b1528 from block b1303
prefixInline succeeded for call to block b1534 from block b1236
suffixInline succeeded for call to block b1303 from block b1536
prefixInline succeeded for call to block b1534 from block b1359
prefixInline succeeded for call to block b1534 from block b1539
prefixInline succeeded for call to block b1534 from block b1708
prefixInline succeeded for call to block b1534 from block b1707
inlining eliminated a wildcard binding in b1572
prefixInline succeeded for call to block b1709 from block b1572
inlining eliminated a wildcard binding in b1568
prefixInline succeeded for call to block b1711 from block b1568
prefixInline succeeded for call to block b1534 from block b1547
prefixInline succeeded for call to block b1534 from block b1714
prefixInline succeeded for call to block b1534 from block b1713
inlining eliminated a wildcard binding in b1564
prefixInline succeeded for call to block b1715 from block b1564
inlining eliminated a wildcard binding in b1560
prefixInline succeeded for call to block b1717 from block b1560
inlining eliminated a wildcard binding in b1557
prefixInline succeeded for call to block b1719 from block b1557
inlining eliminated a wildcard binding in b125
inlining eliminated a wildcard binding in b949
pushed case into call in b949
pushed case into call in b1372
inlining eliminated a wildcard binding in b941
pushed case into call in b941
prefixInline succeeded for call to block b941 from block b1375
pushed case into call in b1375
prefixInline succeeded for call to block b941 from block b1374
pushed case into call in b1374
pushed case into call in b1371
pushed case into call in b788
inlining eliminated a wildcard binding in b945
pushed case into call in b945
prefixInline succeeded for call to block b945 from block b1378
pushed case into call in b1378
prefixInline succeeded for call to block b945 from block b1377
pushed case into call in b1377
pushed case into call in b1370
pushed case into call in b790
inlining eliminated a wildcard binding in b946
pushed case into call in b946
prefixInline succeeded for call to block b946 from block b1381
pushed case into call in b1381
prefixInline succeeded for call to block b946 from block b1380
pushed case into call in b1380
pushed case into call in b1369
inlining eliminated a wildcard binding in b1073
pushed case into call in b1073
pushed case into call in b1067
inlining eliminated a wildcard binding in b1079
pushed case into call in b1079
pushed case into call in b1066
inlining eliminated a wildcard binding in b1576
pushed case into call in b1576
pushed case into call in b1064
inlining eliminated a wildcard binding in b1087
pushed case into call in b1087
inlining eliminated a wildcard binding in b1585
prefixInline succeeded for call to block b1064 from block b1062
pushed case into call in b1585
pushed case into call in b1058
inlining eliminated a wildcard binding in b1660
prefixInline succeeded for call to block b1721 from block b1660
inlining eliminated a wildcard binding in b1603
prefixInline succeeded for call to block b1723 from block b1603
inlining eliminated a wildcard binding in b1597
prefixInline succeeded for call to block b1725 from block b1597
inlining eliminated a wildcard binding in b1593
prefixInline succeeded for call to block b1727 from block b1593
inlining eliminated a wildcard binding in b1589
prefixInline succeeded for call to block b1729 from block b1589
inlining eliminated a wildcard binding in b961
pushed case into call in b961
pushed case into call in b1321
inlining eliminated a wildcard binding in b947
pushed case into call in b947
inlining eliminated a wildcard binding in b1590
pushed case into call in b1590
pushed case into call in b1386
pushed case into call in b800
inlining eliminated a wildcard binding in b959
pushed case into call in b959
prefixInline succeeded for call to block b959 from block b1391
pushed case into call in b1391
prefixInline succeeded for call to block b959 from block b1390
pushed case into call in b1390
pushed case into call in b1385
pushed case into call in b802
inlining eliminated a wildcard binding in b960
pushed case into call in b960
prefixInline succeeded for call to block b960 from block b1394
pushed case into call in b1394
prefixInline succeeded for call to block b960 from block b1393
pushed case into call in b1393
pushed case into call in b1384
inlining eliminated a wildcard binding in b1137
pushed case into call in b1137
pushed case into call in b1131
inlining eliminated a wildcard binding in b1143
pushed case into call in b1143
pushed case into call in b1130
inlining eliminated a wildcard binding in b1601
pushed case into call in b1601
pushed case into call in b1128
inlining eliminated a wildcard binding in b1151
pushed case into call in b1151
inlining eliminated a wildcard binding in b1608
prefixInline succeeded for call to block b1128 from block b1126
pushed case into call in b1608
pushed case into call in b1122
inlining eliminated a wildcard binding in b1653
prefixInline succeeded for call to block b1731 from block b1653
inlining eliminated a wildcard binding in b1632
prefixInline succeeded for call to block b1733 from block b1632
inlining eliminated a wildcard binding in b1639
prefixInline succeeded for call to block b1735 from block b1639
inlining eliminated a wildcard binding in b1624
prefixInline succeeded for call to block b1737 from block b1624
inlining eliminated a wildcard binding in b1618
prefixInline succeeded for call to block b1739 from block b1618
inlining eliminated a wildcard binding in b1614
prefixInline succeeded for call to block b1741 from block b1614
inlining eliminated a wildcard binding in b1627
prefixInline succeeded for call to block b1743 from block b1627
inlining eliminated a wildcard binding in b1610
prefixInline succeeded for call to block b1745 from block b1610
pushed case into call in b1331
inlining eliminated a wildcard binding in b1615
pushed case into call in b1615
pushed case into call in b1414
pushed case into call in b808
inlining eliminated a wildcard binding in b970
pushed case into call in b970
prefixInline succeeded for call to block b970 from block b1419
pushed case into call in b1419
prefixInline succeeded for call to block b970 from block b1418
pushed case into call in b1418
pushed case into call in b1413
inlining eliminated a wildcard binding in b1620
pushed case into call in b1620
inlining eliminated a wildcard binding in b1412
pushed case into call in b1412
pushed case into call in b971
inlining eliminated a wildcard binding in b1621
pushed case into call in b1621
inlining eliminated a wildcard binding in b1162
pushed case into call in b1162
inlining eliminated a wildcard binding in b972
pushed case into call in b972
prefixInline succeeded for call to block b972 from block b1423
pushed case into call in b1423
prefixInline succeeded for call to block b972 from block b1422
pushed case into call in b1422
pushed case into call in b1411
inlining eliminated a wildcard binding in b1628
pushed case into call in b1628
pushed case into call in b1410
pushed case into call in b978
inlining eliminated a wildcard binding in b1629
pushed case into call in b1629
pushed case into call in b1168
inlining eliminated a wildcard binding in b980
pushed case into call in b980
prefixInline succeeded for call to block b980 from block b1427
pushed case into call in b1427
prefixInline succeeded for call to block b980 from block b1426
pushed case into call in b1426
pushed case into call in b1409
inlining eliminated a wildcard binding in b1634
pushed case into call in b1634
pushed case into call in b1408
prefixInline succeeded for call to block b970 from block b1431
pushed case into call in b1431
prefixInline succeeded for call to block b970 from block b1430
pushed case into call in b1430
pushed case into call in b1407
inlining eliminated a wildcard binding in b1636
pushed case into call in b1636
inlining eliminated a wildcard binding in b1406
pushed case into call in b1406
prefixInline succeeded for call to block b972 from block b1435
pushed case into call in b1435
prefixInline succeeded for call to block b972 from block b1434
pushed case into call in b1434
pushed case into call in b1405
inlining eliminated a wildcard binding in b1640
pushed case into call in b1640
pushed case into call in b1404
pushed case into call in b1175
inlining eliminated a wildcard binding in b977
pushed case into call in b977
inlining eliminated a wildcard binding in b1642
pushed case into call in b1642
pushed case into call in b1204
pushed case into call in b1212
inlining eliminated a wildcard binding in b1643
pushed case into call in b1643
pushed case into call in b1287
prefixInline succeeded for call to block b970 from block b1292
pushed case into call in b1292
prefixInline succeeded for call to block b970 from block b1291
pushed case into call in b1291
pushed case into call in b1286
inlining eliminated a wildcard binding in b1645
pushed case into call in b1645
inlining eliminated a wildcard binding in b1285
pushed case into call in b1285
prefixInline succeeded for call to block b972 from block b1296
pushed case into call in b1296
prefixInline succeeded for call to block b972 from block b1295
pushed case into call in b1295
pushed case into call in b1284
inlining eliminated a wildcard binding in b1647
pushed case into call in b1647
pushed case into call in b1283
inlining eliminated a wildcard binding in b1648
pushed case into call in b1648
pushed case into call in b814
inlining eliminated a wildcard binding in b985
pushed case into call in b985
inlining eliminated a wildcard binding in b1654
pushed case into call in b1654
inlining eliminated a wildcard binding in b1203
prefixInline succeeded for call to block b485 from block b1203
prefixInline succeeded for call to block b1122 from block b1203
pushed case into call in b1203
inlining eliminated a wildcard binding in b816
prefixInline succeeded for call to block b485 from block b816
prefixInline succeeded for call to block b1122 from block b816
pushed case into call in b816
inlining eliminated a wildcard binding in b986
pushed case into call in b986
inlining eliminated a wildcard binding in b1661
pushed case into call in b1661
inlining eliminated a wildcard binding in b1202
prefixInline succeeded for call to block b485 from block b1202
prefixInline succeeded for call to block b1058 from block b1202
pushed case into call in b1202
inlining eliminated a wildcard binding in b818
prefixInline succeeded for call to block b485 from block b818
prefixInline succeeded for call to block b1058 from block b818
pushed case into call in b818
inlining eliminated a wildcard binding in b987
pushed case into call in b987
inlining eliminated a wildcard binding in b1665
pushed case into call in b1665
pushed case into call in b1201
inlining eliminated a wildcard binding in b996
pushed case into call in b996
pushed case into call in b1688
elided call to goto block b1751
prefixInline succeeded for call to block b1747 from block initialize
prefixInline succeeded for call to block b1748 from block initialize
prefixInline succeeded for call to block b1490 from block initialize
prefixInline succeeded for call to block b1492 from block initialize
prefixInline succeeded for call to block b1485 from block initialize
prefixInline succeeded for call to block b1487 from block initialize
suffixInline succeeded for call to block b1749 from block initialize
Inlining pass finished, running shake.
lifting static allocator to top-level s221
lifting static allocator to top-level s222
lifting static allocator to top-level s223
lifting static allocator to top-level s224
lifting static allocator to top-level s225
lifting static allocator to top-level s226
lifting static allocator to top-level s227
lifting static allocator to top-level s228
lifting static allocator to top-level s229
lifting static allocator to top-level s230
lifting static allocator to top-level s231
lifting static allocator to top-level s232
lifting static allocator to top-level s233
lifting static allocator to top-level s234
lifting static allocator to top-level s235
lifting static allocator to top-level s236
lifting static allocator to top-level s237
lifted allocator for t19170
lifted allocator for t19176
lifted allocator for t19176
lifted allocator for t19176
lifted allocator for t19180
lifted allocator for t19182
lifted allocator for t19183
lifted allocator for t19183
lifted allocator for t19182
lifted allocator for t19183
lifted allocator for t19185
lifted allocator for t19186
lifted allocator for t19186
lifted allocator for t19185
lifted allocator for t19186
lifted allocator for t19185
lifted allocator for t19186
lifted allocator for t19185
lifted allocator for t19186
lifted allocator for t19185
lifted allocator for t19186
lifted allocator for t19187
lifted allocator for t19187
lifted allocator for t19187
lifted allocator for t19191
lifted allocator for t19191
lifted allocator for t19191
lifted allocator for t19192
lifted allocator for t19194
lifted allocator for t19195
lifted allocator for t19195
lifted allocator for t19194
lifted allocator for t19195
lifted allocator for t19197
lifted allocator for t19198
lifted allocator for t19198
lifted allocator for t19197
lifted allocator for t19198
lifted allocator for t19197
lifted allocator for t19198
lifted allocator for t19197
lifted allocator for t19198
lifted allocator for t19197
lifted allocator for t19198
lifted allocator for t19199
lifted allocator for t19199
lifted allocator for t19203
lifted allocator for t19203
lifted allocator for t19204
lifted allocator for t19206
lifted allocator for t19207
lifted allocator for t19207
lifted allocator for t19206
lifted allocator for t19207
lifted allocator for t19209
lifted allocator for t19210
lifted allocator for t19210
lifted allocator for t19209
lifted allocator for t19210
lifted allocator for t19209
lifted allocator for t19210
lifted allocator for t19209
lifted allocator for t19210
lifted allocator for t19209
lifted allocator for t19210
lifted allocator for t19215
lifted allocator for t19216
lifted allocator for t19220
lifted allocator for t19230
lifted allocator for t19247
lifting static allocator to top-level s238
lifted allocator for t19251
lifted allocator for t19251
lifted allocator for t19251
lifting static allocator to top-level s239
lifted allocator for t19256
lifted allocator for t19258
lifted allocator for t19259
lifted allocator for t19259
lifted allocator for t19258
lifted allocator for t19259
lifted allocator for t19261
lifted allocator for t19262
lifted allocator for t19262
lifted allocator for t19261
lifted allocator for t19262
lifted allocator for t19261
lifted allocator for t19262
lifted allocator for t19261
lifted allocator for t19262
lifted allocator for t19261
lifted allocator for t19262
lifted allocator for t19263
lifted allocator for t19263
lifted allocator for t19267
lifted allocator for t19267
lifted allocator for t19268
lifted allocator for t19270
lifted allocator for t19271
lifted allocator for t19271
lifted allocator for t19270
lifted allocator for t19271
lifted allocator for t19273
lifted allocator for t19274
lifted allocator for t19274
lifted allocator for t19273
lifted allocator for t19274
lifted allocator for t19273
lifted allocator for t19274
lifted allocator for t19273
lifted allocator for t19274
lifted allocator for t19273
lifted allocator for t19274
lifted allocator for t19279
lifted allocator for t19280
lifted allocator for t19281
lifted allocator for t19288
lifting static allocator to top-level s240
lifting static allocator to top-level s241
lifting static allocator to top-level s242
lifted allocator for t19310
lifted allocator for t19312
lifting static allocator to top-level s243
lifted allocator for t19312
lifted allocator for t19315
lifting static allocator to top-level s244
lifted allocator for t19315
lifted allocator for t19315
lifted allocator for t19315
lifted allocator for t19315
lifted allocator for t19326
lifted allocator for t19328
lifting static allocator to top-level s245
lifted allocator for t19328
lifted allocator for t19331
lifting static allocator to top-level s246
lifted allocator for t19331
lifted allocator for t19331
lifted allocator for t19331
lifted allocator for t19331
lifted allocator for t19345
lifted allocator for t19347
lifting static allocator to top-level s247
lifted allocator for t19347
lifted allocator for t19350
lifting static allocator to top-level s248
lifted allocator for t19350
lifted allocator for t19350
lifted allocator for t19350
lifted allocator for t19350
lifting static allocator to top-level s249
lifted allocator for t19359
lifted allocator for t19359
lifted allocator for t19362
lifted allocator for t19362
lifted allocator for t19362
lifted allocator for t19362
lifted allocator for t19362
lifted allocator for t19368
lifted allocator for t19368
lifted allocator for t19371
lifted allocator for t19371
lifted allocator for t19371
lifted allocator for t19371
lifted allocator for t19371
lifted allocator for t19380
lifting static allocator to top-level s250
lifted allocator for t19387
lifted allocator for t19387
lifted allocator for t19390
lifted allocator for t19390
lifted allocator for t19390
lifted allocator for t19390
lifted allocator for t19390
lifted allocator for t19396
lifted allocator for t19396
lifted allocator for t19399
lifted allocator for t19399
lifted allocator for t19399
lifted allocator for t19399
lifted allocator for t19399
lifting static allocator to top-level s251
lifting static allocator to top-level s252
lifting static allocator to top-level s253
lifting static allocator to top-level s254
lifting static allocator to top-level s255
lifting static allocator to top-level s256
lifting static allocator to top-level s257
lifting static allocator to top-level s258
lifting static allocator to top-level s259
lifting static allocator to top-level s260
lifting static allocator to top-level s261
lifting static allocator to top-level s262
lifting static allocator to top-level s263
lifting static allocator to top-level s264
applied left monad law for t16468 <- return s14
applied left monad law for t16467 <- return s13
deriving specialized closure definition k708 for ClosAlloc using k447
rewrite: (u ! c) ! y==> (u ! y) ! c
constant folding for and
applied left monad law for t18617 <- return 32
applied left monad law for t16500 <- return s221
rewriting s221 @ [t16484]
liveness replaced t16489 with a wildcard
applied left monad law for t16519 <- return Just
applied left monad law for t16518 <- return Nothing
deriving specialized closure definition k709 for ClosAlloc using k453
applied left monad law for t16544 <- return s222
rewriting s222 @ [t16536]
constant folding for add
applied left monad law for t18881 <- return 1021
constant folding for and
applied left monad law for t16673 <- return com1data
replacing reference to top level com1data with 1016
rewrite: (u ! c) ! y==> (u ! y) ! c
rewrite: (u ! c) ! y==> (u ! y) ! c
applied left monad law for t16728 <- return s223
rewriting s223 @ [t16709]
liveness replaced t16718 with a wildcard
liveness replaced t16714 with a wildcard
rewrite: (u ! c) ! y==> (u ! y) ! c
constant folding for and
applied left monad law for t18627 <- return 32
applied left monad law for t16752 <- return s224
rewriting s224 @ [t16736]
liveness replaced t16741 with a wildcard
rewriting t16765 @ [t16761]
liveness replaced t16765 with a wildcard
applied left monad law for t16787 <- return s225
rewriting s225 @ [t16771]
applied left monad law for t16806 <- return s226
rewriting s226 @ [t16790]
rewrite: (u ! c) ! y==> (u ! y) ! c
applied left monad law for t16835 <- return s227
rewriting s227 @ [t16814]
liveness replaced t16819 with a wildcard
applied left monad law for t19173 <- return s39
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1926 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17129 -> t19460
applied left monad law for t17131 <- return t19460
liveness replaced t17129 with a wildcard
deriving specialized block b1928 for BlockCall to block b1752
rewriting Pair183944 0 t19460 -> t19461
applied left monad law for t17132 <- return t19461
rewriting Pair183944 1 t17124 -> t19466
applied left monad law for t17126 <- return t19466
deriving specialized block b1925 for BlockCall to block b1753
liveness replaced t19170 with a wildcard
liveness replaced t17124 with a wildcard
deriving specialized block b1931 for BlockCall to block b949
liveness replaced t17116 with a wildcard
deriving specialized block b1930 for BlockCall to block b1037
eliminating duplicate args in call within b1037
deriving specialized block b1931 for BlockCall to block b949
liveness replaced t17112 with a wildcard
deriving specialized block b1933 for BlockCall to block b1038
eliminating duplicate args in call within b1038
deriving specialized block b1929 for BlockCall to block b1928
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b1927 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b1925 for BlockCall to block b1753
liveness replaced t19170 with a wildcard
applied left monad law for t16644 <- return s20
applied left monad law for t16643 <- return s19
deriving specialized closure definition k710 for ClosAlloc using k475
applied left monad law for t16882 <- return s20
applied left monad law for t16881 <- return s19
deriving specialized closure definition k711 for ClosAlloc using k494
applied left monad law for t16900 <- return s228
rewriting s228 @ [0]
applied left monad law for t16913 <- return s229
rewriting s229 @ [0]
applied left monad law for t16924 <- return s230
rewriting s230 @ [t16920]
rewriting t19162 @ [0]
liveness replaced t19162 with a wildcard
liveness replaced t19161 with a wildcard
applied left monad law for t16935 <- return s231
rewriting s231 @ [0]
applied left monad law for t17050 <- return s235
rewriting s235 @ [t17044]
applied left monad law for t18922 <- return s236
rewriting s236 @ [0]
applied left monad law for t18927 <- return s237
rewriting s237 @ [0]
applied left monad law for t19169 <- return str3
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1938 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b1928 for BlockCall to block b1756
deriving specialized block b1929 for BlockCall to block b1928
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b1939 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b1937 for BlockCall to block b1757
liveness replaced t19176 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1941 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17155 -> t19490
applied left monad law for t17157 <- return t19490
liveness replaced t17155 with a wildcard
deriving specialized block b1943 for BlockCall to block b1759
rewriting Pair183944 0 t19490 -> t19491
applied left monad law for t17158 <- return t19491
rewriting Pair183944 1 t17174 -> t19496
applied left monad law for t17176 <- return t19496
deriving specialized block b1940 for BlockCall to block b1753
liveness replaced t19180 with a wildcard
liveness replaced t17174 with a wildcard
deriving specialized block b1946 for BlockCall to block b941
liveness replaced t17166 with a wildcard
deriving specialized block b1945 for BlockCall to block b1024
eliminating duplicate args in call within b1024
deriving specialized block b1946 for BlockCall to block b941
liveness replaced t17152 with a wildcard
deriving specialized block b1948 for BlockCall to block b1025
eliminating duplicate args in call within b1025
deriving specialized block b1944 for BlockCall to block b1943
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b1942 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b1940 for BlockCall to block b1753
liveness replaced t19180 with a wildcard
deriving specialized block b1940 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1951 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b1928 for BlockCall to block b1760
deriving specialized block b1929 for BlockCall to block b1928
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b1952 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b1950 for BlockCall to block b1757
liveness replaced t19183 with a wildcard
liveness replaced t19182 with a wildcard
deriving specialized block b1940 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1954 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b1928 for BlockCall to block b1761
deriving specialized block b1929 for BlockCall to block b1928
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b1955 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b1953 for BlockCall to block b1757
liveness replaced t19186 with a wildcard
liveness replaced t19185 with a wildcard
applied left monad law for t19168 <- return str6
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1957 for BlockCall to block b1754
rewriting t19189 @ [t19190]
shorting out match on constructor Just172243
rewriting Just172243 0 t17200 -> t19524
applied left monad law for t17203 <- return t19524
liveness replaced t17200 with a wildcard
deriving specialized block b1959 for BlockCall to block b1762
rewriting Pair183944 0 t19524 -> t19525
applied left monad law for t17204 <- return t19525
rewriting Pair183944 1 t17188 -> t19528
applied left monad law for t19184 <- return t19528
liveness replaced t17188 with a wildcard
deriving specialized block b1961 for BlockCall to block b1374
eliminating duplicate args in call within b1374
rewriting Pair183944 1 t17180 -> t19542
applied left monad law for t19181 <- return t19542
liveness replaced t17180 with a wildcard
deriving specialized block b1963 for BlockCall to block b1375
eliminating duplicate args in call within b1375
deriving specialized block b1960 for BlockCall to block b1959
liveness replaced t19190 with a wildcard
liveness replaced t19189 with a wildcard
deriving specialized block b1958 for BlockCall to block b1764
liveness replaced t19188 with a wildcard
deriving specialized block b1956 for BlockCall to block b1763
liveness replaced t19187 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1966 for BlockCall to block b1754
rewriting t19189 @ [t19190]
shorting out match on constructor Just172243
deriving specialized block b1943 for BlockCall to block b1765
deriving specialized block b1944 for BlockCall to block b1943
liveness replaced t19190 with a wildcard
liveness replaced t19189 with a wildcard
deriving specialized block b1967 for BlockCall to block b1764
liveness replaced t19188 with a wildcard
deriving specialized block b1965 for BlockCall to block b1763
liveness replaced t19191 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1969 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17230 -> t19558
applied left monad law for t17232 <- return t19558
liveness replaced t17230 with a wildcard
deriving specialized block b1971 for BlockCall to block b1766
rewriting Pair183944 0 t19558 -> t19559
applied left monad law for t17233 <- return t19559
rewriting Pair183944 1 t17249 -> t19564
applied left monad law for t17251 <- return t19564
deriving specialized block b1968 for BlockCall to block b1753
liveness replaced t19192 with a wildcard
liveness replaced t17249 with a wildcard
deriving specialized block b1974 for BlockCall to block b945
liveness replaced t17241 with a wildcard
deriving specialized block b1973 for BlockCall to block b1028
eliminating duplicate args in call within b1028
deriving specialized block b1974 for BlockCall to block b945
liveness replaced t17227 with a wildcard
deriving specialized block b1976 for BlockCall to block b1029
eliminating duplicate args in call within b1029
deriving specialized block b1972 for BlockCall to block b1971
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b1970 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b1968 for BlockCall to block b1753
liveness replaced t19192 with a wildcard
deriving specialized block b1968 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1979 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b1928 for BlockCall to block b1767
deriving specialized block b1929 for BlockCall to block b1928
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b1980 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b1978 for BlockCall to block b1757
liveness replaced t19195 with a wildcard
liveness replaced t19194 with a wildcard
deriving specialized block b1968 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1982 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b1928 for BlockCall to block b1768
deriving specialized block b1929 for BlockCall to block b1928
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b1983 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b1981 for BlockCall to block b1757
liveness replaced t19198 with a wildcard
liveness replaced t19197 with a wildcard
applied left monad law for t19167 <- return str5
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1985 for BlockCall to block b1754
rewriting t19201 @ [t19202]
shorting out match on constructor Just172243
rewriting Just172243 0 t17275 -> t19592
applied left monad law for t17278 <- return t19592
liveness replaced t17275 with a wildcard
deriving specialized block b1987 for BlockCall to block b1769
rewriting Pair183944 0 t19592 -> t19593
applied left monad law for t17279 <- return t19593
rewriting Pair183944 1 t17263 -> t19596
applied left monad law for t19196 <- return t19596
liveness replaced t17263 with a wildcard
deriving specialized block b1989 for BlockCall to block b1377
eliminating duplicate args in call within b1377
rewriting Pair183944 1 t17255 -> t19610
applied left monad law for t19193 <- return t19610
liveness replaced t17255 with a wildcard
deriving specialized block b1991 for BlockCall to block b1378
eliminating duplicate args in call within b1378
deriving specialized block b1988 for BlockCall to block b1987
liveness replaced t19202 with a wildcard
liveness replaced t19201 with a wildcard
deriving specialized block b1986 for BlockCall to block b1771
liveness replaced t19200 with a wildcard
deriving specialized block b1984 for BlockCall to block b1770
liveness replaced t19199 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1994 for BlockCall to block b1754
rewriting t19201 @ [t19202]
shorting out match on constructor Just172243
deriving specialized block b1971 for BlockCall to block b1772
deriving specialized block b1972 for BlockCall to block b1971
liveness replaced t19202 with a wildcard
liveness replaced t19201 with a wildcard
deriving specialized block b1995 for BlockCall to block b1771
liveness replaced t19200 with a wildcard
deriving specialized block b1993 for BlockCall to block b1770
liveness replaced t19203 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b1997 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17305 -> t19626
applied left monad law for t17307 <- return t19626
liveness replaced t17305 with a wildcard
deriving specialized block b1999 for BlockCall to block b1773
rewriting Pair183944 0 t19626 -> t19627
applied left monad law for t17308 <- return t19627
rewriting Pair183944 1 t17324 -> t19632
applied left monad law for t17326 <- return t19632
deriving specialized block b1996 for BlockCall to block b1753
liveness replaced t19204 with a wildcard
liveness replaced t17324 with a wildcard
deriving specialized block b2002 for BlockCall to block b946
liveness replaced t17316 with a wildcard
deriving specialized block b2001 for BlockCall to block b1032
eliminating duplicate args in call within b1032
deriving specialized block b2002 for BlockCall to block b946
liveness replaced t17302 with a wildcard
deriving specialized block b2004 for BlockCall to block b1033
eliminating duplicate args in call within b1033
deriving specialized block b2000 for BlockCall to block b1999
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b1998 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b1996 for BlockCall to block b1753
liveness replaced t19204 with a wildcard
deriving specialized block b1996 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2007 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b1928 for BlockCall to block b1774
deriving specialized block b1929 for BlockCall to block b1928
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b2008 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b2006 for BlockCall to block b1757
liveness replaced t19207 with a wildcard
liveness replaced t19206 with a wildcard
deriving specialized block b1996 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2010 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b1928 for BlockCall to block b1775
deriving specialized block b1929 for BlockCall to block b1928
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b2011 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b2009 for BlockCall to block b1757
liveness replaced t19210 with a wildcard
liveness replaced t19209 with a wildcard
applied left monad law for t19166 <- return str4
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2013 for BlockCall to block b1754
rewriting t19213 @ [t19214]
shorting out match on constructor Just172243
rewriting Just172243 0 t17350 -> t19660
applied left monad law for t17353 <- return t19660
liveness replaced t17350 with a wildcard
deriving specialized block b2015 for BlockCall to block b1776
rewriting Pair183944 0 t19660 -> t19661
applied left monad law for t17354 <- return t19661
rewriting Pair183944 1 t17338 -> t19664
applied left monad law for t19208 <- return t19664
liveness replaced t17338 with a wildcard
deriving specialized block b2017 for BlockCall to block b1380
eliminating duplicate args in call within b1380
rewriting Pair183944 1 t17330 -> t19678
applied left monad law for t19205 <- return t19678
liveness replaced t17330 with a wildcard
deriving specialized block b2019 for BlockCall to block b1381
eliminating duplicate args in call within b1381
deriving specialized block b2016 for BlockCall to block b2015
liveness replaced t19214 with a wildcard
liveness replaced t19213 with a wildcard
deriving specialized block b2014 for BlockCall to block b1778
liveness replaced t19212 with a wildcard
deriving specialized block b2012 for BlockCall to block b1777
liveness replaced t19211 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2022 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17386 -> t19694
applied left monad law for t17389 <- return t19694
liveness replaced t17386 with a wildcard
deriving specialized block b2024 for BlockCall to block b1779
rewriting Pair183944 0 t19694 -> t19695
applied left monad law for t17390 <- return t19695
rewriting Pair183944 1 t17380 -> t19700
applied left monad law for t17383 <- return t19700
deriving specialized block b2021 for BlockCall to block b1753
liveness replaced t19215 with a wildcard
liveness replaced t17380 with a wildcard
deriving specialized block b2027 for BlockCall to block b1073
liveness replaced t17371 with a wildcard
deriving specialized block b2026 for BlockCall to block b1072
eliminating duplicate args in call within b1072
deriving specialized block b2027 for BlockCall to block b1073
liveness replaced t17366 with a wildcard
deriving specialized block b2029 for BlockCall to block b1074
eliminating duplicate args in call within b1074
deriving specialized block b2025 for BlockCall to block b2024
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2023 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2021 for BlockCall to block b1753
liveness replaced t19215 with a wildcard
applied left monad law for t16967 <- return s232
rewriting s232 @ [t16961]
applied left monad law for t18903 <- return s233
rewriting s233 @ [0]
applied left monad law for t18908 <- return s234
rewriting s234 @ [0]
applied left monad law for t19165 <- return str2
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2032 for BlockCall to block b1754
rewriting t19218 @ [t19219]
shorting out match on constructor Just172243
deriving specialized block b2024 for BlockCall to block b1780
deriving specialized block b2025 for BlockCall to block b2024
liveness replaced t19219 with a wildcard
liveness replaced t19218 with a wildcard
deriving specialized block b2033 for BlockCall to block b1782
liveness replaced t19217 with a wildcard
deriving specialized block b2031 for BlockCall to block b1781
liveness replaced t19216 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2035 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17423 -> t19730
applied left monad law for t17426 <- return t19730
liveness replaced t17423 with a wildcard
deriving specialized block b2037 for BlockCall to block b1783
rewriting Pair183944 0 t19730 -> t19731
applied left monad law for t17427 <- return t19731
rewriting Pair183944 1 t17417 -> t19736
applied left monad law for t17420 <- return t19736
deriving specialized block b2034 for BlockCall to block b1753
liveness replaced t19220 with a wildcard
liveness replaced t17417 with a wildcard
deriving specialized block b2040 for BlockCall to block b1079
liveness replaced t17408 with a wildcard
deriving specialized block b2039 for BlockCall to block b1078
eliminating duplicate args in call within b1078
deriving specialized block b2040 for BlockCall to block b1079
liveness replaced t17403 with a wildcard
deriving specialized block b2042 for BlockCall to block b1080
eliminating duplicate args in call within b1080
deriving specialized block b2038 for BlockCall to block b2037
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2036 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2034 for BlockCall to block b1753
liveness replaced t19220 with a wildcard
applied left monad law for t19159 <- return str1
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2045 for BlockCall to block b1754
rewriting t19223 @ [t19224]
shorting out match on constructor Just172243
deriving specialized block b2037 for BlockCall to block b1784
deriving specialized block b2038 for BlockCall to block b2037
liveness replaced t19224 with a wildcard
liveness replaced t19223 with a wildcard
deriving specialized block b2046 for BlockCall to block b1786
liveness replaced t19222 with a wildcard
deriving specialized block b2044 for BlockCall to block b1785
liveness replaced t19221 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2048 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17438 -> t19766
applied left monad law for t17441 <- return t19766
deriving specialized block b2047 for BlockCall to block b1753
liveness replaced t19225 with a wildcard
liveness replaced t17438 with a wildcard
deriving specialized block b2050 for BlockCall to block b1787
rewriting Pair183944 0 t19766 -> t19767
applied left monad law for t17442 <- return t19767
rewriting Pair183944 1 t19766 -> t19768
applied left monad law for t17444 <- return t19768
deriving specialized block b2051 for BlockCall to block b2050
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2049 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2047 for BlockCall to block b1753
liveness replaced t19225 with a wildcard
applied left monad law for t19158 <- return str11
applied left monad law for t19239 <- return s23
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2053 for BlockCall to block b1754
rewriting t19228 @ [t19229]
shorting out match on constructor Just172243
deriving specialized block b2050 for BlockCall to block b1788
deriving specialized block b2051 for BlockCall to block b2050
liveness replaced t19229 with a wildcard
liveness replaced t19228 with a wildcard
deriving specialized block b2054 for BlockCall to block b1790
liveness replaced t19227 with a wildcard
deriving specialized block b2052 for BlockCall to block b1789
liveness replaced t19226 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2056 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17472 -> t19781
applied left monad law for t17475 <- return t19781
liveness replaced t17472 with a wildcard
deriving specialized block b2058 for BlockCall to block b1791
rewriting Pair183944 0 t19781 -> t19782
applied left monad law for t17476 <- return t19782
rewriting Pair183944 1 t17466 -> t19789
applied left monad law for t17469 <- return t19789
deriving specialized block b2055 for BlockCall to block b1753
liveness replaced t19230 with a wildcard
liveness replaced t17466 with a wildcard
deriving specialized block b2062 for BlockCall to block b1087
liveness replaced t17457 with a wildcard
deriving specialized block b2061 for BlockCall to block b1086
deriving specialized block b2062 for BlockCall to block b1087
liveness replaced t17452 with a wildcard
deriving specialized block b2063 for BlockCall to block b1090
liveness replaced t17478 with a wildcard
deriving specialized block b2060 for BlockCall to block b1085
eliminating duplicate args in call within b1085
deriving specialized block b2059 for BlockCall to block b2058
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2057 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2055 for BlockCall to block b1753
liveness replaced t19230 with a wildcard
applied left monad law for t19157 <- return str0
deriving specialized block b2052 for BlockCall to block b1789
liveness replaced t19231 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2066 for BlockCall to block b1754
rewriting t19234 @ [t19235]
shorting out match on constructor Just172243
rewriting Just172243 0 t17499 -> t19810
applied left monad law for t17503 <- return t19810
liveness replaced t17499 with a wildcard
deriving specialized block b2068 for BlockCall to block b1792
rewriting Pair183944 0 t19810 -> t19811
applied left monad law for t17504 <- return t19811
deriving specialized block b2060 for BlockCall to block b1085
eliminating duplicate args in call within b1085
deriving specialized block b2069 for BlockCall to block b2068
liveness replaced t19235 with a wildcard
liveness replaced t19234 with a wildcard
deriving specialized block b2067 for BlockCall to block b1794
liveness replaced t19233 with a wildcard
deriving specialized block b2065 for BlockCall to block b1793
liveness replaced t19232 with a wildcard
rewriting t19238 @ [s23]
shorting out match on constructor Nothing73447
liveness replaced t19238 with a wildcard
deriving specialized block b2071 for BlockCall to block b1797
rewriting t19240 @ [t19241]
shorting out match on constructor Just83548
rewriting Just83548 0 t17493 -> t19816
applied left monad law for t17495 <- return t19816
liveness replaced t17493 with a wildcard
deriving specialized block b2073 for BlockCall to block b1795
rewriting Pair63349 0 t19816 -> t19817
applied left monad law for t17496 <- return t19817
deriving specialized closure definition k712 for ClosAlloc using k612
deriving specialized closure definition k712 for ClosAlloc using k612
deriving specialized closure definition k712 for ClosAlloc using k612
rewriting Pair63349 1 t17489 -> t19831
applied left monad law for t17491 <- return t19831
rewriting Pair63349 2 t17489 -> t19832
applied left monad law for t17492 <- return t19832
liveness replaced t17489 with a wildcard
deriving specialized block b2078 for BlockCall to block b1062
liveness replaced t19804 with a wildcard
deriving specialized block b2077 for BlockCall to block b2066
deriving specialized closure definition k712 for ClosAlloc using k612
rewriting Pair63349 1 t17502 -> t19837
applied left monad law for t17506 <- return t19837
rewriting Pair63349 2 t17502 -> t19838
applied left monad law for t17507 <- return t19838
liveness replaced t17502 with a wildcard
deriving specialized block b2080 for BlockCall to block b2069
liveness replaced t19807 with a wildcard
deriving specialized block b2079 for BlockCall to block b2067
liveness replaced t19801 with a wildcard
deriving specialized block b2076 for BlockCall to block b2065
eliminating duplicate args in call within b2065
deriving specialized block b2074 for BlockCall to block b2073
liveness replaced t19241 with a wildcard
liveness replaced t19240 with a wildcard
deriving specialized block b2072 for BlockCall to block b1798
liveness replaced t19237 with a wildcard
deriving specialized block b2070 for BlockCall to block b1796
liveness replaced t19236 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2083 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17535 -> t19850
applied left monad law for t17537 <- return t19850
liveness replaced t17535 with a wildcard
deriving specialized block b2085 for BlockCall to block b1799
rewriting Pair183944 0 t19850 -> t19851
applied left monad law for t17538 <- return t19851
rewriting Pair183944 1 t17530 -> t19856
applied left monad law for t17532 <- return t19856
deriving specialized block b2082 for BlockCall to block b1753
liveness replaced t19247 with a wildcard
liveness replaced t17530 with a wildcard
deriving specialized block b2088 for BlockCall to block b961
liveness replaced t17522 with a wildcard
deriving specialized block b2087 for BlockCall to block b1101
eliminating duplicate args in call within b1101
deriving specialized block b2088 for BlockCall to block b961
liveness replaced t17518 with a wildcard
deriving specialized block b2090 for BlockCall to block b1102
eliminating duplicate args in call within b1102
deriving specialized block b2086 for BlockCall to block b2085
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2084 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2082 for BlockCall to block b1753
liveness replaced t19247 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2093 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b2085 for BlockCall to block b1800
deriving specialized block b2086 for BlockCall to block b2085
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b2094 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b2092 for BlockCall to block b1757
liveness replaced t19248 with a wildcard
applied left monad law for t19249 <- return s238
applied left monad law for t19171 <- return s238
applied left monad law for t19172 <- return s238
rewriting s238 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2096 for BlockCall to block b1754
applied left monad law for t19174 <- return s238
rewriting s238 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17563 -> t19875
applied left monad law for t17564 <- return t19875
liveness replaced t17563 with a wildcard
deriving specialized block b2098 for BlockCall to block b1801
rewriting Pair183944 0 t19875 -> t19876
applied left monad law for t17565 <- return t19876
rewriting Pair183944 1 t17559 -> t19883
applied left monad law for t17560 <- return t19883
applied left monad law for t19249 <- return s238
deriving specialized block b2095 for BlockCall to block b1753
liveness replaced t17559 with a wildcard
deriving specialized block b2102 for BlockCall to block b947
liveness replaced t17552 with a wildcard
deriving specialized block b2101 for BlockCall to block b1004
deriving specialized block b2102 for BlockCall to block b947
liveness replaced t17549 with a wildcard
deriving specialized block b2103 for BlockCall to block b1005
liveness replaced t17567 with a wildcard
deriving specialized block b2100 for BlockCall to block b1003
eliminating duplicate args in call within b1003
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19175 with a wildcard
deriving specialized block b2097 for BlockCall to block b1755
deriving specialized block b2095 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2106 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b2085 for BlockCall to block b1802
deriving specialized block b2086 for BlockCall to block b2085
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b2107 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b2105 for BlockCall to block b1757
liveness replaced t19250 with a wildcard
applied left monad law for t19246 <- return str9
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2109 for BlockCall to block b1754
rewriting t19253 @ [t19254]
shorting out match on constructor Just172243
rewriting Just172243 0 t17574 -> t19899
applied left monad law for t17576 <- return t19899
liveness replaced t17574 with a wildcard
deriving specialized block b2111 for BlockCall to block b1803
rewriting Pair183944 0 t19899 -> t19900
applied left monad law for t17577 <- return t19900
deriving specialized block b2100 for BlockCall to block b1003
eliminating duplicate args in call within b1003
deriving specialized block b2112 for BlockCall to block b2111
liveness replaced t19254 with a wildcard
liveness replaced t19253 with a wildcard
deriving specialized block b2110 for BlockCall to block b1805
liveness replaced t19252 with a wildcard
deriving specialized block b2108 for BlockCall to block b1804
liveness replaced t19251 with a wildcard
applied left monad law for t19255 <- return s239
applied left monad law for t19252 <- return s239
applied left monad law for t19172 <- return s239
rewriting s239 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2114 for BlockCall to block b1754
applied left monad law for t19253 <- return s239
rewriting s239 @ [t19254]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1806
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19254 with a wildcard
deriving specialized block b2115 for BlockCall to block b1805
deriving specialized block b2113 for BlockCall to block b1804
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2117 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17600 -> t19905
applied left monad law for t17602 <- return t19905
liveness replaced t17600 with a wildcard
deriving specialized block b2119 for BlockCall to block b1807
rewriting Pair183944 0 t19905 -> t19906
applied left monad law for t17603 <- return t19906
rewriting Pair183944 1 t17619 -> t19911
applied left monad law for t17621 <- return t19911
deriving specialized block b2116 for BlockCall to block b1753
liveness replaced t19256 with a wildcard
liveness replaced t17619 with a wildcard
deriving specialized block b2122 for BlockCall to block b959
liveness replaced t17611 with a wildcard
deriving specialized block b2121 for BlockCall to block b1093
eliminating duplicate args in call within b1093
deriving specialized block b2122 for BlockCall to block b959
liveness replaced t17597 with a wildcard
deriving specialized block b2124 for BlockCall to block b1094
eliminating duplicate args in call within b1094
deriving specialized block b2120 for BlockCall to block b2119
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2118 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2116 for BlockCall to block b1753
liveness replaced t19256 with a wildcard
deriving specialized block b2116 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2127 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b2085 for BlockCall to block b1808
deriving specialized block b2086 for BlockCall to block b2085
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b2128 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b2126 for BlockCall to block b1757
liveness replaced t19259 with a wildcard
liveness replaced t19258 with a wildcard
deriving specialized block b2116 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2130 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b2085 for BlockCall to block b1809
deriving specialized block b2086 for BlockCall to block b2085
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b2131 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b2129 for BlockCall to block b1757
liveness replaced t19262 with a wildcard
liveness replaced t19261 with a wildcard
applied left monad law for t19245 <- return str8
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2133 for BlockCall to block b1754
rewriting t19265 @ [t19266]
shorting out match on constructor Just172243
rewriting Just172243 0 t17645 -> t19939
applied left monad law for t17648 <- return t19939
liveness replaced t17645 with a wildcard
deriving specialized block b2135 for BlockCall to block b1810
rewriting Pair183944 0 t19939 -> t19940
applied left monad law for t17649 <- return t19940
rewriting Pair183944 1 t17633 -> t19943
applied left monad law for t19260 <- return t19943
liveness replaced t17633 with a wildcard
deriving specialized block b2137 for BlockCall to block b1390
eliminating duplicate args in call within b1390
rewriting Pair183944 1 t17625 -> t19957
applied left monad law for t19257 <- return t19957
liveness replaced t17625 with a wildcard
deriving specialized block b2139 for BlockCall to block b1391
eliminating duplicate args in call within b1391
deriving specialized block b2136 for BlockCall to block b2135
liveness replaced t19266 with a wildcard
liveness replaced t19265 with a wildcard
deriving specialized block b2134 for BlockCall to block b1812
liveness replaced t19264 with a wildcard
deriving specialized block b2132 for BlockCall to block b1811
liveness replaced t19263 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2142 for BlockCall to block b1754
rewriting t19265 @ [t19266]
shorting out match on constructor Just172243
deriving specialized block b2119 for BlockCall to block b1813
deriving specialized block b2120 for BlockCall to block b2119
liveness replaced t19266 with a wildcard
liveness replaced t19265 with a wildcard
deriving specialized block b2143 for BlockCall to block b1812
liveness replaced t19264 with a wildcard
deriving specialized block b2141 for BlockCall to block b1811
liveness replaced t19267 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2145 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17675 -> t19973
applied left monad law for t17677 <- return t19973
liveness replaced t17675 with a wildcard
deriving specialized block b2147 for BlockCall to block b1814
rewriting Pair183944 0 t19973 -> t19974
applied left monad law for t17678 <- return t19974
rewriting Pair183944 1 t17694 -> t19979
applied left monad law for t17696 <- return t19979
deriving specialized block b2144 for BlockCall to block b1753
liveness replaced t19268 with a wildcard
liveness replaced t17694 with a wildcard
deriving specialized block b2150 for BlockCall to block b960
liveness replaced t17686 with a wildcard
deriving specialized block b2149 for BlockCall to block b1097
eliminating duplicate args in call within b1097
deriving specialized block b2150 for BlockCall to block b960
liveness replaced t17672 with a wildcard
deriving specialized block b2152 for BlockCall to block b1098
eliminating duplicate args in call within b1098
deriving specialized block b2148 for BlockCall to block b2147
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2146 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2144 for BlockCall to block b1753
liveness replaced t19268 with a wildcard
deriving specialized block b2144 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2155 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b2085 for BlockCall to block b1815
deriving specialized block b2086 for BlockCall to block b2085
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b2156 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b2154 for BlockCall to block b1757
liveness replaced t19271 with a wildcard
liveness replaced t19270 with a wildcard
deriving specialized block b2144 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2158 for BlockCall to block b1754
rewriting t19178 @ [t19179]
shorting out match on constructor Just172243
deriving specialized block b2085 for BlockCall to block b1816
deriving specialized block b2086 for BlockCall to block b2085
liveness replaced t19179 with a wildcard
liveness replaced t19178 with a wildcard
deriving specialized block b2159 for BlockCall to block b1758
liveness replaced t19177 with a wildcard
deriving specialized block b2157 for BlockCall to block b1757
liveness replaced t19274 with a wildcard
liveness replaced t19273 with a wildcard
applied left monad law for t19244 <- return str7
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2161 for BlockCall to block b1754
rewriting t19277 @ [t19278]
shorting out match on constructor Just172243
rewriting Just172243 0 t17720 -> t20007
applied left monad law for t17723 <- return t20007
liveness replaced t17720 with a wildcard
deriving specialized block b2163 for BlockCall to block b1817
rewriting Pair183944 0 t20007 -> t20008
applied left monad law for t17724 <- return t20008
rewriting Pair183944 1 t17708 -> t20011
applied left monad law for t19272 <- return t20011
liveness replaced t17708 with a wildcard
deriving specialized block b2165 for BlockCall to block b1393
eliminating duplicate args in call within b1393
rewriting Pair183944 1 t17700 -> t20025
applied left monad law for t19269 <- return t20025
liveness replaced t17700 with a wildcard
deriving specialized block b2167 for BlockCall to block b1394
eliminating duplicate args in call within b1394
deriving specialized block b2164 for BlockCall to block b2163
liveness replaced t19278 with a wildcard
liveness replaced t19277 with a wildcard
deriving specialized block b2162 for BlockCall to block b1819
liveness replaced t19276 with a wildcard
deriving specialized block b2160 for BlockCall to block b1818
liveness replaced t19275 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2170 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17756 -> t20041
applied left monad law for t17759 <- return t20041
liveness replaced t17756 with a wildcard
deriving specialized block b2172 for BlockCall to block b1820
rewriting Pair183944 0 t20041 -> t20042
applied left monad law for t17760 <- return t20042
rewriting Pair183944 1 t17750 -> t20047
applied left monad law for t17753 <- return t20047
deriving specialized block b2169 for BlockCall to block b1753
liveness replaced t19279 with a wildcard
liveness replaced t17750 with a wildcard
deriving specialized block b2175 for BlockCall to block b1137
liveness replaced t17741 with a wildcard
deriving specialized block b2174 for BlockCall to block b1136
eliminating duplicate args in call within b1136
deriving specialized block b2175 for BlockCall to block b1137
liveness replaced t17736 with a wildcard
deriving specialized block b2177 for BlockCall to block b1138
eliminating duplicate args in call within b1138
deriving specialized block b2173 for BlockCall to block b2172
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2171 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2169 for BlockCall to block b1753
liveness replaced t19279 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2180 for BlockCall to block b1754
rewriting t19218 @ [t19219]
shorting out match on constructor Just172243
deriving specialized block b2172 for BlockCall to block b1821
deriving specialized block b2173 for BlockCall to block b2172
liveness replaced t19219 with a wildcard
liveness replaced t19218 with a wildcard
deriving specialized block b2181 for BlockCall to block b1782
liveness replaced t19217 with a wildcard
deriving specialized block b2179 for BlockCall to block b1781
liveness replaced t19280 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2183 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17793 -> t20077
applied left monad law for t17796 <- return t20077
liveness replaced t17793 with a wildcard
deriving specialized block b2185 for BlockCall to block b1822
rewriting Pair183944 0 t20077 -> t20078
applied left monad law for t17797 <- return t20078
rewriting Pair183944 1 t17787 -> t20083
applied left monad law for t17790 <- return t20083
deriving specialized block b2182 for BlockCall to block b1753
liveness replaced t19281 with a wildcard
liveness replaced t17787 with a wildcard
deriving specialized block b2188 for BlockCall to block b1143
liveness replaced t17778 with a wildcard
deriving specialized block b2187 for BlockCall to block b1142
eliminating duplicate args in call within b1142
deriving specialized block b2188 for BlockCall to block b1143
liveness replaced t17773 with a wildcard
deriving specialized block b2190 for BlockCall to block b1144
eliminating duplicate args in call within b1144
deriving specialized block b2186 for BlockCall to block b2185
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2184 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2182 for BlockCall to block b1753
liveness replaced t19281 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2193 for BlockCall to block b1754
rewriting t19223 @ [t19224]
shorting out match on constructor Just172243
deriving specialized block b2185 for BlockCall to block b1823
deriving specialized block b2186 for BlockCall to block b2185
liveness replaced t19224 with a wildcard
liveness replaced t19223 with a wildcard
deriving specialized block b2194 for BlockCall to block b1786
liveness replaced t19222 with a wildcard
deriving specialized block b2192 for BlockCall to block b1785
liveness replaced t19282 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2196 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17808 -> t20113
applied left monad law for t17811 <- return t20113
deriving specialized block b2195 for BlockCall to block b1753
liveness replaced t19283 with a wildcard
liveness replaced t17808 with a wildcard
deriving specialized block b2198 for BlockCall to block b1824
rewriting Pair183944 0 t20113 -> t20114
applied left monad law for t17812 <- return t20114
rewriting Pair183944 1 t20113 -> t20115
applied left monad law for t17814 <- return t20115
deriving specialized block b2199 for BlockCall to block b2198
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2197 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2195 for BlockCall to block b1753
liveness replaced t19283 with a wildcard
applied left monad law for t19243 <- return str13
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2201 for BlockCall to block b1754
rewriting t19286 @ [t19287]
shorting out match on constructor Just172243
deriving specialized block b2198 for BlockCall to block b1825
deriving specialized block b2199 for BlockCall to block b2198
liveness replaced t19287 with a wildcard
liveness replaced t19286 with a wildcard
deriving specialized block b2202 for BlockCall to block b1827
liveness replaced t19285 with a wildcard
deriving specialized block b2200 for BlockCall to block b1826
liveness replaced t19284 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2204 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17842 -> t20128
applied left monad law for t17845 <- return t20128
liveness replaced t17842 with a wildcard
deriving specialized block b2206 for BlockCall to block b1828
rewriting Pair183944 0 t20128 -> t20129
applied left monad law for t17846 <- return t20129
rewriting Pair183944 1 t17836 -> t20136
applied left monad law for t17839 <- return t20136
deriving specialized block b2203 for BlockCall to block b1753
liveness replaced t19288 with a wildcard
liveness replaced t17836 with a wildcard
deriving specialized block b2210 for BlockCall to block b1151
liveness replaced t17827 with a wildcard
deriving specialized block b2209 for BlockCall to block b1150
deriving specialized block b2210 for BlockCall to block b1151
liveness replaced t17822 with a wildcard
deriving specialized block b2211 for BlockCall to block b1154
liveness replaced t17848 with a wildcard
deriving specialized block b2208 for BlockCall to block b1149
eliminating duplicate args in call within b1149
deriving specialized block b2207 for BlockCall to block b2206
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2205 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2203 for BlockCall to block b1753
liveness replaced t19288 with a wildcard
deriving specialized block b2200 for BlockCall to block b1826
liveness replaced t19289 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2214 for BlockCall to block b1754
rewriting t19234 @ [t19235]
shorting out match on constructor Just172243
rewriting Just172243 0 t17869 -> t20157
applied left monad law for t17873 <- return t20157
liveness replaced t17869 with a wildcard
deriving specialized block b2216 for BlockCall to block b1829
rewriting Pair183944 0 t20157 -> t20158
applied left monad law for t17874 <- return t20158
deriving specialized block b2208 for BlockCall to block b1149
eliminating duplicate args in call within b1149
deriving specialized block b2217 for BlockCall to block b2216
liveness replaced t19235 with a wildcard
liveness replaced t19234 with a wildcard
deriving specialized block b2215 for BlockCall to block b1794
liveness replaced t19233 with a wildcard
deriving specialized block b2213 for BlockCall to block b1793
liveness replaced t19290 with a wildcard
rewriting t19238 @ [s23]
shorting out match on constructor Nothing73447
liveness replaced t19238 with a wildcard
deriving specialized block b2219 for BlockCall to block b1797
rewriting t19240 @ [t19241]
shorting out match on constructor Just83548
rewriting Just83548 0 t17863 -> t20163
applied left monad law for t17865 <- return t20163
liveness replaced t17863 with a wildcard
deriving specialized block b2221 for BlockCall to block b1830
rewriting Pair63349 0 t20163 -> t20164
applied left monad law for t17866 <- return t20164
deriving specialized closure definition k713 for ClosAlloc using k636
deriving specialized closure definition k713 for ClosAlloc using k636
deriving specialized closure definition k713 for ClosAlloc using k636
rewriting Pair63349 1 t17859 -> t20178
applied left monad law for t17861 <- return t20178
rewriting Pair63349 2 t17859 -> t20179
applied left monad law for t17862 <- return t20179
liveness replaced t17859 with a wildcard
deriving specialized block b2226 for BlockCall to block b1126
liveness replaced t20151 with a wildcard
deriving specialized block b2225 for BlockCall to block b2214
deriving specialized closure definition k713 for ClosAlloc using k636
rewriting Pair63349 1 t17872 -> t20184
applied left monad law for t17876 <- return t20184
rewriting Pair63349 2 t17872 -> t20185
applied left monad law for t17877 <- return t20185
liveness replaced t17872 with a wildcard
deriving specialized block b2228 for BlockCall to block b2217
liveness replaced t20154 with a wildcard
deriving specialized block b2227 for BlockCall to block b2215
liveness replaced t20148 with a wildcard
deriving specialized block b2224 for BlockCall to block b2213
eliminating duplicate args in call within b2213
deriving specialized block b2222 for BlockCall to block b2221
liveness replaced t19241 with a wildcard
liveness replaced t19240 with a wildcard
deriving specialized block b2220 for BlockCall to block b1798
liveness replaced t19237 with a wildcard
deriving specialized block b2218 for BlockCall to block b1796
liveness replaced t19291 with a wildcard
applied left monad law for t19299 <- return str22
applied left monad law for t19300 <- return s240
applied left monad law for t19301 <- return s240
applied left monad law for t19172 <- return s240
rewriting s240 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2231 for BlockCall to block b1754
applied left monad law for t19302 <- return s240
rewriting s240 @ [t19303]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1831
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19303 with a wildcard
deriving specialized block b2232 for BlockCall to block b1833
deriving specialized block b2230 for BlockCall to block b1832
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2234 for BlockCall to block b1754
rewriting t19302 @ [t19303]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1834
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19303 with a wildcard
liveness replaced t19302 with a wildcard
deriving specialized block b2235 for BlockCall to block b1833
liveness replaced t19301 with a wildcard
deriving specialized block b2233 for BlockCall to block b1832
liveness replaced t19304 with a wildcard
applied left monad law for t19297 <- return str20
applied left monad law for t19305 <- return s241
applied left monad law for t19306 <- return s241
applied left monad law for t19172 <- return s241
rewriting s241 @ [s39]
shorting out match on constructor Nothing162142
elided call to goto block b1331
deriving specialized block b2237 for BlockCall to block b1754
applied left monad law for t19307 <- return s241
rewriting s241 @ [t19308]
shorting out match on constructor Just172243
rewriting Just172243 0 t17888 -> t20194
applied left monad law for t17889 <- return t20194
liveness replaced t17888 with a wildcard
deriving specialized block b2239 for BlockCall to block b1835
rewriting Pair183944 0 t20194 -> t20195
applied left monad law for t17890 <- return t20195
deriving specialized block b2100 for BlockCall to block b1003
eliminating duplicate args in call within b1003
deriving specialized block b2240 for BlockCall to block b2239
liveness replaced t19308 with a wildcard
deriving specialized block b2238 for BlockCall to block b1837
deriving specialized block b2236 for BlockCall to block b1836
applied left monad law for t19309 <- return s242
applied left monad law for t19306 <- return s242
applied left monad law for t19172 <- return s242
rewriting s242 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2242 for BlockCall to block b1754
applied left monad law for t19307 <- return s242
rewriting s242 @ [t19308]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1838
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19308 with a wildcard
deriving specialized block b2243 for BlockCall to block b1837
deriving specialized block b2241 for BlockCall to block b1836
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2245 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17908 -> t20200
applied left monad law for t17910 <- return t20200
liveness replaced t17908 with a wildcard
deriving specialized block b2247 for BlockCall to block b1839
rewriting Pair183944 0 t20200 -> t20201
applied left monad law for t17911 <- return t20201
rewriting Pair183944 1 t17927 -> t20206
applied left monad law for t17929 <- return t20206
deriving specialized block b2244 for BlockCall to block b1753
liveness replaced t19310 with a wildcard
liveness replaced t17927 with a wildcard
deriving specialized block b2250 for BlockCall to block b970
liveness replaced t17919 with a wildcard
deriving specialized block b2249 for BlockCall to block b1157
eliminating duplicate args in call within b1157
deriving specialized block b2250 for BlockCall to block b970
liveness replaced t17905 with a wildcard
deriving specialized block b2252 for BlockCall to block b1158
eliminating duplicate args in call within b1158
deriving specialized block b2248 for BlockCall to block b2247
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2246 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2244 for BlockCall to block b1753
liveness replaced t19310 with a wildcard
deriving specialized block b2244 for BlockCall to block b1753
applied left monad law for t19313 <- return s243
applied left monad law for t19301 <- return s243
applied left monad law for t19172 <- return s243
rewriting s243 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2255 for BlockCall to block b1754
applied left monad law for t19302 <- return s243
rewriting s243 @ [t19303]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1840
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19303 with a wildcard
deriving specialized block b2256 for BlockCall to block b1833
deriving specialized block b2254 for BlockCall to block b1832
liveness replaced t19312 with a wildcard
deriving specialized block b2244 for BlockCall to block b1753
applied left monad law for t19316 <- return s244
applied left monad law for t19301 <- return s244
applied left monad law for t19172 <- return s244
rewriting s244 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2258 for BlockCall to block b1754
applied left monad law for t19302 <- return s244
rewriting s244 @ [t19303]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1841
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19303 with a wildcard
deriving specialized block b2259 for BlockCall to block b1833
deriving specialized block b2257 for BlockCall to block b1832
liveness replaced t19315 with a wildcard
applied left monad law for t19296 <- return str19
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2261 for BlockCall to block b1754
rewriting t19319 @ [t19320]
shorting out match on constructor Just172243
rewriting Just172243 0 t17951 -> t20225
applied left monad law for t17953 <- return t20225
liveness replaced t17951 with a wildcard
deriving specialized block b2263 for BlockCall to block b1842
rewriting Pair183944 0 t20225 -> t20226
applied left monad law for t17954 <- return t20226
rewriting Pair183944 1 t17940 -> t20229
applied left monad law for t19314 <- return t20229
liveness replaced t17940 with a wildcard
deriving specialized block b2265 for BlockCall to block b1418
eliminating duplicate args in call within b1418
rewriting Pair183944 1 t17933 -> t20241
applied left monad law for t19311 <- return t20241
liveness replaced t17933 with a wildcard
deriving specialized block b2267 for BlockCall to block b1419
eliminating duplicate args in call within b1419
deriving specialized block b2264 for BlockCall to block b2263
liveness replaced t19320 with a wildcard
liveness replaced t19319 with a wildcard
deriving specialized block b2262 for BlockCall to block b1844
liveness replaced t19318 with a wildcard
deriving specialized block b2260 for BlockCall to block b1843
liveness replaced t19317 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2270 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17964 -> t20252
applied left monad law for t17966 <- return t20252
deriving specialized block b2269 for BlockCall to block b1753
liveness replaced t19321 with a wildcard
liveness replaced t17964 with a wildcard
deriving specialized block b2272 for BlockCall to block b1845
rewriting Pair183944 0 t20252 -> t20253
applied left monad law for t17967 <- return t20253
rewriting Pair183944 1 t20252 -> t20254
applied left monad law for t17969 <- return t20254
deriving specialized block b2273 for BlockCall to block b2272
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2271 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2269 for BlockCall to block b1753
liveness replaced t19321 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2275 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
deriving specialized block b2272 for BlockCall to block b1846
deriving specialized block b2273 for BlockCall to block b2272
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2276 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2274 for BlockCall to block b1753
eliminating duplicate args in call within b1753
liveness replaced t19322 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2279 for BlockCall to block b1754
rewriting t19319 @ [t19320]
shorting out match on constructor Just172243
deriving specialized block b2247 for BlockCall to block b1847
deriving specialized block b2248 for BlockCall to block b2247
liveness replaced t19320 with a wildcard
liveness replaced t19319 with a wildcard
deriving specialized block b2280 for BlockCall to block b1844
liveness replaced t19318 with a wildcard
deriving specialized block b2278 for BlockCall to block b1843
liveness replaced t19323 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2282 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17978 -> t20268
applied left monad law for t17980 <- return t20268
deriving specialized block b2281 for BlockCall to block b1753
liveness replaced t19324 with a wildcard
liveness replaced t17978 with a wildcard
deriving specialized block b2284 for BlockCall to block b1848
rewriting Pair183944 0 t20268 -> t20269
applied left monad law for t17981 <- return t20269
rewriting Pair183944 1 t20268 -> t20270
applied left monad law for t17983 <- return t20270
deriving specialized block b2285 for BlockCall to block b2284
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2283 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2281 for BlockCall to block b1753
liveness replaced t19324 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2287 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
deriving specialized block b2284 for BlockCall to block b1849
deriving specialized block b2285 for BlockCall to block b2284
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2288 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2286 for BlockCall to block b1753
eliminating duplicate args in call within b1753
liveness replaced t19325 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2291 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t17993 -> t20281
applied left monad law for t17995 <- return t20281
liveness replaced t17993 with a wildcard
deriving specialized block b2293 for BlockCall to block b1850
rewriting Pair183944 0 t20281 -> t20282
applied left monad law for t17996 <- return t20282
rewriting Pair183944 1 t18012 -> t20287
applied left monad law for t18014 <- return t20287
deriving specialized block b2290 for BlockCall to block b1753
liveness replaced t19326 with a wildcard
liveness replaced t18012 with a wildcard
deriving specialized block b2296 for BlockCall to block b972
liveness replaced t18004 with a wildcard
deriving specialized block b2295 for BlockCall to block b1165
eliminating duplicate args in call within b1165
deriving specialized block b2296 for BlockCall to block b972
liveness replaced t17990 with a wildcard
deriving specialized block b2298 for BlockCall to block b1166
eliminating duplicate args in call within b1166
deriving specialized block b2294 for BlockCall to block b2293
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2292 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2290 for BlockCall to block b1753
liveness replaced t19326 with a wildcard
deriving specialized block b2290 for BlockCall to block b1753
applied left monad law for t19329 <- return s245
applied left monad law for t19301 <- return s245
applied left monad law for t19172 <- return s245
rewriting s245 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2301 for BlockCall to block b1754
applied left monad law for t19302 <- return s245
rewriting s245 @ [t19303]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1851
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19303 with a wildcard
deriving specialized block b2302 for BlockCall to block b1833
deriving specialized block b2300 for BlockCall to block b1832
liveness replaced t19328 with a wildcard
deriving specialized block b2290 for BlockCall to block b1753
applied left monad law for t19332 <- return s246
applied left monad law for t19301 <- return s246
applied left monad law for t19172 <- return s246
rewriting s246 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2304 for BlockCall to block b1754
applied left monad law for t19302 <- return s246
rewriting s246 @ [t19303]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1852
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19303 with a wildcard
deriving specialized block b2305 for BlockCall to block b1833
deriving specialized block b2303 for BlockCall to block b1832
liveness replaced t19331 with a wildcard
applied left monad law for t19295 <- return str18
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2307 for BlockCall to block b1754
rewriting t19335 @ [t19336]
shorting out match on constructor Just172243
rewriting Just172243 0 t18036 -> t20306
applied left monad law for t18038 <- return t20306
liveness replaced t18036 with a wildcard
deriving specialized block b2309 for BlockCall to block b1853
rewriting Pair183944 0 t20306 -> t20307
applied left monad law for t18039 <- return t20307
rewriting Pair183944 1 t18025 -> t20310
applied left monad law for t19330 <- return t20310
liveness replaced t18025 with a wildcard
deriving specialized block b2311 for BlockCall to block b1422
eliminating duplicate args in call within b1422
rewriting Pair183944 1 t18018 -> t20322
applied left monad law for t19327 <- return t20322
liveness replaced t18018 with a wildcard
deriving specialized block b2313 for BlockCall to block b1423
eliminating duplicate args in call within b1423
deriving specialized block b2310 for BlockCall to block b2309
liveness replaced t19336 with a wildcard
liveness replaced t19335 with a wildcard
deriving specialized block b2308 for BlockCall to block b1855
liveness replaced t19334 with a wildcard
deriving specialized block b2306 for BlockCall to block b1854
liveness replaced t19333 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2316 for BlockCall to block b1754
rewriting t19335 @ [t19336]
shorting out match on constructor Just172243
deriving specialized block b2309 for BlockCall to block b1856
deriving specialized block b2310 for BlockCall to block b2309
liveness replaced t19336 with a wildcard
liveness replaced t19335 with a wildcard
deriving specialized block b2317 for BlockCall to block b1855
liveness replaced t19334 with a wildcard
deriving specialized block b2315 for BlockCall to block b1854
liveness replaced t19337 with a wildcard
applied left monad law for t19298 <- return str16
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2319 for BlockCall to block b1754
rewriting t19340 @ [t19341]
shorting out match on constructor Just172243
rewriting Just172243 0 t18049 -> t20336
applied left monad law for t18051 <- return t20336
liveness replaced t18049 with a wildcard
deriving specialized block b2321 for BlockCall to block b1857
rewriting Pair183944 0 t20336 -> t20337
applied left monad law for t18052 <- return t20337
deriving specialized block b2100 for BlockCall to block b1003
eliminating duplicate args in call within b1003
deriving specialized block b2322 for BlockCall to block b2321
liveness replaced t19341 with a wildcard
liveness replaced t19340 with a wildcard
deriving specialized block b2320 for BlockCall to block b1859
liveness replaced t19339 with a wildcard
deriving specialized block b2318 for BlockCall to block b1858
liveness replaced t19338 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2324 for BlockCall to block b1754
rewriting t19335 @ [t19336]
shorting out match on constructor Just172243
deriving specialized block b2293 for BlockCall to block b1860
deriving specialized block b2294 for BlockCall to block b2293
liveness replaced t19336 with a wildcard
liveness replaced t19335 with a wildcard
deriving specialized block b2325 for BlockCall to block b1855
liveness replaced t19334 with a wildcard
deriving specialized block b2323 for BlockCall to block b1854
liveness replaced t19342 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2327 for BlockCall to block b1754
rewriting t19335 @ [t19336]
shorting out match on constructor Just172243
deriving specialized block b2293 for BlockCall to block b1861
deriving specialized block b2294 for BlockCall to block b2293
liveness replaced t19336 with a wildcard
liveness replaced t19335 with a wildcard
deriving specialized block b2328 for BlockCall to block b1855
liveness replaced t19334 with a wildcard
deriving specialized block b2326 for BlockCall to block b1854
liveness replaced t19343 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2330 for BlockCall to block b1754
rewriting t19340 @ [t19341]
shorting out match on constructor Just172243
rewriting Just172243 0 t18062 -> t20348
applied left monad law for t18064 <- return t20348
liveness replaced t18062 with a wildcard
deriving specialized block b2332 for BlockCall to block b1862
rewriting Pair183944 0 t20348 -> t20349
applied left monad law for t18065 <- return t20349
deriving specialized block b2100 for BlockCall to block b1003
eliminating duplicate args in call within b1003
deriving specialized block b2333 for BlockCall to block b2332
liveness replaced t19341 with a wildcard
liveness replaced t19340 with a wildcard
deriving specialized block b2331 for BlockCall to block b1859
liveness replaced t19339 with a wildcard
deriving specialized block b2329 for BlockCall to block b1858
liveness replaced t19344 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2335 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t18076 -> t20354
applied left monad law for t18078 <- return t20354
liveness replaced t18076 with a wildcard
deriving specialized block b2337 for BlockCall to block b1863
rewriting Pair183944 0 t20354 -> t20355
applied left monad law for t18079 <- return t20355
rewriting Pair183944 1 t18095 -> t20360
applied left monad law for t18097 <- return t20360
deriving specialized block b2334 for BlockCall to block b1753
liveness replaced t19345 with a wildcard
liveness replaced t18095 with a wildcard
deriving specialized block b2340 for BlockCall to block b980
liveness replaced t18087 with a wildcard
deriving specialized block b2339 for BlockCall to block b1173
eliminating duplicate args in call within b1173
deriving specialized block b2340 for BlockCall to block b980
liveness replaced t18073 with a wildcard
deriving specialized block b2342 for BlockCall to block b1174
eliminating duplicate args in call within b1174
deriving specialized block b2338 for BlockCall to block b2337
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2336 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2334 for BlockCall to block b1753
liveness replaced t19345 with a wildcard
deriving specialized block b2334 for BlockCall to block b1753
applied left monad law for t19348 <- return s247
applied left monad law for t19301 <- return s247
applied left monad law for t19172 <- return s247
rewriting s247 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2345 for BlockCall to block b1754
applied left monad law for t19302 <- return s247
rewriting s247 @ [t19303]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1864
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19303 with a wildcard
deriving specialized block b2346 for BlockCall to block b1833
deriving specialized block b2344 for BlockCall to block b1832
liveness replaced t19347 with a wildcard
deriving specialized block b2334 for BlockCall to block b1753
applied left monad law for t19351 <- return s248
applied left monad law for t19301 <- return s248
applied left monad law for t19172 <- return s248
rewriting s248 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2348 for BlockCall to block b1754
applied left monad law for t19302 <- return s248
rewriting s248 @ [t19303]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1865
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19303 with a wildcard
deriving specialized block b2349 for BlockCall to block b1833
deriving specialized block b2347 for BlockCall to block b1832
liveness replaced t19350 with a wildcard
applied left monad law for t19293 <- return str17
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2351 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
rewriting Just172243 0 t18119 -> t20379
applied left monad law for t18121 <- return t20379
liveness replaced t18119 with a wildcard
deriving specialized block b2353 for BlockCall to block b1866
rewriting Pair183944 0 t20379 -> t20380
applied left monad law for t18122 <- return t20380
rewriting Pair183944 1 t18108 -> t20383
applied left monad law for t19349 <- return t20383
liveness replaced t18108 with a wildcard
deriving specialized block b2355 for BlockCall to block b1426
eliminating duplicate args in call within b1426
rewriting Pair183944 1 t18101 -> t20395
applied left monad law for t19346 <- return t20395
liveness replaced t18101 with a wildcard
deriving specialized block b2357 for BlockCall to block b1427
eliminating duplicate args in call within b1427
deriving specialized block b2354 for BlockCall to block b2353
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2352 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2350 for BlockCall to block b1867
liveness replaced t19352 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2360 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2353 for BlockCall to block b1869
deriving specialized block b2354 for BlockCall to block b2353
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2361 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2359 for BlockCall to block b1867
liveness replaced t19356 with a wildcard
applied left monad law for t19357 <- return s249
applied left monad law for t19306 <- return s249
applied left monad law for t19172 <- return s249
rewriting s249 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2363 for BlockCall to block b1754
applied left monad law for t19307 <- return s249
rewriting s249 @ [t19308]
shorting out match on constructor Just172243
rewriting Just172243 0 t18134 -> t20406
applied left monad law for t18135 <- return t20406
liveness replaced t18134 with a wildcard
deriving specialized block b2365 for BlockCall to block b1870
rewriting Pair183944 0 t20406 -> t20407
applied left monad law for t18136 <- return t20407
deriving specialized block b2100 for BlockCall to block b1003
eliminating duplicate args in call within b1003
deriving specialized block b2366 for BlockCall to block b2365
liveness replaced t19308 with a wildcard
deriving specialized block b2364 for BlockCall to block b1837
deriving specialized block b2362 for BlockCall to block b1836
deriving specialized block b2244 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2368 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2353 for BlockCall to block b1871
deriving specialized block b2354 for BlockCall to block b2353
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2369 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2367 for BlockCall to block b1867
liveness replaced t19360 with a wildcard
liveness replaced t19359 with a wildcard
deriving specialized block b2244 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2371 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2353 for BlockCall to block b1872
deriving specialized block b2354 for BlockCall to block b2353
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2372 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2370 for BlockCall to block b1867
liveness replaced t19363 with a wildcard
liveness replaced t19362 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2374 for BlockCall to block b1754
rewriting t19319 @ [t19320]
shorting out match on constructor Just172243
rewriting Just172243 0 t18173 -> t20418
applied left monad law for t18175 <- return t20418
liveness replaced t18173 with a wildcard
deriving specialized block b2376 for BlockCall to block b1873
rewriting Pair183944 0 t20418 -> t20419
applied left monad law for t18176 <- return t20419
rewriting Pair183944 1 t18159 -> t20422
applied left monad law for t19361 <- return t20422
liveness replaced t18159 with a wildcard
deriving specialized block b2378 for BlockCall to block b1430
eliminating duplicate args in call within b1430
rewriting Pair183944 1 t18149 -> t20436
applied left monad law for t19358 <- return t20436
liveness replaced t18149 with a wildcard
deriving specialized block b2380 for BlockCall to block b1431
eliminating duplicate args in call within b1431
deriving specialized block b2377 for BlockCall to block b2376
liveness replaced t19320 with a wildcard
liveness replaced t19319 with a wildcard
deriving specialized block b2375 for BlockCall to block b1844
liveness replaced t19318 with a wildcard
deriving specialized block b2373 for BlockCall to block b1843
liveness replaced t19364 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2383 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t18186 -> t20449
applied left monad law for t18188 <- return t20449
deriving specialized block b2382 for BlockCall to block b1753
liveness replaced t19365 with a wildcard
liveness replaced t18186 with a wildcard
deriving specialized block b2385 for BlockCall to block b1874
rewriting Pair183944 0 t20449 -> t20450
applied left monad law for t18189 <- return t20450
rewriting Pair183944 1 t20449 -> t20451
applied left monad law for t18191 <- return t20451
deriving specialized block b2386 for BlockCall to block b2385
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2384 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2382 for BlockCall to block b1753
liveness replaced t19365 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2388 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
deriving specialized block b2385 for BlockCall to block b1875
deriving specialized block b2386 for BlockCall to block b2385
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2389 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2387 for BlockCall to block b1753
eliminating duplicate args in call within b1753
liveness replaced t19366 with a wildcard
deriving specialized block b2290 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2392 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2353 for BlockCall to block b1876
deriving specialized block b2354 for BlockCall to block b2353
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2393 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2391 for BlockCall to block b1867
liveness replaced t19369 with a wildcard
liveness replaced t19368 with a wildcard
deriving specialized block b2290 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2395 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2353 for BlockCall to block b1877
deriving specialized block b2354 for BlockCall to block b2353
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2396 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2394 for BlockCall to block b1867
liveness replaced t19372 with a wildcard
liveness replaced t19371 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2398 for BlockCall to block b1754
rewriting t19335 @ [t19336]
shorting out match on constructor Just172243
rewriting Just172243 0 t18222 -> t20468
applied left monad law for t18224 <- return t20468
liveness replaced t18222 with a wildcard
deriving specialized block b2400 for BlockCall to block b1878
rewriting Pair183944 0 t20468 -> t20469
applied left monad law for t18225 <- return t20469
rewriting Pair183944 1 t18208 -> t20472
applied left monad law for t19370 <- return t20472
liveness replaced t18208 with a wildcard
deriving specialized block b2402 for BlockCall to block b1434
eliminating duplicate args in call within b1434
rewriting Pair183944 1 t18198 -> t20486
applied left monad law for t19367 <- return t20486
liveness replaced t18198 with a wildcard
deriving specialized block b2404 for BlockCall to block b1435
eliminating duplicate args in call within b1435
deriving specialized block b2401 for BlockCall to block b2400
liveness replaced t19336 with a wildcard
liveness replaced t19335 with a wildcard
deriving specialized block b2399 for BlockCall to block b1855
liveness replaced t19334 with a wildcard
deriving specialized block b2397 for BlockCall to block b1854
liveness replaced t19373 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2407 for BlockCall to block b1754
rewriting t19335 @ [t19336]
shorting out match on constructor Just172243
deriving specialized block b2400 for BlockCall to block b1879
deriving specialized block b2401 for BlockCall to block b2400
liveness replaced t19336 with a wildcard
liveness replaced t19335 with a wildcard
deriving specialized block b2408 for BlockCall to block b1855
liveness replaced t19334 with a wildcard
deriving specialized block b2406 for BlockCall to block b1854
liveness replaced t19374 with a wildcard
applied left monad law for t19294 <- return str15
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2410 for BlockCall to block b1754
rewriting t19377 @ [t19378]
shorting out match on constructor Just172243
rewriting Just172243 0 t18235 -> t20502
applied left monad law for t18237 <- return t20502
liveness replaced t18235 with a wildcard
deriving specialized block b2412 for BlockCall to block b1880
rewriting Pair183944 0 t20502 -> t20503
applied left monad law for t18238 <- return t20503
deriving specialized block b2100 for BlockCall to block b1003
eliminating duplicate args in call within b1003
deriving specialized block b2413 for BlockCall to block b2412
liveness replaced t19378 with a wildcard
liveness replaced t19377 with a wildcard
deriving specialized block b2411 for BlockCall to block b1882
liveness replaced t19376 with a wildcard
deriving specialized block b2409 for BlockCall to block b1881
liveness replaced t19375 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2415 for BlockCall to block b1754
rewriting t19377 @ [t19378]
shorting out match on constructor Just172243
deriving specialized block b2332 for BlockCall to block b1883
deriving specialized block b2333 for BlockCall to block b2332
liveness replaced t19378 with a wildcard
liveness replaced t19377 with a wildcard
deriving specialized block b2416 for BlockCall to block b1882
liveness replaced t19376 with a wildcard
deriving specialized block b2414 for BlockCall to block b1881
liveness replaced t19379 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2418 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t18266 -> t20511
applied left monad law for t18268 <- return t20511
liveness replaced t18266 with a wildcard
deriving specialized block b2420 for BlockCall to block b1884
rewriting Pair183944 0 t20511 -> t20512
applied left monad law for t18269 <- return t20512
rewriting Pair183944 1 t18261 -> t20519
applied left monad law for t18263 <- return t20519
deriving specialized block b2417 for BlockCall to block b1753
liveness replaced t19380 with a wildcard
liveness replaced t18261 with a wildcard
deriving specialized block b2424 for BlockCall to block b977
liveness replaced t18253 with a wildcard
deriving specialized block b2423 for BlockCall to block b1180
deriving specialized block b2424 for BlockCall to block b977
liveness replaced t18249 with a wildcard
deriving specialized block b2425 for BlockCall to block b1181
liveness replaced t18271 with a wildcard
deriving specialized block b2422 for BlockCall to block b1179
eliminating duplicate args in call within b1179
deriving specialized block b2421 for BlockCall to block b2420
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2419 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2417 for BlockCall to block b1753
liveness replaced t19380 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2428 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2353 for BlockCall to block b1885
deriving specialized block b2354 for BlockCall to block b2353
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2429 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2427 for BlockCall to block b1867
liveness replaced t19381 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2431 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
rewriting Just172243 0 t18279 -> t20536
applied left monad law for t18281 <- return t20536
liveness replaced t18279 with a wildcard
deriving specialized block b2433 for BlockCall to block b1886
rewriting Pair183944 0 t20536 -> t20537
applied left monad law for t18282 <- return t20537
deriving specialized block b2422 for BlockCall to block b1179
eliminating duplicate args in call within b1179
deriving specialized block b2434 for BlockCall to block b2433
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2432 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2430 for BlockCall to block b1867
liveness replaced t19382 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2436 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2337 for BlockCall to block b1887
deriving specialized block b2338 for BlockCall to block b2337
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2437 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2435 for BlockCall to block b1867
liveness replaced t19383 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2439 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2337 for BlockCall to block b1888
deriving specialized block b2338 for BlockCall to block b2337
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2440 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2438 for BlockCall to block b1867
liveness replaced t19384 with a wildcard
applied left monad law for t19385 <- return s250
applied left monad law for t19306 <- return s250
applied left monad law for t19172 <- return s250
rewriting s250 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2442 for BlockCall to block b1754
applied left monad law for t19307 <- return s250
rewriting s250 @ [t19308]
shorting out match on constructor Just172243
rewriting Just172243 0 t18299 -> t20545
applied left monad law for t18300 <- return t20545
liveness replaced t18299 with a wildcard
deriving specialized block b2444 for BlockCall to block b1889
rewriting Pair183944 0 t20545 -> t20546
applied left monad law for t18301 <- return t20546
deriving specialized block b2100 for BlockCall to block b1003
eliminating duplicate args in call within b1003
deriving specialized block b2445 for BlockCall to block b2444
liveness replaced t19308 with a wildcard
deriving specialized block b2443 for BlockCall to block b1837
deriving specialized block b2441 for BlockCall to block b1836
deriving specialized block b2244 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2447 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2337 for BlockCall to block b1890
deriving specialized block b2338 for BlockCall to block b2337
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2448 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2446 for BlockCall to block b1867
liveness replaced t19388 with a wildcard
liveness replaced t19387 with a wildcard
deriving specialized block b2244 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2450 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2337 for BlockCall to block b1891
deriving specialized block b2338 for BlockCall to block b2337
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2451 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2449 for BlockCall to block b1867
liveness replaced t19391 with a wildcard
liveness replaced t19390 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2453 for BlockCall to block b1754
rewriting t19319 @ [t19320]
shorting out match on constructor Just172243
rewriting Just172243 0 t18338 -> t20557
applied left monad law for t18340 <- return t20557
liveness replaced t18338 with a wildcard
deriving specialized block b2455 for BlockCall to block b1892
rewriting Pair183944 0 t20557 -> t20558
applied left monad law for t18341 <- return t20558
rewriting Pair183944 1 t18324 -> t20561
applied left monad law for t19389 <- return t20561
liveness replaced t18324 with a wildcard
deriving specialized block b2457 for BlockCall to block b1291
eliminating duplicate args in call within b1291
rewriting Pair183944 1 t18314 -> t20575
applied left monad law for t19386 <- return t20575
liveness replaced t18314 with a wildcard
deriving specialized block b2459 for BlockCall to block b1292
eliminating duplicate args in call within b1292
deriving specialized block b2456 for BlockCall to block b2455
liveness replaced t19320 with a wildcard
liveness replaced t19319 with a wildcard
deriving specialized block b2454 for BlockCall to block b1844
liveness replaced t19318 with a wildcard
deriving specialized block b2452 for BlockCall to block b1843
liveness replaced t19392 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2462 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t18351 -> t20588
applied left monad law for t18353 <- return t20588
deriving specialized block b2461 for BlockCall to block b1753
liveness replaced t19393 with a wildcard
liveness replaced t18351 with a wildcard
deriving specialized block b2464 for BlockCall to block b1893
rewriting Pair183944 0 t20588 -> t20589
applied left monad law for t18354 <- return t20589
rewriting Pair183944 1 t20588 -> t20590
applied left monad law for t18356 <- return t20590
deriving specialized block b2465 for BlockCall to block b2464
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2463 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2461 for BlockCall to block b1753
liveness replaced t19393 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2467 for BlockCall to block b1754
rewriting t19174 @ [t19175]
shorting out match on constructor Just172243
deriving specialized block b2464 for BlockCall to block b1894
deriving specialized block b2465 for BlockCall to block b2464
liveness replaced t19175 with a wildcard
liveness replaced t19174 with a wildcard
deriving specialized block b2468 for BlockCall to block b1755
liveness replaced t19171 with a wildcard
deriving specialized block b2466 for BlockCall to block b1753
eliminating duplicate args in call within b1753
liveness replaced t19394 with a wildcard
deriving specialized block b2290 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2471 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2337 for BlockCall to block b1895
deriving specialized block b2338 for BlockCall to block b2337
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2472 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2470 for BlockCall to block b1867
liveness replaced t19397 with a wildcard
liveness replaced t19396 with a wildcard
deriving specialized block b2290 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2474 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2337 for BlockCall to block b1896
deriving specialized block b2338 for BlockCall to block b2337
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2475 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2473 for BlockCall to block b1867
liveness replaced t19400 with a wildcard
liveness replaced t19399 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2477 for BlockCall to block b1754
rewriting t19335 @ [t19336]
shorting out match on constructor Just172243
rewriting Just172243 0 t18387 -> t20607
applied left monad law for t18389 <- return t20607
liveness replaced t18387 with a wildcard
deriving specialized block b2479 for BlockCall to block b1897
rewriting Pair183944 0 t20607 -> t20608
applied left monad law for t18390 <- return t20608
rewriting Pair183944 1 t18373 -> t20611
applied left monad law for t19398 <- return t20611
liveness replaced t18373 with a wildcard
deriving specialized block b2481 for BlockCall to block b1295
eliminating duplicate args in call within b1295
rewriting Pair183944 1 t18363 -> t20625
applied left monad law for t19395 <- return t20625
liveness replaced t18363 with a wildcard
deriving specialized block b2483 for BlockCall to block b1296
eliminating duplicate args in call within b1296
deriving specialized block b2480 for BlockCall to block b2479
liveness replaced t19336 with a wildcard
liveness replaced t19335 with a wildcard
deriving specialized block b2478 for BlockCall to block b1855
liveness replaced t19334 with a wildcard
deriving specialized block b2476 for BlockCall to block b1854
liveness replaced t19401 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2486 for BlockCall to block b1754
rewriting t19335 @ [t19336]
shorting out match on constructor Just172243
deriving specialized block b2479 for BlockCall to block b1898
deriving specialized block b2480 for BlockCall to block b2479
liveness replaced t19336 with a wildcard
liveness replaced t19335 with a wildcard
deriving specialized block b2487 for BlockCall to block b1855
liveness replaced t19334 with a wildcard
deriving specialized block b2485 for BlockCall to block b1854
liveness replaced t19402 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2489 for BlockCall to block b1754
rewriting t19377 @ [t19378]
shorting out match on constructor Just172243
rewriting Just172243 0 t18400 -> t20641
applied left monad law for t18402 <- return t20641
liveness replaced t18400 with a wildcard
deriving specialized block b2491 for BlockCall to block b1899
rewriting Pair183944 0 t20641 -> t20642
applied left monad law for t18403 <- return t20642
deriving specialized block b2100 for BlockCall to block b1003
eliminating duplicate args in call within b1003
deriving specialized block b2492 for BlockCall to block b2491
liveness replaced t19378 with a wildcard
liveness replaced t19377 with a wildcard
deriving specialized block b2490 for BlockCall to block b1882
liveness replaced t19376 with a wildcard
deriving specialized block b2488 for BlockCall to block b1881
liveness replaced t19403 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2494 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
deriving specialized block b2337 for BlockCall to block b1900
deriving specialized block b2338 for BlockCall to block b2337
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2495 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2493 for BlockCall to block b1867
liveness replaced t19404 with a wildcard
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2497 for BlockCall to block b1754
rewriting t19354 @ [t19355]
shorting out match on constructor Just172243
rewriting Just172243 0 t18410 -> t20650
applied left monad law for t18412 <- return t20650
liveness replaced t18410 with a wildcard
deriving specialized block b2499 for BlockCall to block b1901
rewriting Pair183944 0 t20650 -> t20651
applied left monad law for t18413 <- return t20651
deriving specialized block b2422 for BlockCall to block b1179
eliminating duplicate args in call within b1179
deriving specialized block b2500 for BlockCall to block b2499
liveness replaced t19355 with a wildcard
liveness replaced t19354 with a wildcard
deriving specialized block b2498 for BlockCall to block b1868
liveness replaced t19353 with a wildcard
deriving specialized block b2496 for BlockCall to block b1867
liveness replaced t19405 with a wildcard
applied left monad law for t19406 <- return s251
applied left monad law for t19171 <- return s251
applied left monad law for t19172 <- return s251
rewriting s251 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2502 for BlockCall to block b1754
applied left monad law for t19174 <- return s251
rewriting s251 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t18440 -> t20653
applied left monad law for t18441 <- return t20653
liveness replaced t18440 with a wildcard
deriving specialized block b2504 for BlockCall to block b1902
rewriting Pair183944 0 t20653 -> t20654
applied left monad law for t18442 <- return t20654
rewriting Pair183944 1 t18436 -> t20661
applied left monad law for t18437 <- return t20661
applied left monad law for t19406 <- return s251
deriving specialized block b2501 for BlockCall to block b1753
liveness replaced t18436 with a wildcard
deriving specialized block b2508 for BlockCall to block b985
liveness replaced t18429 with a wildcard
deriving specialized block b2507 for BlockCall to block b1188
deriving specialized block b2508 for BlockCall to block b985
liveness replaced t18426 with a wildcard
deriving specialized block b2509 for BlockCall to block b1189
liveness replaced t18444 with a wildcard
deriving specialized block b2506 for BlockCall to block b1187
eliminating duplicate args in call within b1187
deriving specialized block b2505 for BlockCall to block b2504
liveness replaced t19175 with a wildcard
deriving specialized block b2503 for BlockCall to block b1755
deriving specialized block b2501 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2512 for BlockCall to block b1754
rewriting t19302 @ [t19303]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1903
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19303 with a wildcard
liveness replaced t19302 with a wildcard
deriving specialized block b2513 for BlockCall to block b1833
liveness replaced t19301 with a wildcard
deriving specialized block b2511 for BlockCall to block b1832
liveness replaced t19407 with a wildcard
applied left monad law for t19292 <- return str14
applied left monad law for t18461, t18462 <- return t19408, t19409
applied left monad law for t19410 <- return s252
deriving specialized block b2218 for BlockCall to block b1796
applied left monad law for t19411 <- return s253
applied left monad law for t19412 <- return s253
applied left monad law for t19172 <- return s253
rewriting s253 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2515 for BlockCall to block b1754
applied left monad law for t19413 <- return s253
rewriting s253 @ [t19414]
shorting out match on constructor Just172243
rewriting Just172243 0 t18451 -> t20671
applied left monad law for t18452 <- return t20671
liveness replaced t18451 with a wildcard
deriving specialized block b2517 for BlockCall to block b1904
rewriting Pair183944 0 t20671 -> t20672
applied left monad law for t18453 <- return t20672
deriving specialized block b2506 for BlockCall to block b1187
eliminating duplicate args in call within b1187
deriving specialized block b2518 for BlockCall to block b2517
liveness replaced t19414 with a wildcard
deriving specialized block b2516 for BlockCall to block b1906
deriving specialized block b2514 for BlockCall to block b1905
applied left monad law for t18470, t18471 <- return t19415, t19416
applied left monad law for t19417 <- return s254
deriving specialized block b2218 for BlockCall to block b1796
applied left monad law for t19418 <- return s255
applied left monad law for t19412 <- return s255
applied left monad law for t19172 <- return s255
rewriting s255 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2520 for BlockCall to block b1754
applied left monad law for t19413 <- return s255
rewriting s255 @ [t19414]
shorting out match on constructor Just172243
deriving specialized block b2504 for BlockCall to block b1907
deriving specialized block b2505 for BlockCall to block b2504
liveness replaced t19414 with a wildcard
deriving specialized block b2521 for BlockCall to block b1906
deriving specialized block b2519 for BlockCall to block b1905
applied left monad law for t19419 <- return s256
applied left monad law for t19171 <- return s256
applied left monad law for t19172 <- return s256
rewriting s256 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2523 for BlockCall to block b1754
applied left monad law for t19174 <- return s256
rewriting s256 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t18490 -> t20674
applied left monad law for t18491 <- return t20674
liveness replaced t18490 with a wildcard
deriving specialized block b2525 for BlockCall to block b1908
rewriting Pair183944 0 t20674 -> t20675
applied left monad law for t18492 <- return t20675
rewriting Pair183944 1 t18486 -> t20682
applied left monad law for t18487 <- return t20682
applied left monad law for t19419 <- return s256
deriving specialized block b2522 for BlockCall to block b1753
liveness replaced t18486 with a wildcard
deriving specialized block b2529 for BlockCall to block b986
liveness replaced t18479 with a wildcard
deriving specialized block b2528 for BlockCall to block b1193
deriving specialized block b2529 for BlockCall to block b986
liveness replaced t18476 with a wildcard
deriving specialized block b2530 for BlockCall to block b1194
liveness replaced t18494 with a wildcard
deriving specialized block b2527 for BlockCall to block b1192
eliminating duplicate args in call within b1192
deriving specialized block b2526 for BlockCall to block b2525
liveness replaced t19175 with a wildcard
deriving specialized block b2524 for BlockCall to block b1755
deriving specialized block b2522 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2533 for BlockCall to block b1754
rewriting t19302 @ [t19303]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1909
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19303 with a wildcard
liveness replaced t19302 with a wildcard
deriving specialized block b2534 for BlockCall to block b1833
liveness replaced t19301 with a wildcard
deriving specialized block b2532 for BlockCall to block b1832
liveness replaced t19420 with a wildcard
applied left monad law for t19242 <- return str12
applied left monad law for t18511, t18512 <- return t19421, t19422
applied left monad law for t19423 <- return s257
deriving specialized block b2070 for BlockCall to block b1796
applied left monad law for t19424 <- return s258
applied left monad law for t19425 <- return s258
applied left monad law for t19172 <- return s258
rewriting s258 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2536 for BlockCall to block b1754
applied left monad law for t19426 <- return s258
rewriting s258 @ [t19427]
shorting out match on constructor Just172243
rewriting Just172243 0 t18501 -> t20692
applied left monad law for t18502 <- return t20692
liveness replaced t18501 with a wildcard
deriving specialized block b2538 for BlockCall to block b1910
rewriting Pair183944 0 t20692 -> t20693
applied left monad law for t18503 <- return t20693
deriving specialized block b2527 for BlockCall to block b1192
eliminating duplicate args in call within b1192
deriving specialized block b2539 for BlockCall to block b2538
liveness replaced t19427 with a wildcard
deriving specialized block b2537 for BlockCall to block b1912
deriving specialized block b2535 for BlockCall to block b1911
applied left monad law for t18520, t18521 <- return t19428, t19429
applied left monad law for t19430 <- return s259
deriving specialized block b2070 for BlockCall to block b1796
applied left monad law for t19431 <- return s260
applied left monad law for t19425 <- return s260
applied left monad law for t19172 <- return s260
rewriting s260 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2541 for BlockCall to block b1754
applied left monad law for t19426 <- return s260
rewriting s260 @ [t19427]
shorting out match on constructor Just172243
deriving specialized block b2525 for BlockCall to block b1913
deriving specialized block b2526 for BlockCall to block b2525
liveness replaced t19427 with a wildcard
deriving specialized block b2542 for BlockCall to block b1912
deriving specialized block b2540 for BlockCall to block b1911
applied left monad law for t19432 <- return s261
applied left monad law for t19171 <- return s261
applied left monad law for t19172 <- return s261
rewriting s261 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2544 for BlockCall to block b1754
applied left monad law for t19174 <- return s261
rewriting s261 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t18540 -> t20695
applied left monad law for t18541 <- return t20695
liveness replaced t18540 with a wildcard
deriving specialized block b2546 for BlockCall to block b1914
rewriting Pair183944 0 t20695 -> t20696
applied left monad law for t18542 <- return t20696
rewriting Pair183944 1 t18536 -> t20703
applied left monad law for t18537 <- return t20703
applied left monad law for t19432 <- return s261
deriving specialized block b2543 for BlockCall to block b1753
liveness replaced t18536 with a wildcard
deriving specialized block b2550 for BlockCall to block b987
liveness replaced t18529 with a wildcard
deriving specialized block b2549 for BlockCall to block b1198
deriving specialized block b2550 for BlockCall to block b987
liveness replaced t18526 with a wildcard
deriving specialized block b2551 for BlockCall to block b1199
liveness replaced t18544 with a wildcard
deriving specialized block b2548 for BlockCall to block b1197
eliminating duplicate args in call within b1197
deriving specialized block b2547 for BlockCall to block b2546
liveness replaced t19175 with a wildcard
deriving specialized block b2545 for BlockCall to block b1755
deriving specialized block b2543 for BlockCall to block b1753
rewriting t19172 @ [s39]
shorting out match on constructor Nothing162142
liveness replaced t19172 with a wildcard
deriving specialized block b2554 for BlockCall to block b1754
rewriting t19302 @ [t19303]
shorting out match on constructor Just172243
deriving specialized block b2098 for BlockCall to block b1915
deriving specialized block b2099 for BlockCall to block b2098
liveness replaced t19303 with a wildcard
liveness replaced t19302 with a wildcard
deriving specialized block b2555 for BlockCall to block b1833
liveness replaced t19301 with a wildcard
deriving specialized block b2553 for BlockCall to block b1832
liveness replaced t19433 with a wildcard
applied left monad law for t19156 <- return str10
applied left monad law for t19434 <- return s262
applied left monad law for t19435 <- return s262
applied left monad law for t19172 <- return s262
rewriting s262 @ [s39]
shorting out match on constructor Nothing162142
deriving specialized block b2557 for BlockCall to block b1754
applied left monad law for t19436 <- return s262
rewriting s262 @ [t19437]
shorting out match on constructor Just172243
rewriting Just172243 0 t18551 -> t20713
applied left monad law for t18552 <- return t20713
liveness replaced t18551 with a wildcard
deriving specialized block b2559 for BlockCall to block b1916
rewriting Pair183944 0 t20713 -> t20714
applied left monad law for t18553 <- return t20714
deriving specialized block b2548 for BlockCall to block b1197
eliminating duplicate args in call within b1197
deriving specialized block b2560 for BlockCall to block b2559
liveness replaced t19437 with a wildcard
deriving specialized block b2558 for BlockCall to block b1918
deriving specialized block b2556 for BlockCall to block b1917
applied left monad law for t19438 <- return s263
applied left monad law for t19171 <- return s263
applied left monad law for t19172 <- return s263
rewriting s263 @ [s39]
shorting out match on constructor Nothing162142
elided call to goto block b1201
deriving specialized block b2562 for BlockCall to block b1754
applied left monad law for t19174 <- return s263
rewriting s263 @ [t19175]
shorting out match on constructor Just172243
rewriting Just172243 0 t18574 -> t20716
applied left monad law for t18575 <- return t20716
liveness replaced t18574 with a wildcard
deriving specialized block b2564 for BlockCall to block b1919
rewriting Pair183944 0 t20716 -> t20717
applied left monad law for t18576 <- return t20717
rewriting Pair183944 1 t18570 -> t20722
applied left monad law for t18571 <- return t20722
applied left monad law for t19438 <- return s263
deriving specialized block b2561 for BlockCall to block b1753
liveness replaced t18570 with a wildcard
deriving specialized block b2567 for BlockCall to block b996
liveness replaced t18563 with a wildcard
deriving specialized block b2566 for BlockCall to block b1210
eliminating duplicate args in call within b1210
deriving specialized block b2567 for BlockCall to block b996
liveness replaced t18560 with a wildcard
deriving specialized block b2569 for BlockCall to block b1211
eliminating duplicate args in call within b1211
deriving specialized block b2565 for BlockCall to block b2564
liveness replaced t19175 with a wildcard
deriving specialized block b2563 for BlockCall to block b1755
deriving specialized block b2561 for BlockCall to block b1753
applied left monad law for t19155 <- return str21
applied left monad law for t19439 <- return s264
applied left monad law for t19440 <- return s264
applied left monad law for t19172 <- return s264
rewriting s264 @ [s39]
shorting out match on constructor Nothing162142
elided call to goto block b1201
deriving specialized block b2572 for BlockCall to block b1754
applied left monad law for t19441 <- return s264
rewriting s264 @ [t19442]
shorting out match on constructor Just172243
deriving specialized block b2564 for BlockCall to block b1920
deriving specialized block b2565 for BlockCall to block b2564
liveness replaced t19442 with a wildcard
deriving specialized block b2573 for BlockCall to block b1922
deriving specialized block b2571 for BlockCall to block b1921
rewrite: x + 0 ==> x
applied left monad law for t19443 <- return console
rewrite: x + 0 ==> x
applied left monad law for t19445 <- return t19117
rewrite: (x + n) + m == x + (n + m)
rewrite: x + 0 ==> x
applied left monad law for t19447 <- return t19122
rewrite: (x + n) + m == x + (n + m)
constant folding for primUlt
applied left monad law for t19449 <- return flag1
Flow pass finished, running shake.
Steps performed = 3139
-------------------------
suffixInline succeeded for call to block b1468 from block b1923
inlining eliminated a wildcard binding in b690
prefixInline succeeded for call to block b1692 from block b690
suffixInline succeeded for call to block b1471 from block b1924
prefixInline succeeded for call to block b1693 from block b692
inlining eliminated a wildcard binding in b702
inlining eliminated a wildcard binding in b702
prefixInline succeeded for call to block b1692 from block b702
inlining eliminated a wildcard binding in b700
prefixInline succeeded for call to block b1692 from block b700
inlining eliminated a wildcard binding in b1521
prefixInline succeeded for call to block b1693 from block b1521
prefixInline succeeded for call to block b1693 from block b849
prefixInline succeeded for call to block b1693 from block b847
inlining eliminated a wildcard binding in b852
prefixInline succeeded for call to block b1692 from block b852
inlining eliminated a wildcard binding in b1926
inlining eliminated a wildcard binding in b1927
inlining eliminated a wildcard binding in b1927
inlining eliminated a wildcard binding in b1929
inlining eliminated a wildcard binding in b1931
inlining eliminated a wildcard binding in b1931
inlining eliminated a wildcard binding in b1925
inlining eliminated a wildcard binding in b949
elided call to goto block b1931
elided call to goto block b1931
elided call to goto block b1926
suffixInline succeeded for call to block b1478 from block b1935
suffixInline succeeded for call to block b1483 from block b1936
prefixInline succeeded for call to block b1706 from block b1239
prefixInline succeeded for call to block b1706 from block b1303
prefixInline succeeded for call to block b1704 from block b1236
inlining eliminated a wildcard binding in b1536
prefixInline succeeded for call to block b1706 from block b1536
prefixInline succeeded for call to block b1704 from block b1359
prefixInline succeeded for call to block b1704 from block b1547
prefixInline succeeded for call to block b1704 from block b1714
prefixInline succeeded for call to block b1704 from block b1713
inlining eliminated a wildcard binding in b1939
inlining eliminated a wildcard binding in b1939
inlining eliminated a wildcard binding in b1938
inlining eliminated a wildcard binding in b1937
elided call to goto block b1938
inlining eliminated a wildcard binding in b1372
suffixInline succeeded for call to block b1937 from block b1372
inlining eliminated a wildcard binding in b1941
inlining eliminated a wildcard binding in b1942
inlining eliminated a wildcard binding in b1942
inlining eliminated a wildcard binding in b1944
inlining eliminated a wildcard binding in b1946
inlining eliminated a wildcard binding in b1946
inlining eliminated a wildcard binding in b1940
inlining eliminated a wildcard binding in b941
elided call to goto block b1946
elided call to goto block b1946
elided call to goto block b1941
inlining eliminated a wildcard binding in b1952
inlining eliminated a wildcard binding in b1952
inlining eliminated a wildcard binding in b1951
inlining eliminated a wildcard binding in b1950
elided call to goto block b1951
inlining eliminated a wildcard binding in b1375
inlining eliminated a wildcard binding in b1375
suffixInline succeeded for call to block b1950 from block b1375
inlining eliminated a wildcard binding in b1955
inlining eliminated a wildcard binding in b1955
inlining eliminated a wildcard binding in b1954
inlining eliminated a wildcard binding in b1953
elided call to goto block b1954
inlining eliminated a wildcard binding in b1374
inlining eliminated a wildcard binding in b1374
suffixInline succeeded for call to block b1953 from block b1374
suffixInline succeeded for call to block b1950 from block b1964
suffixInline succeeded for call to block b1953 from block b1962
inlining eliminated a wildcard binding in b1960
inlining eliminated a wildcard binding in b1958
inlining eliminated a wildcard binding in b1958
suffixInline succeeded for call to block b1960 from block b1958
inlining eliminated a wildcard binding in b1957
inlining eliminated a wildcard binding in b1956
elided call to goto block b1957
inlining eliminated a wildcard binding in b1371
suffixInline succeeded for call to block b1956 from block b1371
inlining eliminated a wildcard binding in b1967
inlining eliminated a wildcard binding in b1967
inlining eliminated a wildcard binding in b1966
inlining eliminated a wildcard binding in b1965
elided call to goto block b1966
inlining eliminated a wildcard binding in b788
suffixInline succeeded for call to block b1965 from block b788
inlining eliminated a wildcard binding in b1969
inlining eliminated a wildcard binding in b1970
inlining eliminated a wildcard binding in b1970
inlining eliminated a wildcard binding in b1972
inlining eliminated a wildcard binding in b1974
inlining eliminated a wildcard binding in b1974
inlining eliminated a wildcard binding in b1968
inlining eliminated a wildcard binding in b945
elided call to goto block b1974
elided call to goto block b1974
elided call to goto block b1969
inlining eliminated a wildcard binding in b1980
inlining eliminated a wildcard binding in b1980
inlining eliminated a wildcard binding in b1979
inlining eliminated a wildcard binding in b1978
elided call to goto block b1979
inlining eliminated a wildcard binding in b1378
inlining eliminated a wildcard binding in b1378
suffixInline succeeded for call to block b1978 from block b1378
inlining eliminated a wildcard binding in b1983
inlining eliminated a wildcard binding in b1983
inlining eliminated a wildcard binding in b1982
inlining eliminated a wildcard binding in b1981
elided call to goto block b1982
inlining eliminated a wildcard binding in b1377
inlining eliminated a wildcard binding in b1377
suffixInline succeeded for call to block b1981 from block b1377
suffixInline succeeded for call to block b1978 from block b1992
suffixInline succeeded for call to block b1981 from block b1990
inlining eliminated a wildcard binding in b1988
inlining eliminated a wildcard binding in b1986
inlining eliminated a wildcard binding in b1986
suffixInline succeeded for call to block b1988 from block b1986
inlining eliminated a wildcard binding in b1985
inlining eliminated a wildcard binding in b1984
elided call to goto block b1985
inlining eliminated a wildcard binding in b1370
suffixInline succeeded for call to block b1984 from block b1370
inlining eliminated a wildcard binding in b1995
inlining eliminated a wildcard binding in b1995
inlining eliminated a wildcard binding in b1994
inlining eliminated a wildcard binding in b1993
elided call to goto block b1994
inlining eliminated a wildcard binding in b790
suffixInline succeeded for call to block b1993 from block b790
inlining eliminated a wildcard binding in b1997
inlining eliminated a wildcard binding in b1998
inlining eliminated a wildcard binding in b1998
inlining eliminated a wildcard binding in b2000
inlining eliminated a wildcard binding in b2002
inlining eliminated a wildcard binding in b2002
inlining eliminated a wildcard binding in b1996
inlining eliminated a wildcard binding in b946
elided call to goto block b2002
suffixInline succeeded for call to block b2000 from block b1998
elided call to goto block b2002
elided call to goto block b1997
inlining eliminated a wildcard binding in b2008
inlining eliminated a wildcard binding in b2008
inlining eliminated a wildcard binding in b2007
inlining eliminated a wildcard binding in b2006
elided call to goto block b2007
inlining eliminated a wildcard binding in b1381
inlining eliminated a wildcard binding in b1381
suffixInline succeeded for call to block b2006 from block b1381
inlining eliminated a wildcard binding in b2011
inlining eliminated a wildcard binding in b2011
inlining eliminated a wildcard binding in b2010
inlining eliminated a wildcard binding in b2009
elided call to goto block b2010
inlining eliminated a wildcard binding in b1380
inlining eliminated a wildcard binding in b1380
suffixInline succeeded for call to block b2009 from block b1380
suffixInline succeeded for call to block b2006 from block b2020
suffixInline succeeded for call to block b2009 from block b2018
inlining eliminated a wildcard binding in b2016
inlining eliminated a wildcard binding in b2014
inlining eliminated a wildcard binding in b2014
suffixInline succeeded for call to block b2016 from block b2014
inlining eliminated a wildcard binding in b2013
inlining eliminated a wildcard binding in b2012
elided call to goto block b2013
inlining eliminated a wildcard binding in b1369
inlining eliminated a wildcard binding in b2022
inlining eliminated a wildcard binding in b2023
inlining eliminated a wildcard binding in b2023
inlining eliminated a wildcard binding in b2025
inlining eliminated a wildcard binding in b2027
inlining eliminated a wildcard binding in b2027
inlining eliminated a wildcard binding in b2021
inlining eliminated a wildcard binding in b1073
elided call to goto block b2027
elided call to goto block b2027
elided call to goto block b2022
elided call to goto block b1369
elided call to goto block b1369
prefixInline succeeded for call to block b1704 from block b1539
prefixInline succeeded for call to block b1704 from block b1708
prefixInline succeeded for call to block b1704 from block b1707
inlining eliminated a wildcard binding in b2033
inlining eliminated a wildcard binding in b2033
inlining eliminated a wildcard binding in b2032
inlining eliminated a wildcard binding in b2031
elided call to goto block b2032
inlining eliminated a wildcard binding in b1067
suffixInline succeeded for call to block b2031 from block b1067
elided call to goto block b1369
inlining eliminated a wildcard binding in b2035
inlining eliminated a wildcard binding in b2036
inlining eliminated a wildcard binding in b2036
inlining eliminated a wildcard binding in b2038
inlining eliminated a wildcard binding in b2040
inlining eliminated a wildcard binding in b2040
inlining eliminated a wildcard binding in b2034
inlining eliminated a wildcard binding in b1079
elided call to goto block b2040
elided call to goto block b2040
elided call to goto block b2035
inlining eliminated a wildcard binding in b2046
inlining eliminated a wildcard binding in b2046
inlining eliminated a wildcard binding in b2045
inlining eliminated a wildcard binding in b2044
elided call to goto block b2045
inlining eliminated a wildcard binding in b1066
inlining eliminated a wildcard binding in b2048
inlining eliminated a wildcard binding in b2049
inlining eliminated a wildcard binding in b2049
inlining eliminated a wildcard binding in b2051
inlining eliminated a wildcard binding in b2051
inlining eliminated a wildcard binding in b2047
inlining eliminated a wildcard binding in b1576
elided call to goto block b2048
elided call to goto block b1066
elided call to goto block b1066
inlining eliminated a wildcard binding in b2054
inlining eliminated a wildcard binding in b2054
inlining eliminated a wildcard binding in b2053
inlining eliminated a wildcard binding in b2052
elided call to goto block b2053
inlining eliminated a wildcard binding in b1064
inlining eliminated a wildcard binding in b2056
inlining eliminated a wildcard binding in b2063
inlining eliminated a wildcard binding in b2057
inlining eliminated a wildcard binding in b2057
inlining eliminated a wildcard binding in b2059
inlining eliminated a wildcard binding in b2061
inlining eliminated a wildcard binding in b2062
inlining eliminated a wildcard binding in b2062
inlining eliminated a wildcard binding in b2055
inlining eliminated a wildcard binding in b1087
elided call to goto block b2062
suffixInline succeeded for call to block b2059 from block b2057
elided call to goto block b2062
elided call to goto block b2056
elided call to goto block b1064
inlining eliminated a wildcard binding in b1062
inlining eliminated a wildcard binding in b2066
inlining eliminated a wildcard binding in b2071
inlining eliminated a wildcard binding in b1585
inlining eliminated a wildcard binding in b2065
inlining eliminated a wildcard binding in b2067
inlining eliminated a wildcard binding in b2067
inlining eliminated a wildcard binding in b2069
inlining eliminated a wildcard binding in b2079
inlining eliminated a wildcard binding in b2079
inlining eliminated a wildcard binding in b2079
inlining eliminated a wildcard binding in b2080
inlining eliminated a wildcard binding in b2080
inlining eliminated a wildcard binding in b2072
inlining eliminated a wildcard binding in b2072
inlining eliminated a wildcard binding in b2074
inlining eliminated a wildcard binding in b2074
inlining eliminated a wildcard binding in b2077
inlining eliminated a wildcard binding in b2077
inlining eliminated a wildcard binding in b2078
inlining eliminated a wildcard binding in b2078
inlining eliminated a wildcard binding in b1058
inlining eliminated a wildcard binding in b2070
elided call to goto block b1058
elided call to goto block b1058
suffixInline succeeded for call to block b2065 from block b1585
elided call to goto block b2066
elided call to goto block b2066
suffixInline succeeded for call to block b2069 from block b2067
elided call to goto block b1058
elided call to goto block b1058
suffixInline succeeded for call to block b2080 from block b2079
elided call to goto block b1058
elided call to goto block b1058
suffixInline succeeded for call to block b2074 from block b2072
suffixInline succeeded for call to block b2081 from block b2072
elided call to goto block b2077
suffixInline succeeded for call to block b2081 from block b2074
elided call to goto block b2077
elided call to goto block b2077
elided call to goto block b1058
elided call to goto block b2071
inlining eliminated a wildcard binding in b2083
inlining eliminated a wildcard binding in b2084
inlining eliminated a wildcard binding in b2084
inlining eliminated a wildcard binding in b2086
inlining eliminated a wildcard binding in b2088
inlining eliminated a wildcard binding in b2088
inlining eliminated a wildcard binding in b2082
inlining eliminated a wildcard binding in b961
elided call to goto block b2088
elided call to goto block b2088
elided call to goto block b2083
inlining eliminated a wildcard binding in b2094
inlining eliminated a wildcard binding in b2094
inlining eliminated a wildcard binding in b2093
inlining eliminated a wildcard binding in b2092
elided call to goto block b2093
inlining eliminated a wildcard binding in b1321
inlining eliminated a wildcard binding in b2103
inlining eliminated a wildcard binding in b2097
inlining eliminated a wildcard binding in b2099
inlining eliminated a wildcard binding in b2101
inlining eliminated a wildcard binding in b2102
elided call to goto block b2102
elided call to goto block b2102
elided call to goto block b2096
suffixInline succeeded for call to block b947 from block b1005
suffixInline succeeded for call to block b947 from block b1004
inlining eliminated a wildcard binding in b2107
inlining eliminated a wildcard binding in b2107
inlining eliminated a wildcard binding in b2106
inlining eliminated a wildcard binding in b2105
elided call to goto block b2106
inlining eliminated a wildcard binding in b1590
suffixInline succeeded for call to block b2105 from block b1590
elided call to goto block b1321
inlining eliminated a wildcard binding in b2112
inlining eliminated a wildcard binding in b2112
suffixInline succeeded for call to block b2105 from block b2112
inlining eliminated a wildcard binding in b2110
inlining eliminated a wildcard binding in b2110
suffixInline succeeded for call to block b2112 from block b2110
inlining eliminated a wildcard binding in b2109
inlining eliminated a wildcard binding in b2108
elided call to goto block b2109
inlining eliminated a wildcard binding in b1386
suffixInline succeeded for call to block b2108 from block b1386
elided call to goto block b1321
inlining eliminated a wildcard binding in b2115
elided call to goto block b2114
suffixInline succeeded for call to block b2113 from block b800
inlining eliminated a wildcard binding in b2117
inlining eliminated a wildcard binding in b2118
inlining eliminated a wildcard binding in b2118
inlining eliminated a wildcard binding in b2120
inlining eliminated a wildcard binding in b2122
inlining eliminated a wildcard binding in b2122
inlining eliminated a wildcard binding in b2116
inlining eliminated a wildcard binding in b959
elided call to goto block b2122
elided call to goto block b2122
elided call to goto block b2117
inlining eliminated a wildcard binding in b2128
inlining eliminated a wildcard binding in b2128
inlining eliminated a wildcard binding in b2127
inlining eliminated a wildcard binding in b2126
elided call to goto block b2127
inlining eliminated a wildcard binding in b1391
inlining eliminated a wildcard binding in b1391
suffixInline succeeded for call to block b2126 from block b1391
inlining eliminated a wildcard binding in b2131
inlining eliminated a wildcard binding in b2131
inlining eliminated a wildcard binding in b2130
inlining eliminated a wildcard binding in b2129
elided call to goto block b2130
inlining eliminated a wildcard binding in b1390
inlining eliminated a wildcard binding in b1390
suffixInline succeeded for call to block b2129 from block b1390
suffixInline succeeded for call to block b2126 from block b2140
suffixInline succeeded for call to block b2129 from block b2138
inlining eliminated a wildcard binding in b2136
inlining eliminated a wildcard binding in b2134
inlining eliminated a wildcard binding in b2134
suffixInline succeeded for call to block b2136 from block b2134
inlining eliminated a wildcard binding in b2133
inlining eliminated a wildcard binding in b2132
elided call to goto block b2133
inlining eliminated a wildcard binding in b1385
suffixInline succeeded for call to block b2132 from block b1385
inlining eliminated a wildcard binding in b2143
inlining eliminated a wildcard binding in b2143
inlining eliminated a wildcard binding in b2142
inlining eliminated a wildcard binding in b2141
elided call to goto block b2142
inlining eliminated a wildcard binding in b802
suffixInline succeeded for call to block b2141 from block b802
inlining eliminated a wildcard binding in b2145
inlining eliminated a wildcard binding in b2146
inlining eliminated a wildcard binding in b2146
inlining eliminated a wildcard binding in b2148
inlining eliminated a wildcard binding in b2150
inlining eliminated a wildcard binding in b2150
inlining eliminated a wildcard binding in b2144
inlining eliminated a wildcard binding in b960
elided call to goto block b2150
suffixInline succeeded for call to block b2148 from block b2146
elided call to goto block b2150
elided call to goto block b2145
inlining eliminated a wildcard binding in b2156
inlining eliminated a wildcard binding in b2156
inlining eliminated a wildcard binding in b2155
inlining eliminated a wildcard binding in b2154
elided call to goto block b2155
inlining eliminated a wildcard binding in b1394
inlining eliminated a wildcard binding in b1394
suffixInline succeeded for call to block b2154 from block b1394
inlining eliminated a wildcard binding in b2159
inlining eliminated a wildcard binding in b2159
inlining eliminated a wildcard binding in b2158
inlining eliminated a wildcard binding in b2157
elided call to goto block b2158
inlining eliminated a wildcard binding in b1393
inlining eliminated a wildcard binding in b1393
suffixInline succeeded for call to block b2157 from block b1393
suffixInline succeeded for call to block b2154 from block b2168
suffixInline succeeded for call to block b2157 from block b2166
inlining eliminated a wildcard binding in b2164
inlining eliminated a wildcard binding in b2162
inlining eliminated a wildcard binding in b2162
suffixInline succeeded for call to block b2164 from block b2162
inlining eliminated a wildcard binding in b2161
inlining eliminated a wildcard binding in b2160
elided call to goto block b2161
inlining eliminated a wildcard binding in b1384
inlining eliminated a wildcard binding in b2170
inlining eliminated a wildcard binding in b2171
inlining eliminated a wildcard binding in b2171
inlining eliminated a wildcard binding in b2173
inlining eliminated a wildcard binding in b2175
inlining eliminated a wildcard binding in b2175
inlining eliminated a wildcard binding in b2169
inlining eliminated a wildcard binding in b1137
elided call to goto block b2175
elided call to goto block b2175
elided call to goto block b2170
elided call to goto block b1384
elided call to goto block b1384
inlining eliminated a wildcard binding in b2181
inlining eliminated a wildcard binding in b2181
inlining eliminated a wildcard binding in b2180
inlining eliminated a wildcard binding in b2179
elided call to goto block b2180
inlining eliminated a wildcard binding in b1131
suffixInline succeeded for call to block b2179 from block b1131
elided call to goto block b1384
inlining eliminated a wildcard binding in b2183
inlining eliminated a wildcard binding in b2184
inlining eliminated a wildcard binding in b2184
inlining eliminated a wildcard binding in b2186
inlining eliminated a wildcard binding in b2188
inlining eliminated a wildcard binding in b2188
inlining eliminated a wildcard binding in b2182
inlining eliminated a wildcard binding in b1143
elided call to goto block b2188
elided call to goto block b2188
elided call to goto block b2183
inlining eliminated a wildcard binding in b2194
inlining eliminated a wildcard binding in b2194
inlining eliminated a wildcard binding in b2193
inlining eliminated a wildcard binding in b2192
elided call to goto block b2193
inlining eliminated a wildcard binding in b1130
inlining eliminated a wildcard binding in b2196
inlining eliminated a wildcard binding in b2197
inlining eliminated a wildcard binding in b2197
inlining eliminated a wildcard binding in b2199
inlining eliminated a wildcard binding in b2199
inlining eliminated a wildcard binding in b2195
inlining eliminated a wildcard binding in b1601
elided call to goto block b2196
elided call to goto block b1130
elided call to goto block b1130
inlining eliminated a wildcard binding in b2202
inlining eliminated a wildcard binding in b2202
inlining eliminated a wildcard binding in b2201
inlining eliminated a wildcard binding in b2200
elided call to goto block b2201
inlining eliminated a wildcard binding in b1128
inlining eliminated a wildcard binding in b2204
inlining eliminated a wildcard binding in b2211
inlining eliminated a wildcard binding in b2205
inlining eliminated a wildcard binding in b2205
inlining eliminated a wildcard binding in b2207
inlining eliminated a wildcard binding in b2209
inlining eliminated a wildcard binding in b2210
inlining eliminated a wildcard binding in b2210
inlining eliminated a wildcard binding in b2203
inlining eliminated a wildcard binding in b1151
elided call to goto block b2210
suffixInline succeeded for call to block b2207 from block b2205
elided call to goto block b2210
elided call to goto block b2204
elided call to goto block b1128
inlining eliminated a wildcard binding in b1126
inlining eliminated a wildcard binding in b2214
inlining eliminated a wildcard binding in b2219
inlining eliminated a wildcard binding in b1608
inlining eliminated a wildcard binding in b2213
inlining eliminated a wildcard binding in b2215
inlining eliminated a wildcard binding in b2215
inlining eliminated a wildcard binding in b2217
inlining eliminated a wildcard binding in b2227
inlining eliminated a wildcard binding in b2227
inlining eliminated a wildcard binding in b2227
inlining eliminated a wildcard binding in b2228
inlining eliminated a wildcard binding in b2228
inlining eliminated a wildcard binding in b2220
inlining eliminated a wildcard binding in b2220
inlining eliminated a wildcard binding in b2222
inlining eliminated a wildcard binding in b2222
inlining eliminated a wildcard binding in b2225
inlining eliminated a wildcard binding in b2225
inlining eliminated a wildcard binding in b2226
inlining eliminated a wildcard binding in b2226
inlining eliminated a wildcard binding in b1122
inlining eliminated a wildcard binding in b2218
elided call to goto block b1122
elided call to goto block b1122
suffixInline succeeded for call to block b2213 from block b1608
elided call to goto block b2214
elided call to goto block b2214
suffixInline succeeded for call to block b2217 from block b2215
elided call to goto block b1122
elided call to goto block b1122
suffixInline succeeded for call to block b2228 from block b2227
elided call to goto block b1122
elided call to goto block b1122
suffixInline succeeded for call to block b2222 from block b2220
suffixInline succeeded for call to block b2229 from block b2220
elided call to goto block b2225
suffixInline succeeded for call to block b2229 from block b2222
elided call to goto block b2225
elided call to goto block b2225
elided call to goto block b1122
elided call to goto block b2219
inlining eliminated a wildcard binding in b2243
elided call to goto block b2242
suffixInline succeeded for call to block b2241 from block b808
inlining eliminated a wildcard binding in b2245
inlining eliminated a wildcard binding in b2246
inlining eliminated a wildcard binding in b2246
inlining eliminated a wildcard binding in b2248
inlining eliminated a wildcard binding in b2250
inlining eliminated a wildcard binding in b2250
inlining eliminated a wildcard binding in b2244
inlining eliminated a wildcard binding in b970
elided call to goto block b2250
elided call to goto block b2250
elided call to goto block b2245
inlining eliminated a wildcard binding in b2280
inlining eliminated a wildcard binding in b2280
inlining eliminated a wildcard binding in b2279
inlining eliminated a wildcard binding in b2278
elided call to goto block b2279
inlining eliminated a wildcard binding in b971
inlining eliminated a wildcard binding in b2282
inlining eliminated a wildcard binding in b2283
inlining eliminated a wildcard binding in b2283
inlining eliminated a wildcard binding in b2285
inlining eliminated a wildcard binding in b2285
inlining eliminated a wildcard binding in b2281
inlining eliminated a wildcard binding in b1621
elided call to goto block b2282
elided call to goto block b971
elided call to goto block b971
inlining eliminated a wildcard binding in b2288
inlining eliminated a wildcard binding in b2288
inlining eliminated a wildcard binding in b2287
elided call to goto block b2287
inlining eliminated a wildcard binding in b1162
inlining eliminated a wildcard binding in b2291
inlining eliminated a wildcard binding in b2292
inlining eliminated a wildcard binding in b2292
inlining eliminated a wildcard binding in b2294
inlining eliminated a wildcard binding in b2296
inlining eliminated a wildcard binding in b2296
inlining eliminated a wildcard binding in b2290
inlining eliminated a wildcard binding in b972
elided call to goto block b2296
elided call to goto block b2296
elided call to goto block b2291
elided call to goto block b1162
elided call to goto block b1162
inlining eliminated a wildcard binding in b2325
inlining eliminated a wildcard binding in b2325
inlining eliminated a wildcard binding in b2324
inlining eliminated a wildcard binding in b2323
elided call to goto block b2324
inlining eliminated a wildcard binding in b978
elided call to goto block b1162
inlining eliminated a wildcard binding in b2328
inlining eliminated a wildcard binding in b2328
inlining eliminated a wildcard binding in b2327
inlining eliminated a wildcard binding in b2326
elided call to goto block b2327
inlining eliminated a wildcard binding in b1629
suffixInline succeeded for call to block b2326 from block b1629
elided call to goto block b1162
elided call to goto block b978
inlining eliminated a wildcard binding in b2333
inlining eliminated a wildcard binding in b2333
suffixInline succeeded for call to block b2326 from block b2333
elided call to goto block b1162
inlining eliminated a wildcard binding in b2331
inlining eliminated a wildcard binding in b2331
suffixInline succeeded for call to block b2333 from block b2331
inlining eliminated a wildcard binding in b2330
inlining eliminated a wildcard binding in b2329
elided call to goto block b2330
inlining eliminated a wildcard binding in b1168
inlining eliminated a wildcard binding in b2335
inlining eliminated a wildcard binding in b2336
inlining eliminated a wildcard binding in b2336
inlining eliminated a wildcard binding in b2338
inlining eliminated a wildcard binding in b2340
inlining eliminated a wildcard binding in b2340
inlining eliminated a wildcard binding in b2334
inlining eliminated a wildcard binding in b980
elided call to goto block b2340
elided call to goto block b2340
elided call to goto block b2335
elided call to goto block b1168
elided call to goto block b1168
inlining eliminated a wildcard binding in b2440
inlining eliminated a wildcard binding in b2440
inlining eliminated a wildcard binding in b2439
inlining eliminated a wildcard binding in b2438
elided call to goto block b2439
inlining eliminated a wildcard binding in b2445
inlining eliminated a wildcard binding in b2445
suffixInline succeeded for call to block b2438 from block b2445
elided call to goto block b1168
inlining eliminated a wildcard binding in b2443
suffixInline succeeded for call to block b2445 from block b2443
elided call to goto block b1168
inlining eliminated a wildcard binding in b2437
inlining eliminated a wildcard binding in b2437
inlining eliminated a wildcard binding in b2436
inlining eliminated a wildcard binding in b2435
elided call to goto block b2436
inlining eliminated a wildcard binding in b1212
suffixInline succeeded for call to block b2435 from block b1212
elided call to goto block b1168
elided call to goto block b2442
suffixInline succeeded for call to block b2441 from block b1287
elided call to goto block b1168
inlining eliminated a wildcard binding in b2448
inlining eliminated a wildcard binding in b2448
inlining eliminated a wildcard binding in b2447
inlining eliminated a wildcard binding in b2446
elided call to goto block b2447
inlining eliminated a wildcard binding in b1292
inlining eliminated a wildcard binding in b1292
suffixInline succeeded for call to block b2446 from block b1292
elided call to goto block b1168
elided call to goto block b1168
inlining eliminated a wildcard binding in b2451
inlining eliminated a wildcard binding in b2451
inlining eliminated a wildcard binding in b2450
inlining eliminated a wildcard binding in b2449
elided call to goto block b2450
inlining eliminated a wildcard binding in b1291
inlining eliminated a wildcard binding in b1291
suffixInline succeeded for call to block b2449 from block b1291
elided call to goto block b1168
suffixInline succeeded for call to block b2446 from block b2460
elided call to goto block b1168
suffixInline succeeded for call to block b2449 from block b2458
elided call to goto block b1168
inlining eliminated a wildcard binding in b2456
inlining eliminated a wildcard binding in b2454
inlining eliminated a wildcard binding in b2454
suffixInline succeeded for call to block b2456 from block b2454
inlining eliminated a wildcard binding in b2453
inlining eliminated a wildcard binding in b2452
elided call to goto block b2453
inlining eliminated a wildcard binding in b1286
inlining eliminated a wildcard binding in b2462
inlining eliminated a wildcard binding in b2463
inlining eliminated a wildcard binding in b2463
inlining eliminated a wildcard binding in b2465
inlining eliminated a wildcard binding in b2465
inlining eliminated a wildcard binding in b2461
inlining eliminated a wildcard binding in b1645
elided call to goto block b2462
elided call to goto block b1286
elided call to goto block b1286
inlining eliminated a wildcard binding in b2468
inlining eliminated a wildcard binding in b2468
inlining eliminated a wildcard binding in b2467
elided call to goto block b2467
inlining eliminated a wildcard binding in b1285
elided call to goto block b1168
inlining eliminated a wildcard binding in b2472
inlining eliminated a wildcard binding in b2472
inlining eliminated a wildcard binding in b2471
inlining eliminated a wildcard binding in b2470
elided call to goto block b2471
inlining eliminated a wildcard binding in b1296
inlining eliminated a wildcard binding in b1296
suffixInline succeeded for call to block b2470 from block b1296
elided call to goto block b1168
elided call to goto block b1168
inlining eliminated a wildcard binding in b2475
inlining eliminated a wildcard binding in b2475
inlining eliminated a wildcard binding in b2474
inlining eliminated a wildcard binding in b2473
elided call to goto block b2474
inlining eliminated a wildcard binding in b1295
inlining eliminated a wildcard binding in b1295
suffixInline succeeded for call to block b2473 from block b1295
elided call to goto block b1168
elided call to goto block b1285
suffixInline succeeded for call to block b2470 from block b2484
elided call to goto block b1168
suffixInline succeeded for call to block b2473 from block b2482
elided call to goto block b1168
inlining eliminated a wildcard binding in b2480
inlining eliminated a wildcard binding in b2478
inlining eliminated a wildcard binding in b2478
suffixInline succeeded for call to block b2480 from block b2478
inlining eliminated a wildcard binding in b2477
inlining eliminated a wildcard binding in b2476
elided call to goto block b2477
inlining eliminated a wildcard binding in b1284
elided call to goto block b1285
inlining eliminated a wildcard binding in b2487
inlining eliminated a wildcard binding in b2487
suffixInline succeeded for call to block b2480 from block b2487
inlining eliminated a wildcard binding in b2486
inlining eliminated a wildcard binding in b2485
elided call to goto block b2486
inlining eliminated a wildcard binding in b1647
suffixInline succeeded for call to block b2485 from block b1647
elided call to goto block b1285
elided call to goto block b1284
inlining eliminated a wildcard binding in b2492
inlining eliminated a wildcard binding in b2492
suffixInline succeeded for call to block b2485 from block b2492
elided call to goto block b1285
inlining eliminated a wildcard binding in b2490
inlining eliminated a wildcard binding in b2490
suffixInline succeeded for call to block b2492 from block b2490
inlining eliminated a wildcard binding in b2489
inlining eliminated a wildcard binding in b2488
elided call to goto block b2489
inlining eliminated a wildcard binding in b1283
elided call to goto block b978
inlining eliminated a wildcard binding in b2416
inlining eliminated a wildcard binding in b2416
suffixInline succeeded for call to block b2333 from block b2416
inlining eliminated a wildcard binding in b2415
inlining eliminated a wildcard binding in b2414
elided call to goto block b2415
inlining eliminated a wildcard binding in b1175
inlining eliminated a wildcard binding in b2418
inlining eliminated a wildcard binding in b2425
inlining eliminated a wildcard binding in b2419
inlining eliminated a wildcard binding in b2419
inlining eliminated a wildcard binding in b2421
inlining eliminated a wildcard binding in b2423
inlining eliminated a wildcard binding in b2424
inlining eliminated a wildcard binding in b2424
inlining eliminated a wildcard binding in b2417
inlining eliminated a wildcard binding in b977
elided call to goto block b2424
suffixInline succeeded for call to block b2421 from block b2419
elided call to goto block b2424
elided call to goto block b2418
elided call to goto block b1175
elided call to goto block b1168
inlining eliminated a wildcard binding in b2495
inlining eliminated a wildcard binding in b2495
inlining eliminated a wildcard binding in b2494
inlining eliminated a wildcard binding in b2493
elided call to goto block b2494
inlining eliminated a wildcard binding in b1648
suffixInline succeeded for call to block b2493 from block b1648
elided call to goto block b1168
elided call to goto block b1283
inlining eliminated a wildcard binding in b2500
inlining eliminated a wildcard binding in b2500
suffixInline succeeded for call to block b2493 from block b2500
elided call to goto block b1168
inlining eliminated a wildcard binding in b2498
inlining eliminated a wildcard binding in b2498
suffixInline succeeded for call to block b2500 from block b2498
inlining eliminated a wildcard binding in b2497
inlining eliminated a wildcard binding in b2496
elided call to goto block b2497
inlining eliminated a wildcard binding in b814
suffixInline succeeded for call to block b2496 from block b814
elided call to goto block b1283
inlining eliminated a wildcard binding in b2509
inlining eliminated a wildcard binding in b2507
inlining eliminated a wildcard binding in b2508
inlining eliminated a wildcard binding in b2503
inlining eliminated a wildcard binding in b2505
elided call to goto block b2508
suffixInline succeeded for call to block b2501 from block b2509
elided call to goto block b2502
elided call to goto block b2508
suffixInline succeeded for call to block b2501 from block b2507
elided call to goto block b2502
elided call to goto block b2502
inlining eliminated a wildcard binding in b2521
elided call to goto block b2520
suffixInline succeeded for call to block b2519 from block b816
inlining eliminated a wildcard binding in b2530
inlining eliminated a wildcard binding in b2528
inlining eliminated a wildcard binding in b2529
inlining eliminated a wildcard binding in b2524
inlining eliminated a wildcard binding in b2526
elided call to goto block b2529
suffixInline succeeded for call to block b2522 from block b2530
elided call to goto block b2523
elided call to goto block b2529
suffixInline succeeded for call to block b2522 from block b2528
elided call to goto block b2523
elided call to goto block b2523
inlining eliminated a wildcard binding in b2542
elided call to goto block b2541
suffixInline succeeded for call to block b2540 from block b818
inlining eliminated a wildcard binding in b2551
inlining eliminated a wildcard binding in b2549
inlining eliminated a wildcard binding in b2550
inlining eliminated a wildcard binding in b2545
inlining eliminated a wildcard binding in b2547
elided call to goto block b2550
suffixInline succeeded for call to block b2543 from block b2551
elided call to goto block b2544
elided call to goto block b2550
suffixInline succeeded for call to block b2543 from block b2549
elided call to goto block b2544
elided call to goto block b2544
suffixInline succeeded for call to block b2547 from block b2545
suffixInline succeeded for call to block b1003 from block b1587
inlining eliminated a wildcard binding in b2555
inlining eliminated a wildcard binding in b2555
inlining eliminated a wildcard binding in b2554
inlining eliminated a wildcard binding in b2553
elided call to goto block b2554
inlining eliminated a wildcard binding in b2560
inlining eliminated a wildcard binding in b2560
suffixInline succeeded for call to block b2553 from block b2560
inlining eliminated a wildcard binding in b2558
suffixInline succeeded for call to block b2560 from block b2558
inlining eliminated a wildcard binding in b2534
inlining eliminated a wildcard binding in b2534
inlining eliminated a wildcard binding in b2533
inlining eliminated a wildcard binding in b2532
elided call to goto block b2533
inlining eliminated a wildcard binding in b2539
inlining eliminated a wildcard binding in b2539
suffixInline succeeded for call to block b2532 from block b2539
inlining eliminated a wildcard binding in b2537
suffixInline succeeded for call to block b2539 from block b2537
inlining eliminated a wildcard binding in b2513
inlining eliminated a wildcard binding in b2513
inlining eliminated a wildcard binding in b2512
inlining eliminated a wildcard binding in b2511
elided call to goto block b2512
inlining eliminated a wildcard binding in b2518
inlining eliminated a wildcard binding in b2518
suffixInline succeeded for call to block b2511 from block b2518
inlining eliminated a wildcard binding in b2516
suffixInline succeeded for call to block b2518 from block b2516
inlining eliminated a wildcard binding in b2235
inlining eliminated a wildcard binding in b2235
inlining eliminated a wildcard binding in b2234
inlining eliminated a wildcard binding in b2233
elided call to goto block b2234
inlining eliminated a wildcard binding in b2240
inlining eliminated a wildcard binding in b2240
suffixInline succeeded for call to block b2233 from block b2240
inlining eliminated a wildcard binding in b2238
suffixInline succeeded for call to block b2240 from block b2238
inlining eliminated a wildcard binding in b2232
elided call to goto block b2231
elided call to goto block b2237
suffixInline succeeded for call to block b2236 from block b1414
inlining eliminated a wildcard binding in b2256
elided call to goto block b2255
inlining eliminated a wildcard binding in b1419
suffixInline succeeded for call to block b2254 from block b1419
inlining eliminated a wildcard binding in b2259
elided call to goto block b2258
inlining eliminated a wildcard binding in b1418
suffixInline succeeded for call to block b2257 from block b1418
suffixInline succeeded for call to block b2254 from block b2268
suffixInline succeeded for call to block b2257 from block b2266
inlining eliminated a wildcard binding in b2264
inlining eliminated a wildcard binding in b2262
inlining eliminated a wildcard binding in b2262
suffixInline succeeded for call to block b2264 from block b2262
inlining eliminated a wildcard binding in b2261
inlining eliminated a wildcard binding in b2260
elided call to goto block b2261
inlining eliminated a wildcard binding in b1413
inlining eliminated a wildcard binding in b2270
inlining eliminated a wildcard binding in b2271
inlining eliminated a wildcard binding in b2271
inlining eliminated a wildcard binding in b2273
inlining eliminated a wildcard binding in b2273
inlining eliminated a wildcard binding in b2269
inlining eliminated a wildcard binding in b1620
elided call to goto block b2270
elided call to goto block b1413
elided call to goto block b1413
inlining eliminated a wildcard binding in b2276
inlining eliminated a wildcard binding in b2276
inlining eliminated a wildcard binding in b2275
elided call to goto block b2275
inlining eliminated a wildcard binding in b1412
inlining eliminated a wildcard binding in b2302
elided call to goto block b2301
inlining eliminated a wildcard binding in b1423
suffixInline succeeded for call to block b2300 from block b1423
inlining eliminated a wildcard binding in b2305
elided call to goto block b2304
inlining eliminated a wildcard binding in b1422
suffixInline succeeded for call to block b2303 from block b1422
elided call to goto block b1412
suffixInline succeeded for call to block b2300 from block b2314
suffixInline succeeded for call to block b2303 from block b2312
inlining eliminated a wildcard binding in b2310
inlining eliminated a wildcard binding in b2308
inlining eliminated a wildcard binding in b2308
suffixInline succeeded for call to block b2310 from block b2308
inlining eliminated a wildcard binding in b2307
inlining eliminated a wildcard binding in b2306
elided call to goto block b2307
inlining eliminated a wildcard binding in b1411
elided call to goto block b1412
inlining eliminated a wildcard binding in b2317
inlining eliminated a wildcard binding in b2317
suffixInline succeeded for call to block b2310 from block b2317
inlining eliminated a wildcard binding in b2316
inlining eliminated a wildcard binding in b2315
elided call to goto block b2316
inlining eliminated a wildcard binding in b1628
suffixInline succeeded for call to block b2315 from block b1628
elided call to goto block b1412
elided call to goto block b1411
inlining eliminated a wildcard binding in b2322
inlining eliminated a wildcard binding in b2322
suffixInline succeeded for call to block b2315 from block b2322
elided call to goto block b1412
inlining eliminated a wildcard binding in b2320
inlining eliminated a wildcard binding in b2320
suffixInline succeeded for call to block b2322 from block b2320
inlining eliminated a wildcard binding in b2319
inlining eliminated a wildcard binding in b2318
elided call to goto block b2319
inlining eliminated a wildcard binding in b1410
inlining eliminated a wildcard binding in b2346
elided call to goto block b2345
inlining eliminated a wildcard binding in b1427
suffixInline succeeded for call to block b2344 from block b1427
inlining eliminated a wildcard binding in b2349
elided call to goto block b2348
inlining eliminated a wildcard binding in b1426
suffixInline succeeded for call to block b2347 from block b1426
elided call to goto block b1410
suffixInline succeeded for call to block b2344 from block b2358
suffixInline succeeded for call to block b2347 from block b2356
inlining eliminated a wildcard binding in b2354
inlining eliminated a wildcard binding in b2361
inlining eliminated a wildcard binding in b2361
suffixInline succeeded for call to block b2354 from block b2361
inlining eliminated a wildcard binding in b2360
inlining eliminated a wildcard binding in b2359
elided call to goto block b2360
inlining eliminated a wildcard binding in b2366
inlining eliminated a wildcard binding in b2366
suffixInline succeeded for call to block b2359 from block b2366
elided call to goto block b1410
inlining eliminated a wildcard binding in b2364
suffixInline succeeded for call to block b2366 from block b2364
elided call to goto block b1410
inlining eliminated a wildcard binding in b2352
inlining eliminated a wildcard binding in b2352
suffixInline succeeded for call to block b2354 from block b2352
inlining eliminated a wildcard binding in b2351
inlining eliminated a wildcard binding in b2350
elided call to goto block b2351
inlining eliminated a wildcard binding in b1409
suffixInline succeeded for call to block b2350 from block b1409
elided call to goto block b1410
elided call to goto block b2363
suffixInline succeeded for call to block b2362 from block b1408
elided call to goto block b1410
inlining eliminated a wildcard binding in b2369
inlining eliminated a wildcard binding in b2369
suffixInline succeeded for call to block b2354 from block b2369
inlining eliminated a wildcard binding in b2368
inlining eliminated a wildcard binding in b2367
elided call to goto block b2368
inlining eliminated a wildcard binding in b1431
inlining eliminated a wildcard binding in b1431
suffixInline succeeded for call to block b2367 from block b1431
elided call to goto block b1410
elided call to goto block b1410
inlining eliminated a wildcard binding in b2372
inlining eliminated a wildcard binding in b2372
suffixInline succeeded for call to block b2354 from block b2372
inlining eliminated a wildcard binding in b2371
inlining eliminated a wildcard binding in b2370
elided call to goto block b2371
inlining eliminated a wildcard binding in b1430
inlining eliminated a wildcard binding in b1430
suffixInline succeeded for call to block b2370 from block b1430
elided call to goto block b1410
suffixInline succeeded for call to block b2367 from block b2381
elided call to goto block b1410
suffixInline succeeded for call to block b2370 from block b2379
elided call to goto block b1410
inlining eliminated a wildcard binding in b2377
inlining eliminated a wildcard binding in b2375
inlining eliminated a wildcard binding in b2375
suffixInline succeeded for call to block b2377 from block b2375
inlining eliminated a wildcard binding in b2374
inlining eliminated a wildcard binding in b2373
elided call to goto block b2374
inlining eliminated a wildcard binding in b1407
inlining eliminated a wildcard binding in b2383
inlining eliminated a wildcard binding in b2384
inlining eliminated a wildcard binding in b2384
inlining eliminated a wildcard binding in b2386
inlining eliminated a wildcard binding in b2386
inlining eliminated a wildcard binding in b2382
inlining eliminated a wildcard binding in b1636
elided call to goto block b2383
elided call to goto block b1407
elided call to goto block b1407
inlining eliminated a wildcard binding in b2389
inlining eliminated a wildcard binding in b2389
inlining eliminated a wildcard binding in b2388
elided call to goto block b2388
inlining eliminated a wildcard binding in b1406
elided call to goto block b1410
inlining eliminated a wildcard binding in b2393
inlining eliminated a wildcard binding in b2393
suffixInline succeeded for call to block b2354 from block b2393
inlining eliminated a wildcard binding in b2392
inlining eliminated a wildcard binding in b2391
elided call to goto block b2392
inlining eliminated a wildcard binding in b1435
inlining eliminated a wildcard binding in b1435
suffixInline succeeded for call to block b2391 from block b1435
elided call to goto block b1410
elided call to goto block b1410
inlining eliminated a wildcard binding in b2396
inlining eliminated a wildcard binding in b2396
suffixInline succeeded for call to block b2354 from block b2396
inlining eliminated a wildcard binding in b2395
inlining eliminated a wildcard binding in b2394
elided call to goto block b2395
inlining eliminated a wildcard binding in b1434
inlining eliminated a wildcard binding in b1434
suffixInline succeeded for call to block b2394 from block b1434
elided call to goto block b1410
elided call to goto block b1406
suffixInline succeeded for call to block b2391 from block b2405
elided call to goto block b1410
suffixInline succeeded for call to block b2394 from block b2403
elided call to goto block b1410
inlining eliminated a wildcard binding in b2401
inlining eliminated a wildcard binding in b2399
inlining eliminated a wildcard binding in b2399
suffixInline succeeded for call to block b2401 from block b2399
inlining eliminated a wildcard binding in b2398
inlining eliminated a wildcard binding in b2397
elided call to goto block b2398
inlining eliminated a wildcard binding in b1405
elided call to goto block b1406
inlining eliminated a wildcard binding in b2408
inlining eliminated a wildcard binding in b2408
suffixInline succeeded for call to block b2401 from block b2408
inlining eliminated a wildcard binding in b2407
inlining eliminated a wildcard binding in b2406
elided call to goto block b2407
inlining eliminated a wildcard binding in b1640
suffixInline succeeded for call to block b2406 from block b1640
elided call to goto block b1406
elided call to goto block b1405
inlining eliminated a wildcard binding in b2413
inlining eliminated a wildcard binding in b2413
suffixInline succeeded for call to block b2406 from block b2413
elided call to goto block b1406
inlining eliminated a wildcard binding in b2411
inlining eliminated a wildcard binding in b2411
suffixInline succeeded for call to block b2413 from block b2411
inlining eliminated a wildcard binding in b2410
inlining eliminated a wildcard binding in b2409
elided call to goto block b2410
inlining eliminated a wildcard binding in b1404
elided call to goto block b1410
inlining eliminated a wildcard binding in b2429
inlining eliminated a wildcard binding in b2429
suffixInline succeeded for call to block b2354 from block b2429
inlining eliminated a wildcard binding in b2428
inlining eliminated a wildcard binding in b2427
elided call to goto block b2428
inlining eliminated a wildcard binding in b1642
suffixInline succeeded for call to block b2427 from block b1642
elided call to goto block b1410
elided call to goto block b1404
inlining eliminated a wildcard binding in b2434
inlining eliminated a wildcard binding in b2434
suffixInline succeeded for call to block b2427 from block b2434
elided call to goto block b1410
inlining eliminated a wildcard binding in b2432
inlining eliminated a wildcard binding in b2432
suffixInline succeeded for call to block b2434 from block b2432
inlining eliminated a wildcard binding in b2431
inlining eliminated a wildcard binding in b2430
elided call to goto block b2431
inlining eliminated a wildcard binding in b1204
suffixInline succeeded for call to block b2430 from block b1204
elided call to goto block b1404
elided call to goto block b2515
suffixInline succeeded for call to block b2514 from block b1203
elided call to goto block b2536
suffixInline succeeded for call to block b2535 from block b1202
elided call to goto block b2557
inlining eliminated a wildcard binding in b2567
inlining eliminated a wildcard binding in b2563
inlining eliminated a wildcard binding in b2565
elided call to goto block b2567
suffixInline succeeded for call to block b2561 from block b2570
elided call to goto block b2562
elided call to goto block b2567
suffixInline succeeded for call to block b2561 from block b2568
elided call to goto block b2562
elided call to goto block b2562
inlining eliminated a wildcard binding in b2573
elided call to goto block b2572
suffixInline succeeded for call to block b2571 from block b1688
suffixInline succeeded for call to block b1688 from block b1750
suffixInline succeeded for call to block b1750 from block initialize
Inlining pass finished, running shake.
lifted allocator for t16501
lifted allocator for t16501
lifted allocator for t16501
lifted allocator for t16501
lifted allocator for t16501
lifted allocator for t16501
lifted allocator for t16501
lifted allocator for t16545
lifted allocator for t16729
lifted allocator for t16729
lifted allocator for t16729
lifted allocator for t16729
lifted allocator for t16729
lifted allocator for t16729
lifted allocator for t16729
lifted allocator for t16729
lifted allocator for t16729
lifted allocator for t16753
lifted allocator for t16753
lifted allocator for t16753
lifted allocator for t16753
lifted allocator for t16753
lifted allocator for t16753
lifted allocator for t16753
lifted allocator for t16788
lifted allocator for t16788
lifted allocator for t16788
lifted allocator for t16788
lifted allocator for t16788
lifted allocator for t16788
lifted allocator for t16788
lifted allocator for t16788
lifted allocator for t16807
lifted allocator for t16807
lifted allocator for t16807
lifted allocator for t16807
lifted allocator for t16807
lifted allocator for t16807
lifted allocator for t16836
lifted allocator for t16836
lifted allocator for t16836
lifted allocator for t16836
lifted allocator for t16836
lifted allocator for t16836
lifted allocator for t16836
lifted allocator for t16836
lifted allocator for t16836
lifted allocator for t16836
lifted allocator for t16836
lifted allocator for t16836
lifting static allocator to top-level s265
lifting static allocator to top-level s266
lifting static allocator to top-level s267
lifted allocator for t16968
lifting static allocator to top-level s268
lifting static allocator to top-level s269
lifted allocator for t17051
lifting static allocator to top-level s270
lifting static allocator to top-level s271
applied left monad law for t16514 <- return Just
applied left monad law for t16513 <- return Nothing
applied left monad law for t16504 <- return Just
rewriting Just @ [t16505]
deriving specialized block b2574 for BlockCall to block b1469
applied left monad law for t16503 <- return Nothing
deriving specialized block b2575 for BlockCall to block b1470
applied left monad law for t16463 <- return s14
applied left monad law for t16462 <- return s13
applied left monad law for t16453 <- return s14
rewriting s14 @ [t16454]
deriving specialized block b2576 for BlockCall to block b1466
applied left monad law for t16452 <- return s13
deriving specialized block b2577 for BlockCall to block b1467
rewriting t16501 @ [t16485]
liveness replaced t16501 with a wildcard
rewriting t16545 @ [t16537]
liveness replaced t16545 with a wildcard
replacing reference to top level com1ctrl with 1021
rewriting t16729 @ [t16710]
liveness replaced t16729 with a wildcard
rewriting t16753 @ [t16737]
liveness replaced t16753 with a wildcard
rewriting t16766 @ [t16757]
liveness replaced t16766 with a wildcard
rewriting t16788 @ [t16778]
liveness replaced t16788 with a wildcard
rewriting t16807 @ [t16803]
liveness replaced t16807 with a wildcard
rewriting t16836 @ [t16832]
liveness replaced t16836 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
applied left monad law for t16639 <- return s20
applied left monad law for t16638 <- return s19
applied left monad law for t16629 <- return s20
rewriting s20 @ [t16630]
deriving specialized block b2578 for BlockCall to block b1476
applied left monad law for t16628 <- return s19
deriving specialized block b2579 for BlockCall to block b1477
applied left monad law for t16877 <- return s20
applied left monad law for t16876 <- return s19
applied left monad law for t16867 <- return s20
rewriting s20 @ [t16868]
deriving specialized block b2580 for BlockCall to block b1481
applied left monad law for t16866 <- return s19
deriving specialized block b2581 for BlockCall to block b1482
applied left monad law for t16901 <- return s265
rewriting s265 @ [t16891]
applied left monad law for t16914 <- return s266
rewriting s266 @ [0]
eliminating duplicate args in call within b1936
rewriting t16925 @ [0]
liveness replaced t16925 with a wildcard
rewriting t19163 @ [0]
eliminating duplicate args in call within b1936
liveness replaced t19163 with a wildcard
applied left monad law for t16936 <- return s267
rewriting s267 @ [0]
eliminating duplicate args in call within b1935
rewriting t16968 @ [31]
liveness replaced t16968 with a wildcard
applied left monad law for t18904 <- return s268
rewriting s268 @ [31]
applied left monad law for t18909 <- return s269
rewriting s269 @ [31]
rewriting t17051 @ [31]
liveness replaced t17051 with a wildcard
applied left monad law for t18923 <- return s270
rewriting s270 @ [31]
applied left monad law for t18928 <- return s271
rewriting s271 @ [31]
liveness replaced t19511 with a wildcard
liveness replaced t19510 with a wildcard
liveness replaced t19504 with a wildcard
liveness replaced t19503 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19500 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19490 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t19579 with a wildcard
liveness replaced t19578 with a wildcard
liveness replaced t19572 with a wildcard
liveness replaced t19571 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19568 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19558 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t19647 with a wildcard
liveness replaced t19646 with a wildcard
cse: using previously computed value t16554 for t20780
liveness replaced t20783 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t19640 with a wildcard
liveness replaced t19639 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19636 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
liveness replaced t19481 with a wildcard
liveness replaced t19480 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19460 with a wildcard
liveness replaced t19474 with a wildcard
liveness replaced t19473 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19470 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t19687 with a wildcard
liveness replaced t19686 with a wildcard
liveness replaced t19685 with a wildcard
liveness replaced t19684 with a wildcard
liveness replaced t19683 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t19676 with a wildcard
liveness replaced t19675 with a wildcard
liveness replaced t19674 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19671 with a wildcard
liveness replaced t19670 with a wildcard
liveness replaced t19669 with a wildcard
cse: using previously computed value t16554 for t20793
liveness replaced t20796 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t19619 with a wildcard
liveness replaced t19618 with a wildcard
liveness replaced t19617 with a wildcard
liveness replaced t19616 with a wildcard
liveness replaced t19615 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t19608 with a wildcard
liveness replaced t19607 with a wildcard
liveness replaced t19606 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19603 with a wildcard
liveness replaced t19602 with a wildcard
liveness replaced t19601 with a wildcard
cse: using previously computed value t16554 for t20771
liveness replaced t20774 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t19551 with a wildcard
liveness replaced t19550 with a wildcard
liveness replaced t19549 with a wildcard
liveness replaced t19548 with a wildcard
liveness replaced t19547 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t19540 with a wildcard
liveness replaced t19539 with a wildcard
liveness replaced t19538 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19535 with a wildcard
liveness replaced t19534 with a wildcard
liveness replaced t19533 with a wildcard
cse: using previously computed value t16554 for t20754
liveness replaced t20757 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t19717 with a wildcard
liveness replaced t19716 with a wildcard
liveness replaced t19709 with a wildcard
liveness replaced t19708 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19705 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19694 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t19753 with a wildcard
liveness replaced t19752 with a wildcard
liveness replaced t19745 with a wildcard
liveness replaced t19744 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19741 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19730 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t19766 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t20800
liveness replaced t16554 with a wildcard
eliminating duplicate args in call within b2061
eliminating duplicate args in call within b2063
liveness replaced t19799 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19796 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
deriving specialized block b2078 for BlockCall to block b1062
rewriting Pair63349 1 t17502 -> t21224
applied left monad law for t17506 <- return t21224
rewriting Pair63349 2 t17502 -> t21225
applied left monad law for t17507 <- return t21225
liveness replaced t17502 with a wildcard
deriving specialized block b2587 for BlockCall to block b1582
liveness replaced t17495 with a wildcard
deriving specialized block b2586 for BlockCall to block b1792
liveness replaced t17495 with a wildcard
cse: using previously computed value t16554 for t20807
liveness replaced t16554 with a wildcard
cse: using previously computed value t18697 for t20809
cse: using previously computed value t18697 for t20810
eliminating duplicate args in call within b2078
eliminating duplicate args in call within b2079
liveness replaced t20811 with a wildcard
liveness replaced t18697 with a wildcard
eliminating duplicate args in call within b2101
eliminating duplicate args in call within b2103
liveness replaced t19891 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19888 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t19875 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t19926 with a wildcard
liveness replaced t19925 with a wildcard
liveness replaced t19919 with a wildcard
liveness replaced t19918 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19915 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19905 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t19994 with a wildcard
liveness replaced t19993 with a wildcard
cse: using previously computed value t16554 for t20849
liveness replaced t20852 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t19987 with a wildcard
liveness replaced t19986 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19983 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
liveness replaced t19871 with a wildcard
liveness replaced t19870 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19850 with a wildcard
liveness replaced t19864 with a wildcard
liveness replaced t19863 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19860 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t20034 with a wildcard
liveness replaced t20033 with a wildcard
liveness replaced t20032 with a wildcard
liveness replaced t20031 with a wildcard
liveness replaced t20030 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20023 with a wildcard
liveness replaced t20022 with a wildcard
liveness replaced t20021 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20018 with a wildcard
liveness replaced t20017 with a wildcard
liveness replaced t20016 with a wildcard
cse: using previously computed value t16554 for t20862
liveness replaced t20865 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t19966 with a wildcard
liveness replaced t19965 with a wildcard
liveness replaced t19964 with a wildcard
liveness replaced t19963 with a wildcard
liveness replaced t19962 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t19955 with a wildcard
liveness replaced t19954 with a wildcard
liveness replaced t19953 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t19950 with a wildcard
liveness replaced t19949 with a wildcard
liveness replaced t19948 with a wildcard
cse: using previously computed value t16554 for t20840
liveness replaced t20843 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t20824
liveness replaced t20825 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20064 with a wildcard
liveness replaced t20063 with a wildcard
liveness replaced t20056 with a wildcard
liveness replaced t20055 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20052 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20041 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20100 with a wildcard
liveness replaced t20099 with a wildcard
liveness replaced t20092 with a wildcard
liveness replaced t20091 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20088 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20077 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20113 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t20869
liveness replaced t16554 with a wildcard
eliminating duplicate args in call within b2209
eliminating duplicate args in call within b2211
liveness replaced t20146 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20143 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
deriving specialized block b2226 for BlockCall to block b1126
rewriting Pair63349 1 t17872 -> t21265
applied left monad law for t17876 <- return t21265
rewriting Pair63349 2 t17872 -> t21266
applied left monad law for t17877 <- return t21266
liveness replaced t17872 with a wildcard
deriving specialized block b2595 for BlockCall to block b1605
liveness replaced t17865 with a wildcard
deriving specialized block b2594 for BlockCall to block b1829
liveness replaced t17865 with a wildcard
cse: using previously computed value t16554 for t20876
liveness replaced t16554 with a wildcard
cse: using previously computed value t18697 for t20878
cse: using previously computed value t18697 for t20879
eliminating duplicate args in call within b2226
eliminating duplicate args in call within b2227
liveness replaced t20880 with a wildcard
liveness replaced t18697 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20221 with a wildcard
liveness replaced t20220 with a wildcard
liveness replaced t20214 with a wildcard
liveness replaced t20213 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20210 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20200 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20268 with a wildcard
liveness replaced t16554 with a wildcard
eliminating duplicate args in call within b2288
liveness replaced t20275 with a wildcard
liveness replaced t20302 with a wildcard
liveness replaced t20301 with a wildcard
liveness replaced t20295 with a wildcard
liveness replaced t20294 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20291 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20281 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t20947
liveness replaced t20948 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
cse: using previously computed value t16554 for t20951
liveness replaced t16554 with a wildcard
eliminating duplicate args in call within b2423
eliminating duplicate args in call within b2425
liveness replaced t20528 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20525 with a wildcard
cse: using previously computed value t16554 for t20893
liveness replaced t20894 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20375 with a wildcard
liveness replaced t20374 with a wildcard
liveness replaced t20368 with a wildcard
liveness replaced t20367 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20364 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20354 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t20956
liveness replaced t20957 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t20634 with a wildcard
liveness replaced t20632 with a wildcard
liveness replaced t20631 with a wildcard
liveness replaced t20630 with a wildcard
liveness replaced t20629 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20623 with a wildcard
liveness replaced t20621 with a wildcard
liveness replaced t20620 with a wildcard
liveness replaced t20619 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20616 with a wildcard
liveness replaced t20615 with a wildcard
cse: using previously computed value t16554 for t20934
liveness replaced t20937 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t20584 with a wildcard
liveness replaced t20582 with a wildcard
liveness replaced t20581 with a wildcard
liveness replaced t20580 with a wildcard
liveness replaced t20579 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20573 with a wildcard
liveness replaced t20571 with a wildcard
liveness replaced t20570 with a wildcard
liveness replaced t20569 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20566 with a wildcard
liveness replaced t20565 with a wildcard
cse: using previously computed value t16554 for t20916
liveness replaced t20919 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t20899
liveness replaced t20900 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20588 with a wildcard
liveness replaced t16554 with a wildcard
eliminating duplicate args in call within b2468
liveness replaced t20595 with a wildcard
cse: using previously computed value t16554 for t20943
liveness replaced t20944 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t20929
liveness replaced t20932 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
eliminating duplicate args in call within b2507
eliminating duplicate args in call within b2509
liveness replaced t20669 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20666 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t20653 with a wildcard
liveness replaced t16554 with a wildcard
eliminating duplicate args in call within b2528
eliminating duplicate args in call within b2530
liveness replaced t20690 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20687 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t20674 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
cse: using previously computed value t16554 for t20979
liveness replaced t16554 with a wildcard
eliminating duplicate args in call within b2549
eliminating duplicate args in call within b2551
liveness replaced t20711 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20708 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t20986
liveness replaced t20987 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t20992
liveness replaced t20993 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t20998
liveness replaced t20999 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20402 with a wildcard
liveness replaced t20401 with a wildcard
liveness replaced t20400 with a wildcard
liveness replaced t20399 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20393 with a wildcard
liveness replaced t20392 with a wildcard
liveness replaced t20391 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20388 with a wildcard
liveness replaced t20387 with a wildcard
cse: using previously computed value t16554 for t21137
liveness replaced t21140 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20329 with a wildcard
liveness replaced t20328 with a wildcard
liveness replaced t20327 with a wildcard
liveness replaced t20326 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20320 with a wildcard
liveness replaced t20319 with a wildcard
liveness replaced t20318 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20315 with a wildcard
liveness replaced t20314 with a wildcard
cse: using previously computed value t16554 for t21036
liveness replaced t21039 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20248 with a wildcard
liveness replaced t20247 with a wildcard
liveness replaced t20246 with a wildcard
liveness replaced t20245 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20239 with a wildcard
liveness replaced t20238 with a wildcard
liveness replaced t20237 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20234 with a wildcard
liveness replaced t20233 with a wildcard
cse: using previously computed value t16554 for t21018
liveness replaced t21021 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t21004
liveness replaced t21005 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20252 with a wildcard
liveness replaced t16554 with a wildcard
eliminating duplicate args in call within b2276
liveness replaced t20259 with a wildcard
cse: using previously computed value t16554 for t21045
liveness replaced t21046 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t21031
liveness replaced t21034 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t21146
liveness replaced t21147 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
replacing reference to top level com1ctrl with 1021
cse: using previously computed value t16554 for t21101
liveness replaced t21104 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t20495 with a wildcard
liveness replaced t20493 with a wildcard
liveness replaced t20492 with a wildcard
liveness replaced t20491 with a wildcard
liveness replaced t20490 with a wildcard
cse: using previously computed value t16554 for t21108
liveness replaced t21111 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t20484 with a wildcard
liveness replaced t20482 with a wildcard
liveness replaced t20481 with a wildcard
liveness replaced t20480 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20477 with a wildcard
liveness replaced t20476 with a wildcard
cse: using previously computed value t16554 for t21124
liveness replaced t21127 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t21078
liveness replaced t21081 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t20445 with a wildcard
liveness replaced t20443 with a wildcard
liveness replaced t20442 with a wildcard
liveness replaced t20441 with a wildcard
liveness replaced t20440 with a wildcard
cse: using previously computed value t16554 for t21085
liveness replaced t21088 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t20434 with a wildcard
liveness replaced t20432 with a wildcard
liveness replaced t20431 with a wildcard
liveness replaced t20430 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20427 with a wildcard
liveness replaced t20426 with a wildcard
cse: using previously computed value t16554 for t21096
liveness replaced t21099 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t21057
liveness replaced t21060 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t21064
liveness replaced t21065 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t21069
liveness replaced t21072 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t16554 with a wildcard
liveness replaced t20449 with a wildcard
liveness replaced t16554 with a wildcard
eliminating duplicate args in call within b2389
liveness replaced t20456 with a wildcard
cse: using previously computed value t16554 for t21133
liveness replaced t21134 with a wildcard
liveness replaced t16554 with a wildcard
cse: using previously computed value t16554 for t21119
liveness replaced t21122 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t16554 with a wildcard
liveness replaced t20735 with a wildcard
liveness replaced t20734 with a wildcard
liveness replaced t20729 with a wildcard
liveness replaced t20728 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20725 with a wildcard
liveness replaced t16554 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t20716 with a wildcard
liveness replaced t16554 with a wildcard
constant folding for add
applied left monad law for t21180 <- return 1
cse: using previously computed value t19444 for t21184
cse: using previously computed value t19122 for t21186
cse: using previously computed value t19448 for t21188
cse: using previously computed value t19117 for t21190
cse: using previously computed value t19446 for t21192
cse: using previously computed value t19127 for t21194
liveness replaced t21196 with a wildcard
liveness replaced t21189 with a wildcard
liveness replaced t21187 with a wildcard
liveness replaced t21182 with a wildcard
liveness replaced t21179 with a wildcard
Flow pass finished, running shake.
Steps performed = 1872
-------------------------
inlining eliminated a wildcard binding in b690
pushed case into call in b690
inlining eliminated a wildcard binding in b692
pushed case into call in b692
inlining eliminated a wildcard binding in b702
pushed case into call in b702
inlining eliminated a wildcard binding in b700
pushed case into call in b700
inlining eliminated a wildcard binding in b1521
pushed case into call in b1521
inlining eliminated a wildcard binding in b849
pushed case into call in b849
inlining eliminated a wildcard binding in b847
pushed case into call in b847
inlining eliminated a wildcard binding in b852
pushed case into call in b852
pushed case into call in b1239
pushed case into call in b1303
inlining eliminated a wildcard binding in b1236
pushed case into call in b1236
inlining eliminated a wildcard binding in b1536
prefixInline succeeded for call to block b1236 from block b1536
pushed case into call in b1536
pushed case into call in b1359
prefixInline succeeded for call to block b1236 from block b1244
inlining eliminated a wildcard binding in b1539
pushed case into call in b1539
pushed case into call in b1708
pushed case into call in b1707
inlining eliminated a wildcard binding in b1547
pushed case into call in b1547
pushed case into call in b1714
pushed case into call in b1713
inlining eliminated a wildcard binding in b1949
inlining eliminated a wildcard binding in b1947
inlining eliminated a wildcard binding in b1942
inlining eliminated a wildcard binding in b1944
inlining eliminated a wildcard binding in b1967
inlining eliminated a wildcard binding in b1977
inlining eliminated a wildcard binding in b1975
inlining eliminated a wildcard binding in b1970
inlining eliminated a wildcard binding in b1972
inlining eliminated a wildcard binding in b1995
inlining eliminated a wildcard binding in b2005
inlining eliminated a wildcard binding in b1998
inlining eliminated a wildcard binding in b2003
suffixInline succeeded for call to block b946 from block b1033
suffixInline succeeded for call to block b946 from block b1032
inlining eliminated a wildcard binding in b1934
inlining eliminated a wildcard binding in b1927
inlining eliminated a wildcard binding in b1929
inlining eliminated a wildcard binding in b1932
suffixInline succeeded for call to block b949 from block b1038
suffixInline succeeded for call to block b949 from block b1037
inlining eliminated a wildcard binding in b2008
inlining eliminated a wildcard binding in b2020
inlining eliminated a wildcard binding in b2020
inlining eliminated a wildcard binding in b2020
inlining eliminated a wildcard binding in b2011
inlining eliminated a wildcard binding in b2018
inlining eliminated a wildcard binding in b2018
inlining eliminated a wildcard binding in b2018
inlining eliminated a wildcard binding in b2014
suffixInline succeeded for call to block b945 from block b1029
suffixInline succeeded for call to block b945 from block b1028
inlining eliminated a wildcard binding in b1980
inlining eliminated a wildcard binding in b1992
inlining eliminated a wildcard binding in b1992
inlining eliminated a wildcard binding in b1992
inlining eliminated a wildcard binding in b1983
inlining eliminated a wildcard binding in b1990
inlining eliminated a wildcard binding in b1990
inlining eliminated a wildcard binding in b1990
inlining eliminated a wildcard binding in b1986
suffixInline succeeded for call to block b941 from block b1025
suffixInline succeeded for call to block b941 from block b1024
inlining eliminated a wildcard binding in b1952
inlining eliminated a wildcard binding in b1964
inlining eliminated a wildcard binding in b1964
inlining eliminated a wildcard binding in b1964
inlining eliminated a wildcard binding in b1955
inlining eliminated a wildcard binding in b1962
inlining eliminated a wildcard binding in b1962
inlining eliminated a wildcard binding in b1962
inlining eliminated a wildcard binding in b1958
inlining eliminated a wildcard binding in b1939
inlining eliminated a wildcard binding in b2030
inlining eliminated a wildcard binding in b2028
inlining eliminated a wildcard binding in b2023
inlining eliminated a wildcard binding in b2025
elided call to goto block b1369
inlining eliminated a wildcard binding in b2033
inlining eliminated a wildcard binding in b2043
inlining eliminated a wildcard binding in b2041
inlining eliminated a wildcard binding in b2036
inlining eliminated a wildcard binding in b2038
inlining eliminated a wildcard binding in b2046
inlining eliminated a wildcard binding in b2049
inlining eliminated a wildcard binding in b2051
elided call to goto block b1066
suffixInline succeeded for call to block b2047 from block b2051
inlining eliminated a wildcard binding in b2054
elided call to goto block b1066
inlining eliminated a wildcard binding in b2057
inlining eliminated a wildcard binding in b2064
elided call to goto block b1064
suffixInline succeeded for call to block b1087 from block b1090
suffixInline succeeded for call to block b1087 from block b1086
inlining eliminated a wildcard binding in b2075
inlining eliminated a wildcard binding in b2586
inlining eliminated a wildcard binding in b2587
inlining eliminated a wildcard binding in b2072
inlining eliminated a wildcard binding in b2072
elided call to goto block b2075
pushed continuation into block call in b2587
inlining eliminated a wildcard binding in b2104
inlining eliminated a wildcard binding in b2097
inlining eliminated a wildcard binding in b2099
elided call to goto block b2099
inlining eliminated a wildcard binding in b2115
elided call to goto block b2099
inlining eliminated a wildcard binding in b2125
inlining eliminated a wildcard binding in b2123
inlining eliminated a wildcard binding in b2118
inlining eliminated a wildcard binding in b2120
inlining eliminated a wildcard binding in b2143
inlining eliminated a wildcard binding in b2153
inlining eliminated a wildcard binding in b2146
inlining eliminated a wildcard binding in b2151
suffixInline succeeded for call to block b960 from block b1098
suffixInline succeeded for call to block b960 from block b1097
inlining eliminated a wildcard binding in b2091
inlining eliminated a wildcard binding in b2084
inlining eliminated a wildcard binding in b2086
inlining eliminated a wildcard binding in b2089
suffixInline succeeded for call to block b961 from block b1102
suffixInline succeeded for call to block b961 from block b1101
inlining eliminated a wildcard binding in b2156
inlining eliminated a wildcard binding in b2168
inlining eliminated a wildcard binding in b2168
inlining eliminated a wildcard binding in b2168
inlining eliminated a wildcard binding in b2159
inlining eliminated a wildcard binding in b2166
inlining eliminated a wildcard binding in b2166
inlining eliminated a wildcard binding in b2166
inlining eliminated a wildcard binding in b2162
suffixInline succeeded for call to block b959 from block b1094
suffixInline succeeded for call to block b959 from block b1093
inlining eliminated a wildcard binding in b2128
inlining eliminated a wildcard binding in b2140
inlining eliminated a wildcard binding in b2140
inlining eliminated a wildcard binding in b2140
inlining eliminated a wildcard binding in b2131
inlining eliminated a wildcard binding in b2138
inlining eliminated a wildcard binding in b2138
inlining eliminated a wildcard binding in b2138
inlining eliminated a wildcard binding in b2134
inlining eliminated a wildcard binding in b2107
inlining eliminated a wildcard binding in b2110
inlining eliminated a wildcard binding in b2094
inlining eliminated a wildcard binding in b2178
inlining eliminated a wildcard binding in b2176
inlining eliminated a wildcard binding in b2171
inlining eliminated a wildcard binding in b2173
elided call to goto block b1384
inlining eliminated a wildcard binding in b2181
inlining eliminated a wildcard binding in b2191
inlining eliminated a wildcard binding in b2189
inlining eliminated a wildcard binding in b2184
inlining eliminated a wildcard binding in b2186
inlining eliminated a wildcard binding in b2194
inlining eliminated a wildcard binding in b2197
inlining eliminated a wildcard binding in b2199
elided call to goto block b1130
suffixInline succeeded for call to block b2195 from block b2199
inlining eliminated a wildcard binding in b2202
elided call to goto block b1130
inlining eliminated a wildcard binding in b2205
inlining eliminated a wildcard binding in b2212
elided call to goto block b1128
suffixInline succeeded for call to block b1151 from block b1154
suffixInline succeeded for call to block b1151 from block b1150
inlining eliminated a wildcard binding in b2223
inlining eliminated a wildcard binding in b2594
inlining eliminated a wildcard binding in b2595
inlining eliminated a wildcard binding in b2220
inlining eliminated a wildcard binding in b2220
elided call to goto block b2223
pushed continuation into block call in b2595
inlining eliminated a wildcard binding in b2243
elided call to goto block b2099
inlining eliminated a wildcard binding in b2253
inlining eliminated a wildcard binding in b2251
inlining eliminated a wildcard binding in b2246
inlining eliminated a wildcard binding in b2248
inlining eliminated a wildcard binding in b2280
inlining eliminated a wildcard binding in b2283
inlining eliminated a wildcard binding in b2285
elided call to goto block b971
inlining eliminated a wildcard binding in b2289
elided call to goto block b971
inlining eliminated a wildcard binding in b2299
inlining eliminated a wildcard binding in b2297
inlining eliminated a wildcard binding in b2292
inlining eliminated a wildcard binding in b2294
elided call to goto block b1162
inlining eliminated a wildcard binding in b2328
inlining eliminated a wildcard binding in b2416
inlining eliminated a wildcard binding in b2325
elided call to goto block b1162
elided call to goto block b978
inlining eliminated a wildcard binding in b2419
inlining eliminated a wildcard binding in b2426
elided call to goto block b1175
inlining eliminated a wildcard binding in b2331
elided call to goto block b978
inlining eliminated a wildcard binding in b2343
inlining eliminated a wildcard binding in b2341
inlining eliminated a wildcard binding in b2336
inlining eliminated a wildcard binding in b2338
elided call to goto block b1168
inlining eliminated a wildcard binding in b2495
inlining eliminated a wildcard binding in b2498
suffixInline succeeded for call to block b972 from block b1166
suffixInline succeeded for call to block b972 from block b1165
suffixInline succeeded for call to block b980 from block b1174
suffixInline succeeded for call to block b980 from block b1173
inlining eliminated a wildcard binding in b2472
inlining eliminated a wildcard binding in b2484
inlining eliminated a wildcard binding in b2484
inlining eliminated a wildcard binding in b2484
inlining eliminated a wildcard binding in b2475
inlining eliminated a wildcard binding in b2482
inlining eliminated a wildcard binding in b2482
inlining eliminated a wildcard binding in b2482
inlining eliminated a wildcard binding in b2487
suffixInline succeeded for call to block b970 from block b1158
suffixInline succeeded for call to block b970 from block b1157
inlining eliminated a wildcard binding in b2448
inlining eliminated a wildcard binding in b2460
inlining eliminated a wildcard binding in b2460
inlining eliminated a wildcard binding in b2460
inlining eliminated a wildcard binding in b2451
inlining eliminated a wildcard binding in b2458
inlining eliminated a wildcard binding in b2458
inlining eliminated a wildcard binding in b2458
inlining eliminated a wildcard binding in b2454
inlining eliminated a wildcard binding in b2440
inlining eliminated a wildcard binding in b2443
inlining eliminated a wildcard binding in b2437
inlining eliminated a wildcard binding in b2463
inlining eliminated a wildcard binding in b2465
elided call to goto block b1286
inlining eliminated a wildcard binding in b2469
elided call to goto block b1286
inlining eliminated a wildcard binding in b2490
inlining eliminated a wildcard binding in b2478
elided call to goto block b1285
elided call to goto block b1284
inlining eliminated a wildcard binding in b2510
inlining eliminated a wildcard binding in b2503
inlining eliminated a wildcard binding in b2505
elided call to goto block b2505
inlining eliminated a wildcard binding in b2521
elided call to goto block b2505
inlining eliminated a wildcard binding in b2531
inlining eliminated a wildcard binding in b2524
inlining eliminated a wildcard binding in b2526
elided call to goto block b2526
inlining eliminated a wildcard binding in b2542
elided call to goto block b2526
inlining eliminated a wildcard binding in b2545
inlining eliminated a wildcard binding in b2552
inlining eliminated a wildcard binding in b2555
elided call to goto block b2099
inlining eliminated a wildcard binding in b2558
inlining eliminated a wildcard binding in b2534
elided call to goto block b2099
inlining eliminated a wildcard binding in b2537
inlining eliminated a wildcard binding in b2513
elided call to goto block b2099
inlining eliminated a wildcard binding in b2516
inlining eliminated a wildcard binding in b2346
elided call to goto block b2099
inlining eliminated a wildcard binding in b2358
inlining eliminated a wildcard binding in b2358
inlining eliminated a wildcard binding in b2349
elided call to goto block b2099
inlining eliminated a wildcard binding in b2356
inlining eliminated a wildcard binding in b2356
inlining eliminated a wildcard binding in b2429
inlining eliminated a wildcard binding in b2302
elided call to goto block b2099
inlining eliminated a wildcard binding in b2314
inlining eliminated a wildcard binding in b2314
inlining eliminated a wildcard binding in b2305
elided call to goto block b2099
inlining eliminated a wildcard binding in b2312
inlining eliminated a wildcard binding in b2312
inlining eliminated a wildcard binding in b2317
inlining eliminated a wildcard binding in b2256
elided call to goto block b2099
inlining eliminated a wildcard binding in b2268
inlining eliminated a wildcard binding in b2268
inlining eliminated a wildcard binding in b2259
elided call to goto block b2099
inlining eliminated a wildcard binding in b2266
inlining eliminated a wildcard binding in b2266
inlining eliminated a wildcard binding in b2262
inlining eliminated a wildcard binding in b2235
elided call to goto block b2099
inlining eliminated a wildcard binding in b2238
inlining eliminated a wildcard binding in b2232
elided call to goto block b2099
inlining eliminated a wildcard binding in b2271
inlining eliminated a wildcard binding in b2273
elided call to goto block b1413
inlining eliminated a wildcard binding in b2277
elided call to goto block b1413
inlining eliminated a wildcard binding in b2320
inlining eliminated a wildcard binding in b2308
elided call to goto block b1412
elided call to goto block b1411
inlining eliminated a wildcard binding in b2432
inlining eliminated a wildcard binding in b2393
inlining eliminated a wildcard binding in b2405
inlining eliminated a wildcard binding in b2405
inlining eliminated a wildcard binding in b2405
inlining eliminated a wildcard binding in b2396
inlining eliminated a wildcard binding in b2403
inlining eliminated a wildcard binding in b2403
inlining eliminated a wildcard binding in b2403
inlining eliminated a wildcard binding in b2408
inlining eliminated a wildcard binding in b2369
inlining eliminated a wildcard binding in b2381
inlining eliminated a wildcard binding in b2381
inlining eliminated a wildcard binding in b2381
inlining eliminated a wildcard binding in b2372
inlining eliminated a wildcard binding in b2379
inlining eliminated a wildcard binding in b2379
inlining eliminated a wildcard binding in b2379
inlining eliminated a wildcard binding in b2375
inlining eliminated a wildcard binding in b2361
inlining eliminated a wildcard binding in b2364
inlining eliminated a wildcard binding in b2352
inlining eliminated a wildcard binding in b2384
inlining eliminated a wildcard binding in b2386
elided call to goto block b1407
inlining eliminated a wildcard binding in b2390
elided call to goto block b1407
inlining eliminated a wildcard binding in b2411
inlining eliminated a wildcard binding in b2399
elided call to goto block b1406
elided call to goto block b1405
inlining eliminated a wildcard binding in b2570
inlining eliminated a wildcard binding in b2568
inlining eliminated a wildcard binding in b2563
inlining eliminated a wildcard binding in b2565
inlining eliminated a wildcard binding in b2573
prefixInline succeeded for call to block b692 from block initialize
Inlining pass finished, running shake.
lifted allocator for t21346
lifted allocator for t21346
lifted allocator for t21346
lifted allocator for t21346
lifted allocator for t21346
lifted allocator for t21346
lifted allocator for t21346
lifted allocator for t21352
lifted allocator for t21358
lifted allocator for t21358
lifted allocator for t21358
lifted allocator for t21358
lifted allocator for t21358
lifted allocator for t21358
lifted allocator for t21358
lifted allocator for t21358
lifted allocator for t21358
lifted allocator for t21359
lifted allocator for t21359
lifted allocator for t21359
lifted allocator for t21359
lifted allocator for t21359
lifted allocator for t21359
lifted allocator for t21359
lifting static allocator to top-level s272
lifted allocator for t21363
lifted allocator for t21363
lifted allocator for t21363
lifted allocator for t21363
lifted allocator for t21363
lifted allocator for t21363
lifted allocator for t21363
lifted allocator for t21363
lifted allocator for t21363
lifted allocator for t21363
lifted allocator for t21363
lifted allocator for t21363
lifted allocator for t21363
lifted allocator for t21363
lifting static allocator to top-level s273
lifting static allocator to top-level s274
lifted allocator for t21383
lifted allocator for t21384
lifted allocator for t21384
lifted allocator for t21384
lifted allocator for t21385
lifted allocator for t21385
lifted allocator for t21385
lifted allocator for t21386
lifted allocator for t21387
lifted allocator for t21387
lifted allocator for t21387
lifted allocator for t21388
lifted allocator for t21388
lifted allocator for t21388
lifted allocator for t21430
applied left monad law for t21351 <- return s13
rewriting t21348 @ [t21349]
shorting out match on constructor Just12546
rewriting Just12546 0 t16479 -> t21437
applied left monad law for t16483 <- return t21437
liveness replaced t16479 with a wildcard
deriving specialized block b2653 for BlockCall to block b2610
liveness replaced t21349 with a wildcard
liveness replaced t21348 with a wildcard
deriving specialized block b2652 for BlockCall to block b2612
rewriting t21350 @ [s13]
shorting out match on constructor Nothing02445
liveness replaced t21350 with a wildcard
deriving specialized block b2654 for BlockCall to block b2613
liveness replaced t21347 with a wildcard
deriving specialized block b2651 for BlockCall to block b2611
eliminating duplicate args in call within b2611
liveness replaced t21346 with a wildcard
applied left monad law for t21357 <- return Nothing
rewriting t21354 @ [t21355]
shorting out match on constructor Just12546
rewriting Just12546 0 t16530 -> t21457
applied left monad law for t16535 <- return t21457
liveness replaced t16530 with a wildcard
deriving specialized block b2658 for BlockCall to block b2614
liveness replaced t21355 with a wildcard
liveness replaced t21354 with a wildcard
deriving specialized block b2657 for BlockCall to block b2616
rewriting t21356 @ [Nothing]
shorting out match on constructor Nothing02445
liveness replaced t21356 with a wildcard
deriving specialized block b2659 for BlockCall to block b2617
liveness replaced t21353 with a wildcard
deriving specialized block b2656 for BlockCall to block b2615
eliminating duplicate args in call within b2615
liveness replaced t21352 with a wildcard
rewriting t21348 @ [t21349]
shorting out match on constructor Just12546
rewriting Just12546 0 t16704 -> t21477
applied left monad law for t16708 <- return t21477
liveness replaced t16704 with a wildcard
deriving specialized block b2663 for BlockCall to block b2618
liveness replaced t21349 with a wildcard
liveness replaced t21348 with a wildcard
deriving specialized block b2662 for BlockCall to block b2612
rewriting t21350 @ [s13]
shorting out match on constructor Nothing02445
liveness replaced t21350 with a wildcard
deriving specialized block b2664 for BlockCall to block b2613
liveness replaced t21347 with a wildcard
deriving specialized block b2661 for BlockCall to block b2611
eliminating duplicate args in call within b2611
liveness replaced t21358 with a wildcard
rewriting t21348 @ [t21349]
shorting out match on constructor Just12546
rewriting Just12546 0 t16731 -> t21495
applied left monad law for t16735 <- return t21495
liveness replaced t16731 with a wildcard
deriving specialized block b2668 for BlockCall to block b2619
liveness replaced t21349 with a wildcard
liveness replaced t21348 with a wildcard
deriving specialized block b2667 for BlockCall to block b2612
rewriting t21350 @ [s13]
shorting out match on constructor Nothing02445
liveness replaced t21350 with a wildcard
deriving specialized block b2669 for BlockCall to block b2613
liveness replaced t21347 with a wildcard
deriving specialized block b2666 for BlockCall to block b2611
eliminating duplicate args in call within b2611
liveness replaced t21359 with a wildcard
rewriting t21354 @ [t21355]
shorting out match on constructor Just12546
rewriting Just12546 0 t16755 -> t21517
applied left monad law for t16761 <- return t21517
deriving specialized block b2671 for BlockCall to block b2615
eliminating duplicate args in call within b2615
liveness replaced t21360 with a wildcard
liveness replaced t16755 with a wildcard
deriving specialized block b2673 for BlockCall to block b2620
liveness replaced t21355 with a wildcard
liveness replaced t21354 with a wildcard
deriving specialized block b2672 for BlockCall to block b2616
rewriting t21356 @ [Nothing]
shorting out match on constructor Nothing02445
liveness replaced t21356 with a wildcard
deriving specialized block b2675 for BlockCall to block b2617
liveness replaced t21353 with a wildcard
deriving specialized block b2671 for BlockCall to block b2615
eliminating duplicate args in call within b2615
liveness replaced t21360 with a wildcard
rewriting t21354 @ [t21355]
shorting out match on constructor Just12546
deriving specialized block b2673 for BlockCall to block b2621
liveness replaced t21355 with a wildcard
liveness replaced t21354 with a wildcard
deriving specialized block b2677 for BlockCall to block b2616
rewriting t21356 @ [Nothing]
shorting out match on constructor Nothing02445
liveness replaced t21356 with a wildcard
deriving specialized block b2678 for BlockCall to block b2617
liveness replaced t21353 with a wildcard
deriving specialized block b2676 for BlockCall to block b2615
eliminating duplicate args in call within b2615
liveness replaced t21361 with a wildcard
applied left monad law for t21362 <- return s272
applied left monad law for t21353 <- return s272
applied left monad law for t21354 <- return s272
rewriting s272 @ [t21355]
shorting out match on constructor Just12546
rewriting Just12546 0 t16696 -> t21556
applied left monad law for t16697 <- return t21556
liveness replaced t16696 with a wildcard
deriving specialized block b2682 for BlockCall to block b2622
liveness replaced t21355 with a wildcard
deriving specialized block b2681 for BlockCall to block b2616
applied left monad law for t21356 <- return s272
rewriting s272 @ [Nothing]
shorting out match on constructor Nothing02445
deriving specialized block b2683 for BlockCall to block b2617
deriving specialized block b2680 for BlockCall to block b2615
rewriting t21348 @ [t21349]
shorting out match on constructor Just12546
rewriting Just12546 0 t16690 -> t21559
applied left monad law for t16691 <- return t21559
liveness replaced t16690 with a wildcard
deriving specialized block b2686 for BlockCall to block b2623
liveness replaced t21349 with a wildcard
liveness replaced t21348 with a wildcard
deriving specialized block b2685 for BlockCall to block b2612
rewriting t21350 @ [s13]
shorting out match on constructor Nothing02445
liveness replaced t21350 with a wildcard
deriving specialized block b2687 for BlockCall to block b2613
liveness replaced t21347 with a wildcard
deriving specialized block b2684 for BlockCall to block b2611
liveness replaced t21363 with a wildcard
applied left monad law for t21369 <- return s19
applied left monad law for t21364 <- return s273
applied left monad law for t21365 <- return s273
applied left monad law for t21366 <- return s273
rewriting s273 @ [t21367]
shorting out match on constructor Just12546
rewriting Just12546 0 t16903 -> t21561
applied left monad law for t16904 <- return t21561
liveness replaced t16903 with a wildcard
deriving specialized block b2690 for BlockCall to block b2624
liveness replaced t21367 with a wildcard
deriving specialized block b2689 for BlockCall to block b2626
applied left monad law for t21368 <- return s273
rewriting s273 @ [s19]
shorting out match on constructor Nothing02445
deriving specialized block b2691 for BlockCall to block b2627
deriving specialized block b2688 for BlockCall to block b2625
applied left monad law for t21370 <- return s274
applied left monad law for t21371 <- return s274
applied left monad law for t21366 <- return s274
rewriting s274 @ [t21367]
shorting out match on constructor Just12546
deriving specialized block b2690 for BlockCall to block b2628
liveness replaced t21367 with a wildcard
deriving specialized block b2693 for BlockCall to block b2626
applied left monad law for t21368 <- return s274
rewriting s274 @ [s19]
shorting out match on constructor Nothing02445
deriving specialized block b2694 for BlockCall to block b2627
deriving specialized block b2692 for BlockCall to block b2629
applied left monad law for t21377 <- return s19
rewriting t21374 @ [t21375]
shorting out match on constructor Just12546
rewriting Just12546 0 t16916 -> t21564
applied left monad law for t16918 <- return t21564
liveness replaced t16916 with a wildcard
deriving specialized block b2697 for BlockCall to block b2630
liveness replaced t21375 with a wildcard
liveness replaced t21374 with a wildcard
deriving specialized block b2696 for BlockCall to block b2632
rewriting t21376 @ [s19]
shorting out match on constructor Nothing02445
liveness replaced t21376 with a wildcard
deriving specialized block b2698 for BlockCall to block b2633
liveness replaced t21373 with a wildcard
deriving specialized block b2695 for BlockCall to block b2631
liveness replaced t21372 with a wildcard
deriving specialized block b2695 for BlockCall to block b2631
rewriting t21366 @ [t21367]
shorting out match on constructor Just12546
deriving specialized block b2690 for BlockCall to block b2634
liveness replaced t21367 with a wildcard
liveness replaced t21366 with a wildcard
deriving specialized block b2700 for BlockCall to block b2626
rewriting t21368 @ [s19]
shorting out match on constructor Nothing02445
liveness replaced t21368 with a wildcard
deriving specialized block b2701 for BlockCall to block b2627
liveness replaced t21371 with a wildcard
deriving specialized block b2699 for BlockCall to block b2629
liveness replaced t21379 with a wildcard
liveness replaced t21378 with a wildcard
rewriting t21374 @ [t21375]
shorting out match on constructor Just12546
rewriting Just12546 0 t16927 -> t21568
applied left monad law for t16929 <- return t21568
liveness replaced t16927 with a wildcard
deriving specialized block b2704 for BlockCall to block b2635
liveness replaced t21375 with a wildcard
liveness replaced t21374 with a wildcard
deriving specialized block b2703 for BlockCall to block b2632
rewriting t21376 @ [s19]
shorting out match on constructor Nothing02445
liveness replaced t21376 with a wildcard
deriving specialized block b2705 for BlockCall to block b2633
liveness replaced t21381 with a wildcard
deriving specialized block b2702 for BlockCall to block b2636
liveness replaced t21380 with a wildcard
deriving specialized block b2695 for BlockCall to block b2631
liveness replaced t21382 with a wildcard
rewriting t21374 @ [t21375]
shorting out match on constructor Just12546
rewriting Just12546 0 t16970 -> t21576
applied left monad law for t16974 <- return t21576
liveness replaced t16970 with a wildcard
deriving specialized block b2708 for BlockCall to block b2637
liveness replaced t21375 with a wildcard
liveness replaced t21374 with a wildcard
deriving specialized block b2707 for BlockCall to block b2632
rewriting t21376 @ [s19]
shorting out match on constructor Nothing02445
liveness replaced t21376 with a wildcard
deriving specialized block b2709 for BlockCall to block b2633
liveness replaced t21373 with a wildcard
deriving specialized block b2706 for BlockCall to block b2631
eliminating duplicate args in call within b2631
liveness replaced t21383 with a wildcard
rewriting t21374 @ [t21375]
shorting out match on constructor Just12546
rewriting Just12546 0 t16987 -> t21592
applied left monad law for t16990 <- return t21592
liveness replaced t16987 with a wildcard
deriving specialized block b2713 for BlockCall to block b2638
liveness replaced t21375 with a wildcard
liveness replaced t21374 with a wildcard
deriving specialized block b2712 for BlockCall to block b2632
rewriting t21376 @ [s19]
shorting out match on constructor Nothing02445
liveness replaced t21376 with a wildcard
deriving specialized block b2714 for BlockCall to block b2633
liveness replaced t21373 with a wildcard
deriving specialized block b2711 for BlockCall to block b2631
liveness replaced t21384 with a wildcard
rewriting t21374 @ [t21375]
shorting out match on constructor Just12546
deriving specialized block b2713 for BlockCall to block b2639
liveness replaced t21375 with a wildcard
liveness replaced t21374 with a wildcard
deriving specialized block b2716 for BlockCall to block b2632
rewriting t21376 @ [s19]
shorting out match on constructor Nothing02445
liveness replaced t21376 with a wildcard
deriving specialized block b2717 for BlockCall to block b2633
liveness replaced t21373 with a wildcard
deriving specialized block b2715 for BlockCall to block b2631
liveness replaced t21385 with a wildcard
rewriting t21374 @ [t21375]
shorting out match on constructor Just12546
rewriting Just12546 0 t17053 -> t21607
applied left monad law for t17057 <- return t21607
liveness replaced t17053 with a wildcard
deriving specialized block b2720 for BlockCall to block b2640
liveness replaced t21375 with a wildcard
liveness replaced t21374 with a wildcard
deriving specialized block b2719 for BlockCall to block b2632
rewriting t21376 @ [s19]
shorting out match on constructor Nothing02445
liveness replaced t21376 with a wildcard
deriving specialized block b2721 for BlockCall to block b2633
liveness replaced t21373 with a wildcard
deriving specialized block b2718 for BlockCall to block b2631
eliminating duplicate args in call within b2631
liveness replaced t21386 with a wildcard
rewriting t21374 @ [t21375]
shorting out match on constructor Just12546
rewriting Just12546 0 t17070 -> t21623
applied left monad law for t17073 <- return t21623
liveness replaced t17070 with a wildcard
deriving specialized block b2725 for BlockCall to block b2641
liveness replaced t21375 with a wildcard
liveness replaced t21374 with a wildcard
deriving specialized block b2724 for BlockCall to block b2632
rewriting t21376 @ [s19]
shorting out match on constructor Nothing02445
liveness replaced t21376 with a wildcard
deriving specialized block b2726 for BlockCall to block b2633
liveness replaced t21373 with a wildcard
deriving specialized block b2723 for BlockCall to block b2631
liveness replaced t21387 with a wildcard
rewriting t21374 @ [t21375]
shorting out match on constructor Just12546
deriving specialized block b2725 for BlockCall to block b2642
liveness replaced t21375 with a wildcard
liveness replaced t21374 with a wildcard
deriving specialized block b2728 for BlockCall to block b2632
rewriting t21376 @ [s19]
shorting out match on constructor Nothing02445
liveness replaced t21376 with a wildcard
deriving specialized block b2729 for BlockCall to block b2633
liveness replaced t21373 with a wildcard
deriving specialized block b2727 for BlockCall to block b2631
liveness replaced t21388 with a wildcard
liveness replaced t21219 with a wildcard
liveness replaced t21214 with a wildcard
liveness replaced t21213 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t21237 with a wildcard
liveness replaced t21247 with a wildcard
liveness replaced t21244 with a wildcard
liveness replaced t21243 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t21260 with a wildcard
liveness replaced t21255 with a wildcard
liveness replaced t21254 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t21278 with a wildcard
liveness replaced t21283 with a wildcard
liveness replaced t21294 with a wildcard
liveness replaced t21290 with a wildcard
liveness replaced t21289 with a wildcard
liveness replaced t21298 with a wildcard
liveness replaced t21309 with a wildcard
liveness replaced t21304 with a wildcard
liveness replaced t21303 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t21322 with a wildcard
liveness replaced t21317 with a wildcard
liveness replaced t21316 with a wildcard
replacing reference to top level com1ctrl with 1021
liveness replaced t21335 with a wildcard
liveness replaced t21330 with a wildcard
liveness replaced t21329 with a wildcard
liveness replaced t21341 with a wildcard
liveness replaced t21345 with a wildcard
deriving specialized block b2656 for BlockCall to block b2615
eliminating duplicate args in call within b2615
liveness replaced t21429 with a wildcard
liveness replaced t21430 with a wildcard
Flow pass finished, running shake.
Steps performed = 760
-------------------------
inlining eliminated a wildcard binding in b2654
inlining eliminated a wildcard binding in b2652
inlining eliminated a wildcard binding in b2652
inlining eliminated a wildcard binding in b2653
inlining eliminated a wildcard binding in b690
elided call to goto block b2652
elided call to goto block b2654
suffixInline succeeded for call to block b2655 from block b690
elided call to goto block b2653
inlining eliminated a wildcard binding in b2659
inlining eliminated a wildcard binding in b2657
inlining eliminated a wildcard binding in b2657
inlining eliminated a wildcard binding in b2658
inlining eliminated a wildcard binding in b692
elided call to goto block b2657
elided call to goto block b2659
inlining eliminated a wildcard binding in b2664
inlining eliminated a wildcard binding in b2662
inlining eliminated a wildcard binding in b2662
inlining eliminated a wildcard binding in b2663
inlining eliminated a wildcard binding in b702
elided call to goto block b2662
elided call to goto block b2664
suffixInline succeeded for call to block b2665 from block b702
elided call to goto block b2663
inlining eliminated a wildcard binding in b2669
inlining eliminated a wildcard binding in b2667
inlining eliminated a wildcard binding in b2667
inlining eliminated a wildcard binding in b2668
inlining eliminated a wildcard binding in b700
elided call to goto block b2667
elided call to goto block b2669
suffixInline succeeded for call to block b2670 from block b700
elided call to goto block b2668
inlining eliminated a wildcard binding in b1521
inlining eliminated a wildcard binding in b2678
inlining eliminated a wildcard binding in b2673
inlining eliminated a wildcard binding in b2673
inlining eliminated a wildcard binding in b2677
inlining eliminated a wildcard binding in b2677
elided call to goto block b2677
elided call to goto block b2678
inlining eliminated a wildcard binding in b849
suffixInline succeeded for call to block b2679 from block b849
inlining eliminated a wildcard binding in b2682
inlining eliminated a wildcard binding in b2681
elided call to goto block b2681
elided call to goto block b2683
suffixInline succeeded for call to block b2680 from block b847
inlining eliminated a wildcard binding in b2687
inlining eliminated a wildcard binding in b2686
inlining eliminated a wildcard binding in b2685
inlining eliminated a wildcard binding in b2685
inlining eliminated a wildcard binding in b2684
elided call to goto block b2685
elided call to goto block b2687
inlining eliminated a wildcard binding in b852
suffixInline succeeded for call to block b2684 from block b852
inlining eliminated a wildcard binding in b2689
inlining eliminated a wildcard binding in b2690
suffixInline succeeded for call to block b2688 from block b1239
elided call to goto block b2689
elided call to goto block b2691
elided call to goto block b2689
elided call to goto block b2691
inlining eliminated a wildcard binding in b2693
elided call to goto block b2693
elided call to goto block b2694
suffixInline succeeded for call to block b2692 from block b1303
elided call to goto block b2690
inlining eliminated a wildcard binding in b2698
inlining eliminated a wildcard binding in b2695
inlining eliminated a wildcard binding in b2696
inlining eliminated a wildcard binding in b2696
inlining eliminated a wildcard binding in b2697
inlining eliminated a wildcard binding in b1236
elided call to goto block b2696
elided call to goto block b2698
elided call to goto block b1236
elided call to goto block b1236
inlining eliminated a wildcard binding in b2701
inlining eliminated a wildcard binding in b2700
inlining eliminated a wildcard binding in b2700
inlining eliminated a wildcard binding in b2699
elided call to goto block b2700
elided call to goto block b2701
inlining eliminated a wildcard binding in b1536
inlining eliminated a wildcard binding in b1536
suffixInline succeeded for call to block b2699 from block b1536
elided call to goto block b2690
inlining eliminated a wildcard binding in b2705
inlining eliminated a wildcard binding in b2704
inlining eliminated a wildcard binding in b2704
inlining eliminated a wildcard binding in b2704
suffixInline succeeded for call to block b2699 from block b2704
elided call to goto block b2690
inlining eliminated a wildcard binding in b2703
inlining eliminated a wildcard binding in b2703
inlining eliminated a wildcard binding in b2702
elided call to goto block b2703
elided call to goto block b2705
inlining eliminated a wildcard binding in b1359
inlining eliminated a wildcard binding in b1244
inlining eliminated a wildcard binding in b2709
inlining eliminated a wildcard binding in b1539
inlining eliminated a wildcard binding in b2707
inlining eliminated a wildcard binding in b2707
inlining eliminated a wildcard binding in b2708
suffixInline succeeded for call to block b2710 from block b1539
elided call to goto block b2707
elided call to goto block b2709
elided call to goto block b2707
elided call to goto block b2709
elided call to goto block b1359
elided call to goto block b1359
inlining eliminated a wildcard binding in b2714
inlining eliminated a wildcard binding in b2713
elided call to goto block b1359
inlining eliminated a wildcard binding in b2712
inlining eliminated a wildcard binding in b2712
inlining eliminated a wildcard binding in b2711
elided call to goto block b2712
elided call to goto block b2714
inlining eliminated a wildcard binding in b1708
suffixInline succeeded for call to block b2711 from block b1708
elided call to goto block b1359
elided call to goto block b1359
inlining eliminated a wildcard binding in b2717
inlining eliminated a wildcard binding in b2716
inlining eliminated a wildcard binding in b2716
inlining eliminated a wildcard binding in b2715
elided call to goto block b2716
elided call to goto block b2717
inlining eliminated a wildcard binding in b1707
suffixInline succeeded for call to block b2715 from block b1707
elided call to goto block b1359
inlining eliminated a wildcard binding in b2721
inlining eliminated a wildcard binding in b1547
inlining eliminated a wildcard binding in b2719
inlining eliminated a wildcard binding in b2719
inlining eliminated a wildcard binding in b2720
suffixInline succeeded for call to block b2722 from block b1547
elided call to goto block b2719
elided call to goto block b2721
elided call to goto block b2719
elided call to goto block b2721
elided call to goto block b1359
elided call to goto block b1359
inlining eliminated a wildcard binding in b2726
inlining eliminated a wildcard binding in b2725
elided call to goto block b1359
inlining eliminated a wildcard binding in b2724
inlining eliminated a wildcard binding in b2724
inlining eliminated a wildcard binding in b2723
elided call to goto block b2724
elided call to goto block b2726
inlining eliminated a wildcard binding in b1714
suffixInline succeeded for call to block b2723 from block b1714
elided call to goto block b1359
elided call to goto block b1359
inlining eliminated a wildcard binding in b2729
inlining eliminated a wildcard binding in b2728
inlining eliminated a wildcard binding in b2728
inlining eliminated a wildcard binding in b2727
elided call to goto block b2728
elided call to goto block b2729
inlining eliminated a wildcard binding in b1713
suffixInline succeeded for call to block b2727 from block b1713
elided call to goto block b1359
inlining eliminated a wildcard binding in b2589
inlining eliminated a wildcard binding in b2597
suffixInline succeeded for call to block b2281 from block b2285
inlining eliminated a wildcard binding in b2598
suffixInline succeeded for call to block b2461 from block b2465
inlining eliminated a wildcard binding in b2601
suffixInline succeeded for call to block b2269 from block b2273
inlining eliminated a wildcard binding in b2608
suffixInline succeeded for call to block b2382 from block b2386
inlining eliminated a wildcard binding in b2609
inlining eliminated a wildcard binding in initialize
Inlining pass finished, running shake.
lifted allocator for t21632
lifted allocator for t21632
lifted allocator for t21632
lifted allocator for t21632
lifted allocator for t21632
lifted allocator for t21632
lifted allocator for t21632
lifted allocator for t21635
lifted allocator for t21635
lifted allocator for t21635
lifted allocator for t21635
lifted allocator for t21635
lifted allocator for t21635
lifted allocator for t21635
lifted allocator for t21635
lifted allocator for t21635
lifted allocator for t21638
lifted allocator for t21638
lifted allocator for t21638
lifted allocator for t21638
lifted allocator for t21638
lifted allocator for t21638
lifted allocator for t21638
lifted allocator for t21656
lifted allocator for t21663
liveness replaced t21632 with a wildcard
liveness replaced t21468 with a wildcard
liveness replaced t21635 with a wildcard
liveness replaced t21638 with a wildcard
deriving specialized block b2672 for BlockCall to block b2616
deriving specialized block b2675 for BlockCall to block b2617
liveness replaced t21524 with a wildcard
liveness replaced t21641 with a wildcard
constant folding for sub
applied left monad law for t21650 <- return -1
constant folding for primSle
applied left monad law for t21651 <- return flag0
constant folding for sub
applied left monad law for t21654 <- return -1
constant folding for primSle
applied left monad law for t21655 <- return flag0
liveness replaced t21656 with a wildcard
constant folding for add
applied left monad law for t21659 <- return 1
constant folding for primUle
applied left monad law for t21660 <- return flag1
constant folding for add
applied left monad law for t21661 <- return 1
constant folding for primUle
applied left monad law for t21662 <- return flag1
liveness replaced t21663 with a wildcard
constant folding for add
applied left monad law for t21666 <- return 1
constant folding for primUle
applied left monad law for t21667 <- return flag1
constant folding for add
applied left monad law for t21668 <- return 1
constant folding for primUle
applied left monad law for t21669 <- return flag1
Flow pass finished, running shake.
Steps performed = 239
-------------------------
inlining eliminated a wildcard binding in b690
inlining eliminated a wildcard binding in b2660
elided call to goto block b2658
inlining eliminated a wildcard binding in b702
inlining eliminated a wildcard binding in b700
inlining eliminated a wildcard binding in b2675
inlining eliminated a wildcard binding in b2672
inlining eliminated a wildcard binding in b2672
inlining eliminated a wildcard binding in b2674
elided call to goto block b2672
elided call to goto block b2675
inlining eliminated a wildcard binding in b849
elided call to goto block b2690
inlining eliminated a wildcard binding in b1539
suffixInline succeeded for call to block b295 from block b1303
suffixInline succeeded for call to block b295 from block b2704
suffixInline succeeded for call to block b2713 from block b1708
suffixInline succeeded for call to block b2713 from block b1707
inlining eliminated a wildcard binding in b1547
suffixInline succeeded for call to block b2725 from block b1714
suffixInline succeeded for call to block b2725 from block b1713
Inlining pass finished, running shake.
Flow pass finished, running shake.
Steps performed = 21
-------------------------
suffixInline succeeded for call to block b2674 from block b2673
Inlining pass finished, running shake.
Flow pass finished, running shake.
Steps performed = 1
-------------------------
Inlining pass finished, running shake.
Flow pass finished, running shake.
Steps performed = 0
-------------------------
Identifying topdefn Unit with s119
Replacing b2011 with b2008
Replacing b1980 with b2008
Replacing b1983 with b2008
Replacing b1952 with b2008
Replacing b1955 with b2008
Replacing b1939 with b2008
Replacing b2159 with b2156
Replacing b2128 with b2156
Replacing b2131 with b2156
Replacing b2107 with b2156
Replacing b2094 with b2156
Replacing b2325 with b2328
Replacing b2472 with b2495
Replacing b2475 with b2495
Replacing b2448 with b2495
Replacing b2451 with b2495
Replacing b2440 with b2495
Replacing b2437 with b2495
Replacing b2478 with b2487
Replacing b2534 with b2555
Replacing b2513 with b2555
Replacing b2346 with b2555
Replacing b2349 with b2555
Replacing b2302 with b2555
Replacing b2305 with b2555
Replacing b2256 with b2555
Replacing b2259 with b2555
Replacing b2235 with b2555
Replacing b2232 with b2555
Replacing b2308 with b2317
Replacing b2393 with b2429
Replacing b2396 with b2429
Replacing b2369 with b2429
Replacing b2372 with b2429
Replacing b2361 with b2429
Replacing b2352 with b2429
Replacing b2399 with b2408
replacing reference to top level Unit with s119
replacing reference to top level Unit with s119
replacing reference to top level Unit with s119
Cleanup steps performed = 41
-------------------------
Replacing b295 with b1473
Cleanup steps performed = 1
-------------------------
Cleanup steps performed = 0
TOTAL steps performed = 9675
Running type checker ...
generics for s119: [] in type [Unit]
TopLevel group inferred s119 :: [Unit]
Generalizing definition for: s119 with generics []
Inferred s119 :: Unit
Inferred b1473 :: [] >>= [Unit]
Inferred b1687 :: [Word, Word] >>= [Unit]
Inferred b1686 :: [Word, Word] >>= [Unit]
Inferred b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2660 :: [Word, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1705 :: [Bit 32] >>= [Unit]
Inferred b258 :: [Bit 32] >>= [Unit]
Inferred b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2673 :: [Bit 32, Bit 32, Word, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b849 :: [] >>= [Unit]
Inferred b2682 :: [Word] >>= [Unit]
Inferred b847 :: [Bit 32] >>= [Unit]
Inferred b2686 :: [Word] >>= [Unit]
Inferred b852 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b845 :: [Bit 32] >>= [Unit]
Inferred b842 :: [Bit 32] >>= [Unit]
Inferred b854 :: [Bit 32] >>= [Unit]
Inferred b2697 :: [Word, Bit 32] >>= [Unit]
Inferred b2695 :: [Word, Word, Word, Bit 32] >>= [Unit]
Inferred b1239 :: [Bit 32] >>= [Unit]
Inferred b1244 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b1540 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit]
Inferred b1538 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit]
Inferred b1539 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2708 :: [Word, Bit 32, Word, Bit 32] >>= [Unit]
Inferred b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1303 :: [] >>= [Unit]
Inferred b2704 :: [Word, Bit 32] >>= [Unit]
Inferred b2702 :: [Word, Word, Bit 32] >>= [Unit]
Inferred b1708 :: [Word, Bit 32, Bit 32] >>= [Unit]
Inferred b1707 :: [Word, Bit 32, Bit 32] >>= [Unit]
Inferred b1034 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b1548 :: [Word, Word, Word, Word, Bit 32] >>= [Unit]
Inferred b1546 :: [Word, Word, Word, Word, Bit 32] >>= [Unit]
Inferred b1547 :: [Word, Word, Word, Word, Bit 32] >>= [Unit]
Inferred b2720 :: [Word, Word, Word, Bit 32] >>= [Unit]
Inferred b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1714 :: [Word, Word, Bit 32] >>= [Unit]
Inferred b1713 :: [Word, Word, Bit 32] >>= [Unit]
Inferred b1021 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b784 :: [Bit 32] >>= [Unit]
Inferred b1949 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b1947 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b1940 :: [Word, Bit 32] >>= [Unit]
Inferred b1942 :: [Word, Word, Bit 32] >>= [Unit]
Inferred b1944 :: [Word, Word, Bit 32] >>= [Unit]
Inferred b1967 :: [Word, Bit 32] >>= [Unit]
Inferred b788 :: [Bit 32] >>= [Unit]
Inferred b1977 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b1975 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b1968 :: [Word, Bit 32] >>= [Unit]
Inferred b1970 :: [Word, Word, Bit 32] >>= [Unit]
Inferred b1972 :: [Word, Word, Bit 32] >>= [Unit]
Inferred b1995 :: [Word, Bit 32] >>= [Unit]
Inferred b790 :: [Bit 32] >>= [Unit]
Inferred b2005 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b1998 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2003 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b1996 :: [Word, Bit 32] >>= [Unit]
Inferred b792 :: [Bit 32] >>= [Bit 32]
Inferred b1934 :: [Bit 32, Word, Bit 32] >>= [Bit 32]
Inferred b1932 :: [Bit 32, Word, Bit 32] >>= [Bit 32]
Inferred b1925 :: [Word, Bit 32] >>= [Bit 32]
Inferred b1927 :: [Word, Word, Bit 32] >>= [Bit 32]
Inferred b1929 :: [Word, Word, Bit 32] >>= [Bit 32]
Inferred b2008 :: [Word, Bit 32] >>= [Bit 32]
Inferred b2020 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2018 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2014 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1992 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1990 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1986 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1964 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1962 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1958 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1372 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1371 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1370 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2012 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2030 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2028 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2021 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2023 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2025 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2033 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1067 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2043 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2041 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2034 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2036 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2038 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2046 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2044 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2049 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2051 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2054 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2052 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2585 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2584 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2055 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2057 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2064 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b436 :: [Bit 32] >>= [Bit 32]
Inferred b2589 :: [Word, Bit 32, Word, Word, Bit 32] >>= [Bit 32]
Inferred b2072 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Inferred b2588 :: [Word, Bit 32, Word, Word] >>= [Bit 32]
Inferred b2070 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Inferred b2591 :: [Bit 32, Word] >>= [Unit]
Inferred b2590 :: [Bit 32, Word] >>= [Unit]
Inferred b2095 :: [Word] >>= [Unit]
Inferred b2097 :: [Word, Word] >>= [Unit]
Inferred b2104 :: [Word, Word] >>= [Unit]
Inferred b2115 :: [Word] >>= [Unit]
Inferred b800 :: [Bit 32] >>= [Unit]
Inferred b2125 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2123 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2116 :: [Word, Bit 32] >>= [Unit]
Inferred b2118 :: [Word, Word, Bit 32] >>= [Unit]
Inferred b2120 :: [Word, Word, Bit 32] >>= [Unit]
Inferred b2143 :: [Word, Bit 32] >>= [Unit]
Inferred b802 :: [Bit 32] >>= [Unit]
Inferred b2153 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2146 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2151 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2144 :: [Word, Bit 32] >>= [Unit]
Inferred b2091 :: [Bit 32, Word, Bit 32] >>= [Bit 32]
Inferred b2089 :: [Bit 32, Word, Bit 32] >>= [Bit 32]
Inferred b2082 :: [Word, Bit 32] >>= [Bit 32]
Inferred b2084 :: [Word, Word, Bit 32] >>= [Bit 32]
Inferred b2086 :: [Word, Word, Bit 32] >>= [Bit 32]
Inferred b2156 :: [Word, Bit 32] >>= [Bit 32]
Inferred b2168 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2166 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2162 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2140 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2138 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2134 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2110 :: [Word, Bit 32] >>= [Bit 32]
Inferred b2092 :: [Bit 32] >>= [Bit 32]
Inferred b1386 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1385 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2160 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2178 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2176 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2169 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2171 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2173 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2181 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1131 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2191 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2189 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2182 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2184 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2186 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2194 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2192 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2197 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2199 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2202 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2200 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2593 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2592 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2203 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2205 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2212 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2597 :: [Word, Bit 32, Word, Word, Bit 32] >>= [Bit 32]
Inferred b2220 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Inferred b2596 :: [Word, Bit 32, Word, Word] >>= [Bit 32]
Inferred b2218 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Inferred b2243 :: [Word] >>= [Unit]
Inferred b808 :: [Bit 32] >>= [Unit]
Inferred b2253 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2251 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2244 :: [Word, Bit 32] >>= [Unit]
Inferred b2246 :: [Word, Word, Bit 32] >>= [Unit]
Inferred b2248 :: [Word, Word, Bit 32] >>= [Unit]
Inferred b2280 :: [Word, Bit 32] >>= [Unit]
Inferred b2278 :: [Bit 32] >>= [Unit]
Inferred b2283 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2285 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2598 :: [Bit 32, Word] >>= [Unit]
Inferred b2289 :: [Word] >>= [Unit]
Inferred b2299 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2297 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2290 :: [Word, Word] >>= [Unit]
Inferred b2292 :: [Word, Word, Word] >>= [Unit]
Inferred b2294 :: [Word, Word, Word] >>= [Unit]
Inferred b2328 :: [Word, Word] >>= [Unit]
Inferred b2416 :: [Word, Word] >>= [Unit]
Inferred b2323 :: [Word] >>= [Unit]
Inferred b2414 :: [Word] >>= [Unit]
Inferred b2600 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2599 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2417 :: [Word, Word] >>= [Unit]
Inferred b2419 :: [Word, Word, Word] >>= [Unit]
Inferred b2426 :: [Word, Word, Word] >>= [Unit]
Inferred b2331 :: [Word, Word] >>= [Unit]
Inferred b2329 :: [Word] >>= [Unit]
Inferred b2343 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2341 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2334 :: [Word, Word] >>= [Unit]
Inferred b2336 :: [Word, Word, Word] >>= [Unit]
Inferred b2338 :: [Word, Word, Word] >>= [Unit]
Inferred b2495 :: [Word, Word] >>= [Unit]
Inferred b2498 :: [Word, Word] >>= [Unit]
Inferred b2484 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2482 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2487 :: [Bit 32, Word] >>= [Unit]
Inferred b2460 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2458 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2454 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2443 :: [Word] >>= [Unit]
Inferred b1212 :: [] >>= [Unit]
Inferred b1287 :: [Bit 32] >>= [Unit]
Inferred b2452 :: [Bit 32] >>= [Unit]
Inferred b2463 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2465 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2601 :: [Bit 32, Word] >>= [Unit]
Inferred b2469 :: [Word] >>= [Unit]
Inferred b2490 :: [Word, Word] >>= [Unit]
Inferred b2476 :: [Word] >>= [Unit]
Inferred b2488 :: [Word] >>= [Unit]
Inferred b814 :: [] >>= [Unit]
Inferred b2603 :: [Bit 32, Word] >>= [Unit]
Inferred b2602 :: [Bit 32, Word] >>= [Unit]
Inferred b2503 :: [Word, Word] >>= [Unit]
Inferred b2510 :: [Word, Word] >>= [Unit]
Inferred b2521 :: [Word] >>= [Unit]
Inferred b816 :: [] >>= [Unit]
Inferred b2605 :: [Bit 32, Word] >>= [Unit]
Inferred b2604 :: [Bit 32, Word] >>= [Unit]
Inferred b2524 :: [Word, Word] >>= [Unit]
Inferred b2531 :: [Word, Word] >>= [Unit]
Inferred b2542 :: [Word] >>= [Unit]
Inferred b818 :: [] >>= [Unit]
Inferred b2607 :: [Bit 32, Word] >>= [Unit]
Inferred b2606 :: [Bit 32, Word] >>= [Unit]
Inferred b2545 :: [Word, Word] >>= [Unit]
Inferred b2552 :: [Word, Word] >>= [Unit]
Inferred b2555 :: [Word] >>= [Unit]
Inferred b2558 :: [Word] >>= [Unit]
Inferred b2537 :: [Word] >>= [Unit]
Inferred b2516 :: [Word] >>= [Unit]
Inferred b2358 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2356 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2429 :: [Bit 32, Word] >>= [Unit]
Inferred b2314 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2312 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2317 :: [Bit 32, Word] >>= [Unit]
Inferred b2268 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2266 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2262 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2238 :: [Word] >>= [Unit]
Inferred b2230 :: [] >>= [Unit]
Inferred b1414 :: [Bit 32] >>= [Unit]
Inferred b2260 :: [Bit 32] >>= [Unit]
Inferred b2271 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2273 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2608 :: [Bit 32, Word] >>= [Unit]
Inferred b2277 :: [Word] >>= [Unit]
Inferred b2320 :: [Word, Word] >>= [Unit]
Inferred b2306 :: [Word] >>= [Unit]
Inferred b2318 :: [Word] >>= [Unit]
Inferred b2432 :: [Word, Word] >>= [Unit]
Inferred b2405 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2403 :: [Bit 32, Word, Word] >>= [Unit]
Inferred b2408 :: [Bit 32, Word] >>= [Unit]
Inferred b2381 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2379 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2375 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2364 :: [Word] >>= [Unit]
Inferred b1409 :: [] >>= [Unit]
Inferred b1408 :: [Bit 32] >>= [Unit]
Inferred b2373 :: [Bit 32] >>= [Unit]
Inferred b2384 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2386 :: [Bit 32, Word, Bit 32] >>= [Unit]
Inferred b2609 :: [Bit 32, Word] >>= [Unit]
Inferred b2390 :: [Word] >>= [Unit]
Inferred b2411 :: [Word, Word] >>= [Unit]
Inferred b2397 :: [Word] >>= [Unit]
Inferred b2409 :: [Word] >>= [Unit]
Inferred b1204 :: [] >>= [Unit]
Inferred b1203 :: [] >>= [Unit]
Inferred b1202 :: [] >>= [Unit]
Inferred b2556 :: [] >>= [Unit]
Inferred b2570 :: [Bit 32, Word] >>= [Unit]
Inferred b2568 :: [Bit 32, Word] >>= [Unit]
Inferred b2563 :: [Word, Word] >>= [Unit]
Inferred b2565 :: [Word, Word] >>= [Unit]
Inferred b2573 :: [Word] >>= [Unit]
Inferred initialize :: [] >>= [Unit]
Running specializer ...
Requesting specialization of initialize :: [] >>= [Unit]
Block specialize: initialize :: [] >>= [Unit]  ~~>  initialize :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of itoaBuf :: Word
Requesting specialization of itoaBuf :: Word
Requesting specialization of b1686 :: [Word, Word] >>= [Unit]
Requesting specialization of console :: Word
Requesting specialization of b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2660 :: [Word, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2556 :: [] >>= [Unit]
Requesting specialization of b2573 :: [Word] >>= [Unit]
Block specialize: b2573 :: [Word] >>= [Unit]  ~~>  b2573 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2565 :: [Word, Word] >>= [Unit]
Block specialize: b2565 :: [Word, Word] >>= [Unit]  ~~>  b2565 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2568 :: [Bit 32, Word] >>= [Unit]
Requesting specialization of b2570 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2570 :: [Bit 32, Word] >>= [Unit]  ~~>  b2570 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2556 :: [] >>= [Unit]
Requesting specialization of b2563 :: [Word, Word] >>= [Unit]
Block specialize: b2563 :: [Word, Word] >>= [Unit]  ~~>  b2563 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2565 :: [Word, Word] >>= [Unit]
Block specialize: b845 :: [Bit 32] >>= [Unit]  ~~>  b845 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Word
Requesting specialization of b847 :: [Bit 32] >>= [Unit]
Requesting specialization of b850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b847 :: [Bit 32] >>= [Unit]
Requesting specialization of b852 :: [Bit 32, Bit 32] >>= [Unit]
Block specialize: b852 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b852 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of b2686 :: [Word] >>= [Unit]
Requesting specialization of b847 :: [Bit 32] >>= [Unit]
Block specialize: b2686 :: [Word] >>= [Unit]  ~~>  b2686 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Word
Block specialize: b847 :: [Bit 32] >>= [Unit]  ~~>  b847 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of b2682 :: [Word] >>= [Unit]
Requesting specialization of b849 :: [] >>= [Unit]
Block specialize: b849 :: [] >>= [Unit]  ~~>  b849 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of console :: Word
Requesting specialization of b2673 :: [Bit 32, Bit 32, Word, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Block specialize: b1473 :: [] >>= [Unit]  ~~>  b1473 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of s119 :: [Unit]
TopLevel specialize: s119 :: [Unit]  ~~>  s119 :: [Unit], generics=[], substitution=null
Block specialize: b2673 :: [Bit 32, Bit 32, Word, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b2673 :: [Bit 32, Bit 32, Word, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2673 :: [Bit 32, Bit 32, Word, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Block specialize: b2682 :: [Word] >>= [Unit]  ~~>  b2682 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of console :: Word
Block specialize: b2568 :: [Bit 32, Word] >>= [Unit]  ~~>  b2568 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2556 :: [] >>= [Unit]
Requesting specialization of b2563 :: [Word, Word] >>= [Unit]
Block specialize: b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b258 :: [Bit 32] >>= [Unit]
Requesting specialization of b1705 :: [Bit 32] >>= [Unit]
Block specialize: b1705 :: [Bit 32] >>= [Unit]  ~~>  b1705 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Block specialize: b258 :: [Bit 32] >>= [Unit]  ~~>  b258 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b2556 :: [] >>= [Unit]  ~~>  b2556 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1202 :: [] >>= [Unit]
Requesting specialization of b2558 :: [Word] >>= [Unit]
Block specialize: b2558 :: [Word] >>= [Unit]  ~~>  b2558 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2552 :: [Word, Word] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2555 :: [Word] >>= [Unit]
Block specialize: b2555 :: [Word] >>= [Unit]  ~~>  b2555 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Block specialize: b2104 :: [Word, Word] >>= [Unit]  ~~>  b2104 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2590 :: [Bit 32, Word] >>= [Unit]
Requesting specialization of b2591 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2591 :: [Bit 32, Word] >>= [Unit]  ~~>  b2591 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2095 :: [Word] >>= [Unit]
Block specialize: b2095 :: [Word] >>= [Unit]  ~~>  b2095 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2097 :: [Word, Word] >>= [Unit]
Block specialize: b2097 :: [Word, Word] >>= [Unit]  ~~>  b2097 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Block specialize: b2590 :: [Bit 32, Word] >>= [Unit]  ~~>  b2590 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2095 :: [Word] >>= [Unit]
Block specialize: b2552 :: [Word, Word] >>= [Unit]  ~~>  b2552 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2606 :: [Bit 32, Word] >>= [Unit]
Requesting specialization of b2607 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2607 :: [Bit 32, Word] >>= [Unit]  ~~>  b2607 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b818 :: [] >>= [Unit]
Requesting specialization of b2545 :: [Word, Word] >>= [Unit]
Block specialize: b2545 :: [Word, Word] >>= [Unit]  ~~>  b2545 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2552 :: [Word, Word] >>= [Unit]
Block specialize: b818 :: [] >>= [Unit]  ~~>  b818 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2070 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Requesting specialization of b816 :: [] >>= [Unit]
Requesting specialization of b2542 :: [Word] >>= [Unit]
Block specialize: b2542 :: [Word] >>= [Unit]  ~~>  b2542 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2531 :: [Word, Word] >>= [Unit]
Block specialize: b2531 :: [Word, Word] >>= [Unit]  ~~>  b2531 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2604 :: [Bit 32, Word] >>= [Unit]
Requesting specialization of b2605 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2605 :: [Bit 32, Word] >>= [Unit]  ~~>  b2605 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b816 :: [] >>= [Unit]
Requesting specialization of b2524 :: [Word, Word] >>= [Unit]
Block specialize: b2524 :: [Word, Word] >>= [Unit]  ~~>  b2524 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2531 :: [Word, Word] >>= [Unit]
Block specialize: b2604 :: [Bit 32, Word] >>= [Unit]  ~~>  b2604 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b816 :: [] >>= [Unit]
Requesting specialization of b2524 :: [Word, Word] >>= [Unit]
Block specialize: b816 :: [] >>= [Unit]  ~~>  b816 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2218 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Requesting specialization of b814 :: [] >>= [Unit]
Requesting specialization of b2521 :: [Word] >>= [Unit]
Block specialize: b2521 :: [Word] >>= [Unit]  ~~>  b2521 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2510 :: [Word, Word] >>= [Unit]
Block specialize: b2510 :: [Word, Word] >>= [Unit]  ~~>  b2510 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2602 :: [Bit 32, Word] >>= [Unit]
Requesting specialization of b2603 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2603 :: [Bit 32, Word] >>= [Unit]  ~~>  b2603 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b814 :: [] >>= [Unit]
Requesting specialization of b2503 :: [Word, Word] >>= [Unit]
Block specialize: b2503 :: [Word, Word] >>= [Unit]  ~~>  b2503 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2510 :: [Word, Word] >>= [Unit]
Block specialize: b2602 :: [Bit 32, Word] >>= [Unit]  ~~>  b2602 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b814 :: [] >>= [Unit]
Requesting specialization of b2503 :: [Word, Word] >>= [Unit]
Block specialize: b814 :: [] >>= [Unit]  ~~>  b814 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2488 :: [Word] >>= [Unit]
Requesting specialization of b2498 :: [Word, Word] >>= [Unit]
Block specialize: b2498 :: [Word, Word] >>= [Unit]  ~~>  b2498 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2426 :: [Word, Word, Word] >>= [Unit]
Requesting specialization of b2329 :: [Word] >>= [Unit]
Requesting specialization of b2495 :: [Word, Word] >>= [Unit]
Block specialize: b2495 :: [Word, Word] >>= [Unit]  ~~>  b2495 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2338 :: [Word, Word, Word] >>= [Unit]
Block specialize: b2338 :: [Word, Word, Word] >>= [Unit]  ~~>  b2338 :: [Word, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2341 :: [Bit 32, Word, Word] >>= [Unit]
Requesting specialization of b2343 :: [Bit 32, Word, Word] >>= [Unit]
Block specialize: b2343 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2343 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2334 :: [Word, Word] >>= [Unit]
Block specialize: b2334 :: [Word, Word] >>= [Unit]  ~~>  b2334 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2329 :: [Word] >>= [Unit]
Requesting specialization of b2336 :: [Word, Word, Word] >>= [Unit]
Block specialize: b2336 :: [Word, Word, Word] >>= [Unit]  ~~>  b2336 :: [Word, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2338 :: [Word, Word, Word] >>= [Unit]
Block specialize: b2341 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2341 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2334 :: [Word, Word] >>= [Unit]
Block specialize: b2329 :: [Word] >>= [Unit]  ~~>  b2329 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2323 :: [Word] >>= [Unit]
Requesting specialization of b2331 :: [Word, Word] >>= [Unit]
Block specialize: b2331 :: [Word, Word] >>= [Unit]  ~~>  b2331 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Requesting specialization of b2289 :: [Word] >>= [Unit]
Requesting specialization of b2328 :: [Word, Word] >>= [Unit]
Block specialize: b2328 :: [Word, Word] >>= [Unit]  ~~>  b2328 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2294 :: [Word, Word, Word] >>= [Unit]
Block specialize: b2294 :: [Word, Word, Word] >>= [Unit]  ~~>  b2294 :: [Word, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2297 :: [Bit 32, Word, Word] >>= [Unit]
Requesting specialization of b2299 :: [Bit 32, Word, Word] >>= [Unit]
Block specialize: b2299 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2299 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2290 :: [Word, Word] >>= [Unit]
Block specialize: b2290 :: [Word, Word] >>= [Unit]  ~~>  b2290 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2289 :: [Word] >>= [Unit]
Requesting specialization of b2292 :: [Word, Word, Word] >>= [Unit]
Block specialize: b2292 :: [Word, Word, Word] >>= [Unit]  ~~>  b2292 :: [Word, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2294 :: [Word, Word, Word] >>= [Unit]
Block specialize: b2297 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2297 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2290 :: [Word, Word] >>= [Unit]
Block specialize: b2289 :: [Word] >>= [Unit]  ~~>  b2289 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2278 :: [Bit 32] >>= [Unit]
Requesting specialization of b2598 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2598 :: [Bit 32, Word] >>= [Unit]  ~~>  b2598 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2285 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2285 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2285 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b2278 :: [Bit 32] >>= [Unit]
Requesting specialization of b2283 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2283 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2283 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2285 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b854 :: [Bit 32] >>= [Unit]  ~~>  b854 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b842 :: [Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Block specialize: b842 :: [Bit 32] >>= [Unit]  ~~>  b842 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of console :: Word
Requesting specialization of b847 :: [Bit 32] >>= [Unit]
Requesting specialization of b850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b2278 :: [Bit 32] >>= [Unit]  ~~>  b2278 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b808 :: [Bit 32] >>= [Unit]
Requesting specialization of b2280 :: [Word, Bit 32] >>= [Unit]
Block specialize: b2280 :: [Word, Bit 32] >>= [Unit]  ~~>  b2280 :: [Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2248 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b2248 :: [Word, Word, Bit 32] >>= [Unit]  ~~>  b2248 :: [Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2251 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b2253 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2253 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2253 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2244 :: [Word, Bit 32] >>= [Unit]
Block specialize: b2244 :: [Word, Bit 32] >>= [Unit]  ~~>  b2244 :: [Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b808 :: [Bit 32] >>= [Unit]
Requesting specialization of b2246 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b2246 :: [Word, Word, Bit 32] >>= [Unit]  ~~>  b2246 :: [Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2248 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b2251 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2251 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2244 :: [Word, Bit 32] >>= [Unit]
Block specialize: b808 :: [Bit 32] >>= [Unit]  ~~>  b808 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2243 :: [Word] >>= [Unit]
Block specialize: b2243 :: [Word] >>= [Unit]  ~~>  b2243 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Block specialize: b1021 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b1021 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1713 :: [Word, Word, Bit 32] >>= [Unit]
Requesting specialization of b1714 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b1714 :: [Word, Word, Bit 32] >>= [Unit]  ~~>  b1714 :: [Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of itoaBuf :: Word
Requesting specialization of b2702 :: [Word, Word, Bit 32] >>= [Unit]
Requesting specialization of b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of itoaBuf :: Word
Requesting specialization of b1546 :: [Word, Word, Word, Word, Bit 32] >>= [Unit]
Requesting specialization of b1548 :: [Word, Word, Word, Word, Bit 32] >>= [Unit]
Block specialize: b1548 :: [Word, Word, Word, Word, Bit 32] >>= [Unit]  ~~>  b1548 :: [Word, Word, Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1547 :: [Word, Word, Word, Word, Bit 32] >>= [Unit]
Block specialize: b1547 :: [Word, Word, Word, Word, Bit 32] >>= [Unit]  ~~>  b1547 :: [Word, Word, Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2720 :: [Word, Word, Word, Bit 32] >>= [Unit]
Requesting specialization of b1244 :: [Bit 32, Bit 32] >>= [Unit]
Block specialize: b1244 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b1244 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2695 :: [Word, Word, Word, Bit 32] >>= [Unit]
Requesting specialization of b1239 :: [Bit 32] >>= [Unit]
Block specialize: b1239 :: [Bit 32] >>= [Unit]  ~~>  b1239 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of itoaBuf :: Word
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b1239 :: [Bit 32] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Block specialize: b2695 :: [Word, Word, Word, Bit 32] >>= [Unit]  ~~>  b2695 :: [Word, Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2697 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Block specialize: b2697 :: [Word, Bit 32] >>= [Unit]  ~~>  b2697 :: [Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b2695 :: [Word, Word, Word, Bit 32] >>= [Unit]
Block specialize: b2720 :: [Word, Word, Word, Bit 32] >>= [Unit]  ~~>  b2720 :: [Word, Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1244 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1546 :: [Word, Word, Word, Word, Bit 32] >>= [Unit]  ~~>  b1546 :: [Word, Word, Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1547 :: [Word, Word, Word, Word, Bit 32] >>= [Unit]
Block specialize: b2702 :: [Word, Word, Bit 32] >>= [Unit]  ~~>  b2702 :: [Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2704 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b1303 :: [] >>= [Unit]
Block specialize: b1303 :: [] >>= [Unit]  ~~>  b1303 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of itoaBuf :: Word
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of s119 :: [Unit]
Block specialize: b2704 :: [Word, Bit 32] >>= [Unit]  ~~>  b2704 :: [Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b2695 :: [Word, Word, Word, Bit 32] >>= [Unit]
Requesting specialization of itoaBuf :: Word
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of s119 :: [Unit]
Block specialize: b1713 :: [Word, Word, Bit 32] >>= [Unit]  ~~>  b1713 :: [Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of itoaBuf :: Word
Requesting specialization of b2702 :: [Word, Word, Bit 32] >>= [Unit]
Requesting specialization of b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b2323 :: [Word] >>= [Unit]  ~~>  b2323 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2289 :: [Word] >>= [Unit]
Requesting specialization of b2328 :: [Word, Word] >>= [Unit]
Block specialize: b2426 :: [Word, Word, Word] >>= [Unit]  ~~>  b2426 :: [Word, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2599 :: [Bit 32, Word, Word] >>= [Unit]
Requesting specialization of b2600 :: [Bit 32, Word, Word] >>= [Unit]
Block specialize: b2600 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2600 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2417 :: [Word, Word] >>= [Unit]
Block specialize: b2417 :: [Word, Word] >>= [Unit]  ~~>  b2417 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2414 :: [Word] >>= [Unit]
Requesting specialization of b2419 :: [Word, Word, Word] >>= [Unit]
Block specialize: b2419 :: [Word, Word, Word] >>= [Unit]  ~~>  b2419 :: [Word, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2426 :: [Word, Word, Word] >>= [Unit]
Block specialize: b2414 :: [Word] >>= [Unit]  ~~>  b2414 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2323 :: [Word] >>= [Unit]
Requesting specialization of b2416 :: [Word, Word] >>= [Unit]
Block specialize: b2416 :: [Word, Word] >>= [Unit]  ~~>  b2416 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Requesting specialization of b2289 :: [Word] >>= [Unit]
Requesting specialization of b2328 :: [Word, Word] >>= [Unit]
Block specialize: b2599 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2599 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2417 :: [Word, Word] >>= [Unit]
Block specialize: b2488 :: [Word] >>= [Unit]  ~~>  b2488 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2476 :: [Word] >>= [Unit]
Requesting specialization of b2490 :: [Word, Word] >>= [Unit]
Block specialize: b2490 :: [Word, Word] >>= [Unit]  ~~>  b2490 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Requesting specialization of b2469 :: [Word] >>= [Unit]
Requesting specialization of b2487 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2487 :: [Bit 32, Word] >>= [Unit]  ~~>  b2487 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2482 :: [Bit 32, Word, Word] >>= [Unit]
Requesting specialization of b2484 :: [Bit 32, Word, Word] >>= [Unit]
Block specialize: b2484 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2484 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2290 :: [Word, Word] >>= [Unit]
Requesting specialization of b2329 :: [Word] >>= [Unit]
Requesting specialization of b2495 :: [Word, Word] >>= [Unit]
Block specialize: b2482 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2482 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2290 :: [Word, Word] >>= [Unit]
Requesting specialization of b2329 :: [Word] >>= [Unit]
Requesting specialization of b2495 :: [Word, Word] >>= [Unit]
Block specialize: b2469 :: [Word] >>= [Unit]  ~~>  b2469 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2452 :: [Bit 32] >>= [Unit]
Requesting specialization of b2601 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2601 :: [Bit 32, Word] >>= [Unit]  ~~>  b2601 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2465 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2465 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2465 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b2452 :: [Bit 32] >>= [Unit]
Requesting specialization of b2463 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2463 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2463 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2465 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2452 :: [Bit 32] >>= [Unit]  ~~>  b2452 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1287 :: [Bit 32] >>= [Unit]
Requesting specialization of b2454 :: [Bit 32, Bit 32] >>= [Unit]
Block specialize: b2454 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b2454 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2458 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b2460 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2460 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2460 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2244 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b2329 :: [Word] >>= [Unit]
Requesting specialization of b2495 :: [Word, Word] >>= [Unit]
Block specialize: b2458 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2458 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2244 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b2329 :: [Word] >>= [Unit]
Requesting specialization of b2495 :: [Word, Word] >>= [Unit]
Block specialize: b1287 :: [Bit 32] >>= [Unit]  ~~>  b1287 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1212 :: [] >>= [Unit]
Requesting specialization of b2443 :: [Word] >>= [Unit]
Block specialize: b2443 :: [Word] >>= [Unit]  ~~>  b2443 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Requesting specialization of b2329 :: [Word] >>= [Unit]
Requesting specialization of b2495 :: [Word, Word] >>= [Unit]
Block specialize: b1212 :: [] >>= [Unit]  ~~>  b1212 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2329 :: [Word] >>= [Unit]
Requesting specialization of b2495 :: [Word, Word] >>= [Unit]
Block specialize: b2476 :: [Word] >>= [Unit]  ~~>  b2476 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2469 :: [Word] >>= [Unit]
Requesting specialization of b2487 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2218 :: [Word, Word, Word, Bit 32] >>= [Bit 32]  ~~>  b2218 :: [Word, Word, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b436 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2220 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b2220 :: [Word, Word, Word, Bit 32] >>= [Bit 32]  ~~>  b2220 :: [Word, Word, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2596 :: [Word, Bit 32, Word, Word] >>= [Bit 32]
Requesting specialization of b2597 :: [Word, Bit 32, Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b2597 :: [Word, Bit 32, Word, Word, Bit 32] >>= [Bit 32]  ~~>  b2597 :: [Word, Bit 32, Word, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2212 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2218 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b2212 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2212 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2592 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2593 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2593 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2593 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2203 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2203 :: [Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2203 :: [Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2200 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2205 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2205 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2205 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2212 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2200 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2200 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2192 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2202 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2202 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2202 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2199 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2199 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2199 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b2192 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2197 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2197 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2197 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2199 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2192 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2192 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1131 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2194 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2194 :: [Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2194 :: [Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2186 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2186 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2186 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2189 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2191 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2191 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2191 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2182 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2182 :: [Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2182 :: [Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1131 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2184 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2184 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2184 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2186 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2189 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2189 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2182 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1131 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1131 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1034 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2160 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2181 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2181 :: [Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2181 :: [Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2173 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2173 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2173 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2176 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2178 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2178 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2178 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2169 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2169 :: [Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2169 :: [Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2160 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2171 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2171 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2171 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2173 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2176 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2176 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2169 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2160 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2160 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1385 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2162 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2162 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2162 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2166 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2168 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2168 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2168 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2144 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2156 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b2156 :: [Word, Bit 32] >>= [Bit 32]  ~~>  b2156 :: [Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2086 :: [Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b2086 :: [Word, Word, Bit 32] >>= [Bit 32]  ~~>  b2086 :: [Word, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2089 :: [Bit 32, Word, Bit 32] >>= [Bit 32]
Requesting specialization of b2091 :: [Bit 32, Word, Bit 32] >>= [Bit 32]
Block specialize: b2091 :: [Bit 32, Word, Bit 32] >>= [Bit 32]  ~~>  b2091 :: [Bit 32, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2082 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b2082 :: [Word, Bit 32] >>= [Bit 32]  ~~>  b2082 :: [Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2084 :: [Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b2084 :: [Word, Word, Bit 32] >>= [Bit 32]  ~~>  b2084 :: [Word, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2086 :: [Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b2089 :: [Bit 32, Word, Bit 32] >>= [Bit 32]  ~~>  b2089 :: [Bit 32, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2082 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b792 :: [Bit 32] >>= [Bit 32]  ~~>  b792 :: [Bit 32] >>= [Bit 32], generics=[], substitution=null
Block specialize: b2144 :: [Word, Bit 32] >>= [Unit]  ~~>  b2144 :: [Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b802 :: [Bit 32] >>= [Unit]
Requesting specialization of b2146 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2146 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2146 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2151 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b2153 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2153 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2153 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2144 :: [Word, Bit 32] >>= [Unit]
Block specialize: b2151 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2151 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2144 :: [Word, Bit 32] >>= [Unit]
Block specialize: b802 :: [Bit 32] >>= [Unit]  ~~>  b802 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b800 :: [Bit 32] >>= [Unit]
Requesting specialization of b2143 :: [Word, Bit 32] >>= [Unit]
Block specialize: b2143 :: [Word, Bit 32] >>= [Unit]  ~~>  b2143 :: [Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2120 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b2120 :: [Word, Word, Bit 32] >>= [Unit]  ~~>  b2120 :: [Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2123 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b2125 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2125 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2125 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2116 :: [Word, Bit 32] >>= [Unit]
Block specialize: b2116 :: [Word, Bit 32] >>= [Unit]  ~~>  b2116 :: [Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b800 :: [Bit 32] >>= [Unit]
Requesting specialization of b2118 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b2118 :: [Word, Word, Bit 32] >>= [Unit]  ~~>  b2118 :: [Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2120 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b2123 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2123 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2116 :: [Word, Bit 32] >>= [Unit]
Block specialize: b800 :: [Bit 32] >>= [Unit]  ~~>  b800 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2115 :: [Word] >>= [Unit]
Block specialize: b2115 :: [Word] >>= [Unit]  ~~>  b2115 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Block specialize: b2166 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2166 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2144 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2156 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b1385 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1385 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1386 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2134 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2134 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2134 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2138 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2140 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2140 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2140 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2116 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2156 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b2138 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2138 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2116 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2156 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b1386 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1386 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2092 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2110 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b2110 :: [Word, Bit 32] >>= [Bit 32]  ~~>  b2110 :: [Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2156 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b2092 :: [Bit 32] >>= [Bit 32]  ~~>  b2092 :: [Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2156 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b1034 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b1034 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1707 :: [Word, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1708 :: [Word, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1708 :: [Word, Bit 32, Bit 32] >>= [Unit]  ~~>  b1708 :: [Word, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of itoaBuf :: Word
Requesting specialization of b2702 :: [Word, Word, Bit 32] >>= [Unit]
Requesting specialization of b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of itoaBuf :: Word
Requesting specialization of b1538 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1540 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b1540 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b1540 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1539 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b1539 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b1539 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2708 :: [Word, Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1244 :: [Bit 32, Bit 32] >>= [Unit]
Block specialize: b2708 :: [Word, Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2708 :: [Word, Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1244 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b1538 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b1538 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1539 :: [Word, Word, Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b1707 :: [Word, Bit 32, Bit 32] >>= [Unit]  ~~>  b1707 :: [Word, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of itoaBuf :: Word
Requesting specialization of b2702 :: [Word, Word, Bit 32] >>= [Unit]
Requesting specialization of b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b2592 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2592 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2203 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2596 :: [Word, Bit 32, Word, Word] >>= [Bit 32]  ~~>  b2596 :: [Word, Bit 32, Word, Word] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2200 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2218 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b436 :: [Bit 32] >>= [Bit 32]  ~~>  b436 :: [Bit 32] >>= [Bit 32], generics=[], substitution=null
Block specialize: b2070 :: [Word, Word, Word, Bit 32] >>= [Bit 32]  ~~>  b2070 :: [Word, Word, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b436 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2072 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b2072 :: [Word, Word, Word, Bit 32] >>= [Bit 32]  ~~>  b2072 :: [Word, Word, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2588 :: [Word, Bit 32, Word, Word] >>= [Bit 32]
Requesting specialization of b2589 :: [Word, Bit 32, Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b2589 :: [Word, Bit 32, Word, Word, Bit 32] >>= [Bit 32]  ~~>  b2589 :: [Word, Bit 32, Word, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2064 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2070 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b2064 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2064 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2584 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2585 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2585 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2585 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2055 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2055 :: [Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2055 :: [Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2052 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2057 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2057 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2057 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2064 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2052 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2052 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2044 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2054 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2054 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2054 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2051 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2051 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2051 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b2044 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2049 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2049 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2049 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2051 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2044 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2044 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1067 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2046 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2046 :: [Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2046 :: [Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2038 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2038 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2038 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2041 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2043 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2043 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2043 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2034 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2034 :: [Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2034 :: [Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1067 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2036 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2036 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2036 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2038 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2041 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2041 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2034 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1067 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1067 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1034 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2012 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2033 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2033 :: [Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2033 :: [Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2025 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2025 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2025 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2028 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2030 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2030 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2030 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2021 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2021 :: [Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2021 :: [Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2012 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2023 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2023 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2023 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2025 :: [Word, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2028 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2028 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2021 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2012 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2012 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1370 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2014 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2014 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2014 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2018 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2020 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2020 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2020 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1996 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2008 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b2008 :: [Word, Bit 32] >>= [Bit 32]  ~~>  b2008 :: [Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1929 :: [Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b1929 :: [Word, Word, Bit 32] >>= [Bit 32]  ~~>  b1929 :: [Word, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1932 :: [Bit 32, Word, Bit 32] >>= [Bit 32]
Requesting specialization of b1934 :: [Bit 32, Word, Bit 32] >>= [Bit 32]
Block specialize: b1934 :: [Bit 32, Word, Bit 32] >>= [Bit 32]  ~~>  b1934 :: [Bit 32, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1925 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b1925 :: [Word, Bit 32] >>= [Bit 32]  ~~>  b1925 :: [Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b1927 :: [Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b1927 :: [Word, Word, Bit 32] >>= [Bit 32]  ~~>  b1927 :: [Word, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1929 :: [Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b1932 :: [Bit 32, Word, Bit 32] >>= [Bit 32]  ~~>  b1932 :: [Bit 32, Word, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1925 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b1996 :: [Word, Bit 32] >>= [Unit]  ~~>  b1996 :: [Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b790 :: [Bit 32] >>= [Unit]
Requesting specialization of b1998 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b1998 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b1998 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2003 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b2005 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2005 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2005 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1996 :: [Word, Bit 32] >>= [Unit]
Block specialize: b2003 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2003 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1996 :: [Word, Bit 32] >>= [Unit]
Block specialize: b790 :: [Bit 32] >>= [Unit]  ~~>  b790 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b788 :: [Bit 32] >>= [Unit]
Requesting specialization of b1995 :: [Word, Bit 32] >>= [Unit]
Block specialize: b1995 :: [Word, Bit 32] >>= [Unit]  ~~>  b1995 :: [Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1972 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b1972 :: [Word, Word, Bit 32] >>= [Unit]  ~~>  b1972 :: [Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1975 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1977 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b1977 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b1977 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1968 :: [Word, Bit 32] >>= [Unit]
Block specialize: b1968 :: [Word, Bit 32] >>= [Unit]  ~~>  b1968 :: [Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b788 :: [Bit 32] >>= [Unit]
Requesting specialization of b1970 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b1970 :: [Word, Word, Bit 32] >>= [Unit]  ~~>  b1970 :: [Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1972 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b1975 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b1975 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1968 :: [Word, Bit 32] >>= [Unit]
Block specialize: b788 :: [Bit 32] >>= [Unit]  ~~>  b788 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b784 :: [Bit 32] >>= [Unit]
Requesting specialization of b1967 :: [Word, Bit 32] >>= [Unit]
Block specialize: b1967 :: [Word, Bit 32] >>= [Unit]  ~~>  b1967 :: [Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1944 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b1944 :: [Word, Word, Bit 32] >>= [Unit]  ~~>  b1944 :: [Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1947 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b1949 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b1949 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b1949 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1940 :: [Word, Bit 32] >>= [Unit]
Block specialize: b1940 :: [Word, Bit 32] >>= [Unit]  ~~>  b1940 :: [Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b784 :: [Bit 32] >>= [Unit]
Requesting specialization of b1942 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b1942 :: [Word, Word, Bit 32] >>= [Unit]  ~~>  b1942 :: [Word, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1944 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b1947 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b1947 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1940 :: [Word, Bit 32] >>= [Unit]
Block specialize: b784 :: [Bit 32] >>= [Unit]  ~~>  b784 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1713 :: [Word, Word, Bit 32] >>= [Unit]
Requesting specialization of b1714 :: [Word, Word, Bit 32] >>= [Unit]
Block specialize: b2018 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2018 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1996 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2008 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b1370 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1370 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1371 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1986 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1986 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1986 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1990 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1992 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1992 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1992 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1968 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2008 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b1990 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1990 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1968 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2008 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b1371 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1371 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1372 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1958 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1958 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1958 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1962 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b1964 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b1964 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1964 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1940 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2008 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b1962 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1962 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b1940 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2008 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b1372 :: [Bit 32, Bit 32] >>= [Bit 32]  ~~>  b1372 :: [Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b792 :: [Bit 32] >>= [Bit 32]
Requesting specialization of b2008 :: [Word, Bit 32] >>= [Bit 32]
Block specialize: b2584 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32]  ~~>  b2584 :: [Bit 32, Word, Bit 32, Bit 32] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2055 :: [Word, Bit 32, Bit 32] >>= [Bit 32]
Block specialize: b2588 :: [Word, Bit 32, Word, Word] >>= [Bit 32]  ~~>  b2588 :: [Word, Bit 32, Word, Word] >>= [Bit 32], generics=[], substitution=null
Requesting specialization of b2052 :: [Bit 32, Bit 32] >>= [Bit 32]
Requesting specialization of b2070 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Block specialize: b2606 :: [Bit 32, Word] >>= [Unit]  ~~>  b2606 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b818 :: [] >>= [Unit]
Requesting specialization of b2545 :: [Word, Word] >>= [Unit]
Block specialize: b1202 :: [] >>= [Unit]  ~~>  b1202 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2070 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Requesting specialization of b1203 :: [] >>= [Unit]
Requesting specialization of b2537 :: [Word] >>= [Unit]
Block specialize: b2537 :: [Word] >>= [Unit]  ~~>  b2537 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2531 :: [Word, Word] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2555 :: [Word] >>= [Unit]
Block specialize: b1203 :: [] >>= [Unit]  ~~>  b1203 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2218 :: [Word, Word, Word, Bit 32] >>= [Bit 32]
Requesting specialization of b1204 :: [] >>= [Unit]
Requesting specialization of b2516 :: [Word] >>= [Unit]
Block specialize: b2516 :: [Word] >>= [Unit]  ~~>  b2516 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2510 :: [Word, Word] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2555 :: [Word] >>= [Unit]
Block specialize: b1204 :: [] >>= [Unit]  ~~>  b1204 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2409 :: [Word] >>= [Unit]
Requesting specialization of b2432 :: [Word, Word] >>= [Unit]
Block specialize: b2432 :: [Word, Word] >>= [Unit]  ~~>  b2432 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2426 :: [Word, Word, Word] >>= [Unit]
Requesting specialization of b2318 :: [Word] >>= [Unit]
Requesting specialization of b2429 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2429 :: [Bit 32, Word] >>= [Unit]  ~~>  b2429 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2356 :: [Bit 32, Word, Word] >>= [Unit]
Requesting specialization of b2358 :: [Bit 32, Word, Word] >>= [Unit]
Block specialize: b2358 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2358 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2334 :: [Word, Word] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2555 :: [Word] >>= [Unit]
Block specialize: b2356 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2356 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2334 :: [Word, Word] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2555 :: [Word] >>= [Unit]
Block specialize: b2318 :: [Word] >>= [Unit]  ~~>  b2318 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2306 :: [Word] >>= [Unit]
Requesting specialization of b2320 :: [Word, Word] >>= [Unit]
Block specialize: b2320 :: [Word, Word] >>= [Unit]  ~~>  b2320 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Requesting specialization of b2277 :: [Word] >>= [Unit]
Requesting specialization of b2317 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2317 :: [Bit 32, Word] >>= [Unit]  ~~>  b2317 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2312 :: [Bit 32, Word, Word] >>= [Unit]
Requesting specialization of b2314 :: [Bit 32, Word, Word] >>= [Unit]
Block specialize: b2314 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2314 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2290 :: [Word, Word] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2555 :: [Word] >>= [Unit]
Block specialize: b2312 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2312 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2290 :: [Word, Word] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2555 :: [Word] >>= [Unit]
Block specialize: b2277 :: [Word] >>= [Unit]  ~~>  b2277 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2260 :: [Bit 32] >>= [Unit]
Requesting specialization of b2608 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2608 :: [Bit 32, Word] >>= [Unit]  ~~>  b2608 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2273 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2273 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2273 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b2260 :: [Bit 32] >>= [Unit]
Requesting specialization of b2271 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2271 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2271 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2273 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2260 :: [Bit 32] >>= [Unit]  ~~>  b2260 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1414 :: [Bit 32] >>= [Unit]
Requesting specialization of b2262 :: [Bit 32, Bit 32] >>= [Unit]
Block specialize: b2262 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b2262 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2266 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b2268 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2268 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2268 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2244 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2555 :: [Word] >>= [Unit]
Block specialize: b2266 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2266 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2244 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2555 :: [Word] >>= [Unit]
Block specialize: b1414 :: [Bit 32] >>= [Unit]  ~~>  b1414 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2230 :: [] >>= [Unit]
Requesting specialization of b2238 :: [Word] >>= [Unit]
Block specialize: b2238 :: [Word] >>= [Unit]  ~~>  b2238 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2555 :: [Word] >>= [Unit]
Block specialize: b2230 :: [] >>= [Unit]  ~~>  b2230 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1473 :: [] >>= [Unit]
Requesting specialization of b2555 :: [Word] >>= [Unit]
Block specialize: b2306 :: [Word] >>= [Unit]  ~~>  b2306 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2277 :: [Word] >>= [Unit]
Requesting specialization of b2317 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2409 :: [Word] >>= [Unit]  ~~>  b2409 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2397 :: [Word] >>= [Unit]
Requesting specialization of b2411 :: [Word, Word] >>= [Unit]
Block specialize: b2411 :: [Word, Word] >>= [Unit]  ~~>  b2411 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Requesting specialization of b2390 :: [Word] >>= [Unit]
Requesting specialization of b2408 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2408 :: [Bit 32, Word] >>= [Unit]  ~~>  b2408 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2403 :: [Bit 32, Word, Word] >>= [Unit]
Requesting specialization of b2405 :: [Bit 32, Word, Word] >>= [Unit]
Block specialize: b2405 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2405 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2290 :: [Word, Word] >>= [Unit]
Requesting specialization of b2318 :: [Word] >>= [Unit]
Requesting specialization of b2429 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2403 :: [Bit 32, Word, Word] >>= [Unit]  ~~>  b2403 :: [Bit 32, Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2290 :: [Word, Word] >>= [Unit]
Requesting specialization of b2318 :: [Word] >>= [Unit]
Requesting specialization of b2429 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2390 :: [Word] >>= [Unit]  ~~>  b2390 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2373 :: [Bit 32] >>= [Unit]
Requesting specialization of b2609 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2609 :: [Bit 32, Word] >>= [Unit]  ~~>  b2609 :: [Bit 32, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2386 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2386 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2386 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b854 :: [Bit 32] >>= [Unit]
Requesting specialization of b2373 :: [Bit 32] >>= [Unit]
Requesting specialization of b2384 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2384 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2384 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2386 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2373 :: [Bit 32] >>= [Unit]  ~~>  b2373 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1408 :: [Bit 32] >>= [Unit]
Requesting specialization of b2375 :: [Bit 32, Bit 32] >>= [Unit]
Block specialize: b2375 :: [Bit 32, Bit 32] >>= [Unit]  ~~>  b2375 :: [Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2379 :: [Bit 32, Word, Bit 32] >>= [Unit]
Requesting specialization of b2381 :: [Bit 32, Word, Bit 32] >>= [Unit]
Block specialize: b2381 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2381 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2244 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b2318 :: [Word] >>= [Unit]
Requesting specialization of b2429 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2379 :: [Bit 32, Word, Bit 32] >>= [Unit]  ~~>  b2379 :: [Bit 32, Word, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b845 :: [Bit 32] >>= [Unit]
Requesting specialization of b2244 :: [Word, Bit 32] >>= [Unit]
Requesting specialization of b2318 :: [Word] >>= [Unit]
Requesting specialization of b2429 :: [Bit 32, Word] >>= [Unit]
Block specialize: b1408 :: [Bit 32] >>= [Unit]  ~~>  b1408 :: [Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1021 :: [Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1409 :: [] >>= [Unit]
Requesting specialization of b2364 :: [Word] >>= [Unit]
Block specialize: b2364 :: [Word] >>= [Unit]  ~~>  b2364 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2104 :: [Word, Word] >>= [Unit]
Requesting specialization of b2318 :: [Word] >>= [Unit]
Requesting specialization of b2429 :: [Bit 32, Word] >>= [Unit]
Block specialize: b1409 :: [] >>= [Unit]  ~~>  b1409 :: [] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2318 :: [Word] >>= [Unit]
Requesting specialization of b2429 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2397 :: [Word] >>= [Unit]  ~~>  b2397 :: [Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b2390 :: [Word] >>= [Unit]
Requesting specialization of b2408 :: [Bit 32, Word] >>= [Unit]
Block specialize: b2660 :: [Word, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b2660 :: [Word, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Block specialize: b692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b2660 :: [Word, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Block specialize: b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]  ~~>  b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit], generics=[], substitution=null
Requesting specialization of b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Block specialize: b1686 :: [Word, Word] >>= [Unit]  ~~>  b1686 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1687 :: [Word, Word] >>= [Unit]
Requesting specialization of b1473 :: [] >>= [Unit]
Block specialize: b1687 :: [Word, Word] >>= [Unit]  ~~>  b1687 :: [Word, Word] >>= [Unit], generics=[], substitution=null
Requesting specialization of b1686 :: [Word, Word] >>= [Unit]
MemArea specialize: itoaBuf :: Word  ~~>  itoaBuf :: Word
MemArea specialize: console :: Word  ~~>  console :: Word
making new version of structure type Window
new version of StructType Window is Window
making new version of structure type Coord
new version of StructType Coord is Coord
Running type checker ...
generics for s119: [] in type [Unit]
TopLevel group inferred s119 :: [Unit]
Generalizing definition for: s119 with generics []
Inferred s119 :: Unit
Inferred b1473 :: [] >>= [Unit]
Inferred b1687 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b1686 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b690 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b692 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2660 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1705 :: [Bit 32] >>= [Unit]
Inferred b258 :: [Bit 32] >>= [Unit]
Inferred b694 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b700 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b702 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2673 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b849 :: [] >>= [Unit]
Inferred b2682 :: [Bit 32] >>= [Unit]
Inferred b847 :: [Bit 32] >>= [Unit]
Inferred b2686 :: [Bit 32] >>= [Unit]
Inferred b852 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b850 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b845 :: [Bit 32] >>= [Unit]
Inferred b842 :: [Bit 32] >>= [Unit]
Inferred b854 :: [Bit 32] >>= [Unit]
Inferred b2697 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2695 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1239 :: [Bit 32] >>= [Unit]
Inferred b1244 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b1540 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1538 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1539 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2708 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1241 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1303 :: [] >>= [Unit]
Inferred b2704 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2702 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1708 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1707 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1034 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b1548 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1546 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1547 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2720 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1714 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1713 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1021 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b784 :: [Bit 32] >>= [Unit]
Inferred b1949 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1947 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1940 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b1942 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1944 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1967 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b788 :: [Bit 32] >>= [Unit]
Inferred b1977 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1975 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1968 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b1970 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1972 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1995 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b790 :: [Bit 32] >>= [Unit]
Inferred b2005 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1998 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2003 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b1996 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b792 :: [Bit 32] >>= [Bit 32]
Inferred b1934 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1932 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1925 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1927 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1929 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2008 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2020 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2018 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2014 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1992 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1990 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1986 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1964 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1962 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1958 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1372 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1371 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1370 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2012 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2030 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2028 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2021 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2023 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2025 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2033 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1067 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2043 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2041 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2034 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2036 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2038 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2046 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2044 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2049 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2051 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2054 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2052 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2585 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2584 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2055 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2057 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2064 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b436 :: [Bit 32] >>= [Bit 32]
Inferred b2589 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2072 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2588 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2070 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2591 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2590 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2095 :: [Bit 32] >>= [Unit]
Inferred b2097 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2104 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2115 :: [Bit 32] >>= [Unit]
Inferred b800 :: [Bit 32] >>= [Unit]
Inferred b2125 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2123 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2116 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2118 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2120 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2143 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b802 :: [Bit 32] >>= [Unit]
Inferred b2153 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2146 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2151 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2144 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2091 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2089 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2082 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2084 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2086 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2156 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2168 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2166 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2162 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2140 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2138 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2134 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2110 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2092 :: [Bit 32] >>= [Bit 32]
Inferred b1386 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b1385 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2160 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2178 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2176 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2169 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2171 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2173 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2181 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b1131 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2191 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2189 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2182 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2184 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2186 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2194 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2192 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2197 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2199 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2202 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2200 :: [Bit 32, Bit 32] >>= [Bit 32]
Inferred b2593 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2592 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2203 :: [Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2205 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2212 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2597 :: [Bit 32, Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2220 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2596 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2218 :: [Bit 32, Bit 32, Bit 32, Bit 32] >>= [Bit 32]
Inferred b2243 :: [Bit 32] >>= [Unit]
Inferred b808 :: [Bit 32] >>= [Unit]
Inferred b2253 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2251 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2244 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2246 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2248 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2280 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2278 :: [Bit 32] >>= [Unit]
Inferred b2283 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2285 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2598 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2289 :: [Bit 32] >>= [Unit]
Inferred b2299 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2297 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2290 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2292 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2294 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2328 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2416 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2323 :: [Bit 32] >>= [Unit]
Inferred b2414 :: [Bit 32] >>= [Unit]
Inferred b2600 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2599 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2417 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2419 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2426 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2331 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2329 :: [Bit 32] >>= [Unit]
Inferred b2343 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2341 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2334 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2336 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2338 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2495 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2498 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2484 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2482 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2487 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2460 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2458 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2454 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2443 :: [Bit 32] >>= [Unit]
Inferred b1212 :: [] >>= [Unit]
Inferred b1287 :: [Bit 32] >>= [Unit]
Inferred b2452 :: [Bit 32] >>= [Unit]
Inferred b2463 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2465 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2601 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2469 :: [Bit 32] >>= [Unit]
Inferred b2490 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2476 :: [Bit 32] >>= [Unit]
Inferred b2488 :: [Bit 32] >>= [Unit]
Inferred b814 :: [] >>= [Unit]
Inferred b2603 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2602 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2503 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2510 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2521 :: [Bit 32] >>= [Unit]
Inferred b816 :: [] >>= [Unit]
Inferred b2605 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2604 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2524 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2531 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2542 :: [Bit 32] >>= [Unit]
Inferred b818 :: [] >>= [Unit]
Inferred b2607 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2606 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2545 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2552 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2555 :: [Bit 32] >>= [Unit]
Inferred b2558 :: [Bit 32] >>= [Unit]
Inferred b2537 :: [Bit 32] >>= [Unit]
Inferred b2516 :: [Bit 32] >>= [Unit]
Inferred b2358 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2356 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2429 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2314 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2312 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2317 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2268 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2266 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2262 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2238 :: [Bit 32] >>= [Unit]
Inferred b2230 :: [] >>= [Unit]
Inferred b1414 :: [Bit 32] >>= [Unit]
Inferred b2260 :: [Bit 32] >>= [Unit]
Inferred b2271 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2273 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2608 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2277 :: [Bit 32] >>= [Unit]
Inferred b2320 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2306 :: [Bit 32] >>= [Unit]
Inferred b2318 :: [Bit 32] >>= [Unit]
Inferred b2432 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2405 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2403 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2408 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2381 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2379 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2375 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2364 :: [Bit 32] >>= [Unit]
Inferred b1409 :: [] >>= [Unit]
Inferred b1408 :: [Bit 32] >>= [Unit]
Inferred b2373 :: [Bit 32] >>= [Unit]
Inferred b2384 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2386 :: [Bit 32, Bit 32, Bit 32] >>= [Unit]
Inferred b2609 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2390 :: [Bit 32] >>= [Unit]
Inferred b2411 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2397 :: [Bit 32] >>= [Unit]
Inferred b2409 :: [Bit 32] >>= [Unit]
Inferred b1204 :: [] >>= [Unit]
Inferred b1203 :: [] >>= [Unit]
Inferred b1202 :: [] >>= [Unit]
Inferred b2556 :: [] >>= [Unit]
Inferred b2570 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2568 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2563 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2565 :: [Bit 32, Bit 32] >>= [Unit]
Inferred b2573 :: [Bit 32] >>= [Unit]
Inferred initialize :: [] >>= [Unit]
making new version of structure type Window
new version of StructType Window is Window
making new version of structure type Coord
new version of StructType Coord is Coord
Writing MIL output file to "kernel.mil" ...
Writing llvm output to "kernel.ll" ...
Success!
